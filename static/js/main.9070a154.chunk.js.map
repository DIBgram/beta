{"version":3,"sources":["remove-item-from-array.js","dibgram/TdWeb/tdlib.ts","dibgram/TdWeb/config.js","dibgram/TdWeb/tdweb.js","version.js","dibgram/TdWeb/auth.js","dibgram/ui/icon/chat_filters/chat-filters.js","dibgram/ui/elements/ripple-effect.js","dibgram/ui/elements/icon-button.js","dibgram/ui/icon/icons.js","dibgram/messenger/sections/navigation-menu/hamburger-menu/menu-button.js","dibgram/messenger/chat-store.js","dibgram/ui/scroll/scrollbar.js","dibgram/messenger/sections/navigation-menu/chat-folders.js","dibgram/ui/elements/loading-spinner.js","dibgram/ui/components/connecting.js","dibgram/TdWeb/file.js","dibgram/TdWeb/options.js","dibgram/ui/img/TgLogo.png","dibgram/ui/components/profile-photo.js","dibgram/messenger/users-store.js","dibgram/messenger/payments/currency-tostring.js","dibgram/messenger/user-misc.js","dibgram/messenger/message/message-summary-noicon.js","dibgram/ui/elements/link-button.js","dibgram/messenger/supergroup-store.js","dibgram/messenger/chat-misc.js","dibgram/time-tostring.js","dibgram/ui/menu/menu.js","dibgram/ui/menu/context-menu.js","dibgram/ui/dialog/toast.js","dibgram/ui/dialog/dialogs.js","dibgram/ui/elements/small-button.js","dibgram/ui/dialog/confirm-dialog.js","dibgram/messenger/sections/navigation-menu/chat-list.js","dibgram/messenger/message-misc.js","dibgram/messenger/sections/navigation-menu/search/search-box.js","dibgram/TdWeb/connectionStore.js","dibgram/ui/elements/nav-animation.js","dibgram/messenger/sections/navigation-menu/chat-list-bar.js","dibgram/ui/tool-strip/tool-strip.js","dibgram/ui/tool-strip/button.js","dibgram/ui/tool-strip/section.js","dibgram/messenger/sections/navigation-menu/hamburger-menu/menu.js","dibgram/messenger/messengerWindow.js","dibgram/ui/elements/highlighted-button.js","dibgram/ui/elements/underlined-input.js","dibgram/auth/auth-screen.js","dibgram/TdWeb/online-handler.js","dibgram/ui/themes/dibgram-theme-to-css.js","dibgram/ui/themes/theme.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["removeItemFromArray","item","i","this","length","splice","Array","prototype","remove","getUseTestDc","urlPar","URL","window","location","href","searchParams","get","TdLib","log","use_test_dc","log_updates","log_queries","op","useDatabase","instanceName","onUpdate","update","console","forEach","h","TdClient","sendQuery","type","handler","undefined","push","call","query","Promise","resolve","reject","send","then","result","error","registerUpdateHandler","credentials","api_id","api_hash","auth_state","version","Auth","number","code","pass","first","last","chatFilerIcons","All","Bots","Channels","Custom","Groups","Private","Setup","Unread","Cat","Crown","Favorite","Flower","Game","Home","Love","Mask","Party","Sport","Study","Trade","Travel","Work","RippleEffect","props","small","X","Y","width","rX","rY","height","Math","hypot","abs","max","state","className","style","getMaxRadius","backgroundColor","color","React","Component","handleMyMouseEvents","This","e","ripple","setState","setTimeout","nativeEvent","offsetX","offsetY","target","clientWidth","clientHeight","bind","mouseUp","handleMyMouseEventsFunction","setRipple","up","IconButton","icon","rest","useState","onMouseDown","onMouseUp","onMouseLeave","dangerouslySetInnerHTML","__html","archive_userpic","HamburgerMenuButton","WithFolders","mouseDown","mouseLeave","id","onClick","PureComponent","WithoutFolders","chatStore","createStore","currentChatList","archiveState","archiveButtonState","localStorage","getItem","chats","filters","unread","main","archive","action","chatList","chat_list","unread_messages_count","unread_count","unread_unmuted_messages_count","unread_unmuted_count","chat_filter_id","total_chats_count","total_count","unread_chats_count","unread_unmuted_chats_count","marked_as_unread_chats_count","marked_as_unread_count","marked_as_unread_unmuted_chats_count","marked_as_unread_unmuted_count","chat","map","chat_id","changed","newChat","positions","position","compareChatList","list","payload","property","value","__REDUX_DEVTOOLS_EXTENSION__","dispatch","action_bar","default_disable_notification","draft_message","chat_filters","has_scheduled_messages","is_blocked","is_marked_as_unread","last_message","notification_settings","online_member_count","permissions","photo","last_read_inbox_message_id","last_read_outbox_message_id","reply_markup_message_id","title","unread_mention_count","list1","list2","ScrollView","mouseEntered","setMouseEntered","timeoutId","setTimeoutId","scrollBarWidth","propsRest","data-mouse-entered","renderTrackHorizontal","renderTrackVertical","renderThumbHorizontal","renderThumbVertical","onMouseEnter","clearTimeout","autoHide","autoHideTimeout","hideTracksWhenNotNeeded","ref","scrollRef","ChatFolder","folder","active","icon_name","iconName","setIconName","useEffect","text","data-muted","connect","folders","currentFolder","onHamburgerMenuOpened","LoadingSpinner","percentage","percent","caps","trackColor","spin","transitionDuration","intervalNum","setInterval","clearInterval","size","PropTypes","isRequired","lineWidth","progressColor","string","includes","downloadCallbacks","getFileContent","file","priority","local","is_downloading_completed","is_downloading_active","callback","catch","file_id","onReject","downloadFile","options","name","profileNameToInitials","words","replace","toUpperCase","split","ProfilePhoto","customIcon","setPhoto","photoObj","setPhotoObj","isServiceMessages","isSavedMessages","isReplies","mounted","blob","data","webkitURL","createObjectURL","disableSavedMessages","tgLogo","Initials","Fragment","src","getChatTypeId","supergroup_id","basic_group_id","user_id","usersStore","user","userId","status","currencyAmountToString","currency","total_amount","currencyObject","currencies","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","exp","getUserFullName","last_name","first_name","MessageSummaryWithoutIcon","users","message","content","MayHaveCaption","caption","audio","file_name","performer","SenderFullName","is_outgoing","discard_reason","members","member_user_ids","slice","join","sender","is_channel_post","deletedMember","includeYou","86400","604800","2678400","ttl","emoji","document","game","noGameTitleFallback","score","GameScoreWithTitle","lazy","message_id","game_message_id","default","Suspense","fallback","passportDataTypeToString","passportDataTypes","types","noInvoiceTitleFallback","PaymentInfoWithInvoiceTitle","invoice_message_id","is_secret","poll","question","sticker","venue","domain_name","MessageSummarySender","part1","getState","getChatNoCache","LinkButton","children","click","open","supergroupStore","supergroup","isChatWithDeletedAccount","chatTitleOrDeletedAccount","smallDateTimeToString","date","TdLibDateToDate","now","Date","yesterday","getTime","lastWeek","hours","getHours","minutes","getMinutes","ampm","timeToString","getDay","weekdayToString","day","getDate","month","getMonth","year","String","getFullYear","dateToString","tdLibDate","Menu","ContextMenu","x","y","MenuContents","MenuItem","propTypes","node","contextMenusStore","menu","ContextMenus","menus","createContextMenu","preventDefault","pageX","pageY","onAnywhereClicked","Toast","closed","setClosed","addToast","toastStore","toast","Toasts","dialogStore","dialog","filter","addDialog","element","removeDialog","Dialogs","dialogs","data-dialog","el","SmallButton","attention","data-attention","ConfirmDialog","closing","handleOK","closeDialog","onOK","handleCancel","onCancel","handleButton","data-id","thirdButton","thirdButtonClosesDialog","onThirdButtonClick","hideCancelButton","OKButtonText","getChatsFromList","order","sort","a","b","order1","order2","ChatList","connectionState","scrollToTopVisible","createRef","onScroll","visible","scrollTop","nextProps","nextState","array","Chat","store","EmptyChatList","current","ChatListItem","getUser","is_pinned","chatType","is_channel","isVerified","is_verified","isChatVerified","messageStatus","sending_state","getMessageStatus","unreadBadge","unreadBadgeClass","mute_for","isOnline","onContextMenu","ChatContextMenu","data-online","input_message_text","movableChatLists","setMovableChatLists","chat_lists","ArchivedChatsItem","chatsInList","onArchiveOpen","setButtonState","moveToMainMenuToast","setItem","loadingFallBack","SearchBox","placeholder","onChange","data-visible","connectionStore","connection","NavAnimation","innerScreen","innerClass","mode","ChatListBar","useFolders","searchText","setSearchText","ToolStrip","Button","Section","HamburgerMenu","onClose","me","setMe","phone_number","phone_number_prefix","info","country_calling_code","formatted_phone_number","useRef","focus","showArchivedChats","onKeyDown","key","tabIndex","profile_photo","newState","MessengerWindow","isMenuOpen","setIsMenuOpen","defaultSize","minWidth","handleClasses","right","enable","top","bottom","left","topRight","bottomRight","bottomLeft","topLeft","BigHighlightedButton","UnderlinedInput","args","handleFocus","inactive","titleClass","getTitleClass","handleBlur","mouseX","handleMouseDown","handleKeyDown","onEnterKeyPressed","preventNumberScrolling","autoFocus","invalid","onFocus","onBlur","maxLength","onCopy","disableCopy","initialAuthState","setInitialAuthState","manageStatusTextContent","thisClass","Status","statusVisible","statusContent","changeStatus","MainApp","step","handleAuthStateUpdate","code_info","reload","AuthWindowStepPhoneNumber","handlePNFieldChange","event","submitNumber","givePhoneNumber","reason","AuthWindowStepCode","handleCodeFieldChange","handleContinueButton","checkAuthCode","AuthWindowStepPassword","password","handlePasswordFieldChange","check2FACode","body","password_hint","AuthWindowStepRegister","firstName","lastName","handleFirstNameFieldChange","handleLastNameFieldChange","registerNewAccount","textUnderField","onfocus","onblur","convertThemeToCSS","theme","css","obj","equals","themes","classic","tinted","night","ThemeProvider","data-theme-is-dark","isThemeDark","isDark","initializeTdLib","res","hasFocus","App","simulateFatalError","rel","toString","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onSuccess","ReactDOM","render","StrictMode","getElementById","process","origin","addEventListener","fetch","headers","response","contentType","indexOf","ready","unregister","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.9070a154.chunk.js","sourcesContent":["// https://love2dev.com/blog/javascript-remove-from-array/#remove-from-array-splice\n/**\n * Removes an item from an array\n * @param {*} item The item to remove\n */\nexport default function removeItemFromArray(item) {\n    for( var i = 0; i < this.length; i++){ \n        if ( this[i] === item) { \n            this.splice(i, 1); \n        }\n    }\n}\n\nArray.prototype.remove= removeItemFromArray;","/* eslint-disable */\nimport { createTdClient } from './tdweb';\nimport {getConfig} from './config';\nimport TdApi from './td_api';\nimport removeItemFromArray from '../../remove-item-from-array';\nexport function getUseTestDc() {\n    var urlPar=new URL(window.location.href).searchParams.get('test');\n    if(urlPar){\n        return urlPar==='1' || urlPar==='true';\n    }\n    return false;\n}\n\nexport function getCurrentSessionId() {\n    return new URL(window.location.href).searchParams.get('account') || '1';\n}\n\n/**\n * Provides options to communicate with the Tdweb library\n */\nexport default class TdLib {\n    static #tdClient: any;\n    /** @type {[string: Array<Function>]} */\n    static #updateHandlers: {[key: string]: ((update: any) => void)[]}={};\n\n    /**\n     * Creates the instance of Tdweb\n     */\n    static async initializeTdLib() {\n        const {log}= getConfig();\n        TdLib.#tdClient= createTdClient({\n            useDatabase: true,\n            instanceName: ( getCurrentSessionId() ) + (getUseTestDc() ? 'test' : 'production'), // e.g. ?account=1&test=1 = '1test' or ?account=1&test=0 = '1production'\n            onUpdate: function (update: TdApi.td_Update) {\n                if(log.log_updates) {\n                    console.log('Update: ',update);\n                }\n                if(TdLib.#updateHandlers[update['@type']]){\n                    TdLib.#updateHandlers[update['@type']].forEach(h => h(update));\n                }\n            }\n        });\n        return await TdLib.sendQuery({'@type': 'getAuthorizationState'}); // It both starts TDLib and returns the authorization state\n    }\n\n    /**\n     * Listen for updates from TdLib\n     * @param type The type of the update to listen to. Look for TdLib API docs for types\n     * @param handler The function that gets called with the update object when the update is received\n     */\n    static registerUpdateHandler<T extends TdApi.td_Update>(type: TdApi.TdUpdateType<T>, handler: (update: T) => void): void {\n        if(TdLib.#updateHandlers[type]===undefined){\n            TdLib.#updateHandlers[type]= [];\n        }\n        TdLib.#updateHandlers[type].push(handler);\n    }\n\n    /**\n     * Remove an existing update handler\n     * @param {string} type The type of the update to remove handler from. Look for TdLib API docs for types\n     * @param {Function} handler The handler to remove\n     */\n    static unRegisterUpdateHandler<T extends TdApi.td_Update>(type: TdApi.TdUpdateType<T>, handler: (update: T) => void): void {\n        if(TdLib.#updateHandlers[type]===undefined){\n            return;\n        }\n        removeItemFromArray.call(TdLib.#updateHandlers[type], handler);\n    }\n\n    /**\n     * Send a request to the TdLib instance\n     * If the query contains an `@extra` field, the same field will be added to the result\n     * @param query The request to send. Consult TdLib & JSON interface API for help.\n     * @returns The result of the request\n     */\n    static sendQuery<T extends TdApi.TdFunction>(query: T): Promise<TdApi.TdFunctionReturn<T> | TdApi.td_Error> {\n        const {log}= getConfig();\n        if(log.log_queries) {\n            console.log('Query: ',query);\n        }\n        return new Promise((resolve, reject) => {\n            TdLib.#tdClient.send(query).then((result: TdApi.TdFunctionReturn<T>)=> {\n                if(log.log_queries) {\n                    console.log('Query result: ', result);\n                }\n                resolve(result);\n            }, (error: TdApi.td_Error)=> {\n                if(log.log_queries) {\n                    console.error('Query failed: ', error);\n                }\n                reject(error);\n            }\n            );\n        });\n    }\n}","export function getCredentials() {return {api_id: 3022678,api_hash: 'd7b7676a82906a6182f4a5e5e9555673'};}export function getConfig() {return {use_test_dc: false,log: {log_updates: true,log_queries: true}};}\n","import TdClient from 'tdweb';\n\nexport function createTdClient(op) {\n    return new TdClient(op);\n}","export default '0.0.2-beta1';","import TdLib from './tdlib';\nimport {getCredentials} from './config';\nimport {getUseTestDc} from './tdlib';\nimport version from '../../version';\n\nTdLib.registerUpdateHandler('updateAuthorizationState',function (update) {\n    const credentials= getCredentials();\n    const auth_state= update['authorization_state'];\n    \n    if(auth_state['@type']==='authorizationStateWaitEncryptionKey'){\n        TdLib.sendQuery({'@type': 'checkDatabaseEncryptionKey', 'encryption_key': ''});\n    }\n    if(auth_state['@type']==='authorizationStateWaitTdlibParameters'){\n        TdLib.sendQuery({\n            '@type': 'setTdlibParameters',\n            'parameters': {\n                'database_directory': 'tdlib',\n                'use_message_database': true,\n                'use_secret_chats': false,\n                'api_id': credentials.api_id,\n                'api_hash': credentials.api_hash,\n                'system_language_code': 'en',\n                'device_model': 'Web',\n                'application_version': version,\n                'enable_storage_optimizer': true,\n                'use_test_dc': getUseTestDc(),\n            }\n        });\n    }\n});\n\n/**\n * Provides functions to pass required authorization data to Telegram\n */\nexport default class Auth {\n    /**\n     * Pass phone number of the account to be logged in to\n     * @param {string} number The phone number the user entered\n     * @returns TdLib query result\n     */\n    static async givePhoneNumber(number) {\n        return await TdLib.sendQuery({'@type': 'setAuthenticationPhoneNumber', 'phone_number': number});\n    }\n    /**\n     * Pass authorization code the user has received\n     * @param {string} code The code the user entered\n     * @returns TdLib query result\n     */\n    static async checkAuthCode(code) {\n        return await TdLib.sendQuery({'@type': 'checkAuthenticationCode', 'code': code});\n    }\n    /**\n     * Pass 2FA password of the account\n     * @param {string} pass The password the user entered\n     * @returns TdLib query result\n     */\n    static async check2FACode(pass) {\n        return await TdLib.sendQuery({'@type': 'checkAuthenticationPassword', 'password': pass});\n    }\n    /**\n     * Sign up to Telegram\n     * @param {string} first The first name to be used in the new account\n     * @param {string} last Tha last name to be used in the new account\n     * @returns TdLib query result\n     */\n    static async registerNewAccount(first, last) {\n        return await TdLib.sendQuery({'@type': 'registerUser', 'first_name': first, 'last_name': last});\n    }\n}","// All icons are from Telegram Desktop, converted to SVG using https://pngtosvg.com/\n\nimport raw from 'raw.macro';\n\nvar chatFilerIcons = {\n    All     : [raw('./all.svg'     ), raw('./all_active.svg'     )],\n    Bots    : [raw('./bots.svg'    ), raw('./bots_active.svg'    )],\n    Channels: [raw('./channels.svg'), raw('./channels_active.svg')],\n    Custom  : [raw('./custom.svg'  ), raw('./custom_active.svg'  )],\n    Groups  : [raw('./groups.svg'  ), raw('./groups_active.svg'  )],\n    Private : [raw('./private.svg' ), raw('./private_active.svg' )],\n    Setup   : [raw('./setup.svg'   )                              ],\n    Unread  : [raw('./unread.svg'  ), raw('./unread_active.svg'  )],\n\n    Cat     : [raw('./cat.svg'     ), raw('./cat_active.svg'     )],\n    Crown   : [raw('./crown.svg'   ), raw('./crown_active.svg'   )],\n    Favorite: [raw('./favorite.svg'), raw('./favorite_active.svg')],\n    Flower  : [raw('./flower.svg'  ), raw('./flower_active.svg'  )],\n    Game    : [raw('./game.svg'    ), raw('./game_active.svg'    )],\n    Home    : [raw('./home.svg'    ), raw('./home_active.svg'    )],\n    Love    : [raw('./love.svg'    ), raw('./love_active.svg'    )],\n    Mask    : [raw('./mask.svg'    ), raw('./mask_active.svg'    )],\n    Party   : [raw('./party.svg'   ), raw('./party_active.svg'   )],\n    Sport   : [raw('./sport.svg'   ), raw('./sport_active.svg'   )],\n    Study   : [raw('./study.svg'   ), raw('./study_active.svg'   )],\n    Trade   : [raw('./trade.svg'   ),                             ],\n    Travel  : [raw('./travel.svg'  ), raw('./travel_active.svg'  )],\n    Work    : [raw('./work.svg'    ), raw('./work_active.svg'    )],\n};\nexport default chatFilerIcons;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Adds a ripple effect to a button.\n * \n * Insert at the beginning of the button.\n * \n * **Note:** The button needs `position: relative;` and `overflow: hidden;`\n */\nexport default class RippleEffect extends React.Component {\n    static propTypes= {\n        /** \n         * - Change to `pressed` on `mouseDown`\n         * - Change to `released` on `mouseUp`\n         * - Change to `off` 1000ms after `mouseUp`\n         */\n        state: PropTypes.oneOf(['off', 'pressed', 'released']).isRequired,\n        X: PropTypes.number,\n        Y: PropTypes.number,\n        width: PropTypes.number,\n        height: PropTypes.number,\n        /** The color to show in the ripple (same as `:active` if you used CSS) */\n        color: PropTypes.string.isRequired,\n        /** Pass true if the button is small to make animation faster */\n        small: PropTypes.bool\n    }\n\n    /** Gets the smallest radius that a circle, centered at click location, needs to fill the button */\n    getMaxRadius() {\n        if(!this.props.small){\n        //  It's a bit hard to understand. Let me explain:\n        //  \n        //  1. It calculates the coordinates relative to the 4 edges of the button ────╮\n        //  2. The diagonal distance to the edges are calculated using the             │\n        //      pythagoras rule, from the results of step 1            │               │\n        //  3. The biggest distance is selected and then returned.     │               │\n        //          │                                                  │               │\n        //  ╭───────┴──────╮  ╭────────────────────────────────────────╯               │        \n        //  │           ╭──┼──┴───╮                                                    │                  \n            return Math.max(//    │╭───────────────────────────────────────────────────┴──────────────╮\n                /* ┏ */ Math.hypot(this.props.X                     , this.props.Y),//                │ \n                /* ┓ */ Math.hypot(this.props.width - this.props.X  , this.props.Y),//                │\n                /* ┗ */ Math.hypot(this.props.X                     , this.props.height - this.props.Y), \n                /* ┛ */ Math.hypot(this.props.width - this.props.X  , this.props.height - this.props.Y), \n            );\n        } else {\n            const {X, Y, width, height} = this.props;\n            const [rX, rY] = [X - width / 2, Y - height / 2]; // Click position relative to center of circle.\n            const distanceToCenter= Math.hypot(Math.abs(rX), Math.abs(rY)); // Get distance from click position to the center of circle.\n            return distanceToCenter + (width / 2); // Add circle radius to result\n        }\n    }\n    render() {\n        if(this.props.state=='off') return null;\n        return (\n            <div\n                className={'ripple '+this.props.state+ (this.props.small? ' small':'')}\n                style={{\n                    '--top': (this.props.Y || 0)+'px',\n                    '--left': (this.props.X || 0)+'px',\n                    '--radius': this.getMaxRadius()+'px',\n                    backgroundColor: this.props.color\n                }}/>\n        );\n    }\n}\n\n// Assign your `mouseDown`, `mouseUp` and `mouseLeave` to the returned functions.\nexport function handleMyMouseEvents(This) {\n    return [\n        // mouseDown\n        (function(e) {\n            // Reset the ripple effect if it's not off\n            if(this.state.ripple.state!='off'){\n                this.setState({\n                    ripple: { state: 'off' }\n                });\n                setTimeout(() => {\n                    this.setState({\n                        ripple: {\n                            state: 'pressed',\n                            X: e.nativeEvent.offsetX,\n                            Y: e.nativeEvent.offsetY,\n                            width: e.target.clientWidth,\n                            height: e.target.clientHeight\n                        }\n                    });\n                }, 10);\n                return;\n            }\n            this.setState({\n                ripple: {\n                    state: 'pressed',\n                    X: e.nativeEvent.offsetX,\n                    Y: e.nativeEvent.offsetY,\n                    width: e.target.clientWidth,\n                    height: e.target.clientHeight\n                }\n            });\n        }).bind(This),\n        // mouseUp\n        (function(e) {\n            this.setState({\n                ripple: { \n                    state: 'released',\n                    X: e.nativeEvent.offsetX,\n                    Y: e.nativeEvent.offsetY,\n                    width: e.target.clientWidth,\n                    height: e.target.clientHeight \n                }\n            });\n        }).bind(This),\n        // mouseLeave\n        (function(e) {\n            if(this.state.ripple.state=='pressed') {\n                this.mouseUp(e);\n            }\n        }).bind(This)\n    ];\n}\n// Assign your `mouseDown`, `mouseUp` and `mouseLeave` to the returned functions.\nexport function handleMyMouseEventsFunction([ripple, setRipple]) {\n    function down(e) {\n        // Reset the ripple effect if it's not off\n        if(ripple.state!='off'){\n            setRipple({ state: 'off' });\n            setTimeout(() => {\n                setRipple ({\n                    state: 'pressed',\n                    X: e.nativeEvent.offsetX,\n                    Y: e.nativeEvent.offsetY,\n                    width: e.target.clientWidth,\n                    height: e.target.clientHeight\n                });\n            }, 10);\n            return;\n        }\n        setRipple ({\n            state: 'pressed',\n            X: e.nativeEvent.offsetX,\n            Y: e.nativeEvent.offsetY,\n            width: e.target.clientWidth,\n            height: e.target.clientHeight\n        });\n    }\n\n    function up(e) {\n        setRipple ({\n            state: 'released',\n            X: e.nativeEvent.offsetX,\n            Y: e.nativeEvent.offsetY,\n            width: e.target.clientWidth,\n            height: e.target.clientHeight \n        });\n    }\n\n    function leave(e) {\n        if(ripple.state=='pressed') {\n            up(e);\n        }\n    }\n    \n    return [down, up, leave];\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport RippleEffect, {handleMyMouseEventsFunction} from '../../ui/elements/ripple-effect';\nimport './icon-button.scss';\n\n/**\n * Renders a round button with an icon in it, and a special ripple effect.\n */\nexport default function IconButton({icon, ...rest}) {\n    const ripple= React.useState({state: 'off'});\n    const [onMouseDown, onMouseUp, onMouseLeave]= handleMyMouseEventsFunction(ripple);\n    return (\n        <button className=\"icon-button\" {...rest} {...{onMouseDown, onMouseUp, onMouseLeave}}>\n            <span dangerouslySetInnerHTML={{__html: icon}} />\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-windowBgOver)\" small={true}/>\n        </button>\n    );\n}\nIconButton.propTypes = {\n    icon: PropTypes.string.isRequired\n};\n","// All icons are from Telegram Desktop, converted to SVG using https://pngtosvg.com/\n\nimport raw from 'raw.macro';\n\nexport const archive_userpic = raw('./archive_userpic.svg');\nexport const dialogs_bot = raw('./dialogs_bot.svg');\nexport const dialogs_channel = raw('./dialogs_channel.svg');\nexport const dialogs_chat = raw('./dialogs_chat.svg');\nexport const dialogs_pinned = raw('./dialogs_pinned.svg');\nexport const dialogs_verified_star = raw('./dialogs_verified_star.svg');\nexport const dialogs_verified_check = raw('./dialogs_verified_check.svg');\n//export const dialogs_search_cancel = raw('./dialogs_search_cancel.svg');\nexport const dialogs_sending = raw('./dialogs_sending.svg');\nexport const dialogs_sent = raw('./dialogs_sent.svg');\nexport const dialogs_received = raw('./dialogs_received.svg');\nexport const dialogs_menu = raw('./dialogs_menu.svg');\nexport const info_close = raw('./info_close.svg');\nexport const replies_userpic = raw('./replies_userpic.svg');\nexport const saved_messages = raw('./saved_messages.svg');\nexport const filters_edit = raw('./chat_filters/edit.svg');\nexport const info_back = raw('./info_back.svg');\nexport const menu_settings = raw('./menu_settings.svg');\nexport const history_to_down = raw('./history_to_down.svg');\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from '../../../../ui/elements/icon-button';\nimport RippleEffect, {handleMyMouseEvents} from '../../../../ui/elements/ripple-effect';\nimport { dialogs_menu } from '../../../../ui/icon/icons';\nimport './menu-button.scss';\n\nvar HamburgerMenuButton= {}; // Store component classes here\n\n/**\n * Renders the button which opens the hamburger menu (when there are folders)\n */\nHamburgerMenuButton.WithFolders= class WithFolders extends React.PureComponent {\n    static propTypes= {\n        onClick: PropTypes.func,\n    };\n    state= {\n        ripple: {\n            state: 'off'\n        }\n    }\n    constructor() {\n        super();\n        [this.mouseDown, this.mouseUp, this.mouseLeave]= handleMyMouseEvents(this); // Ripple effect events\n    }\n    render() {\n        return (\n            <button id=\"hamburger-menu-button\" className=\"uses-folders\"\n                onMouseDown={this.mouseDown}\n                onMouseUp={this.mouseUp}\n                onMouseLeave={this.mouseLeave}\n                onClick={this.props.onClick}>\n                <div id=\"bars\"><span></span><span></span><span></span></div>\n                <RippleEffect {...this.state.ripple} color=\"var(--theme-color-sideBarBgRipple)\"/>\n            </button>\n        );\n    }\n};\n\n/**\n * Renders the button which opens the hamburger menu (when there are no folders)\n */\nHamburgerMenuButton.WithoutFolders= function WithoutFolders (props) {\n    return (\n        <IconButton \n            icon={dialogs_menu}\n            id=\"hamburger-menu-button\"\n            className=\"icon-button no-folders\"\n            {...props}/>\n    );\n};\n\nexport default HamburgerMenuButton;","import { createStore } from 'redux';\nimport TdLib from '../TdWeb/tdlib';\n\n/**\n * It is recommended to use the outline view or find tool to navigate this file.\n */\n\nconst chatStore= createStore(reducer, \n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n    \nfunction reducer(state= {\n    currentChatList: {'@type': 'chatListMain'},\n    archiveState: 'closed',\n    archiveButtonState: localStorage.getItem('dibgram-archived-chats-button-mode'),\n    chats: [],\n    filters: [],\n    unread: {\n        main: {},\n        archive: {},\n        filters: {}\n    }\n}, action) {\n    switch (action.type) {\n    case 'SET_CURRENT_CHAT_LIST':\n        return {\n            ...state,\n            currentChatList: action.chatList\n        };\n    case 'SET_ARCHIVE_STATE':\n        return {\n            ...state,\n            archiveState: action.archiveState\n        };\n    case 'UPDATE_UNREAD_MESSAGE_COUNT':\n        if(action.chat_list['@type'] === 'chatListMain') {\n            return {\n                ...state,\n                unread: {\n                    ...state.unread,\n                    main: {\n                        ...state.unread.main,\n                        unread_messages_count: action.unread_count,\n                        unread_unmuted_messages_count: action.unread_unmuted_count\n                    }\n                }\n            };\n        } else if(action.chat_list['@type'] === 'chatListArchive') {\n            return {\n                ...state,\n                unread: {\n                    ...state.unread,\n                    archive: {\n                        ...state.unread.archive,\n                        unread_messages_count: action.unread_count,\n                        unread_unmuted_messages_count: action.unread_unmuted_count\n                    }\n                }\n            };\n        } else if(action.chat_list['@type'] === 'chatListFilter') {\n            return {\n                ...state,\n                unread: {\n                    ...state.unread,\n                    filters: {\n                        ...state.unread.filters,\n                        [action.chat_list.chat_filter_id]: {\n                            ...state.unread.filters[action.chat_list.chat_filter_id],\n                            unread_messages_count: action.unread_count,\n                            unread_unmuted_messages_count: action.unread_unmuted_count\n                        }\n                    }\n                }\n            };\n        }\n        return state;\n    case 'UPDATE_UNREAD_CHAT_COUNT':\n        if(action.chat_list['@type'] === 'chatListMain') {\n            return {\n                ...state,\n                unread: {\n                    ...state.unread,\n                    main: {\n                        ...state.unread.main,\n                        total_chats_count: action.total_count,\n                        unread_chats_count: action.unread_count,\n                        unread_unmuted_chats_count: action.unread_unmuted_count,\n                        marked_as_unread_chats_count: action.marked_as_unread_count,\n                        marked_as_unread_unmuted_chats_count: action.marked_as_unread_unmuted_count\n                    }\n                }\n            };\n        } else if(action.chat_list['@type'] === 'chatListArchive') {\n            return {\n                ...state,\n                unread: {\n                    ...state.unread,\n                    archive: {\n                        ...state.unread.archive,\n                        total_chats_count: action.total_count,\n                        unread_chats_count: action.unread_count,\n                        unread_unmuted_chats_count: action.unread_unmuted_count,\n                        marked_as_unread_chats_count: action.marked_as_unread_count,\n                        marked_as_unread_unmuted_chats_count: action.marked_as_unread_unmuted_count\n                    }\n                }\n            };\n        } else if(action.chat_list['@type'] === 'chatListFilter') {\n            return {\n                ...state,\n                unread: {\n                    ...state.unread,\n                    filters: {\n                        ...state.unread.filters,\n                        [action.chat_list.chat_filter_id]: {\n                            ...state.unread.filters[action.chat_list.chat_filter_id],\n                            total_chats_count: action.total_count,\n                            unread_chats_count: action.unread_count,\n                            unread_unmuted_chats_count: action.unread_unmuted_count,\n                            marked_as_unread_chats_count: action.marked_as_unread_count,\n                            marked_as_unread_unmuted_chats_count: action.marked_as_unread_unmuted_count\n                        }\n                    }\n                }\n            };\n        }\n        return state;\n\n    case 'SET_ARCHIVE_BUTTON_STATE':\n        return {\n            ...state,\n            archiveButtonState: action.archiveButtonState\n        };\n    case 'ADD_CHAT':\n        return {\n            ...state,\n            chats: [\n                ...state.chats,\n                action.chat\n            ]\n        };\n    case 'UPDATE_CHAT_POSITION': // Replace the position property of a chat\n        return {\n            ...state,\n            chats: state.chats.map((chat) => {\n                if (chat.id === action.chat_id) {\n                    let changed=false;\n                    let newChat = {\n                        ...chat,\n                        positions: chat.positions.map((position) => {\n                            if (compareChatList(position.list, action.position.list)) {\n                                changed=true;\n                                return action.position;\n                            }\n                            return position;\n                        })\n                    };\n                    if(!changed) {\n                        return {\n                            ...chat,\n                            positions: [\n                                ...chat.positions,\n                                action.position\n                            ]\n                        };\n                    }\n                    return newChat;\n                }\n                return chat;\n            })\n        };\n    case 'REPLACE_CHAT_FILTERS':\n        return {\n            ...state,\n            filters: action.payload\n        };\n    case 'UPDATE_CHAT_PROPERTY':\n        return {\n            ...state,\n            chats: state.chats.map((chat) => {\n                if (chat.id === action.chat_id) {\n                    return {\n                        ...chat,\n                        [action.property]: action.value\n                    };\n                }\n                return chat;\n            })\n        };\n    default:\n        return state;\n    }\n}\n\nTdLib.registerUpdateHandler('updateUnreadChatCount', (update) => {\n    chatStore.dispatch({\n        type: 'UPDATE_UNREAD_CHAT_COUNT',\n        ...update\n    });\n});\n\nTdLib.registerUpdateHandler('updateUnreadMessageCount', (update) => {\n    chatStore.dispatch({\n        type: 'UPDATE_UNREAD_MESSAGE_COUNT',\n        ...update\n    });\n});\n\nTdLib.registerUpdateHandler('updateNewChat', update => {\n    chatStore.dispatch({\n        type: 'ADD_CHAT',\n        chat: update.chat\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatActionBar', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'action_bar',\n        chat_id: update.chat_id,\n        value: update.action_bar\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatDefaultDisableNotification', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'default_disable_notification',\n        chat_id: update.chat_id,\n        value: update.default_disable_notification\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatDraftMessage', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'draft_message',\n        chat_id: update.chat_id,\n        value: update.draft_message\n    });\n    for (let position of update.positions) {\n        chatStore.dispatch({\n            type: 'UPDATE_CHAT_POSITION',\n            chat_id: update.chat_id,\n            position: position\n        });\n    }\n});\n\nTdLib.registerUpdateHandler('updateChatFilters', update=> {\n    if(update.chat_filters) {\n        chatStore.dispatch({\n            type: 'REPLACE_CHAT_FILTERS',\n            payload: update.chat_filters\n        });\n    }\n});\n\nTdLib.registerUpdateHandler('updateChatHasScheduledMessages', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'has_scheduled_messages',\n        chat_id: update.chat_id,\n        value: update.has_scheduled_messages\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatIsBlocked', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'is_blocked',\n        chat_id: update.chat_id,\n        value: update.is_blocked\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatIsMarkedAsUnread', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'is_marked_as_unread',\n        chat_id: update.chat_id,\n        value: update.is_marked_as_unread\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatLastMessage', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'last_message',\n        chat_id: update.chat_id,\n        value: update.last_message\n    });\n    for (let position of update.positions) {\n        chatStore.dispatch({\n            type: 'UPDATE_CHAT_POSITION',\n            chat_id: update.chat_id,\n            position: position\n        });\n    }\n});\n\nTdLib.registerUpdateHandler('updateChatNotificationSettings', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'notification_settings',\n        chat_id: update.chat_id,\n        value: update.notification_settings\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatOnlineMemberCount', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'online_member_count',\n        chat_id: update.chat_id,\n        value: update.online_member_count\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatPermissions', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'permissions',\n        chat_id: update.chat_id,\n        value: update.permissions\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatPhoto', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'photo',\n        chat_id: update.chat_id,\n        value: update.photo\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatPosition', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_POSITION',\n        chat_id: update.chat_id,\n        position: update.position\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatReadInbox', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'unread_count',\n        chat_id: update.chat_id,\n        value: update.unread_count\n    });\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'last_read_inbox_message_id',\n        chat_id: update.chat_id,\n        value: update.last_read_inbox_message_id\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatReadOutbox', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'last_read_outbox_message_id',\n        chat_id: update.chat_id,\n        value: update.last_read_outbox_message_id\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatReplyMarkup', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'reply_markup_message_id',\n        chat_id: update.chat_id,\n        value: update.reply_markup_message_id\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatTitle', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'title',\n        chat_id: update.chat_id,\n        value: update.title\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatUnreadMentionCount', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'unread_mention_count',\n        chat_id: update.chat_id,\n        value: update.unread_mention_count\n    });\n});\n\nTdLib.registerUpdateHandler('updateMessageMentionRead', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'unread_mention_count',\n        chat_id: update.chat_id,\n        value: update.unread_mention_count\n    });\n});\n\nexport default chatStore;\n\n/**\n * Check if two chat lists are equal\n * @param {import('tdweb').TdObject} list1 \n * @param {import('tdweb').TdObject} list2 \n * @returns True if the provided objects refer to the same list. Otherwise false\n */\nexport function compareChatList(list1, list2) {\n    if (list1['@type'] != list2['@type']) { // First compare type\n        return false;\n    }\n    if (list1['@type'] == 'chatListFilter') { // Then Compare folder ID\n        return list1.chat_filter_id == list2.chat_filter_id;\n    }\n    return true;\n}\n\n/**\n * Gets a chat from a chat ID. Supports caching.\n */\nexport function getChat(id) {\n    let res;\n    for(let chat of chatStore.getState()?.chats) {\n        if(chat.id==id) res = Promise.resolve(chat);\n    }\n    if(!res){\n        res = TdLib.sendQuery({\n            '@type': 'getChat',\n            'chat_id': id\n        });\n    }\n    return res;\n}\n\n/**\n * Gets a chat from a chat ID. Does not support caching to prevent promises complexity.\n */\nexport function getChatNoCache(id) {\n    for(let chat of chatStore.getState()?.chats) {\n        if(chat.id==id) return chat;\n    }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport './scrollbar.scss';\n\n/**\n * A scrollable container. Sizing might need to be tweaked by CSS.\n */\nexport default function ScrollView(props) {\n    const [mouseEntered, setMouseEntered] = React.useState(false);\n    const [timeoutId, setTimeoutId] = React.useState(null);\n    const {scrollBarWidth, ...propsRest} = props;\n    return (\n        <Scrollbars\n            className=\"scrollbar\"\n            style= {{ '--bar-width': (scrollBarWidth || 4)+'px' }}\n            data-mouse-entered={mouseEntered}\n            renderTrackHorizontal={props => <div {...props} className=\"track-horizontal\" />}\n            renderTrackVertical={props => <div {...props} className=\"track-vertical\" />}\n            renderThumbHorizontal={props => <div {...props} className=\"thumb-horizontal\" />}\n            renderThumbVertical={props => <div {...props} className=\"thumb-vertical\" />}\n            onMouseEnter={() => {\n                setMouseEntered(true);\n                setTimeoutId(setTimeout(() => {\n                    setMouseEntered(false);\n                }, 1000));\n            }}\n            onMouseLeave={() => {\n                setMouseEntered(false);\n                clearTimeout(timeoutId);\n            }}\n            autoHide\n            autoHideTimeout={1000}\n            hideTracksWhenNotNeeded={true}\n            ref={props.scrollRef}\n            {...propsRest}\n        />\n    );\n}\nScrollView.propTypes = {\n    /** Scroll-bar thickness, in pixels (default: 4) */\n    scrollBarWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    /** A React ref that is passed down to the scrollbars component */\n    scrollRef: PropTypes.object\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport filters from '../../../ui/icon/chat_filters/chat-filters';\nimport RippleEffect, {handleMyMouseEventsFunction} from '../../../ui/elements/ripple-effect';\nimport HamburgerMenuButton from './hamburger-menu/menu-button';\nimport { compareChatList } from '../../chat-store';\nimport TdLib from '../../../TdWeb/tdlib';\nimport ScrollView from '../../../ui/scroll/scrollbar';\nimport './chat-folders.scss';\n\n/**\n * Renders a chat folder button\n */\nexport function ChatFolder({folder, active, onClick, unread}) {\n    // Ripple effect\n    const ripple= React.useState({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave]= handleMyMouseEventsFunction(ripple);\n\n    const [iconName, setIconName]= React.useState(folder.icon_name);\n\n    React.useEffect(()=> { // Get folder chats, TDLib won't show them if this request isn't sent\n        TdLib.sendQuery({\n            '@type': 'getChats',\n            'chat_list': {\n                '@type': 'chatListFilter',\n                'chat_filter_id': folder.id,\n            },\n            'offset_order': '9223372036854775807', // Maximum 64-bit value\n            'offset_chat_id': 0,\n            'limit': 50 // Only get 50 chats //TODO: Implement loading more chats\n        });\n    }, []);\n\n    React.useEffect(()=> {\n        if(!folder.icon_name) {\n            // Default icon is used and we don't know what it is.\n            TdLib.sendQuery({ // Get chat filter info so we can get an idea what it is\n                '@type': 'getChatFilter',\n                'chat_filter_id': folder.id\n            }).then(folder=> {\n                TdLib.sendQuery({ // Ask TDLib what the icon should be\n                    '@type': 'getChatFilterDefaultIconName',\n                    'filter': folder\n                }).then(result=> setIconName(result.text));\n            });\n        }\n    }, [folder]);\n\n    var icon= (filters[iconName] || filters['Custom']); // If the icon was empty, show a generic icon instead.\n    icon= icon[active+0] || icon[0]; // Some icons dont have active variant\n    return (\n        <div className={active ? 'item active' : 'item'}>\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-sideBarBgRipple)\"/>\n            <button\n                onMouseDown={mouseDown}\n                onMouseUp={mouseUp}\n                onMouseLeave={mouseLeave}\n                onClick={onClick}>\n\n                <div className=\"icon\" dangerouslySetInnerHTML={{__html: icon}}></div>\n                <div className=\"title\">{folder.title}</div>\n                {unread?.unread_chats_count? (\n                    <div className=\"unread-badge\" \n                        data-muted={(unread?.unread_unmuted_chats_count==0) ? 'true' : 'false'}>\n                        <span>{unread?.unread_chats_count}</span>\n                    </div>\n                ): null}\n            </button>\n        </div>\n    );\n}\n\nChatFolder.propTypes= {\n    /** The folder object provided by TdLib */\n    folder: PropTypes.object.isRequired,\n    /** A boolean indicating if the folder is currently selected */\n    active: PropTypes.bool.isRequired,\n    /** A function to call when the folder is clicked */\n    onClick: PropTypes.func.isRequired,\n    /** An object containing unread messages and chats count, from `chatStore` */\n    unread: PropTypes.object\n};\n\n/**\n * Renders the chat folders list\n */\nfunction ChatFolderList({folders, currentFolder, unread, dispatch, onHamburgerMenuOpened}) {\n    if(!folders || folders.length==0) return null;\n\n    return (\n        <div id=\"chat-folders-list\">\n            <HamburgerMenuButton.WithFolders onClick={onHamburgerMenuOpened}/>\n\n            <ScrollView scrollBarWidth=\"4\" className=\"list scrollbar full-size\">\n                <ChatFolder \n                    active={compareChatList(currentFolder, {'@type': 'chatListMain'})} \n                    folder={{ title: 'All chats', icon_name: 'All' }}\n                    unread={unread.main}\n                    onClick={()=> dispatch({ // TODO: Scroll to top when active chat is clicked\n                        type: 'SET_CURRENT_CHAT_LIST',\n                        chatList: { '@type': 'chatListMain' }\n                    })}/>\n                \n                {folders.map(folder=> (\n                    <ChatFolder folder={folder} key={folder.id}\n                        unread={unread.filters[folder.id]}\n                        active={compareChatList(currentFolder, \n                            {'@type': 'chatListFilter', 'chat_filter_id': folder.id})}\n                        onClick={()=> dispatch({\n                            type: 'SET_CURRENT_CHAT_LIST',\n                            chatList: { \n                                '@type': 'chatListFilter',\n                                chat_filter_id: folder.id\n                            }\n                        })}/>\n                ))}\n            </ScrollView>\n        </div>\n    );\n}\nChatFolderList.propTypes={\n    /** An array of chat filters */\n    folders: PropTypes.arrayOf(PropTypes.object),\n    /** Current chat list */\n    currentFolder: PropTypes.object,\n    /** A list of unread messages info for each chat list */\n    unread: PropTypes.object,\n    \n    dispatch: PropTypes.func,\n    /** Fires when main menu is triggered */\n    onHamburgerMenuOpened: PropTypes.func\n};\nexport default connect(state=>({\n    folders:state.filters, \n    currentFolder: state.currentChatList,\n    unread: state.unread\n}))(ChatFolderList);","import { ProgressRing } from 'progress-ring';\nimport 'progress-ring/src/styles.css';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Renders a spinner which in addition to spinning, also changes size.\n */\nexport default class LoadingSpinner extends React.Component {\n    static props= {\n        /** Spinner circle size */\n        size: PropTypes.number.isRequired,\n        /** Spinner thickness */\n        lineWidth: PropTypes.number.isRequired,\n        /** Spinner color */\n        progressColor: PropTypes.string.isRequired\n    }\n    state= {\n        percentage: 10 // From 10 to 90, this specifies how much the spinner grows and shrinks while spinning (reversed)\n    }\n    render () {\n        return (\n            <div className=\"loading-spinner\">\n                <ProgressRing\n                    percent={this.state.percentage}\n                    caps='round'\n                    trackColor=\"transparent\"\n                    spin=\"true\"\n                    {...this.props}\n                    transitionDuration=\"2000\"/>\n            </div>\n        );\n    }\n\n    componentDidMount () {\n        this.intervalNum= setInterval(() => { // Spinner grows and shrinks while spinning\n            this.setState({\n                percentage: (90 - this.state.percentage)\n            });\n        }, 2000);\n    }\n\n    componentWillUnmount () {\n        clearInterval(this.intervalNum);\n    }\n}","import React from 'react';\nimport LoadingSpinner from '../elements/loading-spinner';\nimport { connect } from 'react-redux';\n\n/**\n * Renders the connecting spinner at the bottom left corner, which is hidden when connected\n */\nexport default connect(state=> ({state: state})) (function ConnectionState({state}) {\n    return (\n        <div className={'connectionState'+(([\n            'connectionStateConnecting',\n            'connectionStateConnectingToProxy',\n            'connectionStateWaitingForNetwork'\n        ].includes(state))? '' : ' connected')}>\n            <LoadingSpinner\n                progressColor=\"var(--theme-color-menuIconFg)\"\n                size=\"20\"\n                lineWidth=\"2\"/>\n        </div>\n    );\n});\n","import TdLib from './tdlib';\n\n/**\n * Downloads a file. Promise is resolved when the file is downloaded.\n * @param {number} file_id ID of file to be downloaded\n * @param {number} priority From 1 to 32, higher number results in earlier download\n * @returns {import('tdweb').TdObject} File object\n */\nexport function downloadFile (file_id, priority) {\n    let onReject;\n    TdLib.sendQuery({\n        '@type': 'downloadFile',\n        'file_id': file_id,\n        'priority': priority,\n        'offset': 0,\n        'limit': 0,\n        'synchronous': false\n    }).catch(onReject);\n\n    return new Promise((resolve, reject) => {\n        downloadCallbacks[file_id]=result=> {\n            resolve(result);\n            delete downloadCallbacks[file_id];\n        };\n        onReject=reject;\n    });\n}\nvar downloadCallbacks = {};\n\nTdLib.registerUpdateHandler('updateFile', function (update) {\n    if(update.file.local.is_downloading_completed){\n        downloadCallbacks[update.file.id]?.(update.file);\n    }\n});\n\n/**\n * Gets file content (downloads if necessary). Promise is resolved with a `filePart` object when file content is ready\n * @param {import('tdweb').TdObject} file File object\n * @param {number} priority Download priority from 1 to 32. Higher value = earlier download\n * @returns {import('tdweb').TdObject} A `filePart` object\n */\nexport function getFileContent(file, priority) {\n    if(file.local.is_downloading_completed){ // File is already downloaded - only read file\n        return TdLib.sendQuery({\n            '@type': 'readFilePart',\n            'file_id': file.id,\n            'offset': 0,\n            'count': 0\n        });\n    } else if(file.local.is_downloading_active){ // File is already being downloaded - gets quite complex here.\n        return new Promise((resolve, reject) => {\n            const callback = downloadCallbacks[file.id];\n            downloadCallbacks[file.id] = (result) => { // Replace old callback with a new callback that calls the old one and also does its own stuff\n                callback(result); // Call the old callback\n                TdLib.sendQuery({ // Read the file\n                    '@type': 'readFilePart',\n                    'file_id': file.id,\n                    'offset': 0,\n                    'count': 0\n                }).then(resolve).catch(reject);\n            };\n        });\n    } else {\n        return new Promise((resolve, reject) => { // File is not downloaded.\n            downloadFile(file.id, priority).then(()=> { // Download it...\n                TdLib.sendQuery({ // ...then read it\n                    '@type': 'readFilePart',\n                    'file_id': file.id,\n                    'offset': 0,\n                    'count': 0\n                }).then(resolve).catch(reject);\n            }).catch(reject);\n        });\n    }\n}\n\n/**\n * Converts a blob to a URL\n * @param {Blob} blob Blob to convert\n * @returns {string} Created URL\n */\nexport function blobToUrl (blob) {\n    return (window.URL || window.webkitURL).createObjectURL(blob);\n}\n","import TdLib from './tdlib';\n\n/**\n * Contains all options received from TdLib `updateOption`s\n */\nvar options={};\n\nTdLib.registerUpdateHandler('updateOption', function (update) {\n    options[update.name]=update.value.value;\n});\n\nexport default options;\n","export default __webpack_public_path__ + \"static/media/TgLogo.d1ff1195.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { blobToUrl, getFileContent } from '../../TdWeb/file';\nimport options from '../../TdWeb/options';\nimport './profile-photo.scss';\nimport tgLogo from '../../ui/img/TgLogo.png';\nimport { saved_messages, replies_userpic } from '../icon/icons';\n\n/**\n * Converts a name to initials.\n * @param {string} name Input name\n * @returns {string} One or two uppercase letters\n */\nexport function profileNameToInitials(name) {\n    const words=name.replace(/[\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007F]/g,'') // Remove non-word characters\n        .toUpperCase().split(' ');\n    if(words[0].length==0){\n        return '';\n    } else if(words.length===1) {\n        return words[0][0];\n    } else {\n        return words[0][0] + words[words.length-1][0];\n    }\n}\n\n/**\n * Renders a chat / profile photo.\n */\nexport default function ProfilePhoto (props) {\n    const [photo, setPhoto] = React.useState(null);\n    const [photoObj, setPhotoObj] = React.useState(null);\n    const isServiceMessages= props.id==options['telegram_service_notifications_chat_id'];\n    const isSavedMessages= props.id==options['my_id'];\n    const isReplies= props.id==options['replies_bot_chat_id'];\n    \n    React.useEffect(() => { // Fetch image data\n        var mounted=true;\n        if(props.photo){\n            if(photoObj!=props.photo){ // No need for any fetch if the same photo is already loaded\n                getFileContent(props.photo, 8).then(file=> {\n                    if(!mounted) return;\n                    setPhoto(blobToUrl(file.data));\n                    setPhotoObj(props.photo);\n                });\n            }\n        } else { // No photo\n            if(photo && photoObj){\n                setPhoto(null);\n                setPhotoObj(null);\n            }\n        }\n        return ()=> mounted=false;\n    }, [props.photo]);\n\n    var customIcon; \n    if(isSavedMessages && (!props?.disableSavedMessages)){ // Use saved messages icon instead of user pic (if not disabled)\n        customIcon= [0, saved_messages];\n    }\n    if(isReplies){ // Replies chat has no icons and we supply one ourselves\n        customIcon= [0, replies_userpic];\n    }\n    if((!props.photo) && isServiceMessages) { // Service messages may have no photo (e.g. on test DC)\n        customIcon = [1, tgLogo];\n    }\n    return (\n        <div className=\"profile-photo\">\n            <Initials id={props.id} name={props.name}/>\n            {\n                customIcon? (\n                    customIcon[0]?\n                        <React.Fragment>\n                            <Initials id={props.id} name={props.name}/>\n                            <img src={customIcon[1]}/>\n                        </React.Fragment>\n                        :\n                        <div className=\"svg\" dangerouslySetInnerHTML={{__html: customIcon[1]}}/>\n                ) : (\n                    (props.photo && photo) && <img src={photo}/> \n                )\n            }\n        </div>\n    );\n}\nProfilePhoto.propTypes = {\n    /** Chat/user name, used for initials */\n    name: PropTypes.string.isRequired,\n    /** Chat type id (supergroup id, user id, etc.), used for initials background */\n    id: PropTypes.number.isRequired,\n    /** Chat / user photo (e.g. `chat.photo?.small`) */\n    photo: PropTypes.object,\n    /** If false, saved messages icon will be used when user_id = my_id */\n    disableSavedMessages: PropTypes.bool\n};\n\n/** Renders photo initials fallback */\nfunction Initials({id, name}) {\n    return (\n        <span className={'initials color_'+ ((Math.abs(id || 0) % 7) + 1)}>\n            {profileNameToInitials(name)}\n        </span>\n    );\n}\nInitials.propTypes = {\n    /** Chat/user name, used to generate initials */\n    name: PropTypes.string.isRequired,\n    /** Chat type ID, used to generate background color */\n    id: PropTypes.number.isRequired\n};\n\n/**\n * Returns a chat's type ID. (supergroup Id / basic group ID / user ID)\n * @param {import('tdweb').TdObject} chat Input chat\n * @returns Chat type ID\n */\nexport function getChatTypeId(chat) {\n    switch (chat?.type?.['@type']) {\n    case 'chatTypeSupergroup': {\n        return chat?.type?.supergroup_id;\n    }\n    case 'chatTypeBasicGroup': {\n        return chat?.type?.basic_group_id;\n    }\n    case 'chatTypePrivate':\n    case 'chatTypeSecret': {\n        return chat?.type?.user_id;\n    }\n    }\n    return null;\n}\n","import { createStore } from 'redux';\nimport TdLib from '../TdWeb/tdlib';\n\nconst usersStore = createStore((state = {}, action) => {\n    switch (action.type) {\n    case 'UPD_USER':\n        return {\n            ...state,\n            [action.user.id]: action.user\n        };\n    case 'UPD_USER_STATUS':\n        return {\n            ...state,\n            [action.userId]: {\n                ...state[action.userId],\n                status: action.status\n            }\n        };\n    default:\n        return state;\n    }\n}, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nTdLib.registerUpdateHandler('updateUser', (update) => {\n    usersStore.dispatch({\n        type: 'UPD_USER',\n        user: update.user\n    });\n});\n\nTdLib.registerUpdateHandler('updateUserStatus', (update) => {\n    usersStore.dispatch({\n        type: 'UPD_USER_STATUS',\n        userId: update.user_id,\n        status: update.status\n    });\n});\n\nexport default usersStore;\n","import currencies from './currencies';\n\n/**\n * Converts currency to string\n * @param {string} currency Three-letter currency code\n * @param {number} total_amount The total amount\n * @returns Formatted currency string\n */\nexport default function currencyAmountToString (currency, total_amount) {\n    const currencyObject= currencies[currency];\n    var formatter = new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: currency,\n        \n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2,\n    });\n    return formatter.format(total_amount / 10**currencyObject.exp); // Move two last digits to the right of the decimal point\n}","/**\n * \n * @param {import(\"../TdWeb/td_api\").TdApi.td_User} user \n * @returns \n */\nexport function getUserFullName(user) {\n    return user.last_name ? (user.first_name +' '+ user.last_name) : user.first_name;\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport TdLib from '../../TdWeb/tdlib';\nimport currencyAmountToString from '../payments/currency-tostring';\nimport {getUserFullName} from '../user-misc';\nimport { getChatNoCache } from '../chat-store';\n\n/**\n * Gets a textual representation of the message without a thumbnail.\n * Usage examples: \n * - Last message in chat list\n * - Search results \n * TODO: add possibility to hide sender name (for search results)\n * @returns A span element containing a textual representation of the message. Contains span.part-1 and span.part-2\n */\nconst MessageSummaryWithoutIcon= connect(state=> ({users: state}))(\n    function MessageSummaryWithoutIcon({message, className, users, chat}) {\n        if(!message) return null;\n\n        switch(message.content['@type']) {\n        case 'messageAnimation': // GIF\n            return (\n                <MayHaveCaption\n                    type=\"GIF\" \n                    caption={message.content.caption?.text} \n                    className={className} \n                    message={message} \n                    chat={chat}\n                    users={users}/>\n            );\n        \n        case 'messageAudio': // Audio/music file\n            var title= message.content.audio.title || message.content.audio.file_name; // If there is no title, use file name instead\n            if(message.content.audio.performer) // Prepend performer name\n                title= message.content.audio.performer+ ' ­­– ' + title;\n            return (\n                <MayHaveCaption \n                    type={title} \n                    caption={message.content.caption?.text} \n                    className={className} \n                    message={message} \n                    chat={chat}\n                    users={users}/>\n            );\n\n        case 'messageBasicGroupChatCreate': // X created the group «xxxx»\n            return (\n                <span className={className}>\n                    <span className=\"part-1\"><SenderFullName chat={chat} message={message} users={users}/> created the group «{message.content.title}»</span>\n                </span>\n            );\n\n        case 'messageCall': // Call\n            var text='';\n            if(message.is_outgoing) { // You made the call\n                switch(message.content.discard_reason?.['@type']) {\n                case 'callDiscardReasonMissed':\n                    text= 'Cancelled call';\n                    break;\n                default:\n                    text= 'Outgoing call';\n                }\n            } else { // The other user called you\n                switch(message.content.discard_reason?.['@type']) {\n                case 'callDiscardReasonDeclined':\n                    text= 'Declined call';\n                    break;\n                case 'callDiscardReasonMissed':\n                    text= 'Missed call';\n                    break;\n                default: \n                    text= 'Incoming call';\n                }\n            } \n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">{text}</span>\n                </span>\n            );\n\n        case 'messageChatAddMembers': // X added Y\n            var members= message.content.member_user_ids.map(id=> // convert user IDs to names\n                getUserFullName(users[id]));\n            if(members.length>1){ // X and Y // X, Y and Z\n                members= members.slice(0, members.length - 1) .join(', ') + ' and ' + members[members.length - 1];\n            } else {\n                members= members[0];\n            }\n            // If the user joined the group by themselves, it appears as 'X added X' and that is not accurate.\n            if(message.content.member_user_ids[0] == message.sender?.user_id) {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\"><SenderFullName message={message} chat={chat} users={users}/> joined the group</span>\n                    </span>\n                );\n            }\n\n            return (\n                <span className={className}>\n                    <span className=\"part-1\"><SenderFullName message={message} chat={chat} users={users}/> added {members}</span>\n                </span>\n            );\n\n        case 'messageChatChangePhoto': // Chat photo changed\n            // Telegram Desktop shows chat photo change events as 'Photo' instead of 'X changed group photo' or 'Channel photo changed'\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">Photo</span> \n                </span>\n            );\n\n        case 'messageChatChangeTitle': // Chat was renamed\n            if(message.is_channel_post) {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\">Channel name was changed to «{message.content.title}»</span>\n                    </span>\n                );\n            } else {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\"><SenderFullName message={message} chat={chat} users={users}/>\n                        &nbsp;changed group name to «{message.content.title}»</span>\n                    </span>\n                );\n            }\n\n        case 'messageChatDeleteMember': // X removed Y\n            var deletedMember= users[message.content.user_id];\n            return (\n                <span className={className}>\n                    <span className=\"part-1\"><SenderFullName message={message} chat={chat} users={users}/>\n                    &nbsp;removed {getUserFullName(deletedMember)}</span>\n                </span>\n            );\n\n        case 'messageChatDeletePhoto': // Chat photo was deleted\n            if(message.is_channel_post) {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\">Channel photo removed</span>\n                    </span>\n                );\n            } else {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\"><SenderFullName message={message} chat={chat} users={users}/>\n                        &nbsp;removed group photo</span>\n                    </span>\n                );\n            }\n\n        case 'messageChatJoinByLink': // X joined the group via invite link\n            return (\n                <span className={className}>\n                    <span className=\"part-1\"><SenderFullName message={message} chat={chat} users={users}/>\n                    &nbsp;joined the group via invite link</span>\n                </span>\n            );\n\n        case 'messageChatSetTtl': // Auto-delete / self-destruct timer changed\n            var timeConversionTable= {86400: 'day', 604800: 'week', 2678400: 'month'}; // seconds to day, week and month\n            return (\n                <span className={className}>\n                    <span className=\"part-1\"><SenderFullName message={message} chat={chat} users={users} includeYou={true}/> set messages to auto-delete in 1 {timeConversionTable[message.content.ttl]}</span>\n                </span>\n            );\n\n        case 'messageChatUpgradeFrom': // It is too complicated to get basic group last message.\n        case 'messageChatUpgradeTo': // TODO: It's complicated, but it should be done.\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">Group was upgraded to a super-group</span>\n                </span>\n            );\n\n        case 'messageContact': // Shared contact\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">Contact</span>\n                </span>\n            );\n\n        case 'messageContactRegistered': // X joined Telegram\n            return (\n                <span className={className}>\n                    <span className=\"part-1\"><SenderFullName message={message} chat={chat} users={users}/>\n                    &nbsp;joined Telegram</span>\n                </span>\n            );\n\n        case 'messageCustomServiceAction': // ¯\\_(ツ)_/¯\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{message.content.text}</span>\n                </span>\n            );\n\n        case 'messageDice': // Dice (🎲🎯🎳⚽🏀)\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">{message.content.emoji}</span>\n                </span>\n            );\n\n        case 'messageDocument': // File/document\n            // TODO: Implement thumbnails\n            return (\n                <MayHaveCaption \n                    type={message.content.document.file_name} \n                    caption={message.content.caption?.text} \n                    className={className} \n                    message={message} \n                    chat={chat}\n                    users={users}/>\n            );\n        \n        // case 'messageExpiredPhoto': // TODO: Find a way to reproduce these messages and implement them\n        // case 'messageExpiredVideo':\n        case 'messageGame': // Game\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">🎮 {message.content.game.title}</span>\n                </span>\n            );\n\n        case 'messageGameScore': // X scored {score} in {game}\n            // Text to use if game message is not available\n            var noGameTitleFallback= (\n                <span className={className}><span className=\"part-1\">\n                    <SenderFullName message={message} chat={chat} users={users} includeYou={true}/> scored {message.content.score}\n                </span></span>\n            );\n\n            // Get game message\n            var GameScoreWithTitle= React.lazy(()=>new Promise(resolve=> {\n                TdLib.sendQuery({\n                    '@type': 'getMessage',\n                    chat_id: chat.id,\n                    message_id: message.content.game_message_id\n                }).then(\n                    result=> { \n                        //eslint-disable-next-line react/display-name\n                        resolve({ default: ()=> (\n                            <span className={className}><span className=\"part-1\">\n                                <SenderFullName message={message} chat={chat} users={users} includeYou={true}/> scored {message.content.score} in {result.content.game.title}\n                            </span></span>\n                        )});\n                    },\n                    ()=> { // Failed\n                        //eslint-disable-next-line react/display-name\n                        resolve({ default: ()=> noGameTitleFallback});\n                    }\n                );\n            }));\n\n            return (\n                <React.Suspense fallback={noGameTitleFallback}>\n                    <GameScoreWithTitle/>\n                </React.Suspense>\n            );\n\n        case 'messageInvoice': // Invoice (a buyable product)\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">{message.content.title}</span>\n                </span>\n            );\n\n        case 'messageLocation': // Location\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">{message.content.title}</span>\n                </span>\n            );\n\n        case 'messagePassportDataSent': // You sent some Telegram passport data\n            var passportDataTypeToString= {\n                'passportElementTypeAddress': 'address',\n                'passportElementTypeBankStatement': 'bank statement',\n                'passportElementTypeDriverLicense': 'driver license',\n                'passportElementTypeEmailAddress': 'email address',\n                'passportElementTypeIdentityCard': 'identity card',\n                'passportElementTypeInternalPassport': 'internal passport',\n                'passportElementTypePassport': 'passport',\n                'passportElementTypePassportRegistration': 'passport registration',\n                'passportElementTypePersonalDetails': 'personal details',\n                'passportElementTypePhoneNumber': 'phone number',\n                'passportElementTypeRentalAgreement': 'rental agreement',\n                'passportElementTypeTemporaryRegistration': 'temporary registration',\n                'passportElementTypeUtilityBill': 'utility bill',\n            };\n            var passportDataTypes= message.content.types.map(type=> passportDataTypeToString[type['@type']]);\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">\n                        {chat.title} received the following documents: {passportDataTypes.join(', ')}\n                    </span>\n                </span>\n            );\n\n        case 'messagePaymentSuccessful': // You paid [real] money\n            // To be shown if invoice is not available\n            var noInvoiceTitleFallback= (\n                <span className={className}>\n                    <span className=\"part-1\">\n                        You successfully transferred \n                        {currencyAmountToString(message.content.currency, message.content.total_amount)} \n                        to {chat.title}\n                    </span>\n                </span>\n            );\n\n            // Get invoice message\n            var PaymentInfoWithInvoiceTitle= React.lazy(()=>new Promise(resolve=> {\n                TdLib.sendQuery({\n                    '@type': 'getMessage',\n                    chat_id: chat.id,\n                    message_id: message.content.invoice_message_id\n                }).then(\n                    result=> { \n                        //eslint-disable-next-line react/display-name\n                        resolve({ default: ()=> (\n                            <span className={className}>\n                                <span className=\"part-1\">\n                                    You successfully transferred \n                                    {currencyAmountToString(message.content.currency, message.content.total_amount)} \n                                    to {chat.title} for {result.content.title}\n                                </span>\n                            </span>\n                        )});\n                    },\n                    ()=> { // Failed\n                        resolve({ default: ()=> noInvoiceTitleFallback});\n                    }\n                );\n            }));\n\n            return (\n                <React.Suspense fallback={noInvoiceTitleFallback}>\n                    <PaymentInfoWithInvoiceTitle/>\n                </React.Suspense>\n            );\n\n        case 'messagePhoto': // A photo\n            if(message.content.is_secret) { // Self-destructing photo, not implemented\n                if(message.is_outgoing) { // You sent it\n                    return (\n                        <span className={className}>\n                            <span className=\"part-1\">You sent a self-destructing photo</span>\n                        </span>\n                    );\n                } else { // You received it\n                    // TODO: Implement mini-thumbnails for photos (and albums)\n                    return (\n                        <span className={className}><span className=\"part-1\">\n                            <SenderFullName message={message} chat={chat} users={users}/> sent you a self-destructing photo. Please view it on your mobile.\n                        </span></span>\n                    );\n                }\n            } else { // Normal photo\n                return (\n                    <MayHaveCaption \n                        type=\"Photo\" \n                        caption={message.content.caption?.text} \n                        className={className} \n                        message={message} \n                        chat={chat}\n                        users={users}/>\n                );\n            }\n        \n        // case 'messagePinMessage': // TODO: Implement it\n        case 'messagePoll':\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{message.content.poll.question}</span>\n                </span>\n            );\n        \n        // case 'messageProximityAlertTriggered': // TODO: Reproduce this message and implement it\n        // case 'messageScreenshotTaken':\n        case 'messageSticker': // Sticker\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">{message.content.sticker.emoji} Sticker</span>\n                </span>\n            );\n\n        case 'messageSupergroupChatCreate': // Supergroup created\n            if(message.is_channel_post) {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\">Channel created</span>\n                    </span>\n                );\n            } else {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\"><SenderFullName chat={chat} message={message} users={users}/> created the group «{message.content.title}»</span>\n                    </span>\n                );\n            }\n\n        case 'messageText':\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-2\">{message.content.text.text.replace(/(\\n|\\r|\\r\\n|\\n\\r)/g, ' ')}</span>\n                </span>\n            );\n\n        case 'messageUnsupported': // Is not supported :(\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-2\">This message is not supported by your version of DIBgram. Please update to the latest version.</span>\n                </span>\n            );\n        \n        case 'messageVenue': // Venue/location\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">Location, </span>\n                    <span className=\"part-2\">{message.content.venue.title}</span>\n                </span>\n            );\n\n        case 'messageVideo': // Video\n            // TODO: Implement self-destructing videos (notices)\n            // TODO: Implement mini-thumbnails and albums\n            return (\n                <MayHaveCaption \n                    type=\"Video\" \n                    caption={message.content.caption?.text} \n                    className={className} \n                    message={message} \n                    chat={chat}\n                    users={users}/>\n            );\n\n        case 'messageVideoNote':\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">Video message</span>\n                </span>\n            );\n\n        case 'messageVoiceNote':\n            return (\n                <MayHaveCaption \n                    type=\"Voice message\" \n                    caption={message.content.caption?.text} \n                    className={className} \n                    message={message} \n                    chat={chat}\n                    users={users}/>\n            );\n\n        case 'messageWebsiteConnected':\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">You allowed this bot to message you when you logged in on {message.content.domain_name}</span>\n                </span>\n            );\n\n        default:\n            return null;\n        }\n    });\nexport default MessageSummaryWithoutIcon;\nMessageSummaryWithoutIcon.propTypes= {\n    message: PropTypes.object,\n    className: PropTypes.string\n};\n\n\n/** If caption has a value, adds a comma to type and returns type */ \nfunction MayHaveCaption({type, caption, className, message, chat, users}) {\n    if(caption) type+=',';\n    return (\n        <span className={className}>\n            <MessageSummarySender message={message} chat={chat} users={users}/>\n            <span className=\"part-1\">{type}</span> <span className=\"part-2\">{caption.replace(/(\\n|\\r|\\r\\n|\\n\\r)/g, ' ')}</span>\n        </span>\n    );\n}\nMayHaveCaption.propTypes= {\n    /** Message type, e.g. 'GIF', 'Video' */\n    type: PropTypes.string.isRequired,\n    /** Message caption, can be empty */\n    caption: PropTypes.string,\n    className: PropTypes.string,\n    /** Message object */\n    message: PropTypes.object,\n    /** The chat in which the message was sent */\n    chat: PropTypes.object,\n    /** A dictionary of all users */\n    users: PropTypes.object.isRequired\n};\n\n/** Sender's first name + last name */\nfunction SenderFullName({message, chat, users, includeYou}) {\n    if(includeYou) { // Use 'You' if the message is outgoing?\n        return message.is_outgoing ? 'You' : <SenderFullName message={message} chat={chat} users={users}/>;\n    }\n    const sender=message.sender;\n    const user=users[sender.user_id];\n    if(sender['@type']=='messageSenderUser') {\n        return getUserFullName(user); \n    } else if(sender['@type']=='messageSenderChat') { // Anonymous admin\n        return chat.title;\n    }\n}\n\n/** Short sender names in the beginning of message previews */\nexport const MessageSummarySender= \n    function MessageSummarySender ({message, chat, users}) {\n        if(!message) return null;\n\n        var part1;\n        if(chat && (!message.is_channel_post)) { // Channel posts dont have sender names\n            if(message.is_outgoing) {\n                part1= 'You: ';\n            } else if(['chatTypeBasicGroup', 'chatTypeSupergroup'].includes(chat.type['@type'])) { // Message is sent in a group\n                if(message.sender['@type']=='messageSenderUser') {\n                    part1= users[message.sender.user_id].first_name + ': ';\n                }\n            }\n            if(message.sender['@type']=='messageSenderChat') {\n                part1= getChatNoCache(message.sender.chat_id).title+': ';\n            }\n        }\n        return part1? <span className=\"sender\">{part1}</span> : null;\n    };\nMessageSummarySender.propTypes= {\n    /** Message to check the sender */\n    message: PropTypes.object.isRequired,\n    /** Chat in which the message was sent */\n    chat: PropTypes.object.isRequired,\n    /** A dictionary of all users */\n    users: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './link-button.scss';\n\n/**\n * Renders a button looking like a link.\n */\nexport default function LinkButton({href, children, onClick, ...rest}) {\n    const click= href ? ()=> window.open(href) : onClick;\n    return (\n        <button className=\"link-button\" onClick={click} {...rest}>{children}</button>\n    );\n}\nLinkButton.propTypes = {\n    /** Link content */\n    children: PropTypes.node.isRequired,\n    /** Function to be called when link is clicked. */\n    onClick: PropTypes.func,\n    /** If provided, the URL will be opened in a new tab on click. */\n    href: PropTypes.string\n};\n","import {createStore} from 'redux';\nimport TdLib from '../TdWeb/tdlib';\n\nfunction reducer(state, action) {\n    switch (action.type) {\n    case 'UPD_SUPERGROUP':\n        return {\n            ...state,\n            [action.supergroup.id]: action.supergroup\n        };\n    default:\n        return state;\n    }\n}\n\nconst supergroupStore= createStore(reducer);\nexport default supergroupStore;\n\nTdLib.registerUpdateHandler('updateSupergroup', (update) => {\n    supergroupStore.dispatch({\n        type: 'UPD_SUPERGROUP',\n        supergroup: update.supergroup\n    });\n});","import supergroupStore from './supergroup-store';\nimport usersStore from './users-store';\n\n/**\n * Check if the chat is with a deleted user\n * @param {import('tdweb').TdObject} chat The chat to check\n * @param {{[key: number]: import('tdweb').TdObject}} users A dictionary of all users (e.g. usersStore state)\n * @returns True if the chat is private and the other party's account is deleted\n */\nexport function isChatWithDeletedAccount(chat, users) {\n    switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup': // Groups are not applicable\n    case 'chatTypeSupergroup':\n        return false;\n    \n    case 'chatTypeSecret':\n    case 'chatTypePrivate': \n        var user= (users || usersStore.getState())?.[chat.type.user_id];\n        return user && user.type['@type'] === 'userTypeDeleted';\n    }\n    return false;\n}\n\n/**\n * Returns the chat's title and handles deleted account\n * @param {object} chat The chat to get the name of\n * @param {{[key: number]: object}} users A list of all users (e.g. usersStore state). If not provided, usersStore will be used\n * @returns Chat title, or 'Deleted Account'\n */\nexport function chatTitleOrDeletedAccount(chat, users) {\n    if(isChatWithDeletedAccount(chat, users))\n        return 'Deleted Account';\n    return chat.title;\n}\n\n/**\n * Checks if a user, bot or channel is verified\n * @param {import('tdweb').TdObject} chat The chat to be checked\n * @returns {boolean} True if the chat is verified, false if not\n */\nexport function isChatVerified(chat){\n    switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n        return false;\n\n    case 'chatTypeSupergroup':\n        var supergroup= supergroupStore.getState()?.[chat.type.supergroup_id];\n        return supergroup.is_verified;\n        \n    case 'chatTypeSecret':\n    case 'chatTypePrivate': \n        var user= usersStore.getState()?.[chat.type.user_id];\n        return user.is_verified;\n    }\n    return false;\n}","\n/**\n * Converts a date and time to a short string.\n * - If the date is in the last 20 hours, the time is displayed in the format HH:MM.\n * - If the date is in the last 7 days, the weekday is displayed.\n * - If the date is older, the date is displayed in the format DD.MM.YY.\n * @param {Date|Number} date Input date\n */\nexport function smallDateTimeToString(date) {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    const now = new Date();\n    const yesterday = new Date(now.getTime() - 20 * 60 * 60 * 1000);\n    const lastWeek = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n\n    if (date.getTime() >= yesterday.getTime()) {\n        return timeToString(date);\n    } else if (date.getTime() >= lastWeek.getTime()) {\n        return weekdayToString(date);\n    } else {\n        return dateToString(date);\n    }\n}\n\n/**\n * Formats time in 12-hour format\n * @param {Date|Number} date input date\n */\nexport function timeToString(date) {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    var hours = date.getHours();\n    var minutes = date.getMinutes();\n    const ampm = hours >= 12 ? 'PM' : 'AM';\n    hours = hours % 12;\n    hours = hours ? hours : 12; // the hour '0' should be '12'\n    minutes = minutes < 10 ? `0${minutes}` : minutes;\n    return `${hours}:${minutes} ${ampm}`;\n}\n\n/**\n * Formats weekday in WWW format\n * @param {Date|Number} date input date\n */\nexport function weekdayToString(date) {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    return weekdays[date.getDay()];\n}\n\n/**\n * Formats date in DD.MM.YY format\n * @param {Date|Number} date input date\n */\nexport function dateToString(date) {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    var day = date.getDate();\n    var month = date.getMonth() + 1;\n    const year = String(date.getFullYear()).slice(2);\n    if (day < 10) {\n        day = `0${day}`;\n    }\n    if (month < 10) {\n        month = `0${month}`;\n    }\n    return `${day}.${month}.${year}`;\n}\n\n/**\n * Converts a TDLIb unix time to a `Date` object.\n */\nexport function TdLibDateToDate(tdLibDate) {\n    return new Date(tdLibDate * 1000);\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './menu.scss';\n\n/**\n * A dropdown menu (not to be confused with <select>).\n */\nexport default function Menu(props) {\n    return (\n        <div className=\"menu\" {...props}/>\n    );\n}\n\n/**\n * Dropdown menu contents (created as a separate component so that it can be wrapped by other components).\n */\nMenu.MenuContents= function MenuContents(props) {\n    return (\n        <div className=\"menu-contents\" {...props}/>\n    );\n};\n\n/**\n * A menu item.\n */\nMenu.MenuItem= function MenuItem({children, ...rest}) {\n    return (\n        <div className=\"menu-item\" {...rest}>\n            {children}\n        </div>\n    );\n};\nMenu.MenuItem.propTypes = {\n    children: PropTypes.node\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { createStore } from 'redux';\nimport Menu from './menu';\nimport { connect } from 'react-redux';\n\n/**\n * A context menu (right click menu)\n */\nexport function ContextMenu({x, y, children}) {\n    return (\n        <div className=\"context-menu\" style={{'--x': x+'px', '--y': y+'px'}}>\n            <Menu>\n                {children}\n            </Menu>\n        </div>\n    );\n}\nContextMenu.propTypes = {\n    /** Position relative to viewport */\n    x: PropTypes.number.isRequired,\n    /** Position relative to viewport */\n    y: PropTypes.number.isRequired,\n    children: PropTypes.node.isRequired\n};\n\nexport const contextMenusStore = createStore(function (state = null, action) {\n    if (action.type === 'ADD_CONTEXT_MENU') {\n        return action.menu;\n    }\n    else if (action.type === 'REMOVE_CONTEXT_MENUS') {\n        return null;\n    }\n    return state;\n});\n\nexport const ContextMenus= connect(state=>({menus:state}))(({menus}) => menus);\n\n/**\n * Create a context menu\n * @param {React.SyntheticEvent} e Pass down `e` from the event handler\n * @param {React.ReactNode} menu Context menu contents\n */\nexport function createContextMenu(e, menu) {\n    e.preventDefault();\n    setTimeout(() => { // This is to fix ripple effect glitch\n        contextMenusStore.dispatch({\n            type: 'ADD_CONTEXT_MENU',\n            menu: <ContextMenu x={e.nativeEvent.pageX} y={e.nativeEvent.pageY}>{menu}</ContextMenu>\n        });\n    }, 50); // Human brain cannot notice 50ms delay\n}\n\nexport function onAnywhereClicked() {\n    contextMenusStore.dispatch({\n        type: 'REMOVE_CONTEXT_MENUS'\n    });\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './toast.scss';\nimport { createStore } from 'redux';\nimport { connect } from 'react-redux';\n\n/**\n * Renders a toast (a small text which is temporarily shown in the middle of the screen)\n */\nexport default function Toast({children}) {\n    const [closed, setClosed] = React.useState(false);\n    React.useEffect(() => {\n        setTimeout(() => { // Automatically close after 6 seconds\n            setClosed(true); // When an element has a closing dialog, a CSS class should be added to trigger the animation\n            setTimeout(() => { // Then we wait until the animation is finished\n                addToast(null); // And we can safely remove the element\n            }, 2000);\n        }, 6000);\n    }, []);\n    return (\n        <div className={'toast' + (closed? ' closed':'')}>\n            <div className=\"toast-content\">\n                {children}\n            </div>\n        </div>\n    );\n}\nToast.propTypes = {\n    children: PropTypes.node.isRequired,\n};\n\nexport const toastStore= createStore((state=null, action) => {\n    if(action.type=='SET_TOAST') return action.toast;\n    return state;\n});\n\nexport const Toasts= connect(state=>({toast: state}))(function Toasts({toast}){\n    return toast;\n});\n\nexport function addToast(toast) {\n    toastStore.dispatch({\n        type: 'SET_TOAST',\n        toast\n    });\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { createStore } from 'redux';\n\n/**\n * A redux store which state is an array of objects with {id: unique ID of dialog, element: react element of the dialog}\n */\nexport var dialogStore= createStore(\n    /**\n     * @param {any[]} state\n     * @param {Object} action\n     */\n    function (state= [], action) {\n        switch (action.type) {\n        case 'ADD_DIALOG':\n            return [\n                ...state,\n                action.dialog\n            ];\n        \n        case 'REMOVE_DIALOG':\n            return state.filter(value => value.id!=action.id);\n        \n        default:\n            break;\n        }\n    },\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\n/**\n * Opens a dialog\n * @param {string} id A unique ID for the dialog\n * @param {React.ReactElement} dialog The dialog React element\n */\nexport function addDialog(id, dialog) {\n    dialogStore.dispatch({\n        type: 'ADD_DIALOG',\n        dialog: {\n            element: dialog,\n            id: id\n        }\n    });\n}\n\n/**\n * Closes an existing dialog\n * @param {string} id The dialog unique ID\n */\nexport function removeDialog(id) {\n    dialogStore.dispatch({\n        type: 'REMOVE_DIALOG',\n        id: id\n    });\n}\n\n/**\n * Renders all dialogs.\n */\nconst Dialogs= (connect(function (state) {\n    return {dialogs: state || []};\n    // eslint-disable-next-line no-unused-vars\n})(function Dialogs({dialogs, dispatch, ...rest}) {\n    return (\n        <div data-dialog={!!dialogs.length} {...rest}>\n            {dialogs.map(el => <React.Fragment key={el.id}>{el.element}</React.Fragment>) || null}\n        </div>\n    );\n}));\n\nexport default Dialogs;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport RippleEffect, {handleMyMouseEventsFunction} from './ripple-effect';\n\n/**\n * Renders a small button with accent color\n */\nexport default function SmallButton ({children, attention, ...rest}) {\n    const ripple= React.useState({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave]= handleMyMouseEventsFunction(ripple);\n    return (\n        <button \n            className=\"small-button\" \n            data-attention={attention? 'true': 'false'}\n            onMouseDown={mouseDown}\n            onMouseUp={mouseUp}\n            onMouseLeave={mouseLeave}\n            {...rest}>\n\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-lightButtonBgRipple)\"/>\n\n            {/* Because we use absolute positioning on the actual content, we need a copy of it without absolute position to get the correct parent size. */}\n            <div className=\"invisibleText\">\n                {children}\n            </div>\n\n            <div className=\"content\">\n                {children}\n            </div>\n            \n        </button>\n    );\n}\nSmallButton.propTypes= {\n    /** The button's content */\n    children: PropTypes.node.isRequired,\n    /** Fires when the button is clicked */\n    onClick: PropTypes.func,\n    /** Setting to true causes the button to become red */\n    attention: PropTypes.bool\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SmallButton from '../elements/small-button';\nimport { removeDialog } from './dialogs';\n/**\n * Renders a modal dialog with a title and cancel and OK button. OK button text can be changed.\n */ //TODO: Try to inherit from Dialog component\nexport default class ConfirmDialog extends React.Component{\n    static propTypes= {\n        children: PropTypes.node.isRequired,\n        /** Dialog width in CSS format */\n        width: PropTypes.string,\n        /** Dialog header */\n        title: PropTypes.string,\n        /** Text content of the OK button*/\n        OKButtonText: PropTypes.string,\n        /** Pass true to only show the OK button */\n        hideCancelButton: PropTypes.bool,\n        /** Unique ID of this dialog, used to close it. */\n        id: PropTypes.any.isRequired,\n        /** Called when the OK button is pressed */\n        onOK: PropTypes.func,\n        /** Called when the cancel button is pressed */\n        onCancel: PropTypes.func,\n        /** Third button text (optional) */\n        thirdButton: PropTypes.string,\n        /** Pass true if third button click closes dialog */\n        thirdButtonClosesDialog: PropTypes.bool,\n        /** Called when third button is pressed */\n        onThirdButtonClick: PropTypes.func,\n        /** If true, the OK button will become red, meaning the user should pay attention */\n        attention: PropTypes.bool\n    };\n    state= {\n        closing: false\n    }\n    handleOK =()=>{\n        this.closeDialog();\n        this.props.onOK && this.props.onOK();\n    }\n    handleCancel =()=>{ //TODO: Clicking outside of the dialog should close it\n        this.closeDialog();\n        this.props.onCancel && this.props.onCancel();\n    }\n    handleButton =(handler)=>{\n        this.closeDialog();\n        handler && handler();\n    }\n    render() {\n        return (\n            <div className={'modal-dialog confirm-dialog' + ((this.state.closing) ? ' closing' : '')}>\n                <div style={{ 'width': this.props.width || '320px' }} data-id={this.props.id}>\n                    <h1>{this.props.title || ''}</h1>\n                    <div className=\"content\">\n                        {this.props.children}\n                    </div>\n                    <div className=\"options\">\n                        {this.props.thirdButton ?  (\n                            <SmallButton \n                                className=\"small-button left\"\n                                style={{'float': 'left'}}\n                                onClick={ this.props.thirdButtonClosesDialog ?\n                                    ()=>this.handleButton(this.props.onThirdButtonClick)\n                                    : this.props.onThirdButtonClick}>\n                                {this.props.thirdButton}\n                            </SmallButton>\n                        ) : null}\n                        {this.props.hideCancelButton ? null : (\n                            <SmallButton onClick={()=>this.handleButton(this.props.onCancel)}>\n                                Cancel\n                            </SmallButton>\n                        )}\n                        <SmallButton onClick={()=>this.handleButton(this.props.onOK)} attention={this.props.attention}>\n                            {this.props.OKButtonText || 'OK'}\n                        </SmallButton>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n    \n    closeDialog= ()=>{\n        this.setState({\n            closing: true\n        });\n        setTimeout(() => {\n            removeDialog(this.props.id);\n        }, 1000);\n    }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect, Provider } from 'react-redux';\nimport TdLib from '../../../TdWeb/tdlib';\nimport chatStore, { compareChatList } from '../../chat-store';\nimport './chat-list.scss';\nimport ProfilePhoto, { getChatTypeId } from '../../../ui/components/profile-photo';\nimport { dialogs_chat, dialogs_channel, dialogs_bot, dialogs_pinned, dialogs_verified_star, dialogs_verified_check, dialogs_sending, dialogs_sent, dialogs_received, archive_userpic, history_to_down } from '../../../ui/icon/icons';\nimport usersStore from '../../users-store';\nimport ScrollView from '../../../ui/scroll/scrollbar';\nimport MessageSummaryWithoutIcon from '../../message/message-summary-noicon';\nimport LinkButton from '../../../ui/elements/link-button';\nimport { isChatWithDeletedAccount, isChatVerified, chatTitleOrDeletedAccount } from '../../chat-misc';\nimport { smallDateTimeToString } from '../../../time-tostring';\nimport { getMessageStatus } from '../../message-misc';\nimport options from '../../../TdWeb/options';\nimport RippleEffect, { handleMyMouseEvents, handleMyMouseEventsFunction } from '../../../ui/elements/ripple-effect';\nimport { createContextMenu } from '../../../ui/menu/context-menu';\nimport Menu from '../../../ui/menu/menu';\nimport Toast, { addToast } from '../../../ui/dialog/toast';\nimport { addDialog } from '../../../ui/dialog/dialogs';\nimport ConfirmDialog from '../../../ui/dialog/confirm-dialog';\nimport './history-to-down.scss';\nimport IconButton from '../../../ui/elements/icon-button';\n\n/**********************************************************************************************\n * Because of the length of this file, it is recommended to use a tool to view document outline\n **********************************************************************************************/\n\n/**\n * Returns a sorted list of all chats in the given chat list\n * \n * Also for every chat, sets `chat.position` to the matching position (creates copy instead of modifying original object)\n * @param {import('tdweb').TdObject[]} chats\n * @param {import('tdweb').TdObject} list\n */\nexport function getChatsFromList(chats, list) {\n    return chats.map(chat => { // Step 1 - get the chat positions which refer to the current list\n        for( const position of chat.positions ) {\n            if (compareChatList(list, position.list)) {\n                if( position.order=='0' ) return false; // Replace a chat without a suitable position with `false`\n                return {\n                    ...chat,\n                    position: position // Store the position in chat object\n                };\n            }\n        }\n        return chat;\n    })\n        .filter(chat => !!chat.position) // Step 2 - Remove `false` values (chats outside the list)\n        .sort((a, b) => { // Step 3 - Sort it by position.order\n            let order1= a.position.order, order2= b.position.order;\n\n            if (order1 == order2) {\n                return 0;\n            }\n            if (order1 < order2) {\n                return 1;\n            }\n            return -1;\n        });\n}\n\n/**\n * Renders the chats within a chat list\n */\nconst ChatList= connect(state=> ({connectionState: state}))(\n    class ChatList extends React.Component { \n        static propTypes = {\n            chats: PropTypes.array.isRequired,\n            list: PropTypes.object.isRequired,\n            connectionState: PropTypes.string.isRequired,\n            unread: PropTypes.object.isRequired,\n        }\n        state= {\n            scrollToTopVisible: false,\n        }\n        scrollRef= React.createRef();\n\n        onScroll= (e) => {\n            const visible= e.target.scrollTop > 480;\n            if (visible != this.state.scrollToTopVisible) {\n                this.setState({scrollToTopVisible: visible});\n            }\n        }\n\n        // When updating, TDLib sends updates of type updateChatLastMessage, where only the last one is needed.\n        // This greatly hurts performance.\n        // However, we can workaround it by not re-rendering until all updates have arrived.\n        shouldComponentUpdate(nextProps, nextState) {\n            return (nextProps.chats !== this.props.chats \n                || nextProps.list !== this.props.list \n                || nextProps.unread !== this.props.unread\n                || nextProps.connectionState !== this.props.connectionState\n                || nextState.scrollToTopVisible !== this.state.scrollToTopVisible)\n                && nextProps.connectionState != 'connectionStateUpdating'; // Do not re-render if updating\n        }\n\n        render() {\n            // Get chats from the list (this needs to be repeated on every modification)\n            const array= getChatsFromList(this.props.chats, this.props.list).map(chat=><Chat key={chat.id} chat={chat} />);\n            \n            return (\n                <React.Fragment>\n                    <ScrollView scrollRef={this.scrollRef} id=\"chat-list\" scrollBarWidth=\"4\" onScroll={this.onScroll}>\n                        {this.props.list['@type']=='chatListMain' && (\n                            <Provider store={chatStore}>\n                                <ArchivedChatsItem chats={this.props.chats}/>\n                            </Provider>\n                        )}\n                        <Provider store={usersStore}>\n                            {array.length ? array :  <EmptyChatList list={this.props.list} unread={this.props.unread}/>}\n                        </Provider>\n                    </ScrollView>\n                    <IconButton icon={history_to_down} onClick={()=>this.scrollRef.current.scrollTop(0)}\n                        className={'history-to-down '+(this.state.scrollToTopVisible ? 'visible' : '')}/>\n                </React.Fragment>\n            );\n        }\n\n        componentDidMount() {\n            // Request TDLib to return chats in main list and archive list\n            TdLib.sendQuery({\n                '@type': 'getChats',\n                'chat_list': {\n                    '@type': 'chatListMain'\n                },\n                'offset_order': '9223372036854775807',\n                'offset_chat_id': 0,\n                'limit': 50\n            });\n            TdLib.sendQuery({\n                '@type': 'getChats',\n                'chat_list': {\n                    '@type': 'chatListArchive'\n                },\n                'offset_order': '9223372036854775807',\n                'offset_chat_id': 0,\n                'limit': 50\n            });\n        }\n    }\n);\nexport default ChatList;\n\n/**\n * Renders a single chat\n */\nclass ChatListItem extends React.Component {\n    constructor(props) {\n        super(props);\n        [this.mouseDown, this.mouseUp, this.mouseLeave]= handleMyMouseEvents(this);\n    }\n    state= {\n        ripple: {\n            state: 'off'\n        }\n    };\n    shouldComponentUpdate(nextProps, nextState) {\n        function getUser(props){ // Gets the user which is the other party of the chat. Used to see if the needed user has changed\n            if(props.chat.type['@type']=='chatTypePrivate') {\n                return props.users[props.chat.type.user_id];\n            }\n            return null;\n        }\n        return nextProps.chat.id !== this.props.chat.id\n            || nextProps.chat.last_message !== this.props.chat.last_message\n            || nextProps.chat.draft_message !== this.props.chat.draft_message\n            || nextProps.chat.unread_count !== this.props.chat.unread_count\n            || nextProps.chat.unread_mention_count !== this.props.chat.unread_mention_count\n            || nextProps.chat.is_marked_as_unread !== this.props.chat.is_marked_as_unread\n            || nextProps.chat.position.is_pinned !== this.props.chat.position.is_pinned\n            || nextProps.chat.photo?.small?.id !== this.props.chat.photo?.small?.id\n            || nextProps.chat.title !== this.props.chat.title\n            || nextProps.chat.last_read_outbox_message_id !== this.props.chat.last_read_outbox_message_id\n            || nextState.ripple !== this.state.ripple\n            || getUser(nextProps) !== getUser(this.props);\n    }\n    render(){\n        const chat= {...this.props.chat}; // Clone chat object to avoid mutating it. Mutating it causes Saved messages and Deleted account chats to get past shouldComponentUpdate.\n        var chatType= '';\n        if (chat.type?.['@type'] == 'chatTypeBasicGroup' ||      // Groups are basic groups and non-channel supergroups\n                (chat.type?.['@type'] == 'chatTypeSupergroup' &&\n                chat.type?.is_channel == false)\n        ){\n            chatType= dialogs_chat;\n        } \n        else if (chat.type?.['@type'] == 'chatTypeSupergroup' && // Channels are supergroups with is_channel set to true\n                chat.type?.is_channel == true){\n            chatType= dialogs_channel;\n        } \n        else if ((chat.type?.['@type'] == 'chatTypePrivate') &&  // Bots are private chats with bot user type\n                (this.props.users[chat.type?.user_id]?.type?.['@type'] == 'userTypeBot')){\n            chatType= dialogs_bot;\n        }\n        if (chat.id==options['replies_bot_chat_id']) { // Replies bot does not have a type icon\n            chatType= '';\n        }\n\n        if(isChatWithDeletedAccount(chat, this.props.users)) {\n            chat.title= 'Deleted Account'; // Chat object is a copy, so there is no problem with mutating it.\n        }\n\n        const isVerified= isChatVerified(chat);\n\n        if (chat.id==options['my_id']) {\n            chat.title= 'Saved Messages';\n        }\n\n        var messageStatus = null;\n        switch(getMessageStatus(chat, chat.last_message)) { // Is the message sending, sent or seen?\n        case 'sending': \n            messageStatus = <span className=\"message-status-icon sending\" dangerouslySetInnerHTML={{__html: dialogs_sending}}/>;\n            break;\n        case 'sent': \n            messageStatus = <span className=\"message-status-icon sent\" dangerouslySetInnerHTML={{__html: dialogs_sent}}/>;\n            break;\n        case 'seen': \n            messageStatus = <span className=\"message-status-icon seen\" dangerouslySetInnerHTML={{__html: dialogs_received}}/>;\n            break;\n        }\n\n        var unreadBadge = null;\n        const unreadBadgeClass= chat.notification_settings.mute_for ? 'unread-badge muted' : 'unread-badge';\n        // Show the mention badge alone if there is exactly one mention and no other unread messages\n        if (chat.unread_mention_count == 1 && chat.unread_count == chat.unread_mention_count) {\n            unreadBadge = <span className=\"unread-badge mention\">@</span>;\n        } \n        // Show the mention badge with unread badge together if there are more than one unread messages and there are mentions\n        else if (chat.unread_mention_count > 0 && chat.unread_count > 1 ) {\n            unreadBadge = <React.Fragment>\n                <span className=\"unread-badge mention\">@</span>\n                <span className={unreadBadgeClass}>{chat.unread_count}</span>\n            </React.Fragment>;\n        }\n        // Show the unread badge alone if there are no mentions and there are unread messages\n        else if (chat.unread_count > 0 && chat.unread_mention_count == 0) {\n            unreadBadge = <span className={unreadBadgeClass}>{chat.unread_count}</span>;\n        }\n        // Show an empty badge if chat is manually marked as unread\n        else if (chat.is_marked_as_unread) {\n            unreadBadge = <span className={unreadBadgeClass}></span>;\n        }\n\n        var isOnline= false; // User online status\n        if((chat.type['@type']== 'chatTypePrivate') && // Only private chats (except saved messages and service notifications)\n            (chat.id!=options['my_id']) && (chat.id!=options['telegram_service_notifications_chat_id']) ){ \n            const user= this.props.users[chat.type.user_id];\n            if(user) {\n                isOnline= user.type['@type'] == 'userTypeRegular' && user.status['@type'] == 'userStatusOnline'; // Shouldn't be a bot\n            }\n        }\n\n        return(\n            <div className=\"chat\" onContextMenu={e=> createContextMenu(e, <ChatContextMenu chat={chat}/>)}\n                onMouseDown={this.mouseDown} onMouseUp={this.mouseUp} onMouseLeave={this.mouseLeave}>\n                <RippleEffect {...this.state.ripple} color=\"var(--theme-color-dialogsRippleBg)\"/>\n                <div className=\"content\" data-online={isOnline ? 'true' : 'false'}>\n                    <ProfilePhoto name={chat.title} photo={chat.photo?.small} id={getChatTypeId(chat)}/>\n                    <div className=\"details\">\n                        <div className=\"top\">\n                            <div className=\"left\">\n                                <div className=\"type-icon\" dangerouslySetInnerHTML={{__html: chatType}}></div>\n                                <div className=\"title\">{chat.title}</div>\n                                {isVerified && <span className=\"verified-icon\">\n                                    <span className=\"verified-icon-star\" dangerouslySetInnerHTML={{__html: dialogs_verified_star}}></span>\n                                    <span className=\"verified-icon-check\" dangerouslySetInnerHTML={{__html: dialogs_verified_check}}></span>\n                                </span>}\n                            </div>\n                            <div className=\"right\">\n                                {messageStatus}\n                                {chat.last_message?.date && <span className=\"date\">{smallDateTimeToString(chat.last_message.date)}</span>}\n                            </div>\n                        </div>\n                        <div className=\"bottom\">\n                            <div className=\"left\">\n                                {(chat.draft_message && !unreadBadge) ?  // I don't know why, but Telegram Desktop does not show the draft message if the chat is unread.\n                                    <span className=\"last-message\">\n                                        <span className=\"draft\">Draft:</span> <span className=\"part-2\">{chat.draft_message.input_message_text.text.text}</span>\n                                    </span> \n                                    : //TODO: Disconnect it and use direct props for users\n                                    <MessageSummaryWithoutIcon message={chat.last_message} chat={chat} className=\"last-message\"/>\n                                }\n                            </div>\n                            <div className=\"right\">\n                                {unreadBadge || ( // Unread badge overrides pinned icon\n                                    chat.position?.is_pinned && <span className=\"pinned_icon\" dangerouslySetInnerHTML={{__html: dialogs_pinned}}></span>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nChatListItem.propTypes = {\n    /** The chat (TdObject) */\n    chat: PropTypes.object.isRequired,\n    /** A dictionary of all users */\n    users: PropTypes.object.isRequired\n};\nconst Chat = connect(state=> ({users: state}))(ChatListItem);\n\n/** Renders the context menu of a chat */\nfunction ChatContextMenu({chat}) {\n    const [movableChatLists, setMovableChatLists] = React.useState([]);\n\n    // Archive/unarchive chats\n    React.useEffect(() => {\n        TdLib.sendQuery({ // Only TDLib can know what lists we can add the chat to\n            '@type': 'getChatListsToAddChat',\n            chat_id: chat.id\n        }).then(result => {\n            setMovableChatLists(result.chat_lists.map(chatList=> {\n                const text= { // Only archive / unarchive\n                    'chatListMain': 'Unarchive chat', \n                    'chatListArchive': 'Archive chat'\n                }[chatList['@type']];\n                if(!text) return;\n                return (\n                    <Menu.MenuItem key={chatList.chat_filter_id || chatList['@type']} onClick={() => {\n                        TdLib.sendQuery({\n                            '@type': 'addChatToList',\n                            chat_id: chat.id,\n                            chat_list: chatList\n                        }).then(() => {\n                            if(chatList['@type'] == 'chatListMain') {\n                                addToast(<Toast>Chat restored from your archive.</Toast>);\n                            } \n                            else if(chatList['@type'] == 'chatListArchive') {\n                                addToast(<Toast>\n                                    Chat archived. <br/>\n                                    Muted chats stay archived when new messages arrive.\n                                </Toast>);\n                            }\n                        });\n                    }}>\n                        {text}\n                    </Menu.MenuItem>\n                );\n            }));\n        });\n    }, []);\n\n    return (\n        <Menu.MenuContents>\n            {movableChatLists /* Archive/unarchive */}\n            <Menu.MenuItem onClick={()=> { // Pin/unpin\n                TdLib.sendQuery({\n                    '@type': 'toggleChatIsPinned',\n                    chat_list: chat.position.list,\n                    chat_id: chat.id,\n                    is_pinned: !chat.position.is_pinned\n                }).catch(error=> {\n                    // Maximum pinned messages\n                    if(error.code == 400) {\n                        const max= chat.position.list['@type'] == 'chatListMain'? options['pinned_chat_count_max'] : options['pinned_archived_chat_count_max'];\n                        addDialog('maximum-pinned-chats-reached', (\n                            <ConfirmDialog id=\"maximum-pinned-chats-reached\" hideCancelButton={true}>\n                                Sorry, you can only pin {max} chats to the top.\n                            </ConfirmDialog>\n                        ));\n                    }\n                });\n            }}>\n                {chat.position.is_pinned? 'Unpin from top' : 'Pin to top'}\n            </Menu.MenuItem>\n        </Menu.MenuContents>\n    );\n}\nChatContextMenu.propTypes = {\n    chat: PropTypes.object.isRequired\n};\n\nconst ArchivedChatsItem= connect(state=> ({\n    archiveButtonState: state.archiveButtonState,\n    unread: state.unread.archive\n})) (function ArchivedChatsItem({chats, unread, archiveButtonState}) {\n    const chatsInList = getChatsFromList(chats, {'@type': 'chatListArchive'}); // Check if there are any archved chats\n    if(!chatsInList.length) return null; // If there are no archived chats, render nothing\n\n    // Ripple\n    const ripple= React.useState({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave]= handleMyMouseEventsFunction(ripple);\n\n    function onArchiveOpen() {\n        chatStore.dispatch({\n            type: 'SET_ARCHIVE_STATE',\n            archiveState: 'open'\n        });\n    }\n\n    // Change button type to collapsed/expanded/moved to main menu\n    function setButtonState(state) {\n        chatStore.dispatch({\n            type: 'SET_ARCHIVE_BUTTON_STATE',\n            archiveButtonState: state\n        });\n    }\n\n    const moveToMainMenuToast= <Toast>\n        Archive moved to the main menu! <br/>\n        You can return it from the context menu of the archive button.\n    </Toast>;\n\n    switch(archiveButtonState) {\n    case 'expanded': // Looks like a regular chat\n    default:\n        return (\n            <div \n                className=\"chat archived\" onClick={onArchiveOpen}\n                onMouseDown={mouseDown} onMouseUp={mouseUp} onMouseLeave={mouseLeave}\n                onContextMenu={e=> createContextMenu(e, (\n                    <Menu.MenuContents>\n                        <Menu.MenuItem onClick={()=>{\n                            setButtonState('collapsed');\n                            localStorage.setItem('dibgram-archived-chats-button-mode', 'collapsed');\n                        }}>\n                            Collapse\n                        </Menu.MenuItem>\n                        <Menu.MenuItem onClick={()=>{\n                            setButtonState('hidden-expanded');\n                            localStorage.setItem('dibgram-archived-chats-button-mode', 'hidden-expanded');\n                            addToast(moveToMainMenuToast);\n                        }}>\n                            Move to main menu\n                        </Menu.MenuItem>\n                    </Menu.MenuContents>\n                ))}>\n                <RippleEffect {...ripple[0]} color=\"var(--theme-color-dialogsRippleBg)\"/>\n                <div className=\"content\">\n                    <div className=\"profile-photo\">\n                        <div className=\"svg\" dangerouslySetInnerHTML={{__html: archive_userpic}}/>\n                    </div>\n                    <div className=\"details\">\n                        <div className=\"top\">\n                            <div className=\"left\">\n                                <div className=\"title\">Archived chats</div>\n                            </div>\n                        </div>\n                        <div className=\"bottom\">\n                            <div className=\"left\">\n                                <div className=\"last-message\">\n                                    <span className=\"part-1\">\n                                        {chatsInList\n                                            .filter(chat=> chat.unread_count > 0)\n                                            .map(chat => chatTitleOrDeletedAccount(chat) + ', ')\n                                            .join('')}\n                                    </span>\n                                    <span className=\"part-2\">\n                                        {chatsInList\n                                            .filter(chat=> chat.unread_count == 0)\n                                            .map(chatTitleOrDeletedAccount)\n                                            .join(', ')}\n                                    </span>\n                                </div>\n                            </div>\n                            {unread.unread_messages_count? (\n                                <div className=\"right\">\n                                    <span className=\"unread-badge muted\">{unread.unread_messages_count}</span>\n                                </div>\n                            ) : null}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n\n    case 'collapsed': // Only title / tiny icon\n        return (\n            <div\n                className=\"chat archived collapsed\" onClick={onArchiveOpen}\n                onMouseDown={mouseDown} onMouseUp={mouseUp} onMouseLeave={mouseLeave}\n                onContextMenu={e=> createContextMenu(e, (\n                    <Menu.MenuContents>\n                        <Menu.MenuItem onClick={()=>{\n                            setButtonState('expanded');\n                            localStorage.setItem('dibgram-archived-chats-button-mode', 'expanded');\n                        }}>\n                            Expand\n                        </Menu.MenuItem>\n                        <Menu.MenuItem onClick={()=>{\n                            setButtonState('hidden-collapsed');\n                            localStorage.setItem('dibgram-archived-chats-button-mode', 'hidden-collapsed');\n                            addToast(moveToMainMenuToast);\n                        }}>\n                            Move to main menu\n                        </Menu.MenuItem>\n                    </Menu.MenuContents>\n                ))}>\n                <RippleEffect {...ripple[0]} color=\"var(--theme-color-dialogsRippleBg)\"/>\n                <div className=\"content\">\n                    Archived chats\n                    {unread.unread_messages_count? (\n                        <div className=\"details\">\n                            <span className=\"unread-badge muted\">{unread.unread_messages_count}</span>\n                        </div>\n                    ) : null}\n                </div>\n            </div>\n        );\n    case 'hidden-expanded': // Not here, it's in main menu\n    case 'hidden-collapsed':\n        return null;\n    }\n});\nArchivedChatsItem.propTypes = {\n    /** A list of all chats (not just current list) */\n    chats: PropTypes.array.isRequired\n};\n\n/** Renders the empty chat list fallback */\nfunction EmptyChatList({list, unread}) {\n    const loadingFallBack= (\n        <div className=\"empty\">\n            <div>Loading...</div>\n        </div>\n    );\n    if(list['@type']=='chatListFilter'){ // Empty filter / Filter not loaded\n        if(unread.filters?.[list.chat_filter_id]?.total_chats_count !== 0) return loadingFallBack;\n        return (\n            <div className=\"empty\">\n                <div>No chats currently belong to this folder.</div>\n                <LinkButton>Edit Folder</LinkButton>\n            </div>\n        );\n    } else { // There are no chats at all / Chats not loaded\n        if(unread.main?.total_chats_count !== 0) return loadingFallBack;\n        return (\n            <div className=\"empty\">\n                <div>Your chats will be here</div>\n                <LinkButton>New contact</LinkButton>\n            </div>\n        );\n    }\n}\n","/**\n * Gets message sending status. Can return 3 values:\n * - `\"sending\"`: the message is outgoing and is being sent.\n * - `\"sent\"`: the message is outgoing and was sent.\n * - `\"seen\"`: the message is outgoing and was seen by the other party.\n * - `\"unread\"`: the message is incoming and was not seen by this party.\n * - `\"read\"`: the message is incoming and was seen by this party.\n * @param {import(\"tdweb\").TdObject} chat The chat in which the message was sent.\n * @param {import(\"tdweb\").TdObject} message The message to check.\n */\nexport function getMessageStatus(chat, message) {\n    if(!chat || !message) return undefined;\n    if(message.is_outgoing) {\n        if(message.sending_state) {\n            return 'sending';\n        }\n        if(chat.last_read_outbox_message_id >= message.id) {\n            return 'seen';\n        }\n        return 'sent';\n    }\n    if(chat.last_read_inbox_message_id >= message.id) {\n        return 'read';\n    }\n    return 'unread';\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './search-box.scss';\nimport { info_close } from '../../../../ui/icon/icons';\n\n/**\n * Renders the search box.\n */\nexport default function SearchBox(props) {\n    return (\n        <div id=\"search-box\">\n            <input \n                placeholder=\"Search\"\n                value={props.value}\n                onChange={props.onChange}\n                {...props}/>\n            <button \n                className=\"clear\" \n                onClick={()=> props.onChange && props.onChange({target: {value: ''}})}\n                data-visible={(props.value || '').length}\n                dangerouslySetInnerHTML={{__html: info_close}}>\n            </button>\n        </div>\n    );\n}\nSearchBox.propTypes= {\n    value: PropTypes.string,\n    onChange: PropTypes.func\n};","import { createStore } from 'redux';\nimport TdLib from './tdlib';\n\nconst connectionStore = createStore(\n    (state = 'connectionStateConnecting', action) => {\n        switch (action.type) {\n        case 'SET_CONNECTION':\n            return  action.connection;\n        default:\n            return state;\n        }\n    }\n);\n\nTdLib.registerUpdateHandler('updateConnectionState', (update) => {\n    connectionStore.dispatch({\n        type: 'SET_CONNECTION',\n        connection: update.state['@type']\n    });\n});\nexport default connectionStore;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './nav-animation.scss';\n\n/**\n * Renders two navigation sections (outer and inner) with an animation between them\n * \n * You need to set a background color to the outer section. (it has the CSS class 'nav-animation-outer')\n */\nexport default function NavAnimation({ children, innerScreen, className, innerClass, state, mode, ...props }) {\n    return (\n        <div className={'nav-animation ' + mode + ' ' + state + ' ' + className} {...props}>\n            <div className=\"outer\">\n                {children}\n            </div>\n            {state!='closed' && \n                <div className={'inner ' + innerClass}>\n                    {innerScreen}\n                </div>\n            }\n        </div>\n    );\n}\nNavAnimation.propTypes = {\n    children: PropTypes.node.isRequired,\n    /**\n     * The type of animation to use:\n     * - `slide-over`: The parent screen swipes a little to left, while the child screen slides in from the right. \n     *   A shadow is also shown over the parent screen in the animation.\n     * - `swipe-fade`: More subtle animation, the parent screen fades out while moving left, while at the same time the child screen fades in from the right.\n     */\n    mode: PropTypes.oneOf(['slide-over', 'swipe-fade']),\n    /** The child screen content, only needed when open */\n    innerScreen: PropTypes.node,\n    /** The current state of the animation. Can be `open`, `closing` or `closed` */\n    state: PropTypes.oneOf(['open', 'closing', 'closed']),\n    /** The class name to apply to the outer element */\n    className: PropTypes.string,\n    /** The class name to apply to the inner element */\n    innerClass: PropTypes.string\n};\n\nexport function closeNavAnimation(getState, setState) {\n    // First set state to closing, which triggers the closing animation. After that, we can delete the element.\n    setState('closing');\n    setTimeout(() => {\n        if(getState() == 'closing') { // This condition is to prevent glitches when archive is opened again before 2s\n            setState('closed');\n        }\n    }, 2000);\n}\n","import React from 'react';\nimport { connect, Provider } from 'react-redux';\nimport ConnectionState from '../../../ui/components/connecting';\nimport ChatList from './chat-list';\nimport SearchBox from './search/search-box';\nimport HamburgerMenuButton from './hamburger-menu/menu-button';\nimport connectionStore from '../../../TdWeb/connectionStore';\nimport IconButton from '../../../ui/elements/icon-button';\nimport './chat-list-bar.scss';\nimport { info_back } from '../../../ui/icon/icons';\nimport chatStore from '../../chat-store';\nimport NavAnimation, { closeNavAnimation } from '../../../ui/elements/nav-animation';\n\n/**\n * Renders the navigation menu, containing chat list, search field and search results [and the main menu button]\n */\nconst ChatListBar = connect(function (state) {\n    return {\n        useFolders: (state.filters || []).length != 0,\n        chats: state.chats, \n        list: state.currentChatList,\n        archiveState: state.archiveState,\n        unread: state.unread\n    };\n})(function ChatListBar({useFolders, chats, list, archiveState, unread, onHamburgerMenuOpened}) {\n    var [searchText, setSearchText] = React.useState('');\n    \n    function closeArchive() {\n        closeNavAnimation(() => chatStore.getState().archiveState,\n            state => {\n                chatStore.dispatch({\n                    type: 'SET_ARCHIVE_STATE',\n                    archiveState: state\n                });\n            }\n        );\n    }\n\n    return (\n        <React.Fragment>\n            <NavAnimation \n                mode=\"slide-over\" \n                id=\"chat-list-bar\"\n                state={archiveState}\n                innerClass=\"archived-chats\"\n                innerScreen={\n                    <Provider store={connectionStore}>\n                        <div className=\"chat-list-header\">\n                            <IconButton icon={info_back} onClick={closeArchive}/>\n                            {unread.main.unread_unmuted_messages_count? (\n                                <div className=\"unread-badge\">\n                                    <span>{unread.main.unread_unmuted_messages_count}</span>\n                                </div>\n                            ): null}\n                            <div className=\"title\">Archived chats</div>\n                        </div>\n                        <ChatList chats={chats} list={{'@type': 'chatListArchive'}} unread={unread}/>\n                    </Provider>\n                }>\n                <div className=\"chat-list-header\">\n                    {(!useFolders) && <HamburgerMenuButton.WithoutFolders onClick={onHamburgerMenuOpened}/>}\n                    <SearchBox value={searchText} onChange={e => setSearchText(e.target.value)}/>\n                </div>\n                <Provider store={connectionStore}>\n                    <ChatList chats={chats} list={list} unread={unread}/>\n                </Provider>\n            </NavAnimation>\n            <Provider store={connectionStore}>\n                <ConnectionState/>\n            </Provider>\n        </React.Fragment>\n    );\n});\nexport default ChatListBar;\n","/**\n * There are 3 ways to import the items\n * 1. import each component from the respective file\n * 2. import each component from tool-strip.js\n * 3. import the default export from tool-strip.js and access the object members\n * You can use whichever you want.\n */\n\nimport ToolStripButton from './button';\nimport ToolStripSection from './section';\n\n/**\n * A collection of different components to create a generic menu.\n * \n * Contains sections, menu-items, two kinds of separators, switches, check-boxes, etc.s\n */\nconst ToolStrip = {\n    Button: ToolStripButton,\n    Section: ToolStripSection\n};\nexport default ToolStrip;\nexport { ToolStripButton, ToolStripSection };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport RippleEffect, {handleMyMouseEventsFunction} from '../elements/ripple-effect';\nimport './button.scss';\n\n/**\n * Renders a tool strip button. Has an icon and children, if provided will align to the right.\n */\nexport default function ToolStripButton({icon, text, children, ...rest}) {\n    const ripple = React.useState({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave]= handleMyMouseEventsFunction(ripple);\n    return (\n        <div className=\"tool-strip-button\" {...rest}\n            onMouseDown={mouseDown} onMouseUp={mouseUp} onMouseLeave={mouseLeave}>\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-windowBgRipple)\"/>\n            <div className=\"content\">\n                <div className=\"icon\" dangerouslySetInnerHTML={{__html: icon}}></div> \n                <div className=\"title\">{text}</div>\n                {children && (\n                    <div className=\"right\">\n                        {children}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\nToolStripButton.propTypes = {\n    /** Icon HTML */\n    icon: PropTypes.string,\n    /** Button text */\n    text: PropTypes.string,\n    /** Optionally, an element to show aligned to right */\n    children: PropTypes.node\n};","import React from 'react';\nimport './section.scss';\n\n/**\n * Renders a tool strip section. Use different sections when using separators.\n */\nexport default function Section(props) {\n    return <div className=\"tool-strip-section\" {...props}/>;\n}\n// Too simple for a separate file, no?","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './menu.scss';\nimport TdLib from '../../../../TdWeb/tdlib';\nimport ProfilePhoto from '../../../../ui/components/profile-photo';\nimport { getChatsFromList } from '../chat-list';\nimport chatStore from '../../../chat-store';\nimport { archive_userpic, menu_settings } from '../../../../ui/icon/icons';\nimport { connect, Provider } from 'react-redux';\nimport { createContextMenu } from '../../../../ui/menu/context-menu';\nimport Menu from '../../../../ui/menu/menu';\nimport ScrollView from '../../../../ui/scroll/scrollbar';\nimport LinkButton from '../../../../ui/elements/link-button';\nimport version from '../../../../../version';\nimport Dialogs, { addDialog, dialogStore } from '../../../../ui/dialog/dialogs';\nimport ConfirmDialog from '../../../../ui/dialog/confirm-dialog';\nimport ToolStrip from '../../../../ui/tool-strip/tool-strip';\n\n/**\n * Renders the main menu (always rendered but not always visible)\n */\nconst HamburgerMenu= connect(state=> ({\n    chats: state.chats,\n    archiveButtonState: state.archiveButtonState,\n})) (\n    function HamburgerMenu ({visible, onClose, chats, archiveButtonState}) {\n        const [me, setMe] = React.useState(null);\n        React.useEffect(() => {\n            TdLib.sendQuery({ // Get current user info\n                '@type': 'getMe'\n            }).then(result => {\n                // Format phone number and put it in state\n                if(result.phone_number) {\n                    TdLib.sendQuery({\n                        '@type': 'getPhoneNumberInfo',\n                        phone_number_prefix: result.phone_number\n                    }).then(info => {\n                        // Format phone number\n                        if(info.country_calling_code){\n                            result.phone_number= `+${info.country_calling_code} ${info.formatted_phone_number}`;\n                        }\n                        setMe(result);\n                    });\n                } \n                else setMe(result);\n            });\n        }, []); // equivalent to componentDidMount\n\n        /**@type React.KeyboardEventHandler<HTMLDivElement> */\n        function onKeyDown (e){\n            // `Esc` closes the menu\n            if(e.key === 'Escape') {\n                onClose();\n            }\n        }\n        // Autofocus menu\n        var ref = React.useRef(null);\n        React.useEffect(() => {\n            if(visible) {\n                ref.current.focus();\n            }\n        }, [visible]);\n\n        // Get chats from archive to see if archive button should be shown\n        const showArchivedChats = getChatsFromList(chats, {'@type': 'chatListArchive'}).length > 0;\n\n        return (\n            <div id=\"hamburger-menu\" ref={ref} className={visible ? 'visible' : ''} \n                onKeyDown={onKeyDown} tabIndex={0}>\n                <div className=\"content\">\n                    <div className=\"header\">\n                        <div className=\"row-1\">\n                            <ProfilePhoto \n                                id={me?.id || 0} \n                                name={(me?.first_name || '') + (me?.last_name? (' ' + me.last_name) : '')} \n                                photo={me?.profile_photo?.small}\n                                disableSavedMessages={true}/>\n                            <div className=\"buttons\">\n                                {(showArchivedChats && (['hidden-collapsed', 'hidden-expanded'].includes(archiveButtonState))) && (\n                                    <button \n                                        className=\"button\" \n                                        dangerouslySetInnerHTML={{__html: archive_userpic}}\n                                        onClick={() => {\n                                            chatStore.dispatch({\n                                                type: 'SET_ARCHIVE_STATE',\n                                                archiveState: 'open'\n                                            });\n                                            onClose();\n                                        }}\n                                        onContextMenu={e=> createContextMenu(e, (\n                                            <Menu.MenuContents>\n                                                <Menu.MenuItem onClick={()=> {\n                                                    const newState= {'hidden-collapsed': 'collapsed', 'hidden-expanded': 'expanded'}[archiveButtonState];\n                                                    chatStore.dispatch({\n                                                        type: 'SET_ARCHIVE_BUTTON_STATE',\n                                                        archiveButtonState: newState\n                                                    });\n                                                    localStorage.setItem('dibgram-archived-chats-button-mode', newState);\n                                                    onClose();\n                                                }}>Move to chats list</Menu.MenuItem>\n                                            </Menu.MenuContents>\n                                        ))}/>\n                                )}\n                            </div>\n                        </div>\n                        <div className=\"row-2\">\n                            <div className=\"name\">\n                                {me?.first_name} {me?.last_name || ''}\n                            </div>\n                            <div className=\"phone-number\">\n                                {me?.phone_number}\n                            </div>\n                        </div>\n                    </div>\n                    <ScrollView>\n                        <div className=\"scroll-content\">\n                            <div className=\"options\">\n                                <ToolStrip.Section>\n                                    <ToolStrip.Button icon={menu_settings} text={'Log out'} onClick={()=> {\n                                        // Log out\n                                        onClose();\n                                        addDialog('log-out-from-main-menu-confirm-dialog',\n                                            <ConfirmDialog \n                                                id=\"log-out-from-main-menu-confirm-dialog\"\n                                                OKButtonText=\"Log out\" onOK={()=> {\n                                                    TdLib.sendQuery({\n                                                        '@type': 'logOut'\n                                                    });\n                                                }} attention={true}>\n                                                Are you sure you want to log out?\n                                            </ConfirmDialog>\n                                        );\n                                    }}/>\n                                </ToolStrip.Section>\n                            </div>\n                            <div className=\"about\">\n                                <div className=\"row-1\">\n                                    <LinkButton href=\"https://github.com/DIBgram/DIBgram\">DIBgram</LinkButton>\n                                </div>\n                                <div className=\"row-2\">\n                                    <LinkButton href=\"https://github.com/DIBgram/DIBgram/releases/\">Version {version}</LinkButton> ­– <LinkButton onClick={()=> {\n                                        // About DIBgram\n                                        onClose();\n                                        addDialog('main-menu-about-dibgram-dialog', (\n                                            <ConfirmDialog id=\"main-menu-about-dibgram-dialog\"\n                                                width=\"390px\" title=\"DIBgram\" OKButtonText=\"CLOSE\"\n                                                hideCancelButton={true}>\n\n                                                <LinkButton className=\"version link-button\"\n                                                    style={{color: 'var(--theme-color-windowSubTextFg)'}} \n                                                    href=\"https://github.com/DIBgram/DIBgram/releases/\">\n                                                        version {version}\n                                                </LinkButton>\n\n                                                <p>Unofficial Telegram app based on <LinkButton href=\"https://core.telegram.org/tdlib\">TDLib</LinkButton> for speed and security.</p>\n\n                                                <p>This software is licensed under <LinkButton href=\"https://github.com/DIBgram/DIBgram/blob/main/LICENSE\">GNU GPL</LinkButton> version 3.<br/>\n                                                Source code is available on <LinkButton href=\"https://github.com/DIBgram/DIBgram\">GitHub</LinkButton>.</p>\n\n                                                <p>Visit the <LinkButton href=\"https://telegram.org/faq\">Telegram FAQ</LinkButton> for more info.</p>\n                                            </ConfirmDialog>\n                                        ));\n                                    }}>\n                                        About\n                                    </LinkButton>\n                                </div>\n                            </div>\n                        </div>\n                    </ScrollView>\n                </div>\n                <Provider store={dialogStore}>\n                    <Dialogs className=\"shadow\" onClick={onClose}/>\n                </Provider>\n            </div>\n        );\n    });\nHamburgerMenu.propTypes = {\n    visible: PropTypes.bool.isRequired,\n    onClose: PropTypes.func\n};\nexport default HamburgerMenu;\n","import React from 'react';\nimport ChatFoldersList from './sections/navigation-menu/chat-folders';\nimport ChatListBar from './sections/navigation-menu/chat-list-bar';\nimport chatStore from './chat-store';\nimport { Provider } from 'react-redux';\nimport './messengerWindow.scss';\nimport HamburgerMenu from './sections/navigation-menu/hamburger-menu/menu';\nimport {Resizable} from 're-resizable';\n\n/**\n * Renders the messenger screen\n */\nexport function MessengerWindow () {\n\n    const [isMenuOpen, setIsMenuOpen] = React.useState(false);\n\n    return (\n        <div id=\"messenger-screen\">\n            <Provider store={chatStore}>\n                <HamburgerMenu visible={isMenuOpen} onClose={()=> setIsMenuOpen(false)}/>\n                <ChatFoldersList onHamburgerMenuOpened={()=> setIsMenuOpen(true)}/>\n                <Resizable defaultSize={{width: 260}} minWidth={260}\n                    className=\"chat-list-bar-container\" handleClasses={{right: 'chat-list-bar-resize-handle'}}\n                    enable={{top: false, right: true, bottom: false, left: false, topRight: false, bottomRight: false, bottomLeft: false, topLeft: false}}>\n                    <ChatListBar onHamburgerMenuOpened={()=> setIsMenuOpen(true)}/>\n                </Resizable>\n            </Provider>\n            <div id=\"chat-container\">\n                \n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport RippleEffect, {handleMyMouseEvents} from './ripple-effect';\n\n/**\n * Renders a BIG button which is filled with accent color\n */\nexport default class BigHighlightedButton extends React.Component{\n    static propTypes= {\n        /** Fires when the button is clicked */\n        onClick: PropTypes.func,\n        /** The button's content */\n        children: PropTypes.node.isRequired\n    };\n    state= {\n        ripple: {\n            state: 'off'\n        }\n    }\n    constructor() {\n        super();\n        [this.mouseDown, this.mouseUp, this.mouseLeave]= handleMyMouseEvents(this);\n    }\n\n    render () {\n        return (\n            <button \n                className=\"big-highlighted-button\" \n                onClick={this.props.onClick}\n                onMouseDown={this.mouseDown}\n                onMouseUp={this.mouseUp}\n                onMouseLeave={this.mouseLeave}>\n\n                <RippleEffect {...this.state.ripple} color=\"var(--theme-color-activeButtonBgRipple)\"/>\n                <div className=\"content\">\n                    {this.props.children}\n                </div>\n            </button>\n        );\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Renders a beautiful field with a title and underline\n */\nexport default class UnderlinedInput extends React.Component {\n    constructor(args) {\n        super(args);\n\n        this.state= {\n            inactive: false,\n            mouseX: '50%',\n            titleClass: this.getTitleClass(this.props.autoFocus)\n        };\n    }\n\n    getTitleClass (focus) {\n        return (focus || (!!this.props.value)) ? 'title top' : 'title placeholder';\n    }\n\n    render () {\n        var className='underlined-input';\n        if(this.state.inactive) {\n            className+=' inactive';\n        }\n        if(this.props.autoFocus) {\n            className+=' autoFocus';\n        }\n        if(this.props.invalid) {\n            className+=' invalid';\n        }\n        return (\n            <div className={className}\n                style={{'--mouse-left': this.state.mouseX || '50%'}}>\n                { this.props.title ? (\n                    <div className={this.state.titleClass}>{this.props.title}</div>\n                ) : null }\n                <input \n                    type={this.props.type} \n                    onChange={this.props.onChange} \n                    value={this.props.value}\n                    onMouseDown={this.handleMouseDown}\n                    onFocus={this.handleFocus}\n                    onBlur={this.handleBlur}\n                    autoFocus={this.props.autoFocus || false}\n                    onKeyDown={this.handleKeyDown}\n                    maxLength={this.props.maxLength}\n                    onCopy={e=> {\n                        if(this.props.disableCopy) {\n                            e.preventDefault();\n                        }\n                    }}/>\n                <div className=\"underline\"></div>\n            </div>\n        );\n    }\n\n    handleFocus =()=>{\n        this.setState({\n            inactive: false,\n            titleClass: this.getTitleClass(true)\n        });\n    }\n    handleBlur =()=>{\n        this.setState({\n            inactive: true, \n            mouseX: '50%',\n            titleClass: this.getTitleClass(false)\n        });\n    }\n    handleMouseDown =(e)=>{\n        this.setState({\n            mouseX: e.nativeEvent.offsetX+'px'\n        });\n    }\n    handleKeyDown =(e)=>{\n        if(e.key=='Enter') {\n            this.props.onEnterKeyPressed && this.props.onEnterKeyPressed();\n        }\n        if(this.props.preventNumberScrolling) {\n            if(e.key=='ArrowUp' || e.key=='ArrowDown') {\n                e.preventDefault();\n            }\n        }\n    }\n\n}\nUnderlinedInput.propTypes = {\n    /** Input type, can be `text`, `number`, `password`, `email`, `url` */\n    type: PropTypes.oneOf(['text', 'number', 'password', 'email', 'url']).isRequired,\n    /** Fired when input is modified */\n    onChange: PropTypes.func,\n    /** Input value */\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    /** The maximum number of characters the input can have */\n    maxLength: PropTypes.number,\n    active: PropTypes.bool,\n    /** If set to true, the input will gain focus when it renders */\n    autoFocus: PropTypes.bool,\n    /** Fires when the 'Enter' key is pressed */\n    onEnterKeyPressed: PropTypes.func,\n    /** Input title/placeholder */\n    title: PropTypes.string,\n    /** If true, the input will become red */\n    invalid: PropTypes.bool,\n    /** If true, text cannot be copied from the input */\n    disableCopy: PropTypes.bool,\n    /** If true, up and down buttons cannot change input value */\n    preventNumberScrolling: PropTypes.bool\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TdLib from '../TdWeb/tdlib';\nimport Auth from '../TdWeb/auth';\nimport {MessengerWindow} from '../messenger/messengerWindow';\n\nimport BigHighlightedButton from '../ui/elements/highlighted-button';\nimport UnderlinedInput from '../ui/elements/underlined-input';\nimport ConnectionState from '../ui/components/connecting';\nimport { addDialog } from '../ui/dialog/dialogs';\nimport ConfirmDialog from '../ui/dialog/confirm-dialog';\n\nimport './auth.scss';\nimport { Provider } from 'react-redux';\nimport connectionStore from '../TdWeb/connectionStore';\nimport LinkButton from '../ui/elements/link-button';\n\nvar initialAuthState = {'@type': undefined};\nexport function setInitialAuthState(state) {\n    initialAuthState=state;\n}\n\n/**\n * Start managing a status text block with fade effects.  \n * Usage:\n * ```js\n * // constructor\n * manageStatusTextContent(this);\n * \n * // render\n * <Status/>\n * \n * // TdLib.sendQuery({...}).then\n * this.changeStatus(\"Wrong code\")\n * \n * // state\n * {\n *   statusContent: '',\n *   statusVisible: false\n * }\n * ```\n * \n * @param {React.Component} thisClass pass `this` as this argument\n * @returns Store this function and call it to change \n */\nfunction manageStatusTextContent(thisClass) {\n    thisClass.Status= function Status(){\n        return (\n            <div className={'status'+ (thisClass.state.statusVisible?'':' hidden')}>{thisClass.state.statusContent}</div>\n        );\n    };\n    thisClass.changeStatus= function(string){\n        if(string) {\n            thisClass.setState({\n                statusContent: string,\n                statusVisible: true\n            });\n        } else {\n            thisClass.setState({\n                statusVisible: false\n            });\n            setTimeout(() => {\n                if(!thisClass.state.statusVisible) { // Prevent timeout overlapping with later status changes\n                    thisClass.setState({\n                        statusContent: null\n                    });\n                }\n            }, 1000);\n        }\n    };\n}\n\n/**\n * Renders the messenger or authorization screens (layer 1). Does not include dialogs and toasts\n */\nexport class MainApp extends React.Component {\n    state= {\n        step: initialAuthState\n    };\n\n    componentDidMount(){\n        // Change `setInitialAuthState` to update state, because we don't use `initialAuthState` anymore\n        // eslint-disable-next-line no-func-assign\n        setInitialAuthState= state=> {\n            this.setState({step: state});\n        };\n\n        // Handle authorization state updates\n        TdLib.registerUpdateHandler('updateAuthorizationState', this.handleAuthStateUpdate);\n    }\n\n    handleAuthStateUpdate= update => {\n        // Some authorization states are handled without the user knowing. We don't change what's shown to the users if that happens.\n        const states= [\n            'authorizationStateWaitPhoneNumber',\n            'authorizationStateWaitCode',\n            'authorizationStateWaitPassword',\n            'authorizationStateWaitRegistration',\n            'authorizationStateReady',\n            'authorizationStateClosed',\n        ];\n        const state=update['authorization_state'];\n        if(states.includes(state['@type'])) {\n            this.setState({step: state});\n        }\n    };\n    \n    render () {\n        switch (this.state.step['@type']) {\n        case 'authorizationStateWaitPhoneNumber':\n            // Enter your phone number\n            return (\n                <AuthWindowStepPhoneNumber/>\n            );\n\n        case 'authorizationStateWaitCode':\n            // Enter the verification code sent to you\n            return (\n                <AuthWindowStepCode info={this.state.step.code_info}/>\n            );\n\n        case 'authorizationStateWaitPassword':\n            // Enter your 2-factor auth password\n            return (\n                <AuthWindowStepPassword info={this.state.step}/>\n            );\n\n        case 'authorizationStateWaitRegistration':\n            // There isn't an account on this number, you need to sign up\n            return (\n                <AuthWindowStepRegister/>\n            );\n\n        case 'authorizationStateReady':\n            // Logged in\n            return (\n                <MessengerWindow/>\n            );\n\n        case 'authorizationStateClosed':\n            // TDLib session is closed.\n            window.location.reload();\n            return (\n                <p>This session is closed. Please wait till DIBgram reloads automatically...</p>\n            );\n        \n        default:\n            // TDLib is still loading\n            return <p>Loading...</p>;\n        }\n    }\n}\n\n/**\n * Renders the phone number step of authorization screen\n */\nclass AuthWindowStepPhoneNumber extends React.Component {\n    constructor(args) {\n        super(args);\n        manageStatusTextContent(this);\n    }\n    state= {\n        number: '',\n        invalid: false,\n        statusContent: '',\n        statusVisible: false\n    };\n    handlePNFieldChange = (event) => {\n        this.setState({\n            number: event.target.value,\n            invalid: false // We shouldn't show the phone number as invalid, since it has changed after submission\n        });\n        this.changeStatus(''); // The same\n    }\n    submitNumber= async () => {\n        Auth.givePhoneNumber(this.state.number).catch(reason=> {\n            switch(reason.message){\n            case 'PHONE_NUMBER_FLOOD':\n                addDialog( 'phone_number_flood_error',\n                    <ConfirmDialog width=\"320px\" hideCancelButton={true} id=\"phone_number_flood_error\">\n                        Sorry, you have deleted and re-created your account too many times recently.<br/>\n                        Please wait for a few days before signing up again.\n                    </ConfirmDialog>\n                );\n                this.changeStatus('');\n                break;\n\n            case 'PHONE_NUMBER_INVALID':\n                this.setState({invalid: true});\n                this.changeStatus('Invalid phone number. Please try again.');\n                break;\n\n            case 'Another authorization query has started': \n                break;\n\n            default:\n                // We don't know what error it is, so just show it to the user, he/she might understand it.\n                this.setState({invalid: false});\n                this.changeStatus(reason.message);\n                break;\n            }\n        });\n    }\n    render () {\n        const Status=this.Status;\n        return (\n            <div id=\"auth\" className=\"auth-step-phoneNumber\">\n\n                <h2>Your Phone Number</h2>\n\n                <p className=\"description\">\n                    Please confirm your country code and enter your mobile phone number.\n                </p>\n\n                {\n                    //TODO: Add a country code selector  \n                    //TODO: Separate the country code from the phone number\n                    //TODO: Add phone number placeholder\n                }\n                <UnderlinedInput \n                    type=\"number\" \n                    value={this.state.number} \n                    autoFocus={true}\n                    onChange={this.handlePNFieldChange}\n                    onEnterKeyPressed={this.submitNumber}\n                    invalid={this.state.invalid}\n                    preventNumberScrolling={false}/>\n\n                <Status/>\n\n                <BigHighlightedButton \n                    onClick={this.submitNumber}>\n                    NEXT\n                </BigHighlightedButton>\n\n                <Provider store={connectionStore}>\n                    <ConnectionState/>\n                </Provider>\n            </div>\n        );\n    }\n}\n\n/**\n * Renders verification code step of authorization screen\n */\nclass AuthWindowStepCode extends React.Component {\n    static propTypes= {\n        info: PropTypes.object\n    };\n    constructor(args) {\n        super(args);\n        manageStatusTextContent(this);\n    }\n    state= {\n        code: '',\n        invalid: false,\n        statusContent: '',\n        statusVisible: false\n    };\n\n    handleCodeFieldChange= (event) => {\n        this.setState({\n            code: event.target.value,\n            invalid: false // Verification code is changed, and we don't know if it is correct or not. Do not show it as invalid anymore\n        });\n        this.changeStatus('');\n        if(event.target.value.length==this.props.info.type.length) { // Automatically submit code if it is filled in\n            this.handleContinueButton(event.target.value);\n        }\n    }\n    handleContinueButton= (code) => {\n        // `code` might be the authorization code, or an event object. If it is not the authorization code, get it ourselves\n        if(typeof code != 'string') {\n            code= undefined;\n        }\n        code = code || this.state.code;\n\n        if(code.length!=this.props.info.type.length) return; // The code is not complete. It is definitely wrong.\n\n        Auth.checkAuthCode(code).catch(reason=> {\n            if(reason.message==='PHONE_CODE_INVALID'){\n                this.setState({invalid: true});\n                this.changeStatus('You have entered an invalid code.');\n            }\n            else {\n                // We don't know the error, all we can do is to just inform the user about it\n                this.setState({invalid: true});\n                this.changeStatus(reason.message);\n            }\n        });\n    }\n    render () {\n        const Status = this.Status;\n\n        var message= (this.props.info.type['@type']=='authenticationCodeTypeSms') ?\n            (<p className=\"description\">\n                We&apos;ve sent an activation code to your phone. <br/>\n                Please enter it below.\n            </p>) \n            :\n            (<p className=\"description\">\n                A code was sent <strong>via Telegram</strong> to your other devices, if you have any connected.\n            </p>);\n            \n        return (\n            <div id=\"auth\" className=\"auth-step-code\">\n\n                <h2>{this.props.info.phone_number}</h2>\n\n                {message}\n\n                <UnderlinedInput \n                    type=\"number\" \n                    value={this.state.code} \n                    onChange={this.handleCodeFieldChange}\n                    autoFocus={true}\n                    title=\"Code\"\n                    maxLength={this.props.info.type.length}\n                    onEnterKeyPressed={this.handleContinueButton}\n                    invalid={this.state.invalid}\n                    preventNumberScrolling={true}/>\n\n                <Status/>\n\n                <BigHighlightedButton \n                    onClick={this.handleContinueButton}>\n                    NEXT\n                </BigHighlightedButton>\n\n                <Provider store={connectionStore}>\n                    <ConnectionState/>\n                </Provider>\n            </div>\n        );\n    }\n}\n\n/**\n * Renders 2FA password step of authorization screen\n */\nclass AuthWindowStepPassword extends React.Component {\n    constructor(args) {\n        super(args);\n        manageStatusTextContent(this);\n    }\n    static propTypes= {\n        info: PropTypes.object\n    };\n    state= {\n        password: '',\n        invalid: false,\n        statusContent: '',\n        statusVisible: false\n    };\n    handlePasswordFieldChange= (event) => {\n        this.setState({\n            password: event.target.value,\n            invalid: false, // Password was changed, and we don't know if it is wrong or not. We should not show it as wrong\n        });\n        this.changeStatus(''); // Same\n    }\n    handleContinueButton= async () => {\n        Auth.check2FACode(this.state.password).catch(reason=> {\n            if(reason.message=='PASSWORD_HASH_INVALID') {\n                this.setState({invalid: true});\n                this.changeStatus('You have entered a wrong password.');\n            }\n            else {\n                // We don't know what the error is, so all we can do is to show it to the user\n                this.setState({invalid: true});\n                this.changeStatus(reason.message);\n            }\n        });\n    }\n    render () {\n        const Status=this.Status;\n        return (\n            <div id=\"auth\" className=\"auth-step-password\">\n                <div className=\"content\">\n\n                    <h2>Cloud password check</h2>\n\n                    <p className=\"description\">\n                        Please enter your cloud password.\n                    </p>\n\n                    <UnderlinedInput \n                        type={'webkitTextSecurity' in document.body.style ? 'text' : 'password'} \n                        value={this.state.password} \n                        onChange={this.handlePasswordFieldChange}\n                        autoFocus={true} \n                        title=\"Your cloud password\"\n                        onEnterKeyPressed={this.handleContinueButton}\n                        disableCopy={true}\n                        invalid={this.state.invalid}/>\n\n                    <div className=\"hint\">\n                        {this.props.info.password_hint?'Hint: ':<span>&nbsp;</span>}{this.props.info.password_hint}\n                    </div>\n\n                    <div className=\"forgot-password\">\n                        <LinkButton>Forgot password?</LinkButton>\n                    </div>\n\n                    <Status/>\n\n                    <BigHighlightedButton \n                        onClick={this.handleContinueButton}>\n                        SUBMIT\n                    </BigHighlightedButton>\n\n                    <Provider store={connectionStore}>\n                        <ConnectionState/>\n                    </Provider>\n                </div>\n            </div>\n        );\n    }\n}\n\n/**\n * Render sign up step of authorization screen\n */\nclass AuthWindowStepRegister extends React.Component {\n    state= {\n        firstName: '',\n        lastName: '',\n        statusContent: '',\n        statusVisible: false\n    };\n    handleFirstNameFieldChange= (event) => {\n        this.setState({firstName: event.target.value});\n    }\n    handleLastNameFieldChange= (event) => {\n        this.setState({lastName: event.target.value});\n    }\n    handleContinueButton= async () => {\n        await Auth.registerNewAccount(this.state.firstName, this.state.lastName).catch(reason=> {\n            this.setState({textUnderField: reason.message});\n        });\n    }\n    render () {\n        return (\n            <div id=\"auth\" className=\"auth-step-signup\">\n                <div className=\"content\">\n\n                    <h2>Your info</h2>\n\n                    <p className=\"description\">\n                        Please enter your name and upload a photo.\n                    </p>\n\n                    <UnderlinedInput \n                        type=\"text\" \n                        value={this.state.firstName} \n                        onChange={this.handleFirstNameFieldChange}\n                        autoFocus={true} />\n\n                    <UnderlinedInput \n                        type=\"text\" \n                        value={this.state.lastName} \n                        onChange={this.handleLastNameFieldChange} />\n\n                    <div className=\"status\">\n                        {this.state.textUnderField || ''}\n                    </div>\n\n                    <BigHighlightedButton \n                        onClick={this.handleContinueButton}>\n                        SIGN UP\n                    </BigHighlightedButton>\n\n                    <Provider store={connectionStore}>\n                        <ConnectionState/>\n                    </Provider>\n                </div>\n            </div>\n        );\n    }\n}\n","import TdLib from './tdlib';\n\n/**\n * Sets initial online state\n */\nexport default function setInitialOnlineStatus(){\n    TdLib.sendQuery({\n        '@type': 'setOption',\n        name: 'online',\n        value: {\n            '@type': 'optionValueBoolean',\n            value: document.hasFocus()\n        }\n    });\n}\n\nwindow.onfocus = () => { // Become online when tab/window focuses\n    TdLib.sendQuery({\n        '@type': 'setOption',\n        name: 'online',\n        value: {\n            '@type': 'optionValueBoolean',\n            value: true\n        }\n    });\n};\n\nwindow.onblur = () => { // Become offline when switching tabs/windows\n    TdLib.sendQuery({\n        '@type': 'setOption',\n        name: 'online',\n        value: {\n            '@type': 'optionValueBoolean',\n            value: false\n        }\n    });\n};","// DIBgram themes are converted to CSS in runtime here.\n\nexport function convertThemeToCSS(theme){ // Convert theme colors to CSS vars\n    var css={};\n    for(const name in theme){\n        var obj= theme[name];\n        if(typeof obj.value == 'string') {\n            css['--theme-color-' + name]= obj.value;\n        } else if(typeof obj.value == 'object') { // A color is equal to another color\n            css['--theme-color-' + name]= `var(--theme-color-${obj.value.equals})`;\n        }\n    }\n    return css;\n}","import React from 'react';\nimport classic from './classic.json';\nimport day from './day.json';\nimport tinted from './tinted.json';\nimport night from './night.json';\nimport { convertThemeToCSS } from './dibgram-theme-to-css';\n\nconst themes = { day, classic, tinted, night };\nexport var currentTheme= 'night';\n\n/**\n * All children of this component will be rendered with the theme. Can be treated as a div.\n */\nexport function ThemeProvider(props) {\n    return (\n        <div \n            data-theme-is-dark={isThemeDark}\n            {...props} \n            style={convertThemeToCSS({...classic, ...themes[currentTheme]})}\n        />\n    );\n}\n\nconst isThemeDark=themes[currentTheme].isDark.value;\nexport {isThemeDark};","import React from 'react';\nimport { Provider } from 'react-redux';\nimport {MainApp, setInitialAuthState} from './dibgram/auth/auth-screen';\nimport setInitialOnlineStatus from './dibgram/TdWeb/online-handler';\nimport TdLib from './dibgram/TdWeb/tdlib';\nimport ConfirmDialog from './dibgram/ui/dialog/confirm-dialog';\nimport {addDialog} from './dibgram/ui/dialog/dialogs';\nimport { toastStore, Toasts } from './dibgram/ui/dialog/toast';\nimport './dibgram/ui/main.scss';\nimport { ContextMenus, contextMenusStore, onAnywhereClicked } from './dibgram/ui/menu/context-menu';\nimport { ThemeProvider } from './dibgram/ui/themes/theme';\n\nTdLib.initializeTdLib().then(function (res) {\n    setInitialAuthState(res);\n    setInitialOnlineStatus();\n});\n\nif(process.env.NODE_ENV== 'development') {\n    window['sendQuery']= TdLib.sendQuery;\n}\n\n/**\n * Renders the whole React app\n */\nfunction App() {\n    React.useEffect(() => { // A fatal error occurred in TdLib\n        TdLib.registerUpdateHandler('updateFatalError', window.simulateFatalError=  function (update) {\n            console.error('Fatal error:', update.error);\n            \n            addDialog( 'tdlib_fatal_error',\n                <ConfirmDialog \n                    width=\"400px\" \n                    hideCancelButton={true} \n                    id=\"tdlib_fatal_error\" \n                    thirdButton=\"Refresh\"\n                    onThirdButtonClick={window.location.reload.bind(window.location)}\n                    thirdButtonClosesDialog={false}\n                    title=\"Fatal Error\">\n                    \n                    A fatal error occurred in TdLib.<br/> \n                    Try refreshing, clearing site data or opening \n                    DIBgram in a private window. <br/>\n                    If none of these helped, report this to the developers \n                    by <a href=\"https://github.com/DIBgram/DIBgram/issues/new/choose\" rel=\"noreferrer\" target=\"_blank\"\n                        style={{color: 'var(--theme-color-windowActiveTextFg)'}}>filing an issue.</a>\n                    <br/><br/>\n                    <pre>{update.error.toString()}</pre>\n                </ConfirmDialog>\n            );\n        });\n    }, []);\n\n    return (\n        <ThemeProvider id=\"app\" onClick={onAnywhereClicked}>\n            <Provider store={toastStore}>\n                <Toasts/>\n            </Provider>\n            <MainApp/>\n            <Provider store={contextMenusStore}>\n                <ContextMenus/>\n            </Provider>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\n/* eslint-disable indent */\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import './remove-item-from-array';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}