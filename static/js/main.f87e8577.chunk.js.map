{"version":3,"sources":["remove-item-from-array.js","dibgram/TdWeb/tdlib.ts","dibgram/TdWeb/config.js","dibgram/TdWeb/tdweb.js","dibgram/ui/icon/chat_filters/chat-filters.js","dibgram/ui/elements/ripple-effect.js","dibgram/ui/elements/icon-button.js","dibgram/ui/icon/icons.js","dibgram/messenger/sections/navigation-menu/hamburger-menu/menu-button.js","dibgram/messenger/chat-store.js","dibgram/ui/scroll/scrollbar.js","dibgram/messenger/sections/navigation-menu/chat-folders.js","dibgram/ui/elements/loading-spinner.js","dibgram/ui/components/connecting.js","dibgram/TdWeb/file.js","dibgram/TdWeb/options.js","dibgram/ui/img/TgLogo.png","dibgram/ui/components/profile-photo.js","dibgram/messenger/users-store.js","dibgram/messenger/payments/currency-tostring.js","dibgram/messenger/user-misc.js","dibgram/messenger/message/message-short-name.js","dibgram/messenger/message/message-summary-noicon.js","dibgram/ui/elements/link-button.js","dibgram/messenger/supergroup-store.js","dibgram/messenger/chat-misc.js","dibgram/time-tostring.js","dibgram/ui/menu/context-menu.js","dibgram/ui/menu/menu.js","dibgram/ui/dialog/toast.js","dibgram/ui/dialog/dialogs.js","dibgram/ui/elements/small-button.js","dibgram/ui/dialog/dialog.js","dibgram/ui/dialog/confirm-dialog.js","dibgram/messenger/sections/navigation-menu/chat-list.js","dibgram/messenger/message-misc.js","dibgram/messenger/sections/navigation-menu/search/search-box.js","dibgram/TdWeb/connectionStore.js","dibgram/ui/elements/nav-animation.js","dibgram/messenger/sections/navigation-menu/chat-list-bar.js","version.js","dibgram/ui/tool-strip/button.js","dibgram/ui/tool-strip/tool-strip.js","dibgram/ui/tool-strip/section.js","dibgram/ui/tool-strip/toggle-button.js","dibgram/ui/themes/dibgram-theme-to-css.js","dibgram/ui/themes/theme.js","dibgram/messenger/sections/navigation-menu/hamburger-menu/menu.js","dibgram/messenger/messengerWindow.js","dibgram/TdWeb/auth.js","dibgram/ui/elements/highlighted-button.js","dibgram/ui/elements/underlined-input.js","dibgram/auth/auth-step/phone-number.js","dibgram/auth/auth-step/verification-code.js","dibgram/auth/auth-step/cloud-password.js","dibgram/auth/auth-step/signup-profile-photo.js","dibgram/auth/auth-step/register.js","dibgram/auth/auth-screen.js","dibgram/TdWeb/online-handler.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["removeItemFromArray","item","i","this","length","splice","Array","prototype","remove","getUseTestDc","urlPar","URL","window","location","href","searchParams","get","TdLib","log","use_test_dc","log_updates","log_queries","op","useDatabase","instanceName","onUpdate","update","console","forEach","h","TdClient","sendQuery","type","handler","undefined","push","call","query","Promise","resolve","reject","send","then","result","error","chatFilerIcons","All","Bots","Channels","Custom","Groups","Private","Setup","Unread","Cat","Crown","Favorite","Flower","Game","Home","Love","Mask","Party","Sport","Study","Trade","Travel","Work","RippleEffect","props","small","X","Y","width","rX","rY","height","Math","hypot","abs","max","state","className","style","getMaxRadius","backgroundColor","color","React","Component","handleMyMouseEvents","This","e","ripple","setState","setTimeout","nativeEvent","offsetX","offsetY","target","clientWidth","clientHeight","bind","mouseUp","handleMyMouseEventsFunction","setRipple","up","IconButton","icon","rest","useState","onMouseDown","onMouseUp","onMouseLeave","dangerouslySetInnerHTML","__html","archive_userpic","HamburgerMenuButton","WithFolders","mouseDown","mouseLeave","id","onClick","PureComponent","WithoutFolders","chatStore","createStore","currentChatList","archiveState","archiveButtonState","localStorage","getItem","chats","filters","unread","main","archive","action","chatList","chat_list","unread_messages_count","unread_count","unread_unmuted_messages_count","unread_unmuted_count","chat_filter_id","total_chats_count","total_count","unread_chats_count","unread_unmuted_chats_count","marked_as_unread_chats_count","marked_as_unread_count","marked_as_unread_unmuted_chats_count","marked_as_unread_unmuted_count","chat","map","chat_id","changed","newChat","positions","position","compareChatList","list","payload","property","value","__REDUX_DEVTOOLS_EXTENSION__","registerUpdateHandler","dispatch","action_bar","default_disable_notification","draft_message","chat_filters","has_scheduled_messages","is_blocked","is_marked_as_unread","last_message","notification_settings","online_member_count","permissions","photo","last_read_inbox_message_id","last_read_outbox_message_id","reply_markup_message_id","title","unread_mention_count","list1","list2","ScrollView","scrollBarWidth","scrollRef","propsRest","mouseEntered","setMouseEntered","timeoutId","setTimeoutId","data-mouse-entered","renderTrackHorizontal","renderTrackVertical","renderThumbHorizontal","renderThumbVertical","onMouseEnter","clearTimeout","autoHide","autoHideTimeout","hideTracksWhenNotNeeded","ref","chatListScrollToTopEvent","ChatFolder","folder","active","icon_name","iconName","setIconName","useEffect","text","data-muted","connect","folders","currentFolder","onHamburgerMenuOpened","LoadingSpinner","percentage","percent","caps","trackColor","spin","transitionDuration","intervalNum","setInterval","clearInterval","size","PropTypes","number","isRequired","lineWidth","progressColor","string","includes","downloadFile","file_id","priority","onReject","catch","downloadCallbacks","file","local","is_downloading_completed","cachedFiles","blobToUrl","blob","webkitURL","createObjectURL","options","name","profileNameToInitials","words","replace","toUpperCase","split","ProfilePhoto","customIcon","setPhoto","photoObj","setPhotoObj","isServiceMessages","isSavedMessages","isReplies","mounted","enableCache","data","resolveFilePart","filePart","f","is_downloading_active","callback","getFileContent","disableSavedMessages","tgLogo","Initials","Fragment","src","getChatTypeId","supergroup_id","basic_group_id","user_id","usersStore","user","userId","status","currencyAmountToString","currency","total_amount","currencyObject","currencies","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","exp","getUserFullName","last_name","first_name","MessageShortName","message","content","emoji","game","poll","question","sticker","substr","MessageSummaryWithoutIcon","users","MayHaveCaptionThumbnail","caption","thumbnails","animation","minithumbnail","audio","file_name","performer","MayHaveCaption","SenderFullName","is_outgoing","discard_reason","members","member_user_ids","slice","join","sender","is_channel_post","deletedMember","includeYou","86400","604800","2678400","ttl","document","noGameTitleFallback","score","GameScoreWithTitle","lazy","message_id","game_message_id","default","Suspense","fallback","passportDataTypeToString","passportDataTypes","types","noInvoiceTitleFallback","PaymentInfoWithInvoiceTitle","invoice_message_id","is_secret","PinnedMessageMessage","venue","isVideo","video","domain_name","MessageSummarySender","part1","getState","getChatNoCache","LinkButton","children","click","open","supergroupStore","supergroup","isChatWithDeletedAccount","chatTitleOrDeletedAccount","smallDateTimeToString","date","TdLibDateToDate","now","Date","yesterday","getTime","lastWeek","hours","getHours","minutes","getMinutes","ampm","timeToString","getDay","weekdayToString","day","getDate","month","getMonth","year","String","getFullYear","dateToString","tdLibDate","ContextMenu","x","y","direction","setDirection","useRef","rect","current","getBoundingClientRect","documentElement","contextMenusStore","menu","ContextMenus","menus","createContextMenu","preventDefault","pageX","pageY","onAnywhereClicked","Menu","MenuContents","MenuItem","propTypes","node","Toast","closed","setClosed","addToast","toastStore","toast","Toasts","dialogStore","dialog","filter","addDialog","element","removeDialog","Dialogs","dialogs","data-dialog","el","SmallButton","attention","data-attention","Dialog","closing","createRef","close","ConfirmDialog","dialogRef","handleOK","onOK","handleCancel","onCancel","handleButton","largeFont","thirdButton","thirdButtonClosesDialog","onThirdButtonClick","hideCancelButton","OKButtonText","getChatsFromList","order","sort","a","b","order1","order2","ChatList","connectionState","scrollToTopVisible","chatListFinished","onScroll","visible","scrollTop","scrollToTop","view","scroll","top","behavior","nextProps","nextState","array","Chat","store","EmptyChatList","ChatListItem","getUser","is_pinned","chatType","is_channel","isVerified","is_verified","isChatVerified","messageStatus","sending_state","getMessageStatus","unreadBadge","unreadBadgeClass","mute_for","isOnline","onContextMenu","ChatContextMenu","data-online","input_message_text","movableChatLists","setMovableChatLists","chat_lists","code","ArchivedChatsItem","chatsInList","onArchiveOpen","setButtonState","moveToMainMenuToast","setItem","loadingFallBack","SearchBox","placeholder","onChange","data-visible","connectionStore","connection","NavAnimation","innerScreen","innerClass","mode","ChatListBar","useFolders","searchText","setSearchText","ToolStripButton","ToolStrip","Button","Section","ToggleButton","isActive","checked","readOnly","convertThemeToCSS","theme","css","obj","equals","themes","classic","tinted","night","getThemeFromStorage","matchMedia","matches","themeStore","ThemeProvider","data-theme-is-dark","isDark","HamburgerMenu","onClose","me","setMe","phone_number","phone_number_prefix","info","country_calling_code","formatted_phone_number","nightMode","setNightMode","focus","showArchivedChats","onKeyDown","key","tabIndex","profile_photo","newState","isNight","version","MessengerWindow","isMenuOpen","setIsMenuOpen","defaultSize","minWidth","handleClasses","right","enable","bottom","left","topRight","bottomRight","bottomLeft","topLeft","credentials","api_id","api_hash","auth_state","Auth","pass","first","last","BigHighlightedButton","UnderlinedInput","args","handleFocus","inactive","titleClass","getTitleClass","handleBlur","mouseX","handleMouseDown","handleKeyDown","onEnterKeyPressed","preventNumberScrolling","autoFocus","invalid","iRef","onFocus","onBlur","maxLength","onCopy","disableCopy","AuthWindowStepPhoneNumber","number_p","statusContent","statusVisible","ref1","ref2","handlePNFieldChange","event","changeStatus","handlePNFieldChange_p","callingCodes","country","startsWith","callingCode","value_new","submitNumber","givePhoneNumber","reason","manageStatusTextContent","Status","AuthWindowStepCode","handleCodeFieldChange","handleContinueButton","checkAuthCode","AuthWindowStepPassword","password","handlePasswordFieldChange","check2FACode","password_hint","SignUpProfilePic","image","alt","accept","AuthWindowStepRegister","firstName","lastName","handleFirstNameFieldChange","handleLastNameFieldChange","registerNewAccount","textUnderField","showTos","tos","files","initialAuthState","setInitialAuthState","thisClass","MainApp","step","handleAuthStateUpdate","code_info","terms_of_service","reload","onfocus","onblur","initializeTdLib","res","hasFocus","App","simulateFatalError","rel","toString","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onSuccess","ReactDOM","render","StrictMode","getElementById","process","origin","addEventListener","fetch","headers","response","contentType","indexOf","ready","unregister","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.f87e8577.chunk.js","sourcesContent":["// https://love2dev.com/blog/javascript-remove-from-array/#remove-from-array-splice\n/**\n * Removes an item from an array\n * @param {*} item The item to remove\n */\nexport default function removeItemFromArray(item) {\n    for( var i = 0; i < this.length; i++){ \n        if ( this[i] === item) { \n            this.splice(i, 1); \n        }\n    }\n}\n\nArray.prototype.remove= removeItemFromArray;","/* eslint-disable */\nimport { createTdClient } from './tdweb';\nimport {getConfig} from './config';\nimport TdApi from './td_api';\nimport removeItemFromArray from '../../remove-item-from-array';\nexport function getUseTestDc() {\n    var urlPar=new URL(window.location.href).searchParams.get('test');\n    if(urlPar){\n        return urlPar==='1' || urlPar==='true';\n    }\n    return false;\n}\n\nexport function getCurrentSessionId() {\n    return new URL(window.location.href).searchParams.get('account') || '1';\n}\n\n/**\n * Provides options to communicate with the Tdweb library\n */\nexport default class TdLib {\n    static #tdClient: any;\n    /** @type {[string: Array<Function>]} */\n    static #updateHandlers: {[key: string]: ((update: any) => void)[]}={};\n\n    /**\n     * Creates the instance of Tdweb\n     */\n    static async initializeTdLib() {\n        const {log}= getConfig();\n        TdLib.#tdClient= createTdClient({\n            useDatabase: true,\n            instanceName: ( getCurrentSessionId() ) + (getUseTestDc() ? 'test' : 'production'), // e.g. ?account=1&test=1 = '1test' or ?account=1&test=0 = '1production'\n            onUpdate: function (update: TdApi.td_Update) {\n                if(log.log_updates) {\n                    console.log('Update: ',update);\n                }\n                if(TdLib.#updateHandlers[update['@type']]){\n                    TdLib.#updateHandlers[update['@type']].forEach(h => h(update));\n                }\n            }\n        });\n        return await TdLib.sendQuery({'@type': 'getAuthorizationState'}); // It both starts TDLib and returns the authorization state\n    }\n\n    /**\n     * Listen for updates from TdLib\n     * @param type The type of the update to listen to. Look for TdLib API docs for types\n     * @param handler The function that gets called with the update object when the update is received\n     */\n    static registerUpdateHandler<T extends TdApi.td_Update>(type: TdApi.TdUpdateType<T>, handler: (update: T) => void): void {\n        if(TdLib.#updateHandlers[type]===undefined){\n            TdLib.#updateHandlers[type]= [];\n        }\n        TdLib.#updateHandlers[type].push(handler);\n    }\n\n    /**\n     * Remove an existing update handler\n     * @param {string} type The type of the update to remove handler from. Look for TdLib API docs for types\n     * @param {Function} handler The handler to remove\n     */\n    static unRegisterUpdateHandler<T extends TdApi.td_Update>(type: TdApi.TdUpdateType<T>, handler: (update: T) => void): void {\n        if(TdLib.#updateHandlers[type]===undefined){\n            return;\n        }\n        removeItemFromArray.call(TdLib.#updateHandlers[type], handler);\n    }\n\n    /**\n     * Send a request to the TdLib instance\n     * If the query contains an `@extra` field, the same field will be added to the result\n     * @param query The request to send. Consult TdLib & JSON interface API for help.\n     * @returns The result of the request\n     */\n    static sendQuery<T extends TdApi.TdFunction>(query: T): Promise<TdApi.TdFunctionReturn<T> | TdApi.td_Error> {\n        const {log}= getConfig();\n        if(log.log_queries) {\n            console.log('Query: ',query);\n        }\n        return new Promise((resolve, reject) => {\n            TdLib.#tdClient.send(query).then((result: TdApi.TdFunctionReturn<T>)=> {\n                if(log.log_queries) {\n                    console.log('Query result: ', result);\n                }\n                resolve(result);\n            }, (error: TdApi.td_Error)=> {\n                if(log.log_queries) {\n                    console.error('Query failed: ', error);\n                }\n                reject(error);\n            }\n            );\n        });\n    }\n}","export function getCredentials() {return {api_id: 3022678,api_hash: 'd7b7676a82906a6182f4a5e5e9555673'};}export function getConfig() {return {use_test_dc: false,log: {log_updates: true,log_queries: true}};}\n","import TdClient from 'tdweb';\n\nexport function createTdClient(op) {\n    return new TdClient(op);\n}","// All icons are from Telegram Desktop, converted to SVG using https://pngtosvg.com/\n\nimport raw from 'raw.macro';\n\nvar chatFilerIcons = {\n    All     : [raw('./all.svg'     ), raw('./all_active.svg'     )],\n    Bots    : [raw('./bots.svg'    ), raw('./bots_active.svg'    )],\n    Channels: [raw('./channels.svg'), raw('./channels_active.svg')],\n    Custom  : [raw('./custom.svg'  ), raw('./custom_active.svg'  )],\n    Groups  : [raw('./groups.svg'  ), raw('./groups_active.svg'  )],\n    Private : [raw('./private.svg' ), raw('./private_active.svg' )],\n    Setup   : [raw('./setup.svg'   )                              ],\n    Unread  : [raw('./unread.svg'  ), raw('./unread_active.svg'  )],\n\n    Cat     : [raw('./cat.svg'     ), raw('./cat_active.svg'     )],\n    Crown   : [raw('./crown.svg'   ), raw('./crown_active.svg'   )],\n    Favorite: [raw('./favorite.svg'), raw('./favorite_active.svg')],\n    Flower  : [raw('./flower.svg'  ), raw('./flower_active.svg'  )],\n    Game    : [raw('./game.svg'    ), raw('./game_active.svg'    )],\n    Home    : [raw('./home.svg'    ), raw('./home_active.svg'    )],\n    Love    : [raw('./love.svg'    ), raw('./love_active.svg'    )],\n    Mask    : [raw('./mask.svg'    ), raw('./mask_active.svg'    )],\n    Party   : [raw('./party.svg'   ), raw('./party_active.svg'   )],\n    Sport   : [raw('./sport.svg'   ), raw('./sport_active.svg'   )],\n    Study   : [raw('./study.svg'   ), raw('./study_active.svg'   )],\n    Trade   : [raw('./trade.svg'   ),                             ],\n    Travel  : [raw('./travel.svg'  ), raw('./travel_active.svg'  )],\n    Work    : [raw('./work.svg'    ), raw('./work_active.svg'    )],\n};\nexport default chatFilerIcons;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Adds a ripple effect to a button.\n * \n * Insert at the beginning of the button.\n * \n * **Note:** The button needs `position: relative;` and `overflow: hidden;`\n */\nexport default class RippleEffect extends React.Component {\n    static propTypes= {\n        /** \n         * - Change to `pressed` on `mouseDown`\n         * - Change to `released` on `mouseUp`\n         * - Change to `off` 1000ms after `mouseUp`\n         */\n        state: PropTypes.oneOf(['off', 'pressed', 'released']).isRequired,\n        X: PropTypes.number,\n        Y: PropTypes.number,\n        width: PropTypes.number,\n        height: PropTypes.number,\n        /** The color to show in the ripple (same as `:active` if you used CSS) */\n        color: PropTypes.string.isRequired,\n        /** Pass true if the button is small to make animation faster */\n        small: PropTypes.bool\n    }\n\n    /** Gets the smallest radius that a circle, centered at click location, needs to fill the button */\n    getMaxRadius() {\n        if(!this.props.small){\n        //  It's a bit hard to understand. Let me explain:\n        //  \n        //  1. It calculates the coordinates relative to the 4 edges of the button ────╮\n        //  2. The diagonal distance to the edges are calculated using the             │\n        //      pythagoras rule, from the results of step 1            │               │\n        //  3. The biggest distance is selected and then returned.     │               │\n        //          │                                                  │               │\n        //  ╭───────┴──────╮  ╭────────────────────────────────────────╯               │        \n        //  │           ╭──┼──┴───╮                                                    │                  \n            return Math.max(//    │╭───────────────────────────────────────────────────┴──────────────╮\n                /* ┏ */ Math.hypot(this.props.X                     , this.props.Y),//                │ \n                /* ┓ */ Math.hypot(this.props.width - this.props.X  , this.props.Y),//                │\n                /* ┗ */ Math.hypot(this.props.X                     , this.props.height - this.props.Y), \n                /* ┛ */ Math.hypot(this.props.width - this.props.X  , this.props.height - this.props.Y), \n            );\n        } else {\n            const {X, Y, width, height} = this.props;\n            const [rX, rY] = [X - width / 2, Y - height / 2]; // Click position relative to center of circle.\n            const distanceToCenter= Math.hypot(Math.abs(rX), Math.abs(rY)); // Get distance from click position to the center of circle.\n            return distanceToCenter + (width / 2); // Add circle radius to result\n        }\n    }\n    render() {\n        if(this.props.state=='off') return null;\n        return (\n            <div\n                className={'ripple '+this.props.state+ (this.props.small? ' small':'')}\n                style={{\n                    '--top': (this.props.Y || 0)+'px',\n                    '--left': (this.props.X || 0)+'px',\n                    '--radius': this.getMaxRadius()+'px',\n                    backgroundColor: this.props.color\n                }}/>\n        );\n    }\n}\n\n// Assign your `mouseDown`, `mouseUp` and `mouseLeave` to the returned functions.\nexport function handleMyMouseEvents(This) {\n    return [\n        // mouseDown\n        (function(e) {\n            // Reset the ripple effect if it's not off\n            if(this.state.ripple.state!='off'){\n                this.setState({\n                    ripple: { state: 'off' }\n                });\n                setTimeout(() => {\n                    this.setState({\n                        ripple: {\n                            state: 'pressed',\n                            X: e.nativeEvent.offsetX,\n                            Y: e.nativeEvent.offsetY,\n                            width: e.target.clientWidth,\n                            height: e.target.clientHeight\n                        }\n                    });\n                }, 10);\n                return;\n            }\n            this.setState({\n                ripple: {\n                    state: 'pressed',\n                    X: e.nativeEvent.offsetX,\n                    Y: e.nativeEvent.offsetY,\n                    width: e.target.clientWidth,\n                    height: e.target.clientHeight\n                }\n            });\n        }).bind(This),\n        // mouseUp\n        (function(e) {\n            this.setState({\n                ripple: { \n                    state: 'released',\n                    X: e.nativeEvent.offsetX,\n                    Y: e.nativeEvent.offsetY,\n                    width: e.target.clientWidth,\n                    height: e.target.clientHeight \n                }\n            });\n        }).bind(This),\n        // mouseLeave\n        (function(e) {\n            if(this.state.ripple.state=='pressed') {\n                this.mouseUp(e);\n            }\n        }).bind(This)\n    ];\n}\n// Assign your `mouseDown`, `mouseUp` and `mouseLeave` to the returned functions.\nexport function handleMyMouseEventsFunction([ripple, setRipple]) {\n    function down(e) {\n        // Reset the ripple effect if it's not off\n        if(ripple.state!='off'){\n            setRipple({ state: 'off' });\n            setTimeout(() => {\n                setRipple ({\n                    state: 'pressed',\n                    X: e.nativeEvent.offsetX,\n                    Y: e.nativeEvent.offsetY,\n                    width: e.target.clientWidth,\n                    height: e.target.clientHeight\n                });\n            }, 10);\n            return;\n        }\n        setRipple ({\n            state: 'pressed',\n            X: e.nativeEvent.offsetX,\n            Y: e.nativeEvent.offsetY,\n            width: e.target.clientWidth,\n            height: e.target.clientHeight\n        });\n    }\n\n    function up(e) {\n        setRipple ({\n            state: 'released',\n            X: e.nativeEvent.offsetX,\n            Y: e.nativeEvent.offsetY,\n            width: e.target.clientWidth,\n            height: e.target.clientHeight \n        });\n    }\n\n    function leave(e) {\n        if(ripple.state=='pressed') {\n            up(e);\n        }\n    }\n    \n    return [down, up, leave];\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport RippleEffect, {handleMyMouseEventsFunction} from '../../ui/elements/ripple-effect';\nimport './icon-button.scss';\n\n/**\n * Renders a round button with an icon in it, and a special ripple effect.\n */\nexport default function IconButton({icon, ...rest}) {\n    const ripple= React.useState({state: 'off'});\n    const [onMouseDown, onMouseUp, onMouseLeave]= handleMyMouseEventsFunction(ripple);\n    return (\n        <button className=\"icon-button\" {...rest} {...{onMouseDown, onMouseUp, onMouseLeave}}>\n            <span dangerouslySetInnerHTML={{__html: icon}} />\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-windowBgOver)\" small={true}/>\n        </button>\n    );\n}\nIconButton.propTypes = {\n    icon: PropTypes.string.isRequired\n};\n","// All icons are from Telegram Desktop, converted to SVG using https://pngtosvg.com/\n\nimport raw from 'raw.macro';\n\nexport const archive_userpic = raw('./archive_userpic.svg');\nexport const dialogs_bot = raw('./dialogs_bot.svg');\nexport const dialogs_channel = raw('./dialogs_channel.svg');\nexport const dialogs_chat = raw('./dialogs_chat.svg');\nexport const dialogs_menu = raw('./dialogs_menu.svg');\nexport const dialogs_pinned = raw('./dialogs_pinned.svg');\nexport const dialogs_received = raw('./dialogs_received.svg');\n//export const dialogs_search_cancel = raw('./dialogs_search_cancel.svg');\nexport const dialogs_sending = raw('./dialogs_sending.svg');\nexport const dialogs_sent = raw('./dialogs_sent.svg');\nexport const dialogs_verified_check = raw('./dialogs_verified_check.svg');\nexport const dialogs_verified_star = raw('./dialogs_verified_star.svg');\nexport const history_to_down = raw('./history_to_down.svg');\nexport const info_back = raw('./info_back.svg');\nexport const info_close = raw('./info_close.svg');\nexport const menu_new_channel = raw('./menu_new_channel.svg');\nexport const menu_new_group = raw('./menu_new_group.svg');\nexport const menu_night_mode = raw('./menu_night_mode.svg');\nexport const menu_settings = raw('./menu_settings.svg');\nexport const new_chat_photo = raw('./new_chat_photo.svg');\nexport const replies_userpic = raw('./replies_userpic.svg');\nexport const saved_messages = raw('./saved_messages.svg');\nexport const settings_name = raw('./settings_name.svg');\nexport const settings_phone_number = raw('./settings_phone_number.svg');\n\nexport const filters_edit = raw('./chat_filters/edit.svg');\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from '../../../../ui/elements/icon-button';\nimport RippleEffect, {handleMyMouseEvents} from '../../../../ui/elements/ripple-effect';\nimport { dialogs_menu } from '../../../../ui/icon/icons';\nimport './menu-button.scss';\n\nvar HamburgerMenuButton= {}; // Store component classes here\n\n/**\n * Renders the button which opens the hamburger menu (when there are folders)\n */\nHamburgerMenuButton.WithFolders= class WithFolders extends React.PureComponent {\n    static propTypes= {\n        onClick: PropTypes.func,\n    };\n    state= {\n        ripple: {\n            state: 'off'\n        }\n    }\n    constructor() {\n        super();\n        [this.mouseDown, this.mouseUp, this.mouseLeave]= handleMyMouseEvents(this); // Ripple effect events\n    }\n    render() {\n        return (\n            <button id=\"hamburger-menu-button\" className=\"uses-folders\"\n                onMouseDown={this.mouseDown}\n                onMouseUp={this.mouseUp}\n                onMouseLeave={this.mouseLeave}\n                onClick={this.props.onClick}>\n                <div id=\"bars\"><span></span><span></span><span></span></div>\n                <RippleEffect {...this.state.ripple} color=\"var(--theme-color-sideBarBgRipple)\"/>\n            </button>\n        );\n    }\n};\n\n/**\n * Renders the button which opens the hamburger menu (when there are no folders)\n */\nHamburgerMenuButton.WithoutFolders= function WithoutFolders (props) {\n    return (\n        <IconButton \n            icon={dialogs_menu}\n            id=\"hamburger-menu-button\"\n            className=\"icon-button no-folders\"\n            {...props}/>\n    );\n};\n\nexport default HamburgerMenuButton;","import { createStore } from 'redux';\nimport TdLib from '../TdWeb/tdlib';\n\n/**\n * It is recommended to use the outline view or find tool to navigate this file.\n */\n\nconst chatStore= createStore(reducer, \n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n    \nfunction reducer(state= {\n    currentChatList: {'@type': 'chatListMain'},\n    archiveState: 'closed',\n    archiveButtonState: localStorage.getItem('dibgram-archived-chats-button-mode'),\n    chats: [],\n    filters: [],\n    unread: {\n        main: {},\n        archive: {},\n        filters: {}\n    }\n}, action) {\n    switch (action.type) {\n    case 'SET_CURRENT_CHAT_LIST':\n        return {\n            ...state,\n            currentChatList: action.chatList\n        };\n    case 'SET_ARCHIVE_STATE':\n        return {\n            ...state,\n            archiveState: action.archiveState\n        };\n    case 'UPDATE_UNREAD_MESSAGE_COUNT':\n        if(action.chat_list['@type'] === 'chatListMain') {\n            return {\n                ...state,\n                unread: {\n                    ...state.unread,\n                    main: {\n                        ...state.unread.main,\n                        unread_messages_count: action.unread_count,\n                        unread_unmuted_messages_count: action.unread_unmuted_count\n                    }\n                }\n            };\n        } else if(action.chat_list['@type'] === 'chatListArchive') {\n            return {\n                ...state,\n                unread: {\n                    ...state.unread,\n                    archive: {\n                        ...state.unread.archive,\n                        unread_messages_count: action.unread_count,\n                        unread_unmuted_messages_count: action.unread_unmuted_count\n                    }\n                }\n            };\n        } else if(action.chat_list['@type'] === 'chatListFilter') {\n            return {\n                ...state,\n                unread: {\n                    ...state.unread,\n                    filters: {\n                        ...state.unread.filters,\n                        [action.chat_list.chat_filter_id]: {\n                            ...state.unread.filters[action.chat_list.chat_filter_id],\n                            unread_messages_count: action.unread_count,\n                            unread_unmuted_messages_count: action.unread_unmuted_count\n                        }\n                    }\n                }\n            };\n        }\n        return state;\n    case 'UPDATE_UNREAD_CHAT_COUNT':\n        if(action.chat_list['@type'] === 'chatListMain') {\n            return {\n                ...state,\n                unread: {\n                    ...state.unread,\n                    main: {\n                        ...state.unread.main,\n                        total_chats_count: action.total_count,\n                        unread_chats_count: action.unread_count,\n                        unread_unmuted_chats_count: action.unread_unmuted_count,\n                        marked_as_unread_chats_count: action.marked_as_unread_count,\n                        marked_as_unread_unmuted_chats_count: action.marked_as_unread_unmuted_count\n                    }\n                }\n            };\n        } else if(action.chat_list['@type'] === 'chatListArchive') {\n            return {\n                ...state,\n                unread: {\n                    ...state.unread,\n                    archive: {\n                        ...state.unread.archive,\n                        total_chats_count: action.total_count,\n                        unread_chats_count: action.unread_count,\n                        unread_unmuted_chats_count: action.unread_unmuted_count,\n                        marked_as_unread_chats_count: action.marked_as_unread_count,\n                        marked_as_unread_unmuted_chats_count: action.marked_as_unread_unmuted_count\n                    }\n                }\n            };\n        } else if(action.chat_list['@type'] === 'chatListFilter') {\n            return {\n                ...state,\n                unread: {\n                    ...state.unread,\n                    filters: {\n                        ...state.unread.filters,\n                        [action.chat_list.chat_filter_id]: {\n                            ...state.unread.filters[action.chat_list.chat_filter_id],\n                            total_chats_count: action.total_count,\n                            unread_chats_count: action.unread_count,\n                            unread_unmuted_chats_count: action.unread_unmuted_count,\n                            marked_as_unread_chats_count: action.marked_as_unread_count,\n                            marked_as_unread_unmuted_chats_count: action.marked_as_unread_unmuted_count\n                        }\n                    }\n                }\n            };\n        }\n        return state;\n\n    case 'SET_ARCHIVE_BUTTON_STATE':\n        return {\n            ...state,\n            archiveButtonState: action.archiveButtonState\n        };\n    case 'ADD_CHAT':\n        return {\n            ...state,\n            chats: [\n                ...state.chats,\n                action.chat\n            ]\n        };\n    case 'UPDATE_CHAT_POSITION': // Replace the position property of a chat\n        return {\n            ...state,\n            chats: state.chats.map((chat) => {\n                if (chat.id === action.chat_id) {\n                    let changed=false;\n                    let newChat = {\n                        ...chat,\n                        positions: chat.positions.map((position) => {\n                            if (compareChatList(position.list, action.position.list)) {\n                                changed=true;\n                                return action.position;\n                            }\n                            return position;\n                        })\n                    };\n                    if(!changed) {\n                        return {\n                            ...chat,\n                            positions: [\n                                ...chat.positions,\n                                action.position\n                            ]\n                        };\n                    }\n                    return newChat;\n                }\n                return chat;\n            })\n        };\n    case 'REPLACE_CHAT_FILTERS':\n        return {\n            ...state,\n            filters: action.payload\n        };\n    case 'UPDATE_CHAT_PROPERTY':\n        return {\n            ...state,\n            chats: state.chats.map((chat) => {\n                if (chat.id === action.chat_id) {\n                    return {\n                        ...chat,\n                        [action.property]: action.value\n                    };\n                }\n                return chat;\n            })\n        };\n    default:\n        return state;\n    }\n}\n\nTdLib.registerUpdateHandler('updateUnreadChatCount', (update) => {\n    chatStore.dispatch({\n        type: 'UPDATE_UNREAD_CHAT_COUNT',\n        ...update\n    });\n});\n\nTdLib.registerUpdateHandler('updateUnreadMessageCount', (update) => {\n    chatStore.dispatch({\n        type: 'UPDATE_UNREAD_MESSAGE_COUNT',\n        ...update\n    });\n});\n\nTdLib.registerUpdateHandler('updateNewChat', update => {\n    chatStore.dispatch({\n        type: 'ADD_CHAT',\n        chat: update.chat\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatActionBar', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'action_bar',\n        chat_id: update.chat_id,\n        value: update.action_bar\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatDefaultDisableNotification', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'default_disable_notification',\n        chat_id: update.chat_id,\n        value: update.default_disable_notification\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatDraftMessage', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'draft_message',\n        chat_id: update.chat_id,\n        value: update.draft_message\n    });\n    for (let position of update.positions) {\n        chatStore.dispatch({\n            type: 'UPDATE_CHAT_POSITION',\n            chat_id: update.chat_id,\n            position: position\n        });\n    }\n});\n\nTdLib.registerUpdateHandler('updateChatFilters', update=> {\n    if(update.chat_filters) {\n        chatStore.dispatch({\n            type: 'REPLACE_CHAT_FILTERS',\n            payload: update.chat_filters\n        });\n    }\n});\n\nTdLib.registerUpdateHandler('updateChatHasScheduledMessages', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'has_scheduled_messages',\n        chat_id: update.chat_id,\n        value: update.has_scheduled_messages\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatIsBlocked', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'is_blocked',\n        chat_id: update.chat_id,\n        value: update.is_blocked\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatIsMarkedAsUnread', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'is_marked_as_unread',\n        chat_id: update.chat_id,\n        value: update.is_marked_as_unread\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatLastMessage', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'last_message',\n        chat_id: update.chat_id,\n        value: update.last_message\n    });\n    for (let position of update.positions) {\n        chatStore.dispatch({\n            type: 'UPDATE_CHAT_POSITION',\n            chat_id: update.chat_id,\n            position: position\n        });\n    }\n});\n\nTdLib.registerUpdateHandler('updateChatNotificationSettings', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'notification_settings',\n        chat_id: update.chat_id,\n        value: update.notification_settings\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatOnlineMemberCount', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'online_member_count',\n        chat_id: update.chat_id,\n        value: update.online_member_count\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatPermissions', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'permissions',\n        chat_id: update.chat_id,\n        value: update.permissions\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatPhoto', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'photo',\n        chat_id: update.chat_id,\n        value: update.photo\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatPosition', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_POSITION',\n        chat_id: update.chat_id,\n        position: update.position\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatReadInbox', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'unread_count',\n        chat_id: update.chat_id,\n        value: update.unread_count\n    });\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'last_read_inbox_message_id',\n        chat_id: update.chat_id,\n        value: update.last_read_inbox_message_id\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatReadOutbox', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'last_read_outbox_message_id',\n        chat_id: update.chat_id,\n        value: update.last_read_outbox_message_id\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatReplyMarkup', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'reply_markup_message_id',\n        chat_id: update.chat_id,\n        value: update.reply_markup_message_id\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatTitle', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'title',\n        chat_id: update.chat_id,\n        value: update.title\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatUnreadMentionCount', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'unread_mention_count',\n        chat_id: update.chat_id,\n        value: update.unread_mention_count\n    });\n});\n\nTdLib.registerUpdateHandler('updateMessageMentionRead', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'unread_mention_count',\n        chat_id: update.chat_id,\n        value: update.unread_mention_count\n    });\n});\n\nexport default chatStore;\n\n/**\n * Check if two chat lists are equal\n * @param {import('tdweb').TdObject} list1 \n * @param {import('tdweb').TdObject} list2 \n * @returns True if the provided objects refer to the same list. Otherwise false\n */\nexport function compareChatList(list1, list2) {\n    if (list1['@type'] != list2['@type']) { // First compare type\n        return false;\n    }\n    if (list1['@type'] == 'chatListFilter') { // Then Compare folder ID\n        return list1.chat_filter_id == list2.chat_filter_id;\n    }\n    return true;\n}\n\n/**\n * Gets a chat from a chat ID. Supports caching.\n */\nexport function getChat(id) {\n    let res;\n    for(let chat of chatStore.getState()?.chats) {\n        if(chat.id==id) res = Promise.resolve(chat);\n    }\n    if(!res){\n        res = TdLib.sendQuery({\n            '@type': 'getChat',\n            'chat_id': id\n        });\n    }\n    return res;\n}\n\n/**\n * Gets a chat from a chat ID. Does not support caching to prevent promises complexity.\n */\nexport function getChatNoCache(id) {\n    for(let chat of chatStore.getState()?.chats) {\n        if(chat.id==id) return chat;\n    }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport './scrollbar.scss';\n\n/**\n * A scrollable container. Sizing might need to be tweaked by CSS.\n */\nexport default function ScrollView({scrollBarWidth, scrollRef, ...propsRest}) {\n    const [mouseEntered, setMouseEntered] = React.useState(false);\n    const [timeoutId, setTimeoutId] = React.useState(null);\n    return (\n        <Scrollbars\n            className=\"scrollbar\"\n            style= {{ '--bar-width': (scrollBarWidth || 4)+'px' }}\n            data-mouse-entered={mouseEntered}\n            renderTrackHorizontal={props => <div {...props} className=\"track-horizontal\" />}\n            renderTrackVertical={props => <div {...props} className=\"track-vertical\" />}\n            renderThumbHorizontal={props => <div {...props} className=\"thumb-horizontal\" />}\n            renderThumbVertical={props => <div {...props} className=\"thumb-vertical\" />}\n            onMouseEnter={() => {\n                setMouseEntered(true);\n                setTimeoutId(setTimeout(() => {\n                    setMouseEntered(false);\n                }, 1000));\n            }}\n            onMouseLeave={() => {\n                setMouseEntered(false);\n                clearTimeout(timeoutId);\n            }}\n            autoHide\n            autoHideTimeout={1000}\n            hideTracksWhenNotNeeded={true}\n            ref={scrollRef}\n            {...propsRest}\n        />\n    );\n}\nScrollView.propTypes = {\n    /** Scroll-bar thickness, in pixels (default: 4) */\n    scrollBarWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    /** A React ref that is passed down to the scrollbars component */\n    scrollRef: PropTypes.object\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport filters from '../../../ui/icon/chat_filters/chat-filters';\nimport RippleEffect, {handleMyMouseEventsFunction} from '../../../ui/elements/ripple-effect';\nimport HamburgerMenuButton from './hamburger-menu/menu-button';\nimport { compareChatList } from '../../chat-store';\nimport TdLib from '../../../TdWeb/tdlib';\nimport ScrollView from '../../../ui/scroll/scrollbar';\nimport './chat-folders.scss';\n\nexport var chatListScrollToTopEvent = [function(){}];\n\n/**\n * Renders a chat folder button\n */\nexport function ChatFolder({folder, active, onClick, unread}) {\n    // Ripple effect\n    const ripple= React.useState({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave]= handleMyMouseEventsFunction(ripple);\n\n    const [iconName, setIconName]= React.useState(folder.icon_name);\n\n    React.useEffect(()=> { // Get folder chats, TDLib won't show them if this request isn't sent\n        TdLib.sendQuery({\n            '@type': 'getChats',\n            'chat_list': {\n                '@type': 'chatListFilter',\n                'chat_filter_id': folder.id,\n            },\n            'offset_order': '9223372036854775807', // Maximum 64-bit value\n            'offset_chat_id': 0,\n            'limit': 50 // Only get 50 chats //TODO: Implement loading more chats\n        });\n    }, []);\n\n    React.useEffect(()=> {\n        if(!folder.icon_name) {\n            // Default icon is used and we don't know what it is.\n            TdLib.sendQuery({ // Get chat filter info so we can get an idea what it is\n                '@type': 'getChatFilter',\n                'chat_filter_id': folder.id\n            }).then(folder=> {\n                TdLib.sendQuery({ // Ask TDLib what the icon should be\n                    '@type': 'getChatFilterDefaultIconName',\n                    'filter': folder\n                }).then(result=> setIconName(result.text));\n            });\n        }\n    }, [folder]);\n\n    function handleClick(e){\n        onClick(e);\n        chatListScrollToTopEvent[0]?.();\n    }\n\n    var icon= (filters[iconName] || filters['Custom']); // If the icon was empty, show a generic icon instead.\n    icon= icon[active+0] || icon[0]; // Some icons dont have active variant\n    return (\n        <div className={active ? 'item active' : 'item'}>\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-sideBarBgRipple)\"/>\n            <button\n                onMouseDown={mouseDown}\n                onMouseUp={mouseUp}\n                onMouseLeave={mouseLeave}\n                onClick={handleClick}>\n\n                <div className=\"icon\" dangerouslySetInnerHTML={{__html: icon}}></div>\n                <div className=\"title\">{folder.title}</div>\n                {unread?.unread_chats_count? (\n                    <div className=\"unread-badge\" \n                        data-muted={(unread?.unread_unmuted_chats_count==0) ? 'true' : 'false'}>\n                        <span>{unread?.unread_chats_count}</span>\n                    </div>\n                ): null}\n            </button>\n        </div>\n    );\n}\n\nChatFolder.propTypes= {\n    /** The folder object provided by TdLib */\n    folder: PropTypes.object.isRequired,\n    /** A boolean indicating if the folder is currently selected */\n    active: PropTypes.bool.isRequired,\n    /** A function to call when the folder is clicked */\n    onClick: PropTypes.func.isRequired,\n    /** An object containing unread messages and chats count, from `chatStore` */\n    unread: PropTypes.object\n};\n\n/**\n * Renders the chat folders list\n */\nfunction ChatFolderList({folders, currentFolder, unread, dispatch, onHamburgerMenuOpened}) {\n    if(!folders || folders.length==0) return null;\n\n    return (\n        <div id=\"chat-folders-list\">\n            <HamburgerMenuButton.WithFolders onClick={onHamburgerMenuOpened}/>\n\n            <ScrollView scrollBarWidth=\"4\" className=\"list scrollbar full-size\">\n                <ChatFolder \n                    active={compareChatList(currentFolder, {'@type': 'chatListMain'})} \n                    folder={{ title: 'All chats', icon_name: 'All' }}\n                    unread={unread.main}\n                    onClick={()=> dispatch({\n                        type: 'SET_CURRENT_CHAT_LIST',\n                        chatList: { '@type': 'chatListMain' }\n                    })}/>\n                \n                {folders.map(folder=> (\n                    <ChatFolder folder={folder} key={folder.id}\n                        unread={unread.filters[folder.id]}\n                        active={compareChatList(currentFolder, \n                            {'@type': 'chatListFilter', 'chat_filter_id': folder.id})}\n                        onClick={()=> dispatch({\n                            type: 'SET_CURRENT_CHAT_LIST',\n                            chatList: { \n                                '@type': 'chatListFilter',\n                                chat_filter_id: folder.id\n                            }\n                        })}/>\n                ))}\n            </ScrollView>\n        </div>\n    );\n}\nChatFolderList.propTypes={\n    /** An array of chat filters */\n    folders: PropTypes.arrayOf(PropTypes.object),\n    /** Current chat list */\n    currentFolder: PropTypes.object,\n    /** A list of unread messages info for each chat list */\n    unread: PropTypes.object,\n    \n    dispatch: PropTypes.func,\n    /** Fires when main menu is triggered */\n    onHamburgerMenuOpened: PropTypes.func\n};\nexport default connect(state=>({\n    folders:state.filters, \n    currentFolder: state.currentChatList,\n    unread: state.unread\n}))(ChatFolderList);","import { ProgressRing } from 'progress-ring';\nimport 'progress-ring/src/styles.css';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Renders a spinner which in addition to spinning, also changes size.\n */\nexport default class LoadingSpinner extends React.Component {\n    static props= {\n        /** Spinner circle size */\n        size: PropTypes.number.isRequired,\n        /** Spinner thickness */\n        lineWidth: PropTypes.number.isRequired,\n        /** Spinner color */\n        progressColor: PropTypes.string.isRequired\n    }\n    state= {\n        percentage: 10 // From 10 to 90, this specifies how much the spinner grows and shrinks while spinning (reversed)\n    }\n    render () {\n        return (\n            <div className=\"loading-spinner\">\n                <ProgressRing\n                    percent={this.state.percentage}\n                    caps='round'\n                    trackColor=\"transparent\"\n                    spin=\"true\"\n                    {...this.props}\n                    transitionDuration=\"2000\"/>\n            </div>\n        );\n    }\n\n    componentDidMount () {\n        this.intervalNum= setInterval(() => { // Spinner grows and shrinks while spinning\n            this.setState({\n                percentage: (90 - this.state.percentage)\n            });\n        }, 2000);\n    }\n\n    componentWillUnmount () {\n        clearInterval(this.intervalNum);\n    }\n}","import React from 'react';\nimport LoadingSpinner from '../elements/loading-spinner';\nimport { connect } from 'react-redux';\n\n/**\n * Renders the connecting spinner at the bottom left corner, which is hidden when connected\n */\nexport default connect(state=> ({state: state})) (function ConnectionState({state}) {\n    return (\n        <div className={'connectionState'+(([\n            'connectionStateConnecting',\n            'connectionStateConnectingToProxy',\n            'connectionStateWaitingForNetwork'\n        ].includes(state))? '' : ' connected')}>\n            <LoadingSpinner\n                progressColor=\"var(--theme-color-menuIconFg)\"\n                size=\"20\"\n                lineWidth=\"2\"/>\n        </div>\n    );\n});\n","import TdLib from './tdlib';\n\n/**\n * Downloads a file. Promise is resolved when the file is downloaded.\n * @param {number} file_id ID of file to be downloaded\n * @param {number} priority From 1 to 32, higher number results in earlier download\n * @returns {import('tdweb').TdObject} File object\n */\nexport function downloadFile (file_id, priority) {\n    let onReject;\n    TdLib.sendQuery({\n        '@type': 'downloadFile',\n        'file_id': file_id,\n        'priority': priority,\n        'offset': 0,\n        'limit': 0,\n        'synchronous': false\n    }).catch(onReject);\n\n    return new Promise((resolve, reject) => {\n        downloadCallbacks[file_id]=result=> {\n            resolve(result);\n            delete downloadCallbacks[file_id];\n        };\n        onReject=reject;\n    });\n}\nvar downloadCallbacks = {};\n\nTdLib.registerUpdateHandler('updateFile', function (update) {\n    if(update.file.local.is_downloading_completed){\n        downloadCallbacks[update.file.id]?.(update.file);\n    }\n});\n\nconst cachedFiles= {};\n\n/**\n * Gets file content (downloads if necessary). Promise is resolved with a `filePart` object when file content is ready\n * @param {import('tdweb').TdObject} file File object\n * @param {number} priority Download priority from 1 to 32. Higher value = earlier download\n * @param {boolean} enableCache If true, file content will be stored in a cache in the RAM. Files larger than 500KiB will not be cached whatsoever.\n * @returns {import('tdweb').TdObject} A `filePart` object\n * \n */\nexport function getFileContent(file, priority, enableCache=true) {\n    if(file.id in cachedFiles){ // If we have it in cache, we can use that\n        return Promise.resolve({data: cachedFiles[file.id]});\n    }\n\n    function resolveFilePart(filePart){\n        if(enableCache && file.size<=500*1024){\n            cachedFiles[file.id]=filePart.data;\n        }\n        return filePart;\n    }\n\n    if(file.local.is_downloading_completed){ // File is already downloaded - only read file\n        return new Promise((resolve, reject) => {\n            TdLib.sendQuery({\n                '@type': 'readFilePart',\n                'file_id': file.id,\n                'offset': 0,\n                'count': 0\n            }).then((f)=>resolve(resolveFilePart(f))).catch(reject);\n        });\n    } \n    else if(file.local.is_downloading_active){ // File is already being downloaded - gets quite complex here.\n        return new Promise((resolve, reject) => {\n            const callback = downloadCallbacks[file.id];\n            downloadCallbacks[file.id] = (result) => { // Replace old callback with a new callback that calls the old one and also does its own stuff\n                callback(result); // Call the old callback\n                TdLib.sendQuery({ // Read the file\n                    '@type': 'readFilePart',\n                    'file_id': file.id,\n                    'offset': 0,\n                    'count': 0\n                }).then((f)=>resolve(resolveFilePart(f))).catch(reject);\n            };\n        });\n    } else {\n        return new Promise((resolve, reject) => { // File is not downloaded.\n            downloadFile(file.id, priority).then(()=> { // Download it...\n                TdLib.sendQuery({ // ...then read it\n                    '@type': 'readFilePart',\n                    'file_id': file.id,\n                    'offset': 0,\n                    'count': 0\n                }).then((f)=>resolve(resolveFilePart(f))).catch(reject);\n            }).catch(reject);\n        });\n    }\n}\n\n/**\n * Converts a blob to a URL\n * @param {Blob} blob Blob to convert\n * @returns {string} Created URL\n */\nexport function blobToUrl (blob) {\n    return (window.URL || window.webkitURL).createObjectURL(blob);\n}\n","import TdLib from './tdlib';\n\n/**\n * Contains all options received from TdLib `updateOption`s\n */\nvar options={};\n\nTdLib.registerUpdateHandler('updateOption', function (update) {\n    options[update.name]=update.value.value;\n});\n\nexport default options;\n","export default __webpack_public_path__ + \"static/media/TgLogo.d1ff1195.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { blobToUrl, getFileContent } from '../../TdWeb/file';\nimport options from '../../TdWeb/options';\nimport './profile-photo.scss';\nimport tgLogo from '../../ui/img/TgLogo.png';\nimport { saved_messages, replies_userpic } from '../icon/icons';\n\n/**\n * Converts a name to initials.\n * @param {string} name Input name\n * @returns {string} One or two uppercase letters\n */\nexport function profileNameToInitials(name) {\n    const words=name.replace(/[\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007F]/g,'') // Remove non-word characters\n        .toUpperCase().split(' ');\n    if(words[0].length==0){\n        return '';\n    } else if(words.length===1) {\n        return words[0][0];\n    } else {\n        return words[0][0] + words[words.length-1][0];\n    }\n}\n\n/**\n * Renders a chat / profile photo.\n */\nexport default function ProfilePhoto (props) {\n    const [photo, setPhoto] = React.useState(null);\n    const [photoObj, setPhotoObj] = React.useState(null);\n    const isServiceMessages= props.id==options['telegram_service_notifications_chat_id'];\n    const isSavedMessages= props.id==options['my_id'];\n    const isReplies= props.id==options['replies_bot_chat_id'];\n    \n    React.useEffect(() => { // Fetch image data\n        var mounted=true;\n        if(props.photo){\n            if(photoObj!=props.photo){ // No need for any fetch if the same photo is already loaded\n                getFileContent(props.photo, 8).then(file=> {\n                    if(!mounted) return;\n                    setPhoto(blobToUrl(file.data));\n                    setPhotoObj(props.photo);\n                });\n            }\n        } else { // No photo\n            if(photo && photoObj){\n                setPhoto(null);\n                setPhotoObj(null);\n            }\n        }\n        return ()=> mounted=false;\n    }, [props.photo]);\n\n    var customIcon; \n    if(isSavedMessages && (!props?.disableSavedMessages)){ // Use saved messages icon instead of user pic (if not disabled)\n        customIcon= [0, saved_messages];\n    }\n    if(isReplies){ // Replies chat has no icons and we supply one ourselves\n        customIcon= [0, replies_userpic];\n    }\n    if((!props.photo) && isServiceMessages) { // Service messages may have no photo (e.g. on test DC)\n        customIcon = [1, tgLogo];\n    }\n    return (\n        <div className=\"profile-photo\">\n            <Initials id={props.id} name={props.name}/>\n            {\n                customIcon? (\n                    customIcon[0]?\n                        <React.Fragment>\n                            <Initials id={props.id} name={props.name}/>\n                            <img src={customIcon[1]}/>\n                        </React.Fragment>\n                        :\n                        <div className=\"svg\" dangerouslySetInnerHTML={{__html: customIcon[1]}}/>\n                ) : (\n                    (props.photo && photo) && <img src={photo}/> \n                )\n            }\n        </div>\n    );\n}\nProfilePhoto.propTypes = {\n    /** Chat/user name, used for initials */\n    name: PropTypes.string.isRequired,\n    /** Chat type id (supergroup id, user id, etc.), used for initials background */\n    id: PropTypes.number.isRequired,\n    /** Chat / user photo (e.g. `chat.photo?.small`) */\n    photo: PropTypes.object,\n    /** If false, saved messages icon will be used when user_id = my_id */\n    disableSavedMessages: PropTypes.bool\n};\n\n/** Renders photo initials fallback */\nfunction Initials({id, name}) {\n    return (\n        <span className={'initials color_'+ ((Math.abs(id || 0) % 7) + 1)}>\n            {profileNameToInitials(name)}\n        </span>\n    );\n}\nInitials.propTypes = {\n    /** Chat/user name, used to generate initials */\n    name: PropTypes.string.isRequired,\n    /** Chat type ID, used to generate background color */\n    id: PropTypes.number.isRequired\n};\n\n/**\n * Returns a chat's type ID. (supergroup Id / basic group ID / user ID)\n * @param {import('tdweb').TdObject} chat Input chat\n * @returns Chat type ID\n */\nexport function getChatTypeId(chat) {\n    switch (chat?.type?.['@type']) {\n    case 'chatTypeSupergroup': {\n        return chat?.type?.supergroup_id;\n    }\n    case 'chatTypeBasicGroup': {\n        return chat?.type?.basic_group_id;\n    }\n    case 'chatTypePrivate':\n    case 'chatTypeSecret': {\n        return chat?.type?.user_id;\n    }\n    }\n    return null;\n}\n","import { createStore } from 'redux';\nimport TdLib from '../TdWeb/tdlib';\n\nconst usersStore = createStore((state = {}, action) => {\n    switch (action.type) {\n    case 'UPD_USER':\n        return {\n            ...state,\n            [action.user.id]: action.user\n        };\n    case 'UPD_USER_STATUS':\n        return {\n            ...state,\n            [action.userId]: {\n                ...state[action.userId],\n                status: action.status\n            }\n        };\n    default:\n        return state;\n    }\n}, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nTdLib.registerUpdateHandler('updateUser', (update) => {\n    usersStore.dispatch({\n        type: 'UPD_USER',\n        user: update.user\n    });\n});\n\nTdLib.registerUpdateHandler('updateUserStatus', (update) => {\n    usersStore.dispatch({\n        type: 'UPD_USER_STATUS',\n        userId: update.user_id,\n        status: update.status\n    });\n});\n\nexport default usersStore;\n","import currencies from './currencies';\n\n/**\n * Converts currency to string\n * @param {string} currency Three-letter currency code\n * @param {number} total_amount The total amount\n * @returns Formatted currency string\n */\nexport default function currencyAmountToString (currency, total_amount) {\n    const currencyObject= currencies[currency];\n    var formatter = new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: currency,\n        \n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2,\n    });\n    return formatter.format(total_amount / 10**currencyObject.exp); // Move two last digits to the right of the decimal point\n}","/**\n * \n * @param {import(\"../TdWeb/td_api\").TdApi.td_User} user \n * @returns \n */\nexport function getUserFullName(user) {\n    return user.last_name ? (user.first_name +' '+ user.last_name) : user.first_name;\n}","/**\n * Gets a very short representation of the message, even if it it does not contain the full meaning.\n * \n * Used in places such as \"Some user pinned **XXXX**\"\n */\nexport default function MessageShortName({message}) {\n    switch (message.content['@type']) {\n    case 'messageAnimation':\n        return 'a GIF';\n\n    case 'messageAudio':\n        return 'an audio file';\n\n    case 'messageContact':\n        return 'a contact information';\n\n    case 'messageDice':\n        return '«'+ message.content.emoji +'»';\n\n    case 'messageDocument':\n        return 'a file';\n\n    case 'messageGame':\n        return `the game «${message.content.game.title}»`;\n\n    case 'messagePhoto':\n        return 'a photo';\n\n    case 'messagePoll':\n        return '«'+ message.content.poll.question +'»';\n\n    case 'messageSticker':\n        return 'a '+ message.content.sticker.emoji +' sticker';\n    \n    case 'messageText':\n        var text= message.content.text.text;\n        if( text.length > 21 ) {\n            text = `«${text.substr(0, 16)}...»`;\n        }\n        return `«${text}»`;\n    \n    case 'messageUnsupported':\n        return '«This message is ...»';\n\n    case 'messageLocation':\n    case 'messageVenue':\n        return 'a location mark';\n\n    case 'messageVideo':\n        return 'a video';\n\n    case 'messageVideoNote':\n        return 'a video message';\n\n    case 'messageVoiceNote':\n        return 'a voice message';\n\n    default:\n        return '«»';\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TdLib from '../../TdWeb/tdlib';\nimport currencyAmountToString from '../payments/currency-tostring';\nimport {getUserFullName} from '../user-misc';\nimport { getChatNoCache } from '../chat-store';\nimport MessageShortName from './message-short-name';\n\n/**\n * Gets a textual representation of the message without a thumbnail.\n * Usage examples: \n * - Last message in chat list\n * - Search results \n * TODO: add possibility to hide sender name (for search results)\n * @returns A span element containing a textual representation of the message. Contains span.part-1 and span.part-2\n */\nexport default function MessageSummaryWithoutIcon({message, className, users, chat}) {\n    if(!message) return null;\n\n    switch(message.content['@type']) {\n    case 'messageAnimation': // GIF\n        return (\n            <MayHaveCaptionThumbnail\n                type=\"GIF\" \n                caption={message.content.caption?.text} \n                className={className} \n                message={message} \n                chat={chat}\n                users={users}\n                thumbnails={[message.content?.animation?.minithumbnail?.data]}/>\n        );\n    \n    case 'messageAudio': // Audio/music file\n        var title= message.content.audio.title || message.content.audio.file_name; // If there is no title, use file name instead\n        if(message.content.audio.performer) // Prepend performer name\n            title= message.content.audio.performer+ ' ­­– ' + title;\n        return (\n            <MayHaveCaption \n                type={title} \n                caption={message.content.caption?.text} \n                className={className} \n                message={message} \n                chat={chat}\n                users={users}/>\n        );\n\n    case 'messageBasicGroupChatCreate': // X created the group «xxxx»\n        return (\n            <span className={className}>\n                <span className=\"part-1\"><SenderFullName chat={chat} message={message} users={users}/> created the group «{message.content.title}»</span>\n            </span>\n        );\n\n    case 'messageCall': // Call\n        var text='';\n        if(message.is_outgoing) { // You made the call\n            switch(message.content.discard_reason?.['@type']) {\n            case 'callDiscardReasonMissed':\n                text= 'Cancelled call';\n                break;\n            default:\n                text= 'Outgoing call';\n            }\n        } else { // The other user called you\n            switch(message.content.discard_reason?.['@type']) {\n            case 'callDiscardReasonDeclined':\n                text= 'Declined call';\n                break;\n            case 'callDiscardReasonMissed':\n                text= 'Missed call';\n                break;\n            default: \n                text= 'Incoming call';\n            }\n        } \n        return (\n            <span className={className}>\n                <MessageSummarySender message={message} chat={chat} users={users}/>\n                <span className=\"part-1\">{text}</span>\n            </span>\n        );\n\n    case 'messageChatAddMembers': // X added Y\n        var members= message.content.member_user_ids.map(id=> // convert user IDs to names\n            getUserFullName(users[id]));\n        if(members.length>1){ // X and Y // X, Y and Z\n            members= members.slice(0, members.length - 1) .join(', ') + ' and ' + members[members.length - 1];\n        } else {\n            members= members[0];\n        }\n        // If the user joined the group by themselves, it appears as 'X added X' and that is not accurate.\n        if(message.content.member_user_ids[0] == message.sender?.user_id) {\n            return (\n                <span className={className}>\n                    <span className=\"part-1\"><SenderFullName message={message} chat={chat} users={users}/> joined the group</span>\n                </span>\n            );\n        }\n\n        return (\n            <span className={className}>\n                <span className=\"part-1\"><SenderFullName message={message} chat={chat} users={users}/> added {members}</span>\n            </span>\n        );\n\n    case 'messageChatChangePhoto': // Chat photo changed\n        // Telegram Desktop shows chat photo change events as 'Photo' instead of 'X changed group photo' or 'Channel photo changed'\n        return (\n            <span className={className}>\n                <span className=\"part-1\">Photo</span> \n            </span>\n        );\n\n    case 'messageChatChangeTitle': // Chat was renamed\n        if(message.is_channel_post) {\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">Channel name was changed to «{message.content.title}»</span>\n                </span>\n            );\n        } else {\n            return (\n                <span className={className}>\n                    <span className=\"part-1\"><SenderFullName message={message} chat={chat} users={users}/>\n                    &nbsp;changed group name to «{message.content.title}»</span>\n                </span>\n            );\n        }\n\n    case 'messageChatDeleteMember': // X removed Y\n        var deletedMember= users[message.content.user_id];\n        return (\n            <span className={className}>\n                <span className=\"part-1\"><SenderFullName message={message} chat={chat} users={users}/>\n                &nbsp;removed {getUserFullName(deletedMember)}</span>\n            </span>\n        );\n\n    case 'messageChatDeletePhoto': // Chat photo was deleted\n        if(message.is_channel_post) {\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">Channel photo removed</span>\n                </span>\n            );\n        } else {\n            return (\n                <span className={className}>\n                    <span className=\"part-1\"><SenderFullName message={message} chat={chat} users={users}/>\n                    &nbsp;removed group photo</span>\n                </span>\n            );\n        }\n\n    case 'messageChatJoinByLink': // X joined the group via invite link\n        return (\n            <span className={className}>\n                <span className=\"part-1\"><SenderFullName message={message} chat={chat} users={users}/>\n                &nbsp;joined the group via invite link</span>\n            </span>\n        );\n\n    case 'messageChatSetTtl': // Auto-delete / self-destruct timer changed\n        var timeConversionTable= {86400: 'day', 604800: 'week', 2678400: 'month'}; // seconds to day, week and month\n        return (\n            <span className={className}>\n                <span className=\"part-1\"><SenderFullName message={message} chat={chat} users={users} includeYou={true}/> set messages to auto-delete in 1 {timeConversionTable[message.content.ttl]}</span>\n            </span>\n        );\n\n    case 'messageChatUpgradeFrom': // It is too complicated to get basic group last message.\n    case 'messageChatUpgradeTo': // TODO: It's complicated, but it should be done.\n        return (\n            <span className={className}>\n                <span className=\"part-1\">Group was upgraded to a super-group</span>\n            </span>\n        );\n\n    case 'messageContact': // Shared contact\n        return (\n            <span className={className}>\n                <MessageSummarySender message={message} chat={chat} users={users}/>\n                <span className=\"part-1\">Contact</span>\n            </span>\n        );\n\n    case 'messageContactRegistered': // X joined Telegram\n        return (\n            <span className={className}>\n                <span className=\"part-1\"><SenderFullName message={message} chat={chat} users={users}/>\n                &nbsp;joined Telegram</span>\n            </span>\n        );\n\n    case 'messageCustomServiceAction': // ¯\\_(ツ)_/¯\n        return (\n            <span className={className}>\n                <span className=\"part-1\">{message.content.text}</span>\n            </span>\n        );\n\n    case 'messageDice': // Dice (🎲🎯🎳⚽🏀)\n        return (\n            <span className={className}>\n                <MessageSummarySender message={message} chat={chat} users={users}/>\n                <span className=\"part-1\">{message.content.emoji}</span>\n            </span>\n        );\n\n    case 'messageDocument': // File/document\n        return (\n            <MayHaveCaptionThumbnail\n                type={message.content.document.file_name} \n                caption={message.content.caption?.text} \n                className={className} \n                message={message} \n                chat={chat}\n                users={users}\n                thumbnails={[message.content?.document?.minithumbnail?.data]}/>\n        );\n    \n    case 'messageExpiredPhoto': \n        if(message.is_outgoing) { // You sent it\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">You sent a self-destructing photo</span>\n                </span>\n            );\n        } else { // You received it\n            return (\n                <span className={className}><span className=\"part-1\">\n                    <SenderFullName message={message} chat={chat} users={users}/> sent you a self-destructing photo. Please view it on your mobile.\n                </span></span>\n            );\n        }\n    \n    case 'messageExpiredVideo':\n        if(message.is_outgoing) { // You sent it\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">You sent a self-destructing video</span>\n                </span>\n            );\n        } else { // You received it\n            return (\n                <span className={className}><span className=\"part-1\">\n                    <SenderFullName message={message} chat={chat} users={users}/> sent you a self-destructing video. Please view it on your mobile.\n                </span></span>\n            );\n        }\n    \n    case 'messageGame': // Game\n        return (\n            <span className={className}>\n                <MessageSummarySender message={message} chat={chat} users={users}/>\n                <span className=\"part-1\">🎮 {message.content.game.title}</span>\n            </span>\n        );\n\n    case 'messageGameScore': // X scored {score} in {game}\n        // Text to use if game message is not available\n        var noGameTitleFallback= (\n            <span className={className}><span className=\"part-1\">\n                <SenderFullName message={message} chat={chat} users={users} includeYou={true}/> scored {message.content.score}\n            </span></span>\n        );\n\n        // Get game message\n        var GameScoreWithTitle= React.lazy(()=>new Promise(resolve=> {\n            TdLib.sendQuery({\n                '@type': 'getMessage',\n                chat_id: chat.id,\n                message_id: message.content.game_message_id\n            }).then(\n                result=> { \n                    //eslint-disable-next-line react/display-name\n                    resolve({ default: ()=> (\n                        <span className={className}><span className=\"part-1\">\n                            <SenderFullName message={message} chat={chat} users={users} includeYou={true}/> scored {message.content.score} in {result.content.game.title}\n                        </span></span>\n                    )});\n                },\n                ()=> { // Failed\n                    //eslint-disable-next-line react/display-name\n                    resolve({ default: ()=> noGameTitleFallback});\n                }\n            );\n        }));\n\n        return (\n            <React.Suspense fallback={noGameTitleFallback}>\n                <GameScoreWithTitle/>\n            </React.Suspense>\n        );\n\n    case 'messageInvoice': // Invoice (a buyable product)\n        return (\n            <span className={className}>\n                <MessageSummarySender message={message} chat={chat} users={users}/>\n                <span className=\"part-1\">{message.content.title}</span>\n            </span>\n        );\n\n    case 'messageLocation': // Location\n        return (\n            <span className={className}>\n                <MessageSummarySender message={message} chat={chat} users={users}/>\n                <span className=\"part-1\">Location</span>\n            </span>\n        );\n\n    case 'messagePassportDataSent': // You sent some Telegram passport data\n        var passportDataTypeToString= {\n            'passportElementTypeAddress': 'address',\n            'passportElementTypeBankStatement': 'bank statement',\n            'passportElementTypeDriverLicense': 'driver license',\n            'passportElementTypeEmailAddress': 'email address',\n            'passportElementTypeIdentityCard': 'identity card',\n            'passportElementTypeInternalPassport': 'internal passport',\n            'passportElementTypePassport': 'passport',\n            'passportElementTypePassportRegistration': 'passport registration',\n            'passportElementTypePersonalDetails': 'personal details',\n            'passportElementTypePhoneNumber': 'phone number',\n            'passportElementTypeRentalAgreement': 'rental agreement',\n            'passportElementTypeTemporaryRegistration': 'temporary registration',\n            'passportElementTypeUtilityBill': 'utility bill',\n        };\n        var passportDataTypes= message.content.types.map(type=> passportDataTypeToString[type['@type']]);\n        return (\n            <span className={className}>\n                <span className=\"part-1\">\n                    {chat.title} received the following documents: {passportDataTypes.join(', ')}\n                </span>\n            </span>\n        );\n\n    case 'messagePaymentSuccessful': // You paid [real] money\n        // To be shown if invoice is not available\n        var noInvoiceTitleFallback= (\n            <span className={className}>\n                <span className=\"part-1\">\n                    You successfully transferred \n                    {currencyAmountToString(message.content.currency, message.content.total_amount)} \n                    to {chat.title}\n                </span>\n            </span>\n        );\n\n        // Get invoice message\n        var PaymentInfoWithInvoiceTitle= React.lazy(()=>new Promise(resolve=> {\n            TdLib.sendQuery({\n                '@type': 'getMessage',\n                chat_id: chat.id,\n                message_id: message.content.invoice_message_id\n            }).then(\n                result=> { \n                    //eslint-disable-next-line react/display-name\n                    resolve({ default: ()=> (\n                        <span className={className}>\n                            <span className=\"part-1\">\n                                You successfully transferred \n                                {currencyAmountToString(message.content.currency, message.content.total_amount)} \n                                to {chat.title} for {result.content.title}\n                            </span>\n                        </span>\n                    )});\n                },\n                ()=> { // Failed\n                    resolve({ default: ()=> noInvoiceTitleFallback});\n                }\n            );\n        }));\n\n        return (\n            <React.Suspense fallback={noInvoiceTitleFallback}>\n                <PaymentInfoWithInvoiceTitle/>\n            </React.Suspense>\n        );\n\n    case 'messagePhoto': // A photo\n        if(message.content.is_secret) { // Self-destructing photo, not implemented\n            if(message.is_outgoing) { // You sent it\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\">You sent a self-destructing photo</span>\n                    </span>\n                );\n            } else { // You received it\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        <SenderFullName message={message} chat={chat} users={users}/> sent you a self-destructing photo. Please view it on your mobile.\n                    </span></span>\n                );\n            }\n        } else { // Normal photo\n            return (\n                <MayHaveCaptionThumbnail \n                    type=\"Photo\" \n                    caption={message.content.caption?.text} \n                    className={className} \n                    message={message} \n                    chat={chat}\n                    users={users}\n                    thumbnails={[message.content?.photo?.minithumbnail?.data]}/>\n            );\n        }\n    \n    case 'messagePinMessage':\n\n        // Get pinned message message\n        var PinnedMessageMessage= React.lazy(()=>new Promise(resolve=> {\n            TdLib.sendQuery({\n                '@type': 'getMessage',\n                chat_id: chat.id,\n                message_id: message.content.message_id\n            }).then(\n                result=> { \n                    //eslint-disable-next-line react/display-name\n                    resolve({ default: ()=> (\n                        <span className={className}><span className=\"part-1\">\n                            <SenderFullName message={message} chat={chat} users={users}/> pinned <MessageShortName message={result}/>\n                        </span></span>\n                    )});\n                },\n                ()=> { // Failed\n                    //eslint-disable-next-line react/display-name\n                    resolve({ default: ()=> (\n                        <span className={className}><span className=\"part-1\">\n                            <SenderFullName message={message} chat={chat} users={users}/> pinned Deleted Message\n                        </span></span>\n                    )});\n                }\n            );\n        }));\n\n        return (\n            <React.Suspense fallback={\n                <span className={className}><span className=\"part-1\">\n                    <SenderFullName message={message} chat={chat} users={users}/> pinned Loading...\n                </span></span>\n            }>\n                <PinnedMessageMessage/>\n            </React.Suspense>\n        );\n    \n    case 'messagePoll':\n        return (\n            <span className={className}>\n                <span className=\"part-1\">{message.content.poll.question}</span>\n            </span>\n        );\n    \n    // case 'messageProximityAlertTriggered': // TODO: Reproduce this message and implement it\n    // case 'messageScreenshotTaken':\n    case 'messageSticker': // Sticker\n        return (\n            <span className={className}>\n                <MessageSummarySender message={message} chat={chat} users={users}/>\n                <span className=\"part-1\">{message.content.sticker.emoji} Sticker</span>\n            </span>\n        );\n\n    case 'messageSupergroupChatCreate': // Supergroup created\n        if(message.is_channel_post) {\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">Channel created</span>\n                </span>\n            );\n        } else {\n            return (\n                <span className={className}>\n                    <span className=\"part-1\"><SenderFullName chat={chat} message={message} users={users}/> created the group «{message.content.title}»</span>\n                </span>\n            );\n        }\n\n    case 'messageText':\n        return (\n            <span className={className}>\n                <MessageSummarySender message={message} chat={chat} users={users}/>\n                <span className=\"part-2\">{message.content.text.text.replace(/(\\n|\\r|\\r\\n|\\n\\r)/g, ' ')}</span>\n            </span>\n        );\n\n    case 'messageUnsupported': // Is not supported :(\n        return (\n            <span className={className}>\n                <MessageSummarySender message={message} chat={chat} users={users}/>\n                <span className=\"part-2\">This message is not supported by your version of DIBgram. Please update to the latest version.</span>\n            </span>\n        );\n    \n    case 'messageVenue': // Venue/location\n        return (\n            <span className={className}>\n                <MessageSummarySender message={message} chat={chat} users={users}/>\n                <span className=\"part-1\">Location, </span>\n                <span className=\"part-2\">{message.content.venue.title}</span>\n            </span>\n        );\n\n    case 'messageVideo': // Video\n        if(message.content.is_secret) { // Self-destructing photo, not implemented\n            if(message.is_outgoing) { // You sent it\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\">You sent a self-destructing video</span>\n                    </span>\n                );\n            } else { // You received it\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        <SenderFullName message={message} chat={chat} users={users}/> sent you a self-destructing video. Please view it on your mobile.\n                    </span></span>\n                );\n            }\n        } else { // Normal photo\n            return (\n                <MayHaveCaptionThumbnail\n                    type=\"Video\" \n                    caption={message.content.caption?.text} \n                    className={className} \n                    message={message} \n                    chat={chat}\n                    users={users}\n                    isVideo={true}\n                    thumbnails={[message.content?.video?.minithumbnail?.data]}/>\n            );\n        }\n\n    case 'messageVideoNote':\n        return (\n            <span className={className}>\n                <MessageSummarySender message={message} chat={chat} users={users}/>\n                <span className=\"part-1\">Video message</span>\n            </span>\n        );\n\n    case 'messageVoiceNote':\n        return (\n            <MayHaveCaption \n                type=\"Voice message\" \n                caption={message.content.caption?.text} \n                className={className} \n                message={message} \n                chat={chat}\n                users={users}/>\n        );\n\n    case 'messageWebsiteConnected':\n        return (\n            <span className={className}>\n                <span className=\"part-1\">You allowed this bot to message you when you logged in on {message.content.domain_name}</span>\n            </span>\n        );\n\n    default:\n        return null;\n    }\n}\nMessageSummaryWithoutIcon.propTypes= {\n    /** Input message */\n    message: PropTypes.object,\n    className: PropTypes.string,\n    /** The chat in which the message was */\n    chat: PropTypes.object,\n    /** A dictionary of all users */\n    users: PropTypes.object,\n};\n\n\n/** If caption has a value, adds a comma to type and returns type */ \nfunction MayHaveCaption({type, caption, className, message, chat, users}) {\n    if(caption) type+=',';\n    return (\n        <span className={className}>\n            <MessageSummarySender message={message} chat={chat} users={users}/>\n            <span className=\"part-1\">{type}</span> <span className=\"part-2\">{caption.replace(/(\\n|\\r|\\r\\n|\\n\\r)/g, ' ')}</span>\n        </span>\n    );\n}\nMayHaveCaption.propTypes= {\n    /** Message type, e.g. 'GIF', 'Video' */\n    type: PropTypes.string.isRequired,\n    /** Message caption, can be empty */\n    caption: PropTypes.string,\n    className: PropTypes.string,\n    /** Message object */\n    message: PropTypes.object,\n    /** The chat in which the message was sent */\n    chat: PropTypes.object,\n    /** A dictionary of all users */\n    users: PropTypes.object.isRequired\n};\n\n/** If caption has a value, adds a comma to type and returns type */ \nfunction MayHaveCaptionThumbnail({thumbnails, isVideo, type, caption, className, message, chat, users}) {\n    if(!thumbnails?.length) return <MayHaveCaption type={type} caption={caption} className={className} message={message} chat={chat} users={users}/>;\n    return (\n        <span className={className}>\n            <MessageSummarySender message={message} chat={chat} users={users}/>\n            {thumbnails.map((data, i) => data && <span className={'thumbnail'+ (isVideo? ' video': '')} key={i}><img src={'data:image/jpeg;base64,'+data}/></span>)} \n            {caption? \n                <span className=\"part-2\">{caption.replace(/(\\n|\\r|\\r\\n|\\n\\r)/g, ' ')}</span>\n                :<span className=\"part-1\">{type}</span> \n            }\n        </span>\n    );\n}\nMayHaveCaptionThumbnail.propTypes= {\n    /** An array of one or more base64-encoded image data */\n    thumbnails: PropTypes.arrayOf(PropTypes.string),\n    /** If true, a tiny play icon will be shown on the image */\n    isVideo: PropTypes.bool,\n    /** Message type, e.g. 'GIF', 'Video' */\n    type: PropTypes.string.isRequired,\n    /** Message caption, can be empty */\n    caption: PropTypes.string,\n    className: PropTypes.string,\n    /** Message object */\n    message: PropTypes.object,\n    /** The chat in which the message was sent */\n    chat: PropTypes.object,\n    /** A dictionary of all users */\n    users: PropTypes.object.isRequired\n};\n\n/** Sender's first name + last name */\nfunction SenderFullName({message, chat, users, includeYou}) {\n    if(includeYou) { // Use 'You' if the message is outgoing?\n        return message.is_outgoing ? 'You' : <SenderFullName message={message} chat={chat} users={users}/>;\n    }\n    const sender=message.sender;\n    const user=users[sender.user_id];\n    if(sender['@type']=='messageSenderUser') {\n        return getUserFullName(user); \n    } else if(sender['@type']=='messageSenderChat') { // Anonymous admin\n        return chat.title;\n    }\n}\n\n/** Short sender names in the beginning of message previews */\nexport const MessageSummarySender= \n    function MessageSummarySender ({message, chat, users}) {\n        if(!message) return null;\n\n        var part1;\n        if(chat && (!message.is_channel_post)) { // Channel posts dont have sender names\n            if(message.is_outgoing) {\n                part1= 'You: ';\n            } else if(['chatTypeBasicGroup', 'chatTypeSupergroup'].includes(chat.type['@type'])) { // Message is sent in a group\n                if(message.sender['@type']=='messageSenderUser') {\n                    part1= users[message.sender.user_id].first_name + ': ';\n                }\n            }\n            if(message.sender['@type']=='messageSenderChat') {\n                part1= getChatNoCache(message.sender.chat_id).title+': ';\n            }\n        }\n        return part1? <span className=\"sender\">{part1}</span> : null;\n    };\nMessageSummarySender.propTypes= {\n    /** Message to check the sender */\n    message: PropTypes.object.isRequired,\n    /** Chat in which the message was sent */\n    chat: PropTypes.object.isRequired,\n    /** A dictionary of all users */\n    users: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './link-button.scss';\n\n/**\n * Renders a button looking like a link.\n */\nexport default function LinkButton({href, children, onClick, ...rest}) {\n    const click= href ? ()=> window.open(href) : onClick;\n    return (\n        <button className=\"link-button\" onClick={click} {...rest}>{children}</button>\n    );\n}\nLinkButton.propTypes = {\n    /** Link content */\n    children: PropTypes.node.isRequired,\n    /** Function to be called when link is clicked. */\n    onClick: PropTypes.func,\n    /** If provided, the URL will be opened in a new tab on click. */\n    href: PropTypes.string\n};\n","import {createStore} from 'redux';\nimport TdLib from '../TdWeb/tdlib';\n\nfunction reducer(state, action) {\n    switch (action.type) {\n    case 'UPD_SUPERGROUP':\n        return {\n            ...state,\n            [action.supergroup.id]: action.supergroup\n        };\n    default:\n        return state;\n    }\n}\n\nconst supergroupStore= createStore(reducer);\nexport default supergroupStore;\n\nTdLib.registerUpdateHandler('updateSupergroup', (update) => {\n    supergroupStore.dispatch({\n        type: 'UPD_SUPERGROUP',\n        supergroup: update.supergroup\n    });\n});","import supergroupStore from './supergroup-store';\nimport usersStore from './users-store';\n\n/**\n * Check if the chat is with a deleted user\n * @param {import('tdweb').TdObject} chat The chat to check\n * @param {{[key: number]: import('tdweb').TdObject}} users A dictionary of all users (e.g. usersStore state)\n * @returns True if the chat is private and the other party's account is deleted\n */\nexport function isChatWithDeletedAccount(chat, users) {\n    switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup': // Groups are not applicable\n    case 'chatTypeSupergroup':\n        return false;\n    \n    case 'chatTypeSecret':\n    case 'chatTypePrivate': \n        var user= (users || usersStore.getState())?.[chat.type.user_id];\n        return user && user.type['@type'] === 'userTypeDeleted';\n    }\n    return false;\n}\n\n/**\n * Returns the chat's title and handles deleted account\n * @param {object} chat The chat to get the name of\n * @param {{[key: number]: object}} users A list of all users (e.g. usersStore state). If not provided, usersStore will be used\n * @returns Chat title, or 'Deleted Account'\n */\nexport function chatTitleOrDeletedAccount(chat, users) {\n    if(isChatWithDeletedAccount(chat, users))\n        return 'Deleted Account';\n    return chat.title;\n}\n\n/**\n * Checks if a user, bot or channel is verified\n * @param {import('tdweb').TdObject} chat The chat to be checked\n * @returns {boolean} True if the chat is verified, false if not\n */\nexport function isChatVerified(chat){\n    switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n        return false;\n\n    case 'chatTypeSupergroup':\n        var supergroup= supergroupStore.getState()?.[chat.type.supergroup_id];\n        return supergroup.is_verified;\n        \n    case 'chatTypeSecret':\n    case 'chatTypePrivate': \n        var user= usersStore.getState()?.[chat.type.user_id];\n        return user.is_verified;\n    }\n    return false;\n}","\n/**\n * Converts a date and time to a short string.\n * - If the date is in the last 20 hours, the time is displayed in the format HH:MM.\n * - If the date is in the last 7 days, the weekday is displayed.\n * - If the date is older, the date is displayed in the format DD.MM.YY.\n * @param {Date|Number} date Input date\n */\nexport function smallDateTimeToString(date) {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    const now = new Date();\n    const yesterday = new Date(now.getTime() - 20 * 60 * 60 * 1000);\n    const lastWeek = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n\n    if (date.getTime() >= yesterday.getTime()) {\n        return timeToString(date);\n    } else if (date.getTime() >= lastWeek.getTime()) {\n        return weekdayToString(date);\n    } else {\n        return dateToString(date);\n    }\n}\n\n/**\n * Formats time in 12-hour format\n * @param {Date|Number} date input date\n */\nexport function timeToString(date) {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    var hours = date.getHours();\n    var minutes = date.getMinutes();\n    const ampm = hours >= 12 ? 'PM' : 'AM';\n    hours = hours % 12;\n    hours = hours ? hours : 12; // the hour '0' should be '12'\n    minutes = minutes < 10 ? `0${minutes}` : minutes;\n    return `${hours}:${minutes} ${ampm}`;\n}\n\n/**\n * Formats weekday in WWW format\n * @param {Date|Number} date input date\n */\nexport function weekdayToString(date) {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    return weekdays[date.getDay()];\n}\n\n/**\n * Formats date in DD.MM.YY format\n * @param {Date|Number} date input date\n */\nexport function dateToString(date) {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    var day = date.getDate();\n    var month = date.getMonth() + 1;\n    const year = String(date.getFullYear()).slice(2);\n    if (day < 10) {\n        day = `0${day}`;\n    }\n    if (month < 10) {\n        month = `0${month}`;\n    }\n    return `${day}.${month}.${year}`;\n}\n\n/**\n * Converts a TDLIb unix time to a `Date` object.\n */\nexport function TdLibDateToDate(tdLibDate) {\n    return new Date(tdLibDate * 1000);\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { createStore } from 'redux';\nimport { connect } from 'react-redux';\nimport './context-menu.scss';\n\n/**\n * A context menu (right click menu)\n */\nexport function ContextMenu({x, y, children}) {\n    const [direction, setDirection] = React.useState('br');\n    const ref = React.useRef();\n    React.useEffect(() => {\n        setTimeout(() => {\n            const rect = ref.current.children[0].getBoundingClientRect();\n            const {width, height} = rect;\n            const {clientWidth, clientHeight} = document.documentElement;\n            var X = 'r', Y = 'b';\n            if (x + width > clientWidth) {\n                X = 'l';\n            }\n            if (y + height > clientHeight) {\n                Y = 't';\n            }\n            setDirection(Y + X);\n        }, 0);\n    }, []);\n\n    return (\n        <div className=\"context-menu\" style={{'--x': x+'px', '--y': y+'px'}}>\n            <div className={'menu ' + direction} ref={ref}>\n                {children}\n            </div>\n        </div>\n    );\n}\nContextMenu.propTypes = {\n    /** Position relative to viewport */\n    x: PropTypes.number.isRequired,\n    /** Position relative to viewport */\n    y: PropTypes.number.isRequired,\n    children: PropTypes.node.isRequired\n};\n\nexport const contextMenusStore = createStore(function (state = null, action) {\n    if (action.type === 'ADD_CONTEXT_MENU') {\n        return action.menu;\n    }\n    else if (action.type === 'REMOVE_CONTEXT_MENUS') {\n        return null;\n    }\n    return state;\n});\n\nexport const ContextMenus= connect(state=>({menus:state}))(({menus}) => menus);\n\n/**\n * Create a context menu\n * @param {React.SyntheticEvent} e Pass down `e` from the event handler\n * @param {React.ReactNode} menu Context menu contents\n */\nexport function createContextMenu(e, menu) {\n    e.preventDefault();\n    setTimeout(() => { // This is to fix ripple effect glitch\n        contextMenusStore.dispatch({\n            type: 'ADD_CONTEXT_MENU',\n            menu: <ContextMenu x={e.nativeEvent.pageX} y={e.nativeEvent.pageY}>{menu}</ContextMenu>\n        });\n    }, 50); // Human brain cannot notice 50ms delay\n}\n\nexport function onAnywhereClicked() {\n    contextMenusStore.dispatch({\n        type: 'REMOVE_CONTEXT_MENUS'\n    });\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './menu.scss';\n\n/**\n * A dropdown menu (not to be confused with `<select>`).\n */\nexport default function Menu(props) {\n    return (\n        <div className=\"menu\" {...props}/>\n    );\n}\n\n/**\n * Dropdown menu contents (created as a separate component so that it can be wrapped by other components).\n */\nMenu.MenuContents= function MenuContents(props) {\n    return (\n        <div className=\"menu-contents\" {...props}/>\n    );\n};\n\n/**\n * A menu item.\n */\nMenu.MenuItem= function MenuItem({children, ...rest}) {\n    return (\n        <div className=\"menu-item\" {...rest}>\n            {children}\n        </div>\n    );\n};\nMenu.MenuItem.propTypes = {\n    children: PropTypes.node\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './toast.scss';\nimport { createStore } from 'redux';\nimport { connect } from 'react-redux';\n\n/**\n * Renders a toast (a small text which is temporarily shown in the middle of the screen)\n */\nexport default function Toast({children}) {\n    const [closed, setClosed] = React.useState(false);\n    React.useEffect(() => {\n        setTimeout(() => { // Automatically close after 6 seconds\n            setClosed(true); // When an element has a closing dialog, a CSS class should be added to trigger the animation\n            setTimeout(() => { // Then we wait until the animation is finished\n                addToast(null); // And we can safely remove the element\n            }, 2000);\n        }, 6000);\n    }, []);\n    return (\n        <div className={'toast' + (closed? ' closed':'')}>\n            <div className=\"toast-content\">\n                {children}\n            </div>\n        </div>\n    );\n}\nToast.propTypes = {\n    children: PropTypes.node.isRequired,\n};\n\nexport const toastStore= createStore((state=null, action) => {\n    if(action.type=='SET_TOAST') return action.toast;\n    return state;\n});\n\nexport const Toasts= connect(state=>({toast: state}))(function Toasts({toast}){\n    return toast;\n});\n\nexport function addToast(toast) {\n    toastStore.dispatch({\n        type: 'SET_TOAST',\n        toast\n    });\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { createStore } from 'redux';\n\n/**\n * A redux store which state is an array of objects with {id: unique ID of dialog, element: react element of the dialog}\n */\nexport var dialogStore= createStore(\n    /**\n     * @param {any[]} state\n     * @param {Object} action\n     */\n    function (state= [], action) {\n        switch (action.type) {\n        case 'ADD_DIALOG':\n            return [\n                ...state,\n                action.dialog\n            ];\n        \n        case 'REMOVE_DIALOG':\n            return state.filter(value => value.id!=action.id);\n        \n        default:\n            break;\n        }\n    },\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\n/**\n * Opens a dialog\n * @param {string} id A unique ID for the dialog\n * @param {React.ReactElement} dialog The dialog React element\n */\nexport function addDialog(id, dialog) {\n    dialogStore.dispatch({\n        type: 'ADD_DIALOG',\n        dialog: {\n            element: dialog,\n            id: id\n        }\n    });\n}\n\n/**\n * Closes an existing dialog\n * @param {string} id The dialog unique ID\n */\nexport function removeDialog(id) {\n    dialogStore.dispatch({\n        type: 'REMOVE_DIALOG',\n        id: id\n    });\n}\n\n/**\n * Renders all dialogs.\n */\nconst Dialogs= (connect(function (state) {\n    return {dialogs: state || []};\n    // eslint-disable-next-line no-unused-vars\n})(function Dialogs({dialogs, dispatch, ...rest}) {\n    return (\n        <div data-dialog={!!dialogs.length} {...rest}>\n            {dialogs.map(el => <React.Fragment key={el.id}>{el.element}</React.Fragment>) || null}\n        </div>\n    );\n}));\n\nexport default Dialogs;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport RippleEffect, {handleMyMouseEventsFunction} from './ripple-effect';\n\n/**\n * Renders a small button with accent color\n */\nexport default function SmallButton ({children, attention, ...rest}) {\n    const ripple= React.useState({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave]= handleMyMouseEventsFunction(ripple);\n    return (\n        <button \n            className=\"small-button\" \n            data-attention={attention? 'true': 'false'}\n            onMouseDown={mouseDown}\n            onMouseUp={mouseUp}\n            onMouseLeave={mouseLeave}\n            {...rest}>\n\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-lightButtonBgRipple)\"/>\n\n            {/* Because we use absolute positioning on the actual content, we need a copy of it without absolute position to get the correct parent size. */}\n            <div className=\"invisibleText\">\n                {children}\n            </div>\n\n            <div className=\"content\">\n                {children}\n            </div>\n            \n        </button>\n    );\n}\nSmallButton.propTypes= {\n    /** The button's content */\n    children: PropTypes.node.isRequired,\n    /** Fires when the button is clicked */\n    onClick: PropTypes.func,\n    /** Setting to true causes the button to become red */\n    attention: PropTypes.bool\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { removeDialog } from './dialogs';\n/**\n * Renders a modal dialog\n * Use React ref to access the `close()` method.\n */\nexport default class Dialog extends React.Component{\n    static propTypes= {\n        children: PropTypes.node.isRequired,\n        /** Dialog width in CSS format */\n        width: PropTypes.string,\n        /** Unique ID of this dialog, used to close it. */\n        id: PropTypes.any.isRequired,\n        className: PropTypes.string\n    };\n    state= {\n        closing: false\n    }\n    ref = React.createRef();\n    /** @param {React.SyntheticEvent} e */\n    onClick= (e) => {\n        if (e.target === this.ref.current) {\n            this.close();\n        }\n    }\n    render(){\n        return (\n            <div ref={this.ref} onClick={this.onClick} id={this.props.id} className={'modal-dialog' + ((this.state.closing) ? ' closing ' : ' ') + this.props.className}>\n                <div style={{\n                    'width': this.props.width || 'auto'\n                }}>\n                    {this.props.children}\n                </div>\n            </div>\n        );\n    }\n    close= ()=>{\n        this.setState({\n            closing: true\n        });\n        setTimeout(() => {\n            removeDialog(this.props.id);\n        }, 1000);\n    }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SmallButton from '../elements/small-button';\nimport Dialog from './dialog';\n/**\n * Renders a modal dialog with a title and cancel and OK button. OK button text can be changed.\n */\nexport default class ConfirmDialog extends React.Component{\n    dialogRef = React.createRef();\n    handleOK =()=>{\n        this.dialogRef.current.close();\n        this.props.onOK && this.props.onOK();\n    }\n    handleCancel =()=>{\n        this.dialogRef.current.close();\n        this.props.onCancel && this.props.onCancel();\n    }\n    handleButton =(handler)=>{\n        this.dialogRef.current.close();\n        handler && handler();\n    }\n    render() {\n        return (\n            <Dialog className=\"confirm-dialog\" id={this.props.id} ref={this.dialogRef} width={this.props.width || '320px'}>\n                <h1>{this.props.title || ''}</h1>\n                <div className={'content' + (this.props.largeFont? ' large-font' : '')}>\n                    {this.props.children}\n                </div>\n                <div className=\"options\">\n                    {this.props.thirdButton ?  (\n                        <SmallButton \n                            className=\"small-button left\"\n                            style={{'float': 'left'}}\n                            onClick={ this.props.thirdButtonClosesDialog ?\n                                ()=>this.handleButton(this.props.onThirdButtonClick)\n                                : this.props.onThirdButtonClick}>\n                            {this.props.thirdButton}\n                        </SmallButton>\n                    ) : null}\n                    {this.props.hideCancelButton ? null : (\n                        <SmallButton onClick={()=>this.handleButton(this.props.onCancel)}>\n                            Cancel\n                        </SmallButton>\n                    )}\n                    <SmallButton onClick={()=>this.handleButton(this.props.onOK)} attention={this.props.attention}>\n                        {this.props.OKButtonText || 'OK'}\n                    </SmallButton>\n                </div>\n            </Dialog>\n        );\n    }\n}\nConfirmDialog.propTypes= {\n    children: PropTypes.node.isRequired,\n    /** Dialog width in CSS format */\n    width: PropTypes.string,\n    /** Dialog header */\n    title: PropTypes.string,\n    /** Text content of the OK button*/\n    OKButtonText: PropTypes.string,\n    /** Pass true to only show the OK button */\n    hideCancelButton: PropTypes.bool,\n    /** Unique ID of this dialog, used to close it. */\n    id: PropTypes.any.isRequired,\n    /** Called when the OK button is pressed */\n    onOK: PropTypes.func,\n    /** Called when the cancel button is pressed */\n    onCancel: PropTypes.func,\n    /** Third button text (optional) */\n    thirdButton: PropTypes.string,\n    /** Pass true if third button click closes dialog */\n    thirdButtonClosesDialog: PropTypes.bool,\n    /** Called when third button is pressed */\n    onThirdButtonClick: PropTypes.func,\n    /** If true, the OK button will become red, meaning the user should pay attention */\n    attention: PropTypes.bool,\n    /** If true, the dialog text will be larger */\n    largeFont: PropTypes.bool\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect, Provider } from 'react-redux';\nimport TdLib from '../../../TdWeb/tdlib';\nimport chatStore, { compareChatList } from '../../chat-store';\nimport './chat-list.scss';\nimport ProfilePhoto, { getChatTypeId } from '../../../ui/components/profile-photo';\nimport { dialogs_chat, dialogs_channel, dialogs_bot, dialogs_pinned, dialogs_verified_star, dialogs_verified_check, dialogs_sending, dialogs_sent, dialogs_received, archive_userpic, history_to_down } from '../../../ui/icon/icons';\nimport usersStore from '../../users-store';\nimport ScrollView from '../../../ui/scroll/scrollbar';\nimport MessageSummaryWithoutIcon from '../../message/message-summary-noicon';\nimport LinkButton from '../../../ui/elements/link-button';\nimport { isChatWithDeletedAccount, isChatVerified, chatTitleOrDeletedAccount } from '../../chat-misc';\nimport { smallDateTimeToString } from '../../../time-tostring';\nimport { getMessageStatus } from '../../message-misc';\nimport options from '../../../TdWeb/options';\nimport RippleEffect, { handleMyMouseEvents, handleMyMouseEventsFunction } from '../../../ui/elements/ripple-effect';\nimport { createContextMenu } from '../../../ui/menu/context-menu';\nimport Menu from '../../../ui/menu/menu';\nimport Toast, { addToast } from '../../../ui/dialog/toast';\nimport { addDialog } from '../../../ui/dialog/dialogs';\nimport ConfirmDialog from '../../../ui/dialog/confirm-dialog';\nimport './history-to-down.scss';\nimport IconButton from '../../../ui/elements/icon-button';\nimport { chatListScrollToTopEvent } from './chat-folders';\n\n/**********************************************************************************************\n * Because of the length of this file, it is recommended to use a tool to view document outline\n **********************************************************************************************/\n\n/**\n * Returns a sorted list of all chats in the given chat list\n * \n * Also for every chat, sets `chat.position` to the matching position (creates copy instead of modifying original object)\n * @param {import('tdweb').TdObject[]} chats\n * @param {import('tdweb').TdObject} list\n */\nexport function getChatsFromList(chats, list) {\n    return chats.map(chat => { // Step 1 - get the chat positions which refer to the current list\n        for( const position of chat.positions ) {\n            if (compareChatList(list, position.list)) {\n                if( position.order=='0' ) return false; // Replace a chat without a suitable position with `false`\n                return {\n                    ...chat,\n                    position: position // Store the position in chat object\n                };\n            }\n        }\n        return chat;\n    })\n        .filter(chat => !!chat.position) // Step 2 - Remove `false` values (chats outside the list)\n        .sort((a, b) => { // Step 3 - Sort it by position.order\n            let order1= a.position.order, order2= b.position.order;\n\n            if (order1 == order2) {\n                return 0;\n            }\n            if (order1 < order2) {\n                return 1;\n            }\n            return -1;\n        });\n}\n\n/**\n * Renders the chats within a chat list\n */\nconst ChatList= connect(state=> ({connectionState: state}))(\n    class ChatList extends React.Component { \n        static propTypes = {\n            chats: PropTypes.array.isRequired,\n            list: PropTypes.object.isRequired,\n            connectionState: PropTypes.string.isRequired,\n            unread: PropTypes.object.isRequired,\n        }\n        state= {\n            scrollToTopVisible: false,\n            chatListFinished: false\n        }\n        scrollRef= React.createRef();\n\n        onScroll= (e) => {\n            const visible= e.target.scrollTop > 480;\n            if (visible != this.state.scrollToTopVisible) {\n                this.setState({scrollToTopVisible: visible});\n            }\n        }\n\n        // When updating, TDLib sends updates of type updateChatLastMessage, where only the last one is needed.\n        // This greatly hurts performance.\n        // However, we can workaround it by not re-rendering until all updates have arrived.\n        shouldComponentUpdate(nextProps, nextState) {\n            return (nextProps.chats !== this.props.chats \n                || nextProps.list !== this.props.list \n                || nextProps.unread !== this.props.unread\n                || nextProps.connectionState !== this.props.connectionState\n                || nextState.scrollToTopVisible !== this.state.scrollToTopVisible)\n                && nextProps.connectionState != 'connectionStateUpdating'\n                && nextState.chatListFinished; // Do not re-render if updating\n        }\n\n        render() {\n            // Get chats from the list (this needs to be repeated on every modification)\n            const array= getChatsFromList(this.props.chats, this.props.list).map(chat=><Chat key={chat.id} chat={chat} />);\n            \n            return (\n                <React.Fragment>\n                    <ScrollView scrollRef={this.scrollRef} id=\"chat-list\" scrollBarWidth=\"4\" onScroll={this.onScroll}>\n                        {this.props.list['@type']=='chatListMain' && (\n                            <Provider store={chatStore}>\n                                <ArchivedChatsItem chats={this.props.chats}/>\n                            </Provider>\n                        )}\n                        <Provider store={usersStore}>\n                            {array.length ? array :  <EmptyChatList list={this.props.list} unread={this.props.unread}/>}\n                        </Provider>\n                    </ScrollView>\n                    <IconButton icon={history_to_down} onClick={this.scrollToTop}\n                        className={'history-to-down '+(this.state.scrollToTopVisible ? 'visible' : '')}/>\n                </React.Fragment>\n            );\n        }\n\n        scrollToTop= () => {\n            this.scrollRef.current.view.scroll({\n                top: 0,\n                behavior: 'smooth',\n            });\n        }\n\n        componentDidMount() {\n            chatListScrollToTopEvent[0]= this.scrollToTop;\n            // Request TDLib to return chats in main list and archive list\n            TdLib.sendQuery({\n                '@type': 'getChats',\n                'chat_list': {\n                    '@type': 'chatListMain'\n                },\n                'offset_order': '9223372036854775807',\n                'offset_chat_id': 0,\n                'limit': 50\n            }).then(()=> {\n                this.setState({\n                    chatListFinished: true\n                });\n            });\n            TdLib.sendQuery({\n                '@type': 'getChats',\n                'chat_list': {\n                    '@type': 'chatListArchive'\n                },\n                'offset_order': '9223372036854775807',\n                'offset_chat_id': 0,\n                'limit': 50\n            });\n        }\n    }\n);\nexport default ChatList;\n\n/**\n * Renders a single chat\n */\nclass ChatListItem extends React.Component {\n    constructor(props) {\n        super(props);\n        [this.mouseDown, this.mouseUp, this.mouseLeave]= handleMyMouseEvents(this);\n    }\n    state= {\n        ripple: {\n            state: 'off'\n        }\n    };\n    shouldComponentUpdate(nextProps, nextState) {\n        function getUser(props){ // Gets the user which is the other party of the chat. Used to see if the needed user has changed\n            if(props.chat.type['@type']=='chatTypePrivate') {\n                return props.users[props.chat.type.user_id];\n            }\n            return null;\n        }\n        return nextProps.chat.id !== this.props.chat.id\n            || nextProps.chat.last_message !== this.props.chat.last_message\n            || nextProps.chat.draft_message !== this.props.chat.draft_message\n            || nextProps.chat.unread_count !== this.props.chat.unread_count\n            || nextProps.chat.unread_mention_count !== this.props.chat.unread_mention_count\n            || nextProps.chat.is_marked_as_unread !== this.props.chat.is_marked_as_unread\n            || nextProps.chat.position.is_pinned !== this.props.chat.position.is_pinned\n            || nextProps.chat.photo?.small?.id !== this.props.chat.photo?.small?.id\n            || nextProps.chat.title !== this.props.chat.title\n            || nextProps.chat.last_read_outbox_message_id !== this.props.chat.last_read_outbox_message_id\n            || nextState.ripple !== this.state.ripple\n            || getUser(nextProps) !== getUser(this.props);\n    }\n    render(){\n        const chat= {...this.props.chat}; // Clone chat object to avoid mutating it. Mutating it causes Saved messages and Deleted account chats to get past shouldComponentUpdate.\n        var chatType= '';\n        if (chat.type?.['@type'] == 'chatTypeBasicGroup' ||      // Groups are basic groups and non-channel supergroups\n                (chat.type?.['@type'] == 'chatTypeSupergroup' &&\n                chat.type?.is_channel == false)\n        ){\n            chatType= dialogs_chat;\n        } \n        else if (chat.type?.['@type'] == 'chatTypeSupergroup' && // Channels are supergroups with is_channel set to true\n                chat.type?.is_channel == true){\n            chatType= dialogs_channel;\n        } \n        else if ((chat.type?.['@type'] == 'chatTypePrivate') &&  // Bots are private chats with bot user type\n                (this.props.users[chat.type?.user_id]?.type?.['@type'] == 'userTypeBot')){\n            chatType= dialogs_bot;\n        }\n        if (chat.id==options['replies_bot_chat_id']) { // Replies bot does not have a type icon\n            chatType= '';\n        }\n\n        if(isChatWithDeletedAccount(chat, this.props.users)) {\n            chat.title= 'Deleted Account'; // Chat object is a copy, so there is no problem with mutating it.\n        }\n\n        const isVerified= isChatVerified(chat);\n\n        if (chat.id==options['my_id']) {\n            chat.title= 'Saved Messages';\n        }\n\n        var messageStatus = null;\n        switch(getMessageStatus(chat, chat.last_message)) { // Is the message sending, sent or seen?\n        case 'sending': \n            messageStatus = <span className=\"message-status-icon sending\" dangerouslySetInnerHTML={{__html: dialogs_sending}}/>;\n            break;\n        case 'sent': \n            messageStatus = <span className=\"message-status-icon sent\" dangerouslySetInnerHTML={{__html: dialogs_sent}}/>;\n            break;\n        case 'seen': \n            messageStatus = <span className=\"message-status-icon seen\" dangerouslySetInnerHTML={{__html: dialogs_received}}/>;\n            break;\n        }\n\n        var unreadBadge = null;\n        const unreadBadgeClass= chat.notification_settings.mute_for ? 'unread-badge muted' : 'unread-badge';\n        // Show the mention badge alone if there is exactly one mention and no other unread messages\n        if (chat.unread_mention_count == 1 && chat.unread_count == chat.unread_mention_count) {\n            unreadBadge = <span className=\"unread-badge mention\">@</span>;\n        } \n        // Show the mention badge with unread badge together if there are more than one unread messages and there are mentions\n        else if (chat.unread_mention_count > 0 && chat.unread_count > 1 ) {\n            unreadBadge = <React.Fragment>\n                <span className=\"unread-badge mention\">@</span>\n                <span className={unreadBadgeClass}>{chat.unread_count}</span>\n            </React.Fragment>;\n        }\n        // Show the unread badge alone if there are no mentions and there are unread messages\n        else if (chat.unread_count > 0 && chat.unread_mention_count == 0) {\n            unreadBadge = <span className={unreadBadgeClass}>{chat.unread_count}</span>;\n        }\n        // Show an empty badge if chat is manually marked as unread\n        else if (chat.is_marked_as_unread) {\n            unreadBadge = <span className={unreadBadgeClass}></span>;\n        }\n\n        var isOnline= false; // User online status\n        if((chat.type['@type']== 'chatTypePrivate') && // Only private chats (except saved messages and service notifications)\n            (chat.id!=options['my_id']) && (chat.id!=options['telegram_service_notifications_chat_id']) ){ \n            const user= this.props.users[chat.type.user_id];\n            if(user) {\n                isOnline= user.type['@type'] == 'userTypeRegular' && user.status['@type'] == 'userStatusOnline'; // Shouldn't be a bot\n            }\n        }\n\n        return(\n            <div className=\"chat\" onContextMenu={e=> createContextMenu(e, <ChatContextMenu chat={chat}/>)}\n                onMouseDown={this.mouseDown} onMouseUp={this.mouseUp} onMouseLeave={this.mouseLeave}>\n                <RippleEffect {...this.state.ripple} color=\"var(--theme-color-dialogsRippleBg)\"/>\n                <div className=\"content\" data-online={isOnline ? 'true' : 'false'}>\n                    <ProfilePhoto name={chat.title} photo={chat.photo?.small} id={getChatTypeId(chat)}/>\n                    <div className=\"details\">\n                        <div className=\"top\">\n                            <div className=\"left\">\n                                <div className=\"type-icon\" dangerouslySetInnerHTML={{__html: chatType}}></div>\n                                <div className=\"title\">{chat.title}</div>\n                                {isVerified && <span className=\"verified-icon\">\n                                    <span className=\"verified-icon-star\" dangerouslySetInnerHTML={{__html: dialogs_verified_star}}></span>\n                                    <span className=\"verified-icon-check\" dangerouslySetInnerHTML={{__html: dialogs_verified_check}}></span>\n                                </span>}\n                            </div>\n                            <div className=\"right\">\n                                {messageStatus}\n                                {chat.last_message?.date && <span className=\"date\">{smallDateTimeToString(chat.last_message.date)}</span>}\n                            </div>\n                        </div>\n                        <div className=\"bottom\">\n                            <div className=\"left\">\n                                {(chat.draft_message && !unreadBadge) ?  // I don't know why, but Telegram Desktop does not show the draft message if the chat is unread.\n                                    <span className=\"last-message\">\n                                        <span className=\"draft\">Draft:</span> <span className=\"part-2\">{chat.draft_message.input_message_text.text.text}</span>\n                                    </span> \n                                    :\n                                    <MessageSummaryWithoutIcon message={chat.last_message} users={this.props.users} chat={chat} className=\"last-message\"/>\n                                }\n                            </div>\n                            <div className=\"right\">\n                                {unreadBadge || ( // Unread badge overrides pinned icon\n                                    chat.position?.is_pinned && <span className=\"pinned_icon\" dangerouslySetInnerHTML={{__html: dialogs_pinned}}></span>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nChatListItem.propTypes = {\n    /** The chat (TdObject) */\n    chat: PropTypes.object.isRequired,\n    /** A dictionary of all users */\n    users: PropTypes.object.isRequired\n};\nconst Chat = connect(state=> ({users: state}))(ChatListItem);\n\n/** Renders the context menu of a chat */\nfunction ChatContextMenu({chat}) {\n    const [movableChatLists, setMovableChatLists] = React.useState([]);\n\n    // Archive/unarchive chats\n    React.useEffect(() => {\n        TdLib.sendQuery({ // Only TDLib can know what lists we can add the chat to\n            '@type': 'getChatListsToAddChat',\n            chat_id: chat.id\n        }).then(result => {\n            setMovableChatLists(result.chat_lists.map(chatList=> {\n                const text= { // Only archive / unarchive\n                    'chatListMain': 'Unarchive chat', \n                    'chatListArchive': 'Archive chat'\n                }[chatList['@type']];\n                if(!text) return;\n                return (\n                    <Menu.MenuItem key={chatList.chat_filter_id || chatList['@type']} onClick={() => {\n                        TdLib.sendQuery({\n                            '@type': 'addChatToList',\n                            chat_id: chat.id,\n                            chat_list: chatList\n                        }).then(() => {\n                            if(chatList['@type'] == 'chatListMain') {\n                                addToast(<Toast>Chat restored from your archive.</Toast>);\n                            } \n                            else if(chatList['@type'] == 'chatListArchive') {\n                                addToast(<Toast>\n                                    Chat archived. <br/>\n                                    Muted chats stay archived when new messages arrive.\n                                </Toast>);\n                            }\n                        });\n                    }}>\n                        {text}\n                    </Menu.MenuItem>\n                );\n            }));\n        });\n    }, []);\n\n    return (\n        <Menu.MenuContents>\n            {movableChatLists /* Archive/unarchive */}\n            <Menu.MenuItem onClick={()=> { // Pin/unpin\n                TdLib.sendQuery({\n                    '@type': 'toggleChatIsPinned',\n                    chat_list: chat.position.list,\n                    chat_id: chat.id,\n                    is_pinned: !chat.position.is_pinned\n                }).catch(error=> {\n                    // Maximum pinned messages\n                    if(error.code == 400) {\n                        const max= chat.position.list['@type'] == 'chatListMain'? options['pinned_chat_count_max'] : options['pinned_archived_chat_count_max'];\n                        addDialog('maximum-pinned-chats-reached', (\n                            <ConfirmDialog id=\"maximum-pinned-chats-reached\" largeFont={true} hideCancelButton={true}>\n                                Sorry, you can only pin {max} chats to the top.\n                            </ConfirmDialog>\n                        ));\n                    }\n                });\n            }}>\n                {chat.position.is_pinned? 'Unpin from top' : 'Pin to top'}\n            </Menu.MenuItem>\n        </Menu.MenuContents>\n    );\n}\nChatContextMenu.propTypes = {\n    chat: PropTypes.object.isRequired\n};\n\nconst ArchivedChatsItem= connect(state=> ({\n    archiveButtonState: state.archiveButtonState,\n    unread: state.unread.archive\n})) (function ArchivedChatsItem({chats, unread, archiveButtonState}) {\n    const chatsInList = getChatsFromList(chats, {'@type': 'chatListArchive'}); // Check if there are any archved chats\n    if(!chatsInList.length) return null; // If there are no archived chats, render nothing\n\n    // Ripple\n    const ripple= React.useState({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave]= handleMyMouseEventsFunction(ripple);\n\n    function onArchiveOpen() {\n        chatStore.dispatch({\n            type: 'SET_ARCHIVE_STATE',\n            archiveState: 'open'\n        });\n    }\n\n    // Change button type to collapsed/expanded/moved to main menu\n    function setButtonState(state) {\n        chatStore.dispatch({\n            type: 'SET_ARCHIVE_BUTTON_STATE',\n            archiveButtonState: state\n        });\n    }\n\n    const moveToMainMenuToast= <Toast>\n        Archive moved to the main menu! <br/>\n        You can return it from the context menu of the archive button.\n    </Toast>;\n\n    switch(archiveButtonState) {\n    case 'expanded': // Looks like a regular chat\n    default:\n        return (\n            <div \n                className=\"chat archived\" onClick={onArchiveOpen}\n                onMouseDown={mouseDown} onMouseUp={mouseUp} onMouseLeave={mouseLeave}\n                onContextMenu={e=> createContextMenu(e, (\n                    <Menu.MenuContents>\n                        <Menu.MenuItem onClick={()=>{\n                            setButtonState('collapsed');\n                            localStorage.setItem('dibgram-archived-chats-button-mode', 'collapsed');\n                        }}>\n                            Collapse\n                        </Menu.MenuItem>\n                        <Menu.MenuItem onClick={()=>{\n                            setButtonState('hidden-expanded');\n                            localStorage.setItem('dibgram-archived-chats-button-mode', 'hidden-expanded');\n                            addToast(moveToMainMenuToast);\n                        }}>\n                            Move to main menu\n                        </Menu.MenuItem>\n                    </Menu.MenuContents>\n                ))}>\n                <RippleEffect {...ripple[0]} color=\"var(--theme-color-dialogsRippleBg)\"/>\n                <div className=\"content\">\n                    <div className=\"profile-photo\">\n                        <div className=\"svg\" dangerouslySetInnerHTML={{__html: archive_userpic}}/>\n                    </div>\n                    <div className=\"details\">\n                        <div className=\"top\">\n                            <div className=\"left\">\n                                <div className=\"title\">Archived chats</div>\n                            </div>\n                        </div>\n                        <div className=\"bottom\">\n                            <div className=\"left\">\n                                <div className=\"last-message\">\n                                    <span className=\"part-1\">\n                                        {chatsInList\n                                            .filter(chat=> chat.unread_count > 0)\n                                            .map(chat => chatTitleOrDeletedAccount(chat) + ', ')\n                                            .join('')}\n                                    </span>\n                                    <span className=\"part-2\">\n                                        {chatsInList\n                                            .filter(chat=> chat.unread_count == 0)\n                                            .map(chatTitleOrDeletedAccount)\n                                            .join(', ')}\n                                    </span>\n                                </div>\n                            </div>\n                            {unread.unread_messages_count? (\n                                <div className=\"right\">\n                                    <span className=\"unread-badge muted\">{unread.unread_messages_count}</span>\n                                </div>\n                            ) : null}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n\n    case 'collapsed': // Only title / tiny icon\n        return (\n            <div\n                className=\"chat archived collapsed\" onClick={onArchiveOpen}\n                onMouseDown={mouseDown} onMouseUp={mouseUp} onMouseLeave={mouseLeave}\n                onContextMenu={e=> createContextMenu(e, (\n                    <Menu.MenuContents>\n                        <Menu.MenuItem onClick={()=>{\n                            setButtonState('expanded');\n                            localStorage.setItem('dibgram-archived-chats-button-mode', 'expanded');\n                        }}>\n                            Expand\n                        </Menu.MenuItem>\n                        <Menu.MenuItem onClick={()=>{\n                            setButtonState('hidden-collapsed');\n                            localStorage.setItem('dibgram-archived-chats-button-mode', 'hidden-collapsed');\n                            addToast(moveToMainMenuToast);\n                        }}>\n                            Move to main menu\n                        </Menu.MenuItem>\n                    </Menu.MenuContents>\n                ))}>\n                <RippleEffect {...ripple[0]} color=\"var(--theme-color-dialogsRippleBg)\"/>\n                <div className=\"content\">\n                    Archived chats\n                    {unread.unread_messages_count? (\n                        <div className=\"details\">\n                            <span className=\"unread-badge muted\">{unread.unread_messages_count}</span>\n                        </div>\n                    ) : null}\n                </div>\n            </div>\n        );\n    case 'hidden-expanded': // Not here, it's in main menu\n    case 'hidden-collapsed':\n        return null;\n    }\n});\nArchivedChatsItem.propTypes = {\n    /** A list of all chats (not just current list) */\n    chats: PropTypes.array.isRequired\n};\n\n/** Renders the empty chat list fallback */\nfunction EmptyChatList({list, unread}) {\n    const loadingFallBack= (\n        <div className=\"empty\">\n            <div>Loading...</div>\n        </div>\n    );\n    if(list['@type']=='chatListFilter'){ // Empty filter / Filter not loaded\n        if(unread.filters?.[list.chat_filter_id]?.total_chats_count !== 0) return loadingFallBack;\n        return (\n            <div className=\"empty\">\n                <div>No chats currently belong to this folder.</div>\n                <LinkButton>Edit Folder</LinkButton>\n            </div>\n        );\n    } else { // There are no chats at all / Chats not loaded\n        if(unread.main?.total_chats_count !== 0) return loadingFallBack;\n        return (\n            <div className=\"empty\">\n                <div>Your chats will be here</div>\n                <LinkButton>New contact</LinkButton>\n            </div>\n        );\n    }\n}\n","/**\n * Gets message sending status. Can return 3 values:\n * - `\"sending\"`: the message is outgoing and is being sent.\n * - `\"sent\"`: the message is outgoing and was sent.\n * - `\"seen\"`: the message is outgoing and was seen by the other party.\n * - `\"unread\"`: the message is incoming and was not seen by this party.\n * - `\"read\"`: the message is incoming and was seen by this party.\n * @param {import(\"tdweb\").TdObject} chat The chat in which the message was sent.\n * @param {import(\"tdweb\").TdObject} message The message to check.\n */\nexport function getMessageStatus(chat, message) {\n    if(!chat || !message) return undefined;\n    if(message.is_outgoing) {\n        if(message.sending_state) {\n            return 'sending';\n        }\n        if(chat.last_read_outbox_message_id >= message.id) {\n            return 'seen';\n        }\n        return 'sent';\n    }\n    if(chat.last_read_inbox_message_id >= message.id) {\n        return 'read';\n    }\n    return 'unread';\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './search-box.scss';\nimport { info_close } from '../../../../ui/icon/icons';\n\n/**\n * Renders the search box.\n */\nexport default function SearchBox(props) {\n    return (\n        <div id=\"search-box\">\n            <input \n                placeholder=\"Search\"\n                value={props.value}\n                onChange={props.onChange}\n                {...props}/>\n            <button \n                className=\"clear\" \n                onClick={()=> props.onChange && props.onChange({target: {value: ''}})}\n                data-visible={(props.value || '').length}\n                dangerouslySetInnerHTML={{__html: info_close}}>\n            </button>\n        </div>\n    );\n}\nSearchBox.propTypes= {\n    value: PropTypes.string,\n    onChange: PropTypes.func\n};","import { createStore } from 'redux';\nimport TdLib from './tdlib';\n\nconst connectionStore = createStore(\n    (state = 'connectionStateConnecting', action) => {\n        switch (action.type) {\n        case 'SET_CONNECTION':\n            return  action.connection;\n        default:\n            return state;\n        }\n    }\n);\n\nTdLib.registerUpdateHandler('updateConnectionState', (update) => {\n    connectionStore.dispatch({\n        type: 'SET_CONNECTION',\n        connection: update.state['@type']\n    });\n});\nexport default connectionStore;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './nav-animation.scss';\n\n/**\n * Renders two navigation sections (outer and inner) with an animation between them\n * \n * You need to set a background color to the outer section. (it has the CSS class 'nav-animation-outer')\n */\nexport default function NavAnimation({ children, innerScreen, className, innerClass, state, mode, ...props }) {\n    return (\n        <div className={'nav-animation ' + mode + ' ' + state + ' ' + className} {...props}>\n            <div className=\"outer\">\n                {children}\n            </div>\n            {state!='closed' && \n                <div className={'inner ' + innerClass}>\n                    {innerScreen}\n                </div>\n            }\n        </div>\n    );\n}\nNavAnimation.propTypes = {\n    children: PropTypes.node.isRequired,\n    /**\n     * The type of animation to use:\n     * - `slide-over`: The parent screen swipes a little to left, while the child screen slides in from the right. \n     *   A shadow is also shown over the parent screen in the animation.\n     * - `swipe-fade`: More subtle animation, the parent screen fades out while moving left, while at the same time the child screen fades in from the right.\n     */\n    mode: PropTypes.oneOf(['slide-over', 'swipe-fade']),\n    /** The child screen content, only needed when open */\n    innerScreen: PropTypes.node,\n    /** The current state of the animation. Can be `open`, `closing` or `closed` */\n    state: PropTypes.oneOf(['open', 'closing', 'closed']),\n    /** The class name to apply to the outer element */\n    className: PropTypes.string,\n    /** The class name to apply to the inner element */\n    innerClass: PropTypes.string\n};\n\nexport function closeNavAnimation(getState, setState) {\n    // First set state to closing, which triggers the closing animation. After that, we can delete the element.\n    setState('closing');\n    setTimeout(() => {\n        if(getState() == 'closing') { // This condition is to prevent glitches when archive is opened again before 2s\n            setState('closed');\n        }\n    }, 2000);\n}\n","import React from 'react';\nimport { connect, Provider } from 'react-redux';\nimport ConnectionState from '../../../ui/components/connecting';\nimport ChatList from './chat-list';\nimport SearchBox from './search/search-box';\nimport HamburgerMenuButton from './hamburger-menu/menu-button';\nimport connectionStore from '../../../TdWeb/connectionStore';\nimport IconButton from '../../../ui/elements/icon-button';\nimport './chat-list-bar.scss';\nimport { info_back } from '../../../ui/icon/icons';\nimport chatStore from '../../chat-store';\nimport NavAnimation, { closeNavAnimation } from '../../../ui/elements/nav-animation';\n\n/**\n * Renders the navigation menu, containing chat list, search field and search results [and the main menu button]\n */\nconst ChatListBar = connect(function (state) {\n    return {\n        useFolders: (state.filters || []).length != 0,\n        chats: state.chats, \n        list: state.currentChatList,\n        archiveState: state.archiveState,\n        unread: state.unread\n    };\n})(function ChatListBar({useFolders, chats, list, archiveState, unread, onHamburgerMenuOpened}) {\n    var [searchText, setSearchText] = React.useState('');\n    \n    function closeArchive() {\n        closeNavAnimation(() => chatStore.getState().archiveState,\n            state => {\n                chatStore.dispatch({\n                    type: 'SET_ARCHIVE_STATE',\n                    archiveState: state\n                });\n            }\n        );\n    }\n\n    return (\n        <React.Fragment>\n            <NavAnimation \n                mode=\"slide-over\" \n                id=\"chat-list-bar\"\n                state={archiveState}\n                innerClass=\"archived-chats\"\n                innerScreen={\n                    <Provider store={connectionStore}>\n                        <div className=\"chat-list-header\">\n                            <IconButton icon={info_back} onClick={closeArchive}/>\n                            {unread.main.unread_unmuted_messages_count? (\n                                <div className=\"unread-badge\">\n                                    <span>{unread.main.unread_unmuted_messages_count}</span>\n                                </div>\n                            ): null}\n                            <div className=\"title\">Archived chats</div>\n                        </div>\n                        <ChatList chats={chats} list={{'@type': 'chatListArchive'}} unread={unread}/>\n                    </Provider>\n                }>\n                <div className=\"chat-list-header\">\n                    {(!useFolders) && <HamburgerMenuButton.WithoutFolders onClick={onHamburgerMenuOpened}/>}\n                    <SearchBox value={searchText} onChange={e => setSearchText(e.target.value)}/>\n                </div>\n                <Provider store={connectionStore}>\n                    <ChatList chats={chats} list={list} unread={unread}/>\n                </Provider>\n            </NavAnimation>\n            <Provider store={connectionStore}>\n                <ConnectionState/>\n            </Provider>\n        </React.Fragment>\n    );\n});\nexport default ChatListBar;\n","export default '0.0.2-beta2';","import React from 'react';\nimport PropTypes from 'prop-types';\nimport RippleEffect, {handleMyMouseEventsFunction} from '../elements/ripple-effect';\nimport './button.scss';\n\n/**\n * Renders a tool strip button. Has an icon and children, if provided will align to the right.\n */\nexport default function ToolStripButton({icon, text, children, ...rest}) {\n    const ripple = React.useState({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave]= handleMyMouseEventsFunction(ripple);\n    return (\n        <div className=\"tool-strip-button\" {...rest}\n            onMouseDown={mouseDown} onMouseUp={mouseUp} onMouseLeave={mouseLeave}>\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-windowBgRipple)\"/>\n            <div className=\"content\">\n                <div className=\"icon\" dangerouslySetInnerHTML={{__html: icon}}></div> \n                <div className=\"title\">{text}</div>\n                {children && (\n                    <div className=\"right\">\n                        {children}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\nToolStripButton.propTypes = {\n    /** Icon HTML */\n    icon: PropTypes.string,\n    /** Button text */\n    text: PropTypes.string,\n    /** Optionally, an element to show aligned to right */\n    children: PropTypes.node\n};","/**\n * There are 3 ways to import the items\n * 1. import each component from the respective file\n * 2. import each component from tool-strip.js\n * 3. import the default export from tool-strip.js and access the object members\n * You can use whichever you want.\n */\n\nimport ToolStripButton from './button';\nimport ToolStripSection from './section';\nimport ToolStripToggleButton from './toggle-button';\n\n/**\n * A collection of different components to create a generic menu.\n * \n * Contains sections, menu-items, two kinds of separators, switches, check-boxes, etc.s\n */\nconst ToolStrip = {\n    Button: ToolStripButton,\n    Section: ToolStripSection,\n    ToggleButton: ToolStripToggleButton\n};\nexport default ToolStrip;\nexport { ToolStripButton, ToolStripSection, ToolStripToggleButton };\n","import React from 'react';\nimport './section.scss';\n\n/**\n * Renders a tool strip section. Use different sections when using separators.\n */\nexport default function Section(props) {\n    return <div className=\"tool-strip-section\" {...props}/>;\n}\n// Too simple for a separate file, no?","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ToolStripButton from './button';\nimport './toggle-button.scss';\n\nexport default function ToolStripToggleButton({icon, text, onChange, isActive}) {\n    function toggle() {\n        onChange(!isActive);\n    }\n    return (\n        <ToolStripButton icon={icon} text={text} onClick={toggle}>\n            <input type=\"checkbox\" className=\"toggle-button\" checked={isActive} readOnly/>\n        </ToolStripButton>\n    );\n}\nToolStripToggleButton.propTypes = {\n    /** HTML of the icon to display */\n    icon: PropTypes.string,\n    /** Button text */\n    text: PropTypes.string,\n    /** Callback when the button is toggled */\n    onChange: PropTypes.func,\n    /** the on/off state of the button */\n    isActive: PropTypes.bool\n};\n","// DIBgram themes are converted to CSS in runtime here.\n\nexport function convertThemeToCSS(theme){ // Convert theme colors to CSS vars\n    var css={};\n    for(const name in theme){\n        var obj= theme[name];\n        if(typeof obj.value == 'string') {\n            css['--theme-color-' + name]= obj.value;\n        } else if(typeof obj.value == 'object') { // A color is equal to another color\n            css['--theme-color-' + name]= `var(--theme-color-${obj.value.equals})`;\n        }\n    }\n    return css;\n}","import React from 'react';\nimport classic from './classic.json';\nimport day from './day.json';\nimport tinted from './tinted.json';\nimport night from './night.json';\nimport { convertThemeToCSS } from './dibgram-theme-to-css';\nimport { createStore } from 'redux';\nimport { connect } from 'react-redux';\n\nconst themes = { day, classic, tinted, night };\n\nfunction getThemeFromStorage() {\n    let theme = localStorage.getItem('dibgram-theme');\n    if (!theme) { // if theme is not set in localStorage, use OS theme\n        theme= window.matchMedia?.('(prefers-color-scheme: dark)').matches ? 'night' : 'day';\n        localStorage.setItem('dibgram-theme', theme);\n    }\n    return theme;\n}\n\nexport const themeStore = createStore(\n    (state = { \n        theme: getThemeFromStorage(),\n    }, action) => {\n        switch (action.type) {\n        case 'SET_THEME':\n            return { theme: action.theme };\n        default:\n            return state;\n        }\n    }\n);\n\n/**\n * All children of this component will be rendered with the theme. Can be treated as a div.\n */\nexport const ThemeProvider= connect(state=> state) (\n    // eslint-disable-next-line no-unused-vars\n    function ThemeProvider({ theme, dispatch, ...rest}) {\n        return (\n            <div \n                data-theme-is-dark={themes[theme].isDark.value}\n                {...rest} \n                style={convertThemeToCSS({...classic, ...themes[theme]})}\n            />\n        );\n    });\n\nexport function setTheme(theme) {\n    localStorage.setItem('dibgram-theme', theme);\n    themeStore.dispatch({ type: 'SET_THEME', theme });\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './menu.scss';\nimport TdLib from '../../../../TdWeb/tdlib';\nimport ProfilePhoto from '../../../../ui/components/profile-photo';\nimport { getChatsFromList } from '../chat-list';\nimport chatStore from '../../../chat-store';\nimport { archive_userpic, menu_new_channel, menu_new_group, menu_night_mode, menu_settings, settings_name, settings_phone_number } from '../../../../ui/icon/icons';\nimport { connect, Provider } from 'react-redux';\nimport { createContextMenu } from '../../../../ui/menu/context-menu';\nimport Menu from '../../../../ui/menu/menu';\nimport ScrollView from '../../../../ui/scroll/scrollbar';\nimport LinkButton from '../../../../ui/elements/link-button';\nimport version from '../../../../../version';\nimport Dialogs, { addDialog, dialogStore } from '../../../../ui/dialog/dialogs';\nimport ConfirmDialog from '../../../../ui/dialog/confirm-dialog';\nimport ToolStrip from '../../../../ui/tool-strip/tool-strip';\nimport { setTheme, themeStore } from '../../../../ui/themes/theme';\n\n/**\n * Renders the main menu (always rendered but not always visible)\n */\nconst HamburgerMenu= connect(state=> ({\n    chats: state.chats,\n    archiveButtonState: state.archiveButtonState,\n})) (\n    function HamburgerMenu ({visible, onClose, chats, archiveButtonState}) {\n        const [me, setMe] = React.useState(null);\n        React.useEffect(() => {\n            TdLib.sendQuery({ // Get current user info\n                '@type': 'getMe'\n            }).then(result => {\n                // Format phone number and put it in state\n                if(result.phone_number) {\n                    TdLib.sendQuery({\n                        '@type': 'getPhoneNumberInfo',\n                        phone_number_prefix: result.phone_number\n                    }).then(info => {\n                        // Format phone number\n                        if(info.country_calling_code){\n                            result.phone_number= `+${info.country_calling_code} ${info.formatted_phone_number}`;\n                        }\n                        setMe(result);\n                    });\n                } \n                else setMe(result);\n            });\n        }, []); // equivalent to componentDidMount\n\n        const [nightMode, setNightMode] = React.useState(['tinted', 'night'].includes(themeStore.getState().theme));\n\n        /**@type React.KeyboardEventHandler<HTMLDivElement> */\n        function onKeyDown (e){\n            // `Esc` closes the menu\n            if(e.key === 'Escape') {\n                onClose();\n            }\n        }\n        // Autofocus menu\n        var ref = React.useRef(null);\n        React.useEffect(() => {\n            if(visible) {\n                ref.current.focus();\n            }\n        }, [visible]);\n\n        // Get chats from archive to see if archive button should be shown\n        const showArchivedChats = getChatsFromList(chats, {'@type': 'chatListArchive'}).length > 0;\n\n        return (\n            <div id=\"hamburger-menu\" ref={ref} className={visible ? 'visible' : ''} \n                onKeyDown={onKeyDown} tabIndex={0}>\n                <div className=\"content\">\n                    <div className=\"header\">\n                        <div className=\"row-1\">\n                            <ProfilePhoto \n                                id={me?.id || 0} \n                                name={(me?.first_name || '') + (me?.last_name? (' ' + me.last_name) : '')} \n                                photo={me?.profile_photo?.small}\n                                disableSavedMessages={true}/>\n                            <div className=\"buttons\">\n                                {(showArchivedChats && (['hidden-collapsed', 'hidden-expanded'].includes(archiveButtonState))) && (\n                                    <button \n                                        className=\"button\" \n                                        dangerouslySetInnerHTML={{__html: archive_userpic}}\n                                        onClick={() => {\n                                            chatStore.dispatch({\n                                                type: 'SET_ARCHIVE_STATE',\n                                                archiveState: 'open'\n                                            });\n                                            onClose();\n                                        }}\n                                        onContextMenu={e=> createContextMenu(e, (\n                                            <Menu.MenuContents>\n                                                <Menu.MenuItem onClick={()=> {\n                                                    const newState= {'hidden-collapsed': 'collapsed', 'hidden-expanded': 'expanded'}[archiveButtonState];\n                                                    chatStore.dispatch({\n                                                        type: 'SET_ARCHIVE_BUTTON_STATE',\n                                                        archiveButtonState: newState\n                                                    });\n                                                    localStorage.setItem('dibgram-archived-chats-button-mode', newState);\n                                                    onClose();\n                                                }}>Move to chats list</Menu.MenuItem>\n                                            </Menu.MenuContents>\n                                        ))}/>\n                                )}\n                            </div>\n                        </div>\n                        <div className=\"row-2\">\n                            <div className=\"name\">\n                                {me?.first_name} {me?.last_name || ''}\n                            </div>\n                            <div className=\"phone-number\">\n                                {me?.phone_number}\n                            </div>\n                        </div>\n                    </div>\n                    <ScrollView>\n                        <div className=\"scroll-content\">\n                            <div className=\"options\">\n                                <ToolStrip.Section>\n                                    <ToolStrip.Button icon={menu_new_group} text=\"New Group\"/>\n                                    <ToolStrip.Button icon={menu_new_channel} text=\"New Channel\"/>\n                                    <ToolStrip.Button icon={settings_name} text=\"Contacts\"/>\n                                    <ToolStrip.Button icon={settings_phone_number} text=\"Calls\"/>\n                                    <ToolStrip.Button icon={menu_settings} text=\"Log out\" onClick={()=> {\n                                        // Log out\n                                        onClose();\n                                        addDialog('log-out-from-main-menu-confirm-dialog',\n                                            <ConfirmDialog largeFont={true}\n                                                id=\"log-out-from-main-menu-confirm-dialog\"\n                                                OKButtonText=\"Log out\" onOK={()=> {\n                                                    TdLib.sendQuery({\n                                                        '@type': 'logOut'\n                                                    });\n                                                }} attention={true}>\n                                                Are you sure you want to log out?\n                                            </ConfirmDialog>\n                                        );\n                                    }}/>\n                                    <ToolStrip.ToggleButton icon={menu_night_mode} text=\"Night Mode\" isActive={nightMode} onChange={(isNight)=> {\n                                        setNightMode(isNight);\n                                        setTheme(isNight ? 'night' : 'day');\n                                    }}/>\n                                </ToolStrip.Section>\n                            </div>\n                            <div className=\"about\">\n                                <div className=\"row-1\">\n                                    <LinkButton href=\"https://github.com/DIBgram/DIBgram\">DIBgram</LinkButton>\n                                </div>\n                                <div className=\"row-2\">\n                                    <LinkButton href=\"https://github.com/DIBgram/DIBgram/releases/\">Version {version}</LinkButton> ­– <LinkButton onClick={()=> {\n                                        // About DIBgram\n                                        onClose();\n                                        addDialog('main-menu-about-dibgram-dialog', (\n                                            <ConfirmDialog id=\"main-menu-about-dibgram-dialog\"\n                                                width=\"390px\" title=\"DIBgram\" OKButtonText=\"CLOSE\"\n                                                hideCancelButton={true}>\n\n                                                <LinkButton className=\"version link-button\"\n                                                    style={{color: 'var(--theme-color-windowSubTextFg)'}} \n                                                    href=\"https://github.com/DIBgram/DIBgram/releases/\">\n                                                        version {version}\n                                                </LinkButton>\n\n                                                <p>Unofficial Telegram app based on <LinkButton href=\"https://core.telegram.org/tdlib\">TDLib</LinkButton> for speed and security.</p>\n\n                                                <p>This software is licensed under <LinkButton href=\"https://github.com/DIBgram/DIBgram/blob/main/LICENSE\">GNU GPL</LinkButton> version 3.<br/>\n                                                Source code is available on <LinkButton href=\"https://github.com/DIBgram/DIBgram\">GitHub</LinkButton>.</p>\n\n                                                <p>Visit the <LinkButton href=\"https://telegram.org/faq\">Telegram FAQ</LinkButton> for more info.</p>\n                                            </ConfirmDialog>\n                                        ));\n                                    }}>\n                                        About\n                                    </LinkButton>\n                                </div>\n                            </div>\n                        </div>\n                    </ScrollView>\n                </div>\n                <Provider store={dialogStore}>\n                    <Dialogs className=\"shadow\" onClick={onClose}/>\n                </Provider>\n            </div>\n        );\n    });\nHamburgerMenu.propTypes = {\n    visible: PropTypes.bool.isRequired,\n    onClose: PropTypes.func\n};\nexport default HamburgerMenu;\n","import React from 'react';\nimport ChatFoldersList from './sections/navigation-menu/chat-folders';\nimport ChatListBar from './sections/navigation-menu/chat-list-bar';\nimport chatStore from './chat-store';\nimport { Provider } from 'react-redux';\nimport './messengerWindow.scss';\nimport HamburgerMenu from './sections/navigation-menu/hamburger-menu/menu';\nimport {Resizable} from 're-resizable';\n\n/**\n * Renders the messenger screen\n */\nexport function MessengerWindow () {\n\n    const [isMenuOpen, setIsMenuOpen] = React.useState(false);\n\n    return (\n        <div id=\"messenger-screen\">\n            <Provider store={chatStore}>\n                <HamburgerMenu visible={isMenuOpen} onClose={()=> setIsMenuOpen(false)}/>\n                <ChatFoldersList onHamburgerMenuOpened={()=> setIsMenuOpen(true)}/>\n                <Resizable defaultSize={{width: 260}} minWidth={260}\n                    className=\"chat-list-bar-container\" handleClasses={{right: 'chat-list-bar-resize-handle'}}\n                    enable={{top: false, right: true, bottom: false, left: false, topRight: false, bottomRight: false, bottomLeft: false, topLeft: false}}>\n                    <ChatListBar onHamburgerMenuOpened={()=> setIsMenuOpen(true)}/>\n                </Resizable>\n            </Provider>\n            <div id=\"chat-container\">\n                \n            </div>\n        </div>\n    );\n}","import TdLib from './tdlib';\nimport {getCredentials} from './config';\nimport {getUseTestDc} from './tdlib';\nimport version from '../../version';\n\nTdLib.registerUpdateHandler('updateAuthorizationState',function (update) {\n    const credentials= getCredentials();\n    const auth_state= update['authorization_state'];\n    \n    if(auth_state['@type']==='authorizationStateWaitEncryptionKey'){\n        TdLib.sendQuery({'@type': 'checkDatabaseEncryptionKey', 'encryption_key': ''});\n    }\n    if(auth_state['@type']==='authorizationStateWaitTdlibParameters'){\n        TdLib.sendQuery({\n            '@type': 'setTdlibParameters',\n            'parameters': {\n                'database_directory': 'tdlib',\n                'use_message_database': true,\n                'use_secret_chats': false,\n                'api_id': credentials.api_id,\n                'api_hash': credentials.api_hash,\n                'system_language_code': 'en',\n                'device_model': 'Web',\n                'application_version': version,\n                'enable_storage_optimizer': true,\n                'use_test_dc': getUseTestDc(),\n            }\n        });\n    }\n});\n\n/**\n * Provides functions to pass required authorization data to Telegram\n */\nexport default class Auth {\n    /**\n     * Pass phone number of the account to be logged in to\n     * @param {string} number The phone number the user entered\n     * @returns TdLib query result\n     */\n    static givePhoneNumber(number) {\n        return TdLib.sendQuery({'@type': 'setAuthenticationPhoneNumber', 'phone_number': number});\n    }\n    /**\n     * Pass authorization code the user has received\n     * @param {string} code The code the user entered\n     * @returns TdLib query result\n     */\n    static checkAuthCode(code) {\n        return TdLib.sendQuery({'@type': 'checkAuthenticationCode', 'code': code});\n    }\n    /**\n     * Pass 2FA password of the account\n     * @param {string} pass The password the user entered\n     * @returns TdLib query result\n     */\n    static check2FACode(pass) {\n        return TdLib.sendQuery({'@type': 'checkAuthenticationPassword', 'password': pass});\n    }\n    /**\n     * Sign up to Telegram\n     * @param {string} first The first name to be used in the new account\n     * @param {string} last Tha last name to be used in the new account\n     * @returns TdLib query result\n     */\n    static registerNewAccount(first, last) {\n        return TdLib.sendQuery({'@type': 'registerUser', 'first_name': first, 'last_name': last});\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport RippleEffect, {handleMyMouseEvents} from './ripple-effect';\n\n/**\n * Renders a BIG button which is filled with accent color\n */\nexport default class BigHighlightedButton extends React.Component{\n    static propTypes= {\n        /** Fires when the button is clicked */\n        onClick: PropTypes.func,\n        /** The button's content */\n        children: PropTypes.node.isRequired\n    };\n    state= {\n        ripple: {\n            state: 'off'\n        }\n    }\n    constructor() {\n        super();\n        [this.mouseDown, this.mouseUp, this.mouseLeave]= handleMyMouseEvents(this);\n    }\n\n    render () {\n        return (\n            <button \n                className=\"big-highlighted-button\" \n                onClick={this.props.onClick}\n                onMouseDown={this.mouseDown}\n                onMouseUp={this.mouseUp}\n                onMouseLeave={this.mouseLeave}>\n\n                <RippleEffect {...this.state.ripple} color=\"var(--theme-color-activeButtonBgRipple)\"/>\n                <div className=\"content\">\n                    {this.props.children}\n                </div>\n            </button>\n        );\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Renders a beautiful field with a title and underline\n */\nexport default class UnderlinedInput extends React.Component {\n    constructor(args) {\n        super(args);\n\n        this.state= {\n            inactive: false,\n            mouseX: '50%',\n            titleClass: this.getTitleClass(this.props.autoFocus)\n        };\n    }\n\n    getTitleClass (focus) {\n        return (focus || (!!this.props.value)) ? 'title top' : 'title placeholder';\n    }\n\n    render () {\n        var className='underlined-input';\n        if(this.state.inactive) {\n            className+=' inactive';\n        }\n        if(this.props.autoFocus) {\n            className+=' autoFocus';\n        }\n        if(this.props.invalid) {\n            className+=' invalid';\n        }\n        return (\n            <div className={className}\n                style={{'--mouse-left': this.state.mouseX || '50%'}}>\n                { this.props.title ? (\n                    <div className={this.state.titleClass}>{this.props.title}</div>\n                ) : null }\n                <input \n                    ref={this.props.iRef}\n                    type={this.props.type} \n                    onChange={this.props.onChange} \n                    value={this.props.value}\n                    onMouseDown={this.handleMouseDown}\n                    onFocus={this.handleFocus}\n                    onBlur={this.handleBlur}\n                    autoFocus={this.props.autoFocus || false}\n                    onKeyDown={this.handleKeyDown}\n                    maxLength={this.props.maxLength}\n                    onCopy={e=> {\n                        if(this.props.disableCopy) {\n                            e.preventDefault();\n                        }\n                    }}/>\n                <div className=\"underline\"></div>\n            </div>\n        );\n    }\n\n    handleFocus =()=>{\n        this.setState({\n            inactive: false,\n            titleClass: this.getTitleClass(true)\n        });\n    }\n    handleBlur =()=>{\n        this.setState({\n            inactive: true, \n            mouseX: '50%',\n            titleClass: this.getTitleClass(false)\n        });\n    }\n    handleMouseDown =(e)=>{\n        this.setState({\n            mouseX: e.nativeEvent.offsetX+'px'\n        });\n    }\n    handleKeyDown =(e)=>{\n        this.props.onKeyDown?.(e);\n        if(e.key=='Enter') {\n            this.props.onEnterKeyPressed && this.props.onEnterKeyPressed();\n        }\n        if(this.props.preventNumberScrolling) {\n            if(e.key=='ArrowUp' || e.key=='ArrowDown') {\n                e.preventDefault();\n            }\n        }\n    }\n\n}\nUnderlinedInput.propTypes = {\n    /** Input type, can be `text`, `number`, `tel`, `password`, `email`, `url` */\n    type: PropTypes.oneOf(['text', 'number', 'tel', 'password', 'email', 'url']).isRequired,\n    /** Fired when input is modified */\n    onChange: PropTypes.func,\n    /** Input value */\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    /** The maximum number of characters the input can have */\n    maxLength: PropTypes.number,\n    active: PropTypes.bool,\n    /** If set to true, the input will gain focus when it renders */\n    autoFocus: PropTypes.bool,\n    /** Fires when the 'Enter' key is pressed */\n    onEnterKeyPressed: PropTypes.func,\n    /** Input title/placeholder */\n    title: PropTypes.string,\n    /** If true, the input will become red */\n    invalid: PropTypes.bool,\n    /** If true, text cannot be copied from the input */\n    disableCopy: PropTypes.bool,\n    /** If true, up and down buttons cannot change input value */\n    preventNumberScrolling: PropTypes.bool,\n    /** `<input>` React ref */\n    iRef: PropTypes.object,\n    /** Fires when a key is pushed down while the element is in focus. */\n    onKeyDown: PropTypes.func\n};","import React from 'react';\nimport { Provider } from 'react-redux';\nimport Auth from '../../TdWeb/auth';\nimport connectionStore from '../../TdWeb/connectionStore';\nimport ConfirmDialog from '../../ui/dialog/confirm-dialog';\nimport { addDialog } from '../../ui/dialog/dialogs';\nimport BigHighlightedButton from '../../ui/elements/highlighted-button';\nimport UnderlinedInput from '../../ui/elements/underlined-input';\nimport { manageStatusTextContent } from '../auth-screen';\nimport ConnectionState from '../../ui/components/connecting';\nimport callingCodes from './phone-number-calling-codes.json';\nimport './phone-number.scss';\n\n/**\n * Renders the phone number step of authorization screen\n */\nexport default class AuthWindowStepPhoneNumber extends React.Component {\n    constructor(args) {\n        super(args);\n        manageStatusTextContent(this);\n    }\n    state= {\n        number: '',\n        number_p: '+',\n        invalid: false,\n        statusContent: '',\n        statusVisible: false\n    };\n\n    ref1= React.createRef();\n    ref2= React.createRef();\n\n    handlePNFieldChange = (event) => {\n        const value = event.target.value.replace(/[^0-9-]/g, '');\n        this.setState({\n            number: value,\n            invalid: false // We shouldn't show the phone number as invalid, since it has changed after submission\n        });\n        this.changeStatus(''); // The same\n    }\n\n    handlePNFieldChange_p = (event) => {\n        var value = '+' + event.target.value.replace(/[^0-9-]/g, '');\n        if(value.length > 5) {\n            let length = 1;\n            for(let country of callingCodes) {\n                if(value.startsWith(country.callingCode, 1)) {\n                    length = country.callingCode.length+1;\n                    break;\n                }\n            }\n            let value_new = value.substr(0, length);\n            let rest= value.substr(length);\n            this.setState({\n                number_p: value_new,\n                number: rest + this.state.number,\n                invalid: false\n            });\n            this.ref2.current.focus();\n        }\n        else {\n            this.setState({\n                number_p: value,\n            });\n        }\n        this.changeStatus('');\n    }\n\n    /** @param {React.SyntheticEvent<HTMLInputElement>} e */\n    handleKeyDown = (e) => { // Focus the previous field when the user presses the backspace key\n        if(e.nativeEvent.key === 'Backspace') {\n            if(this.state.number.length === 0) {\n                this.ref1.current.focus();\n            }\n        }\n    }\n\n    submitNumber= async () => {\n        const number = this.state.number_p + ' ' + this.state.number;\n        Auth.givePhoneNumber(number).catch(reason=> {\n            switch(reason.message){\n            case 'PHONE_NUMBER_FLOOD':\n                addDialog( 'phone_number_flood_error',\n                    <ConfirmDialog width=\"320px\" hideCancelButton={true} largeFont={true} id=\"phone_number_flood_error\">\n                        Sorry, you have deleted and re-created your account too many times recently.<br/>\n                        Please wait for a few days before signing up again.\n                    </ConfirmDialog>\n                );\n                this.changeStatus('');\n                break;\n\n            case 'PHONE_NUMBER_INVALID':\n                this.setState({invalid: true});\n                this.changeStatus('Invalid phone number. Please try again.');\n                break;\n\n            case 'Another authorization query has started': \n                break;\n\n            default:\n                // We don't know what error it is, so just show it to the user, he/she might understand it.\n                this.setState({invalid: false});\n                this.changeStatus(reason.message);\n                break;\n            }\n        });\n    }\n    render () {\n        const Status=this.Status;\n        return (\n            <div id=\"auth\" className=\"auth-step-phoneNumber\">\n\n                <h2>Your Phone Number</h2>\n\n                <p className=\"description\">\n                    Please confirm your country code and enter your mobile phone number.\n                </p>\n\n                {\n                    //TODO: Add a country code selector  \n                    //TODO: Separate the country code from the phone number\n                    //TODO: Add phone number placeholder\n                }\n\n                <div className=\"phone-number-input\">\n                    <UnderlinedInput\n                        iRef={this.ref1}\n                        type=\"tel\" \n                        value={this.state.number_p} \n                        autoFocus={true}\n                        onChange={this.handlePNFieldChange_p}\n                        onEnterKeyPressed={this.submitNumber}\n                        preventNumberScrolling={false}/>\n                    \n                    <UnderlinedInput\n                        iRef={this.ref2}\n                        type=\"tel\" \n                        value={this.state.number} \n                        autoFocus={true}\n                        onChange={this.handlePNFieldChange}\n                        onEnterKeyPressed={this.submitNumber}\n                        invalid={this.state.invalid}\n                        preventNumberScrolling={false}\n                        onKeyDown={this.handleKeyDown}/>\n                </div>\n\n                <Status/>\n\n                <BigHighlightedButton\n                    onClick={this.submitNumber}>\n                    NEXT\n                </BigHighlightedButton>\n\n                <Provider store={connectionStore}>\n                    <ConnectionState/>\n                </Provider>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { manageStatusTextContent } from '../auth-screen';\nimport Auth from '../../TdWeb/auth';\nimport UnderlinedInput from '../../ui/elements/underlined-input';\nimport BigHighlightedButton from '../../ui/elements/highlighted-button';\nimport { Provider } from 'react-redux';\nimport connectionStore from '../../TdWeb/connectionStore';\nimport ConnectionState from '../../ui/components/connecting';\nimport './verification-code.scss';\n\n/**\n * Renders verification code step of authorization screen\n */\nexport default class AuthWindowStepCode extends React.Component {\n    static propTypes= {\n        info: PropTypes.object\n    };\n    constructor(args) {\n        super(args);\n        manageStatusTextContent(this);\n    }\n    state= {\n        code: '',\n        invalid: false,\n        statusContent: '',\n        statusVisible: false\n    };\n\n    handleCodeFieldChange= (event) => {\n        this.setState({\n            code: event.target.value,\n            invalid: false // Verification code is changed, and we don't know if it is correct or not. Do not show it as invalid anymore\n        });\n        this.changeStatus('');\n        if(event.target.value.length==this.props.info.type.length) { // Automatically submit code if it is filled in\n            this.handleContinueButton(event.target.value);\n        }\n    }\n    handleContinueButton= (code) => {\n        // `code` might be the authorization code, or an event object. If it is not the authorization code, get it ourselves\n        if(typeof code != 'string') {\n            code= undefined;\n        }\n        code = code || this.state.code;\n\n        if(code.length!=this.props.info.type.length) return; // The code is not complete. It is definitely wrong.\n\n        Auth.checkAuthCode(code).catch(reason=> {\n            if(reason.message==='PHONE_CODE_INVALID'){\n                this.setState({invalid: true});\n                this.changeStatus('You have entered an invalid code.');\n            }\n            else {\n                // We don't know the error, all we can do is to just inform the user about it\n                this.setState({invalid: true});\n                this.changeStatus(reason.message);\n            }\n        });\n    }\n    render () {\n        const Status = this.Status;\n\n        var message= (this.props.info.type['@type']=='authenticationCodeTypeSms') ?\n            (<p className=\"description\">\n                We&apos;ve sent an activation code to your phone. <br/>\n                Please enter it below.\n            </p>) \n            :\n            (<p className=\"description\">\n                A code was sent <strong>via Telegram</strong> to your other devices, if you have any connected.\n            </p>);\n            \n        return (\n            <div id=\"auth\" className=\"auth-step-code\">\n\n                <h2>{this.props.info.phone_number}</h2>\n\n                {message}\n\n                <UnderlinedInput\n                    type=\"number\" \n                    value={this.state.code} \n                    onChange={this.handleCodeFieldChange}\n                    autoFocus={true}\n                    title=\"Code\"\n                    maxLength={this.props.info.type.length}\n                    onEnterKeyPressed={this.handleContinueButton}\n                    invalid={this.state.invalid}\n                    preventNumberScrolling={true}/>\n\n                <Status/>\n\n                <BigHighlightedButton\n                    onClick={this.handleContinueButton}>\n                    NEXT\n                </BigHighlightedButton>\n\n                <Provider store={connectionStore}>\n                    <ConnectionState/>\n                </Provider>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { manageStatusTextContent } from '../auth-screen';\nimport Auth from '../../TdWeb/auth';\nimport UnderlinedInput from '../../ui/elements/underlined-input';\nimport LinkButton from '../../ui/elements/link-button';\nimport BigHighlightedButton from '../../ui/elements/highlighted-button';\nimport { Provider } from 'react-redux';\nimport connectionStore from '../../TdWeb/connectionStore';\nimport ConnectionState from '../../ui/components/connecting';\nimport './cloud-password.scss';\n\n\n/**\n * Renders 2FA password step of authorization screen\n */\nexport default class AuthWindowStepPassword extends React.Component {\n    constructor(args) {\n        super(args);\n        manageStatusTextContent(this);\n    }\n    static propTypes= {\n        info: PropTypes.object\n    };\n    state= {\n        password: '',\n        invalid: false,\n        statusContent: '',\n        statusVisible: false\n    };\n    handlePasswordFieldChange= (event) => {\n        this.setState({\n            password: event.target.value,\n            invalid: false, // Password was changed, and we don't know if it is wrong or not. We should not show it as wrong\n        });\n        this.changeStatus(''); // Same\n    }\n    handleContinueButton= async () => {\n        Auth.check2FACode(this.state.password).catch(reason=> {\n            if(reason.message=='PASSWORD_HASH_INVALID') {\n                this.setState({invalid: true});\n                this.changeStatus('You have entered a wrong password.');\n            }\n            else {\n                // We don't know what the error is, so all we can do is to show it to the user\n                this.setState({invalid: true});\n                this.changeStatus(reason.message);\n            }\n        });\n    }\n    render () {\n        const Status=this.Status;\n        return (\n            <div id=\"auth\" className=\"auth-step-password\">\n                <div className=\"content\">\n\n                    <h2>Cloud password check</h2>\n\n                    <p className=\"description\">\n                        Please enter your cloud password.\n                    </p>\n\n                    <UnderlinedInput\n                        type=\"password\"\n                        value={this.state.password} \n                        onChange={this.handlePasswordFieldChange}\n                        autoFocus={true} \n                        title=\"Your cloud password\"\n                        onEnterKeyPressed={this.handleContinueButton}\n                        disableCopy={true}\n                        invalid={this.state.invalid}/>\n\n                    <div className=\"hint\">\n                        {this.props.info.password_hint?'Hint: ':<span>&nbsp;</span>}{this.props.info.password_hint}\n                    </div>\n\n                    <div className=\"forgot-password\">\n                        <LinkButton>Forgot password?</LinkButton>\n                    </div>\n\n                    <Status/>\n\n                    <BigHighlightedButton \n                        onClick={this.handleContinueButton}>\n                        SUBMIT\n                    </BigHighlightedButton>\n\n                </div>\n                <Provider store={connectionStore}>\n                    <ConnectionState/>\n                </Provider>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types'; \nimport RippleEffect, { handleMyMouseEventsFunction } from '../../ui/elements/ripple-effect';\nimport { new_chat_photo } from '../../ui/icon/icons';\nimport './signup-profile-photo.scss';\nimport { blobToUrl } from '../../TdWeb/file';\n\nexport default function SignUpProfilePic({image, onChange}) {\n    const ripple= React.useState({state: 'off'});\n    const [onMouseDown, onMouseUp, onMouseLeave]= handleMyMouseEventsFunction(ripple);\n    return (\n        <div className={'icon-button sign-up-profile-pic' + (image? ' has-image' : '')} \n            {...{onMouseDown, onMouseUp, onMouseLeave}}>\n\n            {image && <img src={blobToUrl(image)} alt=\"profile\"/>}\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-activeButtonBgRipple)\" small={true}/>\n            <span dangerouslySetInnerHTML={{__html: new_chat_photo}} />\n            <label>\n                <input type=\"file\" accept=\"image/*\" onChange={onChange} />\n            </label>\n        </div>\n    );\n}\nSignUpProfilePic.propTypes = {\n    image: PropTypes.instanceOf(Blob),\n    onChange: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Provider } from 'react-redux';\nimport Auth from '../../TdWeb/auth';\nimport connectionStore from '../../TdWeb/connectionStore';\nimport ConfirmDialog from '../../ui/dialog/confirm-dialog';\nimport { addDialog } from '../../ui/dialog/dialogs';\nimport BigHighlightedButton from '../../ui/elements/highlighted-button';\nimport UnderlinedInput from '../../ui/elements/underlined-input';\nimport ConnectionState from '../../ui/components/connecting';\nimport TdLib from '../../TdWeb/tdlib';\nimport LinkButton from '../../ui/elements/link-button';\nimport SignUpProfilePic from './signup-profile-photo';\nimport './register.scss';\n\n/**\n * Render sign up step of authorization screen\n */\nexport default class AuthWindowStepRegister extends React.Component {\n    static propTypes= {\n        tos: PropTypes.object,\n    }\n    \n    state= {\n        firstName: '',\n        lastName: '',\n        statusContent: '',\n        statusVisible: false,\n        image: null,\n    };\n    handleFirstNameFieldChange= (event) => {\n        this.setState({firstName: event.target.value});\n    }\n    handleLastNameFieldChange= (event) => {\n        this.setState({lastName: event.target.value});\n    }\n    handleContinueButton= () => {\n        Auth.registerNewAccount(this.state.firstName, this.state.lastName).catch(reason=> {\n            this.setState({textUnderField: reason.message});\n        }).then(()=> {\n            if(this.state.image) {\n                TdLib.sendQuery({\n                    '@type': 'setProfilePhoto',\n                    photo: {\n                        '@type': 'inputChatPhotoStatic',\n                        photo: {\n                            '@type': 'inputFileBlob',\n                            data: this.state.image,\n                        }\n                    }\n                });\n            }\n        });\n    }\n\n    showTos= () => {\n        addDialog('signup-tos-dialog', (\n            <ConfirmDialog id=\"signup-tos-dialog\" width=\"364px\"\n                hideCancelButton={true} title=\"Terms of Service\">\n                \n                {this.props.tos.text.text}\n            </ConfirmDialog>\n        ));\n    }\n\n    render () {\n        return (\n            <div className=\"auth-container\">\n                <div id=\"auth\" className=\"auth-step-signup\">\n                    <div className=\"content\">\n\n                        <h2>Your info</h2>\n\n                        <p className=\"description\">\n                            Please enter your name and <br/>\n                            upload a photo.\n                        </p>\n\n                        <SignUpProfilePic image={this.state.image} onChange={e=> this.setState({\n                            image: e.target.files[0]\n                        })}/>\n\n                        <UnderlinedInput\n                            type=\"text\" \n                            title=\"First name\"\n                            value={this.state.firstName} \n                            onChange={this.handleFirstNameFieldChange}\n                            autoFocus={true} />\n\n                        <UnderlinedInput \n                            type=\"text\" \n                            title=\"Last name\"\n                            value={this.state.lastName} \n                            onChange={this.handleLastNameFieldChange} />\n\n                        <div className=\"status\">\n                            {this.state.textUnderField || ''}\n                        </div>\n\n                        <BigHighlightedButton\n                            onClick={this.handleContinueButton}>\n                            SIGN UP\n                        </BigHighlightedButton>\n\n                    </div>\n                    <Provider store={connectionStore}>\n                        <ConnectionState/>\n                    </Provider>\n                </div>\n                <div className=\"tos-notice\">\n                    By signing up, <br/>\n                    you agree to the <LinkButton onClick={this.showTos}>Terms of Service</LinkButton>\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport TdLib from '../TdWeb/tdlib';\nimport {MessengerWindow} from '../messenger/messengerWindow';\n\nimport Dialogs, { dialogStore } from '../ui/dialog/dialogs';\n\nimport './auth.scss';\nimport { Provider } from 'react-redux';\nimport AuthWindowStepPhoneNumber from './auth-step/phone-number';\nimport AuthWindowStepCode from './auth-step/verification-code';\nimport AuthWindowStepPassword from './auth-step/cloud-password';\nimport AuthWindowStepRegister from './auth-step/register';\n\nvar initialAuthState = {'@type': undefined};\nexport function setInitialAuthState(state) {\n    initialAuthState=state;\n}\n\n/**\n * Start managing a status text block with fade effects.  \n * Usage:\n * ```js\n * // constructor\n * manageStatusTextContent(this);\n * \n * // render\n * <Status/>\n * \n * // TdLib.sendQuery({...}).then\n * this.changeStatus(\"Wrong code\")\n * \n * // state\n * {\n *   statusContent: '',\n *   statusVisible: false\n * }\n * ```\n * \n * @param {React.Component} thisClass pass `this` as this argument\n * @returns Store this function and call it to change \n */\nexport function manageStatusTextContent(thisClass) {\n    thisClass.Status= function Status(){\n        return (\n            <div className={'status'+ (thisClass.state.statusVisible?'':' hidden')}>{thisClass.state.statusContent}</div>\n        );\n    };\n    thisClass.changeStatus= function(string){\n        if(string) {\n            thisClass.setState({\n                statusContent: string,\n                statusVisible: true\n            });\n        } else {\n            thisClass.setState({\n                statusVisible: false\n            });\n            setTimeout(() => {\n                if(!thisClass.state.statusVisible) { // Prevent timeout overlapping with later status changes\n                    thisClass.setState({\n                        statusContent: null\n                    });\n                }\n            }, 1000);\n        }\n    };\n}\n\n/**\n * Renders the messenger or authorization screens (layer 1). Does not include dialogs and toasts\n */\nexport class MainApp extends React.Component {\n    state= {\n        step: initialAuthState\n    };\n\n    componentDidMount(){\n        // Change `setInitialAuthState` to update state, because we don't use `initialAuthState` anymore\n        // eslint-disable-next-line no-func-assign\n        setInitialAuthState= state=> {\n            this.setState({step: state});\n        };\n\n        // Handle authorization state updates\n        TdLib.registerUpdateHandler('updateAuthorizationState', this.handleAuthStateUpdate);\n    }\n\n    handleAuthStateUpdate= update => {\n        // Some authorization states are handled without the user knowing. We don't change what's shown to the users if that happens.\n        const states= [\n            'authorizationStateWaitPhoneNumber',\n            'authorizationStateWaitCode',\n            'authorizationStateWaitPassword',\n            'authorizationStateWaitRegistration',\n            'authorizationStateReady',\n            'authorizationStateClosed',\n        ];\n        const state=update['authorization_state'];\n        if(states.includes(state['@type'])) {\n            this.setState({step: state});\n        }\n    };\n    \n    render () {\n        switch (this.state.step['@type']) {\n        case 'authorizationStateWaitPhoneNumber':\n            // Enter your phone number\n            return (\n                <React.Fragment>\n                    <Provider store={dialogStore}>\n                        <Dialogs/>\n                    </Provider>\n                    <AuthWindowStepPhoneNumber/>\n                </React.Fragment>\n            );\n\n        case 'authorizationStateWaitCode':\n            // Enter the verification code sent to you\n            return (\n                <React.Fragment>\n                    <Provider store={dialogStore}>\n                        <Dialogs/>\n                    </Provider>\n                    <AuthWindowStepCode info={this.state.step.code_info}/>\n                </React.Fragment>\n            );\n\n        case 'authorizationStateWaitPassword':\n            // Enter your 2-factor auth password\n            return (\n                <React.Fragment>\n                    <Provider store={dialogStore}>\n                        <Dialogs/>\n                    </Provider>\n                    <AuthWindowStepPassword info={this.state.step}/>\n                </React.Fragment>\n            );\n\n        case 'authorizationStateWaitRegistration':\n            // There isn't an account on this number, you need to sign up\n            return (\n                <React.Fragment>\n                    <Provider store={dialogStore}>\n                        <Dialogs/>\n                    </Provider>\n                    <AuthWindowStepRegister tos={this.state.step.terms_of_service}/>\n                </React.Fragment>\n            );\n\n        case 'authorizationStateReady':\n            // Logged in\n            return (\n                <MessengerWindow/>\n            );\n\n        case 'authorizationStateClosed':\n            // TDLib session is closed.\n            window.location.reload();\n            return (\n                <p>This session is closed. Please wait till DIBgram reloads automatically...</p>\n            );\n        \n        default:\n            // TDLib is still loading\n            return <p>Loading...</p>;\n        }\n    }\n}\n","import TdLib from './tdlib';\n\n/**\n * Sets initial online state\n */\nexport default function setInitialOnlineStatus(){\n    TdLib.sendQuery({\n        '@type': 'setOption',\n        name: 'online',\n        value: {\n            '@type': 'optionValueBoolean',\n            value: document.hasFocus()\n        }\n    });\n}\n\nwindow.onfocus = () => { // Become online when tab/window focuses\n    TdLib.sendQuery({\n        '@type': 'setOption',\n        name: 'online',\n        value: {\n            '@type': 'optionValueBoolean',\n            value: true\n        }\n    });\n};\n\nwindow.onblur = () => { // Become offline when switching tabs/windows\n    TdLib.sendQuery({\n        '@type': 'setOption',\n        name: 'online',\n        value: {\n            '@type': 'optionValueBoolean',\n            value: false\n        }\n    });\n};","import React from 'react';\nimport { Provider } from 'react-redux';\nimport {MainApp, setInitialAuthState} from './dibgram/auth/auth-screen';\nimport setInitialOnlineStatus from './dibgram/TdWeb/online-handler';\nimport TdLib from './dibgram/TdWeb/tdlib';\nimport ConfirmDialog from './dibgram/ui/dialog/confirm-dialog';\nimport {addDialog} from './dibgram/ui/dialog/dialogs';\nimport { toastStore, Toasts } from './dibgram/ui/dialog/toast';\nimport './dibgram/ui/main.scss';\nimport { ContextMenus, contextMenusStore, onAnywhereClicked } from './dibgram/ui/menu/context-menu';\nimport { ThemeProvider, themeStore } from './dibgram/ui/themes/theme';\n\nTdLib.initializeTdLib().then(function (res) {\n    setInitialAuthState(res);\n    setInitialOnlineStatus();\n});\n\nif(process.env.NODE_ENV== 'development') {\n    window['sendQuery']= TdLib.sendQuery;\n}\n\n/**\n * Renders the whole React app\n */\nfunction App() {\n    React.useEffect(() => { // A fatal error occurred in TdLib\n        TdLib.registerUpdateHandler('updateFatalError', window.simulateFatalError=  function (update) {\n            console.error('Fatal error:', update.error);\n            \n            addDialog( 'tdlib_fatal_error',\n                <ConfirmDialog \n                    width=\"400px\" \n                    hideCancelButton={true} \n                    id=\"tdlib_fatal_error\" \n                    thirdButton=\"Refresh\"\n                    onThirdButtonClick={window.location.reload.bind(window.location)}\n                    thirdButtonClosesDialog={false}\n                    title=\"Fatal Error\">\n                    \n                    A fatal error occurred in TdLib.<br/> \n                    Try refreshing, clearing site data or opening \n                    DIBgram in a private window. <br/>\n                    If none of these helped, report this to the developers \n                    by <a href=\"https://github.com/DIBgram/DIBgram/issues/new/choose\" rel=\"noreferrer\" target=\"_blank\"\n                        style={{color: 'var(--theme-color-windowActiveTextFg)'}}>filing an issue.</a>\n                    <br/><br/>\n                    <pre>{update.error.toString()}</pre>\n                </ConfirmDialog>\n            );\n        });\n    }, []);\n\n    return (\n        <Provider store={themeStore}>\n            <ThemeProvider id=\"app\" onClick={onAnywhereClicked}>\n                <Provider store={toastStore}>\n                    <Toasts/>\n                </Provider>\n                <MainApp/>\n                <Provider store={contextMenusStore}>\n                    <ContextMenus/>\n                </Provider>\n            </ThemeProvider>\n        </Provider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\n/* eslint-disable indent */\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import './remove-item-from-array';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}