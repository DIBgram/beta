{"version":3,"sources":["remove-item-from-array.js","dibgram/TdWeb/tdlib.ts","dibgram/TdWeb/tdweb.js","dibgram/TdWeb/config.js","dibgram/ui/icon/chat_filters/chat-filters.js","dibgram/ui/elements/ripple-effect.js","dibgram/ui/elements/icon-button.js","dibgram/ui/icon/icons.js","dibgram/messenger/sections/navigation-menu/hamburger-menu/menu-button.js","dibgram/messenger/chat-store.js","dibgram/ui/scroll/scrollbar.js","dibgram/language-pack/language-pack.js","dibgram/messenger/sections/navigation-menu/chat-folders.js","dibgram/ui/elements/loading-spinner.js","dibgram/ui/components/connecting.js","dibgram/TdWeb/file.js","dibgram/TdWeb/options.js","dibgram/ui/img/TgLogo.png","dibgram/ui/components/profile-photo.js","dibgram/messenger/users-store.js","dibgram/messenger/sections/payments/currency-tostring.js","dibgram/messenger/user-misc.js","dibgram/messenger/message/message-pinned-message.js","dibgram/time-tostring.js","dibgram/messenger/message/message-summary-noicon.js","dibgram/ui/elements/link-button.js","dibgram/messenger/supergroup-store.js","dibgram/messenger/chat-misc.js","dibgram/ui/menu/context-menu.js","dibgram/ui/menu/menu.js","dibgram/ui/dialog/toast.js","dibgram/ui/dialog/dialogs.js","dibgram/ui/elements/small-button.js","dibgram/ui/dialog/dialog.js","dibgram/ui/dialog/confirm-dialog.js","dibgram/messenger/sections/navigation-menu/chat-list.js","dibgram/messenger/message-misc.js","dibgram/messenger/sections/navigation-menu/search/search-box.js","dibgram/TdWeb/connectionStore.js","dibgram/ui/elements/nav-animation.js","dibgram/messenger/sections/navigation-menu/chat-list-bar.js","version.js","dibgram/ui/tool-strip/button.js","dibgram/ui/tool-strip/tool-strip.js","dibgram/ui/tool-strip/section.js","dibgram/ui/tool-strip/toggle-button.js","dibgram/ui/tool-strip/separator.js","dibgram/ui/themes/dibgram-theme-to-css.js","dibgram/ui/themes/theme.js","dibgram/ui/menu/three-dots-menu.js","dibgram/ui/dialog/search.js","dibgram/messenger/sections/settings/choose-lanugage.js","dibgram/messenger/sections/settings/advanced/advanced.js","dibgram/messenger/sections/settings/settings-dialog.js","dibgram/messenger/sections/navigation-menu/hamburger-menu/menu.js","dibgram/messenger/messengerWindow.js","dibgram/TdWeb/auth.js","dibgram/ui/elements/highlighted-button.js","dibgram/ui/elements/underlined-input.js","dibgram/auth/auth-step/phone-number/country-select.js","dibgram/auth/auth-step/phone-number/phone-number.js","dibgram/auth/auth-step/verification-code/verification-code.js","dibgram/auth/auth-step/cloud-password/cloud-password.js","dibgram/auth/auth-step/register/signup-profile-photo.js","dibgram/auth/auth-step/register/register.js","dibgram/auth/auth-screen.js","dibgram/TdWeb/online-handler.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["removeItemFromArray","item","i","this","length","splice","Array","prototype","remove","getUseTestDc","urlPar","URL","window","location","href","searchParams","get","TdLib","op","log","use_test_dc","log_updates","log_queries","useDatabase","instanceName","onUpdate","update","console","forEach","h","TdClient","sendQuery","type","handler","undefined","push","call","query","Promise","resolve","reject","send","then","result","error","warn","chatFilerIcons","All","Bots","Channels","Custom","Groups","Private","Setup","Unread","Cat","Crown","Favorite","Flower","Game","Home","Love","Mask","Party","Sport","Study","Trade","Travel","Work","RippleEffect","props","small","X","Y","width","rX","rY","height","Math","hypot","abs","max","state","className","style","getMaxRadius","backgroundColor","color","React","Component","getRelativeCoordinates","event","rect","target","getBoundingClientRect","clientX","left","clientY","top","handleMyMouseEvents","This","e","ripple","setState","setTimeout","clientWidth","clientHeight","bind","mouseUp","handleMyMouseEventsFunction","setRipple","up","nativeEvent","offsetX","offsetY","IconButton","icon","rest","useState","onMouseDown","onMouseUp","onMouseLeave","dangerouslySetInnerHTML","__html","archive_userpic","info_back","info_close","HamburgerMenuButton","WithFolders","mouseDown","mouseLeave","id","onClick","PureComponent","WithoutFolders","chatStore","createStore","currentChatList","archiveState","archiveButtonState","localStorage","getItem","chats","filters","unread","main","archive","action","chatList","chat_list","unread_messages_count","unread_count","unread_unmuted_messages_count","unread_unmuted_count","chat_filter_id","total_chats_count","total_count","unread_chats_count","unread_unmuted_chats_count","marked_as_unread_chats_count","marked_as_unread_count","marked_as_unread_unmuted_chats_count","marked_as_unread_unmuted_count","chat","map","chat_id","changed","newChat","positions","position","compareChatList","list","payload","property","value","__REDUX_DEVTOOLS_EXTENSION__","registerUpdateHandler","dispatch","action_bar","default_disable_notification","draft_message","chat_filters","has_scheduled_messages","is_blocked","is_marked_as_unread","last_message","message_ttl_setting","notification_settings","online_member_count","permissions","photo","last_read_inbox_message_id","last_read_outbox_message_id","reply_markup_message_id","theme_name","title","unread_mention_count","voice_chat","list1","list2","ScrollView","scrollBarWidth","scrollRef","scrollAlwaysVisible","propsRest","mouseEntered","setMouseEntered","timeoutId","setTimeoutId","data-mouse-entered","renderTrackHorizontal","renderTrackVertical","renderThumbHorizontal","renderThumbVertical","onMouseEnter","clearTimeout","autoHide","data-auto-hide","autoHideTimeout","hideTracksWhenNotNeeded","ref","currentLanguagePack","applyKeys","index","Fragment","getCurrentLanguagePack","englishIsDefault","languageInfo","JSON","parse","base_language_pack_id","is_beta","is_installed","is_official","is_rtl","local_string_count","name","native_name","plural_code","total_string_count","translated_string_count","translation_url","getRtlMode","getFormattedText","text","formatted","applyFormatting","format","res","includes","indexOf","substr","execed","exec","formatString","params","getCountMode","count","getPluralString","mode","callback","__","key","languagePackString","englishLanguagePack","__fmt","useFragments","__pl","pluralized","pluralizedString","__collection","isInvite","users","usesReact","formatLast","user","accumulated","flat","join","chatListScrollToTopEvent","ChatFolder","folder","active","icon_name","iconName","setIconName","useEffect","data-muted","connect","folders","currentFolder","onHamburgerMenuOpened","LoadingSpinner","percentage","percent","caps","trackColor","spin","transitionDuration","intervalNum","setInterval","clearInterval","size","PropTypes","number","isRequired","lineWidth","progressColor","string","downloadFile","file_id","priority","onReject","catch","downloadCallbacks","file","local","is_downloading_completed","cachedFiles","blobToUrl","blob","webkitURL","createObjectURL","options","profileNameToInitials","words","replace","toUpperCase","split","ProfilePhoto","customIcon","setPhoto","photoObj","setPhotoObj","loaded","setLoaded","isServiceMessages","isSavedMessages","isReplies","mounted","enableCache","data","resolveFilePart","filePart","f","is_downloading_active","getFileContent","disableSavedMessages","tgLogo","Initials","onLoad","src","getChatTypeId","supergroup_id","basic_group_id","user_id","usersStore","userId","status","currencyAmountToString","currency","total_amount","currencies","symbol","thousands_sep","decimal_sep","symbol_left","space_between","exp","formattedAmount","toFixed","getUserFullName","first_name","last_name","MessaagePinnedMessage","message","from","content","media","emoji","game","poll","question","sticker","smallDateTimeToString","date","TdLibDateToDate","now","Date","yesterday","getTime","lastWeek","timeToString","getDay","weekdayToString","day","getDate","month","getMonth","year","String","getFullYear","slice","dateToString","hours","getHours","minutes","getMinutes","ampm","futureDayToString","today","tomorrow","durationToString","duration","floor","tdLibDate","MessageSummaryWithoutIcon","MayHaveCaptionThumbnail","caption","thumbnails","animation","minithumbnail","audio","file_name","performer","MayHaveCaption","SenderFullName","is_outgoing","discard_reason","is_video","member_user_ids","sender","newMembers","is_channel_post","deletedMember","ServiceMessageIncludingYou","lpString","lpString_you","ttlTimeUnit","86400","604800","2678400","ttl","document","noGameTitleFallback","score","GameScoreWithTitle","lazy","message_id","game_message_id","default","Suspense","fallback","passportDataTypeToString","passportDataTypes","types","toLowerCase","documents","noInvoiceTitleFallback","amount","PaymentInfoWithInvoiceTitle","invoice_chat_id","invoice_message_id","invoice","is_secret","PinnedMessageMessage","venue","isVideo","video","start_date","time","invitedMembers","user_ids","domain","domain_name","includeYou","MessageSummarySender","part1","getState","getChatNoCache","LinkButton","children","click","open","supergroupStore","supergroup","isChatWithDeletedAccount","chatTitleOrDeletedAccount","ContextMenu","x","y","direction","setDirection","hide","setHide","useRef","handleMouseDown","contextMenusStore","current","documentElement","classList","contains","menu","ContextMenus","menus","createContextMenu","preventDefault","pageX","pageY","Menu","MenuContents","MenuItem","propTypes","node","Toast","closed","setClosed","addToast","toastStore","toast","Toasts","dialogStore","dialog","filter","addDialog","element","removeDialog","Dialogs","dialogs","data-dialog","el","SmallButton","attention","data-attention","Dialog","closing","createRef","close","ConfirmDialog","dialogRef","handleOK","onOK","handleCancel","onCancel","handleButton","largeFont","thirdButton","thirdButtonClosesDialog","onThirdButtonClick","hideCancelButton","OKButtonText","getChatsFromList","order","sort","a","b","order1","order2","ChatList","connectionState","scrollToTopVisible","chatListFinished","onScroll","visible","scrollTop","scrollToTop","view","scroll","behavior","nextProps","nextState","array","Chat","store","EmptyChatList","ChatListItem","getUser","is_pinned","chatType","is_channel","isVerified","is_verified","isChatVerified","messageStatus","sending_state","getMessageStatus","unreadBadge","unreadBadgeClass","mute_for","isOnline","onContextMenu","ChatContextMenu","data-online","input_message_text","movableChatLists","setMovableChatLists","chat_lists","code","ArchivedChatsItem","chatsInList","onArchiveOpen","setButtonState","moveToMainMenuToast","setItem","loadingFallBack","SearchBox","placeholder","onChange","data-visible","connectionStore","connection","NavAnimation","innerScreen","innerClass","closeNavAnimation","ChatListBar","useFolders","searchText","setSearchText","ToolStripButton","hideIcon","ToolStrip","Button","Section","ToggleButton","isActive","checked","readOnly","Separator","convertThemeToCSS","theme","css","obj","equals","themes","classic","tinted","night","getThemeFromStorage","matchMedia","matches","themeStore","rtl","ThemeProvider","dir","data-theme-is-dark","isDark","ThreeDotsMenu","setVisible","BoxSearch","ChooseLanguageDialog","languages","setLanguages","search","setSearch","country","startsWith","response","language_packs","currentPack","pack","LanguagePack","language_pack_id","keys","stringify","reload","strings","selectLanguage","selected","SettingsAdvanced","onClose","onBack","enableRtl","setEnableRtl","SettingsDialog","navState","setNavState","section","setSection","profile_photo","HamburgerMenu","me","setMe","phone_number","phone_number_prefix","info","country_calling_code","formatted_phone_number","nightMode","setNightMode","focus","showArchivedChats","onKeyDown","tabIndex","newState","isNight","version","MessengerWindow","isMenuOpen","setIsMenuOpen","defaultSize","minWidth","handleClasses","right","enable","bottom","topRight","bottomRight","bottomLeft","topLeft","credentials","api_id","api_hash","auth_state","Auth","pass","first","last","BigHighlightedButton","UnderlinedInput","args","handleFocus","inactive","titleClass","getTitleClass","handleBlur","mouseX","handleKeyDown","onEnterKeyPressed","preventNumberScrolling","autoFocus","invalid","iRef","onFocus","onBlur","maxLength","onCopy","disableCopy","CountrySelect","countries","is_hidden","CountrySelectItem","calling_codes","country_code","english_name","c","AuthWindowStepPhoneNumber","number_p","statusContent","statusVisible","dropDownText","ref1","ref2","handlePNFieldChange","changeStatus","openCountryDropdown","cc","getCountryDropdownText","handlePNFieldChange_p","callingCodes","callingCode","value_new","submitNumber","givePhoneNumber","reason","manageStatusTextContent","countryName","Status","AuthWindowStepCode","handleCodeFieldChange","handleContinueButton","checkAuthCode","AuthWindowStepPassword","password","handlePasswordFieldChange","check2FACode","password_hint","paddword_hint","SignUpProfilePic","image","alt","accept","AuthWindowStepRegister","firstName","lastName","handleFirstNameFieldChange","handleLastNameFieldChange","registerNewAccount","textUnderField","showTos","tos","files","link","authStore","thisClass","MainApp","step","authorization_state","code_info","terms_of_service","onfocus","onblur","initializeTdLib","hasFocus","App","simulateFatalError","rel","toString","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onSuccess","ReactDOM","render","StrictMode","getElementById","process","origin","addEventListener","fetch","headers","contentType","ready","unregister","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.45ffa7b5.chunk.js","sourcesContent":["// https://love2dev.com/blog/javascript-remove-from-array/#remove-from-array-splice\n/**\n * Removes an item from an array\n * @param {*} item The item to remove\n */\nexport default function removeItemFromArray(item) {\n    for( var i = 0; i < this.length; i++){ \n        if ( this[i] === item) { \n            this.splice(i, 1); \n        }\n    }\n}\n\nArray.prototype.remove= removeItemFromArray;","/* eslint-disable */\nimport { createTdClient } from './tdweb';\nimport {getConfig} from './config';\nimport TdApi from './td_api';\nimport removeItemFromArray from '../../remove-item-from-array';\nexport function getUseTestDc() {\n    var urlPar=new URL(window.location.href).searchParams.get('test');\n    if(urlPar){\n        return urlPar==='1' || urlPar==='true';\n    }\n    return false;\n}\n\nexport function getCurrentSessionId() {\n    return new URL(window.location.href).searchParams.get('account') || '1';\n}\n\n/**\n * Provides options to communicate with the Tdweb library\n */\nexport default class TdLib {\n    static #tdClient: any;\n    /** @type {[string: Array<Function>]} */\n    static #updateHandlers: {[key: string]: ((update: any) => void)[]}={};\n\n    /**\n     * Creates the instance of Tdweb\n     */\n    static initializeTdLib() {\n        const {log}= getConfig();\n        TdLib.#tdClient= createTdClient({\n            useDatabase: true,\n            instanceName: ( getCurrentSessionId() ) + (getUseTestDc() ? 'test' : 'production'), // e.g. ?account=1&test=1 = '1test' or ?account=1&test=0 = '1production'\n            onUpdate: function (update: TdApi.td_Update) {\n                if(log.log_updates) {\n                    console.log('Update: ',update);\n                }\n                if(TdLib.#updateHandlers[update['@type']]){\n                    TdLib.#updateHandlers[update['@type']].forEach(h => h(update));\n                }\n            }\n        });\n        return TdLib.sendQuery({'@type': 'getAuthorizationState'}); // It both starts TDLib and returns the authorization state\n    }\n\n    /**\n     * Listen for updates from TdLib\n     * @param type The type of the update to listen to. Look for TdLib API docs for types\n     * @param handler The function that gets called with the update object when the update is received\n     */\n    static registerUpdateHandler<T extends TdApi.td_Update>(type: TdApi.TdUpdateType<T>, handler: (update: T) => void): void {\n        if(TdLib.#updateHandlers[type]===undefined){\n            TdLib.#updateHandlers[type]= [];\n        }\n        TdLib.#updateHandlers[type].push(handler);\n    }\n\n    /**\n     * Remove an existing update handler\n     * @param {string} type The type of the update to remove handler from. Look for TdLib API docs for types\n     * @param {Function} handler The handler to remove\n     */\n    static unRegisterUpdateHandler<T extends TdApi.td_Update>(type: TdApi.TdUpdateType<T>, handler: (update: T) => void): void {\n        if(TdLib.#updateHandlers[type]===undefined){\n            return;\n        }\n        removeItemFromArray.call(TdLib.#updateHandlers[type], handler);\n    }\n\n    /**\n     * Send a request to the TdLib instance\n     * If the query contains an `@extra` field, the same field will be added to the result\n     * @param query The request to send. Consult TdLib & JSON interface API for help.\n     * @returns The result of the request\n     */\n    static sendQuery<T extends TdApi.TdFunction>(query: T): Promise<TdApi.TdFunctionReturn<T> | TdApi.td_Error> {\n        const {log}= getConfig();\n        if(log.log_queries && query['@type']!=='setTdlibParameters') {\n            console.log('Query: ',query);\n        }\n        return new Promise((resolve, reject) => {\n            TdLib.#tdClient.send(query).then((result: TdApi.TdFunctionReturn<T>)=> {\n                if(log.log_queries) {\n                    console.log('Query result: ', result);\n                }\n                resolve(result);\n            }, (error: TdApi.td_Error)=> {\n                if(log.log_queries) {\n                    console.warn('Query failed: ', error);\n                }\n                reject(error);\n            }\n            );\n        });\n    }\n}","import TdClient from '@dibgram/tdweb';\n\nexport function createTdClient(op) {\n    return new TdClient(op);\n}","export function getCredentials() {return {api_id: 3022678,api_hash: 'd7b7676a82906a6182f4a5e5e9555673'};}export function getConfig() {return {use_test_dc: false,log: {log_updates: true,log_queries: true}};}\n","// All icons are from Telegram Desktop, converted to SVG using https://pngtosvg.com/\n\nimport raw from 'raw.macro';\n\nvar chatFilerIcons = {\n    All     : [raw('./all.svg'     ), raw('./all_active.svg'     )],\n    Bots    : [raw('./bots.svg'    ), raw('./bots_active.svg'    )],\n    Channels: [raw('./channels.svg'), raw('./channels_active.svg')],\n    Custom  : [raw('./custom.svg'  ), raw('./custom_active.svg'  )],\n    Groups  : [raw('./groups.svg'  ), raw('./groups_active.svg'  )],\n    Private : [raw('./private.svg' ), raw('./private_active.svg' )],\n    Setup   : [raw('./setup.svg'   )                              ],\n    Unread  : [raw('./unread.svg'  ), raw('./unread_active.svg'  )],\n\n    Cat     : [raw('./cat.svg'     ), raw('./cat_active.svg'     )],\n    Crown   : [raw('./crown.svg'   ), raw('./crown_active.svg'   )],\n    Favorite: [raw('./favorite.svg'), raw('./favorite_active.svg')],\n    Flower  : [raw('./flower.svg'  ), raw('./flower_active.svg'  )],\n    Game    : [raw('./game.svg'    ), raw('./game_active.svg'    )],\n    Home    : [raw('./home.svg'    ), raw('./home_active.svg'    )],\n    Love    : [raw('./love.svg'    ), raw('./love_active.svg'    )],\n    Mask    : [raw('./mask.svg'    ), raw('./mask_active.svg'    )],\n    Party   : [raw('./party.svg'   ), raw('./party_active.svg'   )],\n    Sport   : [raw('./sport.svg'   ), raw('./sport_active.svg'   )],\n    Study   : [raw('./study.svg'   ), raw('./study_active.svg'   )],\n    Trade   : [raw('./trade.svg'   ),                             ],\n    Travel  : [raw('./travel.svg'  ), raw('./travel_active.svg'  )],\n    Work    : [raw('./work.svg'    ), raw('./work_active.svg'    )],\n};\nexport default chatFilerIcons;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Adds a ripple effect to a button.\n * \n * Insert at the beginning of the button.\n * \n * **Note:** The button needs `position: relative;` and `overflow: hidden;`\n */\nexport default class RippleEffect extends React.Component {\n    static propTypes= {\n        /** \n         * - Change to `pressed` on `mouseDown`\n         * - Change to `released` on `mouseUp`\n         * - Change to `off` 1000ms after `mouseUp`\n         */\n        state: PropTypes.oneOf(['off', 'pressed', 'released']).isRequired,\n        X: PropTypes.number,\n        Y: PropTypes.number,\n        width: PropTypes.number,\n        height: PropTypes.number,\n        /** The color to show in the ripple (same as `:active` if you used CSS) */\n        color: PropTypes.string.isRequired,\n        /** Pass true if the button is small to make animation faster */\n        small: PropTypes.bool\n    }\n\n    /** Gets the smallest radius that a circle, centered at click location, needs to fill the button */\n    getMaxRadius() {\n        if(!this.props.small){\n        //  It's a bit hard to understand. Let me explain:\n        //  \n        //  1. It calculates the coordinates relative to the 4 edges of the button ────╮\n        //  2. The diagonal distance to the edges are calculated using the             │\n        //      pythagoras rule, from the results of step 1            │               │\n        //  3. The biggest distance is selected and then returned.     │               │\n        //          │                                                  │               │\n        //  ╭───────┴──────╮  ╭────────────────────────────────────────╯               │        \n        //  │           ╭──┼──┴───╮                                                    │                  \n            return Math.max(//    │╭───────────────────────────────────────────────────┴──────────────╮\n                /* ┏ */ Math.hypot(this.props.X                     , this.props.Y),//                │ \n                /* ┓ */ Math.hypot(this.props.width - this.props.X  , this.props.Y),//                │\n                /* ┗ */ Math.hypot(this.props.X                     , this.props.height - this.props.Y), \n                /* ┛ */ Math.hypot(this.props.width - this.props.X  , this.props.height - this.props.Y), \n            );\n        } else {\n            const {X, Y, width, height} = this.props;\n            const [rX, rY] = [X - width / 2, Y - height / 2]; // Click position relative to center of circle.\n            const distanceToCenter= Math.hypot(Math.abs(rX), Math.abs(rY)); // Get distance from click position to the center of circle.\n            return distanceToCenter + (width / 2); // Add circle radius to result\n        }\n    }\n    render() {\n        if(this.props.state=='off') return null;\n        return (\n            <div\n                className={'ripple '+this.props.state+ (this.props.small? ' small':'')}\n                style={{\n                    '--top': (this.props.Y || 0)+'px',\n                    '--left': (this.props.X || 0)+'px',\n                    '--radius': this.getMaxRadius()+'px',\n                    backgroundColor: this.props.color\n                }}/>\n        );\n    }\n}\n\nfunction getRelativeCoordinates(event) {\n    const rect = event.target.getBoundingClientRect();\n    return {\n        X: event.clientX - rect.left,\n        Y: event.clientY - rect.top\n    };\n}\n\n// Assign your `mouseDown`, `mouseUp` and `mouseLeave` to the returned functions.\nexport function handleMyMouseEvents(This) {\n    return [\n        // mouseDown\n        (function(e) {\n            // Reset the ripple effect if it's not off\n            if(this.state.ripple.state!='off'){\n                this.setState({\n                    ripple: { state: 'off' }\n                });\n                setTimeout(() => {\n                    this.setState({\n                        ripple: {\n                            state: 'pressed',\n                            ...getRelativeCoordinates(e),\n                            width: e.target.clientWidth,\n                            height: e.target.clientHeight\n                        }\n                    });\n                }, 50);\n                return;\n            }\n            this.setState({\n                ripple: {\n                    state: 'pressed',\n                    ...getRelativeCoordinates(e),\n                    width: e.target.clientWidth,\n                    height: e.target.clientHeight\n                }\n            });\n        }).bind(This),\n        // mouseUp\n        (function(e) {\n            this.setState({\n                ripple: { \n                    state: 'released',\n                    ...getRelativeCoordinates(e),\n                    width: e.target.clientWidth,\n                    height: e.target.clientHeight \n                }\n            });\n        }).bind(This),\n        // mouseLeave\n        (function(e) {\n            if(this.state.ripple.state=='pressed') {\n                this.mouseUp(e);\n            }\n        }).bind(This)\n    ];\n}\n// Assign your `mouseDown`, `mouseUp` and `mouseLeave` to the returned functions.\nexport function handleMyMouseEventsFunction([ripple, setRipple]) {\n    function down(e) {\n        // Reset the ripple effect if it's not off\n        if(ripple.state!='off'){\n            setRipple({ state: 'off' });\n            setTimeout(() => {\n                setRipple ({\n                    state: 'pressed',\n                    ...getRelativeCoordinates(e),\n                    width: e.target.clientWidth,\n                    height: e.target.clientHeight\n                });\n            }, 50);\n            return;\n        }\n        setRipple ({\n            state: 'pressed',\n            ...getRelativeCoordinates(e),\n            width: e.target.clientWidth,\n            height: e.target.clientHeight\n        });\n    }\n\n    function up(e) {\n        setRipple ({\n            state: 'released',\n            X: e.nativeEvent.offsetX,\n            Y: e.nativeEvent.offsetY,\n            width: e.target.clientWidth,\n            height: e.target.clientHeight \n        });\n    }\n\n    function leave(e) {\n        if(ripple.state=='pressed') {\n            up(e);\n        }\n    }\n    \n    return [down, up, leave];\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport RippleEffect, {handleMyMouseEventsFunction} from '../../ui/elements/ripple-effect';\nimport './icon-button.scss';\n\n/**\n * Renders a round button with an icon in it, and a special ripple effect.\n */\nexport default function IconButton({icon, ...rest}) {\n    const ripple= React.useState({state: 'off'});\n    const [onMouseDown, onMouseUp, onMouseLeave]= handleMyMouseEventsFunction(ripple);\n    return (\n        <button className=\"icon-button\" {...rest} {...{onMouseDown, onMouseUp, onMouseLeave}}>\n            <span dangerouslySetInnerHTML={{__html: icon}} />\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-windowBgOver)\" small={true}/>\n        </button>\n    );\n}\nIconButton.propTypes = {\n    icon: PropTypes.string.isRequired\n};\n","// All icons are from Telegram Desktop, converted to SVG using https://pngtosvg.com/\n\nimport raw from 'raw.macro';\n\nexport const archive_userpic = raw('./archive_userpic.svg');\nexport const dialogs_bot = raw('./dialogs_bot.svg');\nexport const dialogs_channel = raw('./dialogs_channel.svg');\nexport const dialogs_chat = raw('./dialogs_chat.svg');\nexport const dialogs_menu = raw('./dialogs_menu.svg');\nexport const dialogs_pinned = raw('./dialogs_pinned.svg');\nexport const dialogs_received = raw('./dialogs_received.svg');\n//export const dialogs_search_cancel = raw('./dialogs_search_cancel.svg');\nexport const dialogs_sending = raw('./dialogs_sending.svg');\nexport const dialogs_sent = raw('./dialogs_sent.svg');\nexport const dialogs_verified_check = raw('./dialogs_verified_check.svg');\nexport const dialogs_verified_star = raw('./dialogs_verified_star.svg');\nexport const history_to_down = raw('./history_to_down.svg');\nexport const info_back = raw('./info_back.svg');\nexport const info_close = raw('./info_close.svg');\nexport const intro_country_dropdown = raw('./intro_country_dropdown.svg');\nexport const menu_new_channel = raw('./menu_new_channel.svg');\nexport const menu_new_group = raw('./menu_new_group.svg');\nexport const menu_night_mode = raw('./menu_night_mode.svg');\nexport const menu_settings = raw('./menu_settings.svg');\nexport const new_chat_photo = raw('./new_chat_photo.svg');\nexport const replies_userpic = raw('./replies_userpic.svg');\nexport const saved_messages = raw('./saved_messages.svg');\nexport const settings_name = raw('./settings_name.svg');\nexport const settings_phone_number = raw('./settings_phone_number.svg');\nexport const three_dots = raw('./three_dots.svg');\nexport const settings_info = raw('./settings/info.svg');\nexport const settings_privacy_security = raw('./settings/privacy_security.svg');\nexport const settings_notifications = raw('./settings/notifications.svg');\nexport const settings_chat = raw('./settings/chat.svg');\nexport const settings_folders = raw('./settings/folders.svg');\nexport const settings_advenced = raw('./settings/advanced.svg');\nexport const settings_language = raw('./settings/language.svg');\nexport const settings_faq = raw('./settings/faq.svg');\nexport const title_search = raw('./title_search.svg');\n\nexport const filters_edit = raw('./chat_filters/edit.svg');\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from '../../../../ui/elements/icon-button';\nimport RippleEffect, {handleMyMouseEvents} from '../../../../ui/elements/ripple-effect';\nimport { dialogs_menu } from '../../../../ui/icon/icons';\nimport './menu-button.scss';\n\nvar HamburgerMenuButton= {}; // Store component classes here\n\n/**\n * Renders the button which opens the hamburger menu (when there are folders)\n */\nHamburgerMenuButton.WithFolders= class WithFolders extends React.PureComponent {\n    static propTypes= {\n        onClick: PropTypes.func,\n    };\n    state= {\n        ripple: {\n            state: 'off'\n        }\n    }\n    constructor() {\n        super();\n        [this.mouseDown, this.mouseUp, this.mouseLeave]= handleMyMouseEvents(this); // Ripple effect events\n    }\n    render() {\n        return (\n            <button id=\"hamburger-menu-button\" className=\"uses-folders\"\n                onMouseDown={this.mouseDown}\n                onMouseUp={this.mouseUp}\n                onMouseLeave={this.mouseLeave}\n                onClick={this.props.onClick}>\n                <div id=\"bars\"><span></span><span></span><span></span></div>\n                <RippleEffect {...this.state.ripple} color=\"var(--theme-color-sideBarBgRipple)\"/>\n            </button>\n        );\n    }\n};\n\n/**\n * Renders the button which opens the hamburger menu (when there are no folders)\n */\nHamburgerMenuButton.WithoutFolders= function WithoutFolders (props) {\n    return (\n        <IconButton \n            icon={dialogs_menu}\n            id=\"hamburger-menu-button\"\n            className=\"icon-button no-folders\"\n            {...props}/>\n    );\n};\n\nexport default HamburgerMenuButton;","import { createStore } from 'redux';\nimport TdLib from '../TdWeb/tdlib';\n\n/**\n * It is recommended to use the outline view or find tool to navigate this file.\n */\n\nconst chatStore= createStore(reducer, \n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n    \nfunction reducer(state= {\n    currentChatList: {'@type': 'chatListMain'},\n    archiveState: 'closed',\n    archiveButtonState: localStorage.getItem('dibgram-archived-chats-button-mode'),\n    chats: [],\n    filters: [],\n    unread: {\n        main: {},\n        archive: {},\n        filters: {}\n    }\n}, action) {\n    switch (action.type) {\n    case 'SET_CURRENT_CHAT_LIST':\n        return {\n            ...state,\n            currentChatList: action.chatList\n        };\n    case 'SET_ARCHIVE_STATE':\n        return {\n            ...state,\n            archiveState: action.archiveState\n        };\n    case 'UPDATE_UNREAD_MESSAGE_COUNT':\n        if(action.chat_list['@type'] === 'chatListMain') {\n            return {\n                ...state,\n                unread: {\n                    ...state.unread,\n                    main: {\n                        ...state.unread.main,\n                        unread_messages_count: action.unread_count,\n                        unread_unmuted_messages_count: action.unread_unmuted_count\n                    }\n                }\n            };\n        } else if(action.chat_list['@type'] === 'chatListArchive') {\n            return {\n                ...state,\n                unread: {\n                    ...state.unread,\n                    archive: {\n                        ...state.unread.archive,\n                        unread_messages_count: action.unread_count,\n                        unread_unmuted_messages_count: action.unread_unmuted_count\n                    }\n                }\n            };\n        } else if(action.chat_list['@type'] === 'chatListFilter') {\n            return {\n                ...state,\n                unread: {\n                    ...state.unread,\n                    filters: {\n                        ...state.unread.filters,\n                        [action.chat_list.chat_filter_id]: {\n                            ...state.unread.filters[action.chat_list.chat_filter_id],\n                            unread_messages_count: action.unread_count,\n                            unread_unmuted_messages_count: action.unread_unmuted_count\n                        }\n                    }\n                }\n            };\n        }\n        return state;\n    case 'UPDATE_UNREAD_CHAT_COUNT':\n        if(action.chat_list['@type'] === 'chatListMain') {\n            return {\n                ...state,\n                unread: {\n                    ...state.unread,\n                    main: {\n                        ...state.unread.main,\n                        total_chats_count: action.total_count,\n                        unread_chats_count: action.unread_count,\n                        unread_unmuted_chats_count: action.unread_unmuted_count,\n                        marked_as_unread_chats_count: action.marked_as_unread_count,\n                        marked_as_unread_unmuted_chats_count: action.marked_as_unread_unmuted_count\n                    }\n                }\n            };\n        } else if(action.chat_list['@type'] === 'chatListArchive') {\n            return {\n                ...state,\n                unread: {\n                    ...state.unread,\n                    archive: {\n                        ...state.unread.archive,\n                        total_chats_count: action.total_count,\n                        unread_chats_count: action.unread_count,\n                        unread_unmuted_chats_count: action.unread_unmuted_count,\n                        marked_as_unread_chats_count: action.marked_as_unread_count,\n                        marked_as_unread_unmuted_chats_count: action.marked_as_unread_unmuted_count\n                    }\n                }\n            };\n        } else if(action.chat_list['@type'] === 'chatListFilter') {\n            return {\n                ...state,\n                unread: {\n                    ...state.unread,\n                    filters: {\n                        ...state.unread.filters,\n                        [action.chat_list.chat_filter_id]: {\n                            ...state.unread.filters[action.chat_list.chat_filter_id],\n                            total_chats_count: action.total_count,\n                            unread_chats_count: action.unread_count,\n                            unread_unmuted_chats_count: action.unread_unmuted_count,\n                            marked_as_unread_chats_count: action.marked_as_unread_count,\n                            marked_as_unread_unmuted_chats_count: action.marked_as_unread_unmuted_count\n                        }\n                    }\n                }\n            };\n        }\n        return state;\n\n    case 'SET_ARCHIVE_BUTTON_STATE':\n        return {\n            ...state,\n            archiveButtonState: action.archiveButtonState\n        };\n    case 'ADD_CHAT':\n        return {\n            ...state,\n            chats: [\n                ...state.chats,\n                action.chat\n            ]\n        };\n    case 'UPDATE_CHAT_POSITION': // Replace the position property of a chat\n        return {\n            ...state,\n            chats: state.chats.map((chat) => {\n                if (chat.id === action.chat_id) {\n                    let changed=false;\n                    let newChat = {\n                        ...chat,\n                        positions: chat.positions.map((position) => {\n                            if (compareChatList(position.list, action.position.list)) {\n                                changed=true;\n                                return action.position;\n                            }\n                            return position;\n                        })\n                    };\n                    if(!changed) {\n                        return {\n                            ...chat,\n                            positions: [\n                                ...chat.positions,\n                                action.position\n                            ]\n                        };\n                    }\n                    return newChat;\n                }\n                return chat;\n            })\n        };\n    case 'REPLACE_CHAT_FILTERS':\n        return {\n            ...state,\n            filters: action.payload\n        };\n    case 'UPDATE_CHAT_PROPERTY':\n        return {\n            ...state,\n            chats: state.chats.map((chat) => {\n                if (chat.id === action.chat_id) {\n                    return {\n                        ...chat,\n                        [action.property]: action.value\n                    };\n                }\n                return chat;\n            })\n        };\n    default:\n        return state;\n    }\n}\n\nTdLib.registerUpdateHandler('updateUnreadChatCount', (update) => {\n    chatStore.dispatch({\n        type: 'UPDATE_UNREAD_CHAT_COUNT',\n        ...update\n    });\n});\n\nTdLib.registerUpdateHandler('updateUnreadMessageCount', (update) => {\n    chatStore.dispatch({\n        type: 'UPDATE_UNREAD_MESSAGE_COUNT',\n        ...update\n    });\n});\n\nTdLib.registerUpdateHandler('updateNewChat', update => {\n    chatStore.dispatch({\n        type: 'ADD_CHAT',\n        chat: update.chat\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatActionBar', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'action_bar',\n        chat_id: update.chat_id,\n        value: update.action_bar\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatDefaultDisableNotification', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'default_disable_notification',\n        chat_id: update.chat_id,\n        value: update.default_disable_notification\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatDraftMessage', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'draft_message',\n        chat_id: update.chat_id,\n        value: update.draft_message\n    });\n    for (let position of update.positions) {\n        chatStore.dispatch({\n            type: 'UPDATE_CHAT_POSITION',\n            chat_id: update.chat_id,\n            position: position\n        });\n    }\n});\n\nTdLib.registerUpdateHandler('updateChatFilters', update=> {\n    if(update.chat_filters) {\n        chatStore.dispatch({\n            type: 'REPLACE_CHAT_FILTERS',\n            payload: update.chat_filters\n        });\n    }\n});\n\nTdLib.registerUpdateHandler('updateChatHasScheduledMessages', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'has_scheduled_messages',\n        chat_id: update.chat_id,\n        value: update.has_scheduled_messages\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatIsBlocked', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'is_blocked',\n        chat_id: update.chat_id,\n        value: update.is_blocked\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatIsMarkedAsUnread', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'is_marked_as_unread',\n        chat_id: update.chat_id,\n        value: update.is_marked_as_unread\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatLastMessage', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'last_message',\n        chat_id: update.chat_id,\n        value: update.last_message\n    });\n    for (let position of update.positions) {\n        chatStore.dispatch({\n            type: 'UPDATE_CHAT_POSITION',\n            chat_id: update.chat_id,\n            position: position\n        });\n    }\n});\n\nTdLib.registerUpdateHandler('updateChatMessageTtlSetting', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'message_ttl_setting',\n        chat_id: update.chat_id,\n        value: update.message_ttl_setting\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatNotificationSettings', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'notification_settings',\n        chat_id: update.chat_id,\n        value: update.notification_settings\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatOnlineMemberCount', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'online_member_count',\n        chat_id: update.chat_id,\n        value: update.online_member_count\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatPermissions', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'permissions',\n        chat_id: update.chat_id,\n        value: update.permissions\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatPhoto', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'photo',\n        chat_id: update.chat_id,\n        value: update.photo\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatPosition', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_POSITION',\n        chat_id: update.chat_id,\n        position: update.position\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatReadInbox', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'unread_count',\n        chat_id: update.chat_id,\n        value: update.unread_count\n    });\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'last_read_inbox_message_id',\n        chat_id: update.chat_id,\n        value: update.last_read_inbox_message_id\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatReadOutbox', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'last_read_outbox_message_id',\n        chat_id: update.chat_id,\n        value: update.last_read_outbox_message_id\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatReplyMarkup', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'reply_markup_message_id',\n        chat_id: update.chat_id,\n        value: update.reply_markup_message_id\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatTheme', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'theme_name',\n        chat_id: update.chat_id,\n        value: update.theme_name\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatTitle', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'title',\n        chat_id: update.chat_id,\n        value: update.title\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatUnreadMentionCount', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'unread_mention_count',\n        chat_id: update.chat_id,\n        value: update.unread_mention_count\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatVoiceChat', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'voice_chat',\n        chat_id: update.chat_id,\n        value: update.voice_chat\n    });\n});\n\nTdLib.registerUpdateHandler('updateMessageMentionRead', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'unread_mention_count',\n        chat_id: update.chat_id,\n        value: update.unread_mention_count\n    });\n});\n\nexport default chatStore;\n\n/**\n * Check if two chat lists are equal\n * @param {import('tdweb').TdObject} list1 \n * @param {import('tdweb').TdObject} list2 \n * @returns True if the provided objects refer to the same list. Otherwise false\n */\nexport function compareChatList(list1, list2) {\n    if (list1['@type'] != list2['@type']) { // First compare type\n        return false;\n    }\n    if (list1['@type'] == 'chatListFilter') { // Then Compare folder ID\n        return list1.chat_filter_id == list2.chat_filter_id;\n    }\n    return true;\n}\n\n/**\n * Gets a chat from a chat ID. Supports caching.\n */\nexport function getChat(id) {\n    let res;\n    for(let chat of chatStore.getState()?.chats) {\n        if(chat.id==id) res = Promise.resolve(chat);\n    }\n    if(!res){\n        res = TdLib.sendQuery({\n            '@type': 'getChat',\n            'chat_id': id\n        });\n    }\n    return res;\n}\n\n/**\n * Gets a chat from a chat ID. Does not support caching to prevent promises complexity.\n */\nexport function getChatNoCache(id) {\n    for(let chat of chatStore.getState()?.chats) {\n        if(chat.id==id) return chat;\n    }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport './scrollbar.scss';\n\n/**\n * A scrollable container. Sizing might need to be tweaked by CSS.\n */\nexport default function ScrollView({scrollBarWidth, scrollRef, scrollAlwaysVisible, ...propsRest}) {\n    const [mouseEntered, setMouseEntered] = React.useState(false);\n    const [timeoutId, setTimeoutId] = React.useState(null);\n    return (\n        <Scrollbars\n            className=\"scrollbar\"\n            style= {{ '--bar-width': (scrollBarWidth || 4)+'px' }}\n            data-mouse-entered={mouseEntered}\n            renderTrackHorizontal={props => <div {...props} className=\"track-horizontal\" />}\n            renderTrackVertical={props => <div {...props} className=\"track-vertical\" />}\n            renderThumbHorizontal={props => <div {...props} className=\"thumb-horizontal\" />}\n            renderThumbVertical={props => <div {...props} className=\"thumb-vertical\" />}\n            onMouseEnter={() => {\n                setMouseEntered(true);\n                setTimeoutId(setTimeout(() => {\n                    setMouseEntered(false);\n                }, 1000));\n            }}\n            onMouseLeave={() => {\n                setMouseEntered(false);\n                clearTimeout(timeoutId);\n            }}\n            autoHide={!scrollAlwaysVisible}\n            data-auto-hide={scrollAlwaysVisible? 'false' : 'true'}\n            autoHideTimeout={1000}\n            hideTracksWhenNotNeeded={true}\n            ref={scrollRef}\n            {...propsRest}\n        />\n    );\n}\nScrollView.propTypes = {\n    /** Scroll-bar thickness, in pixels (default: 4) */\n    scrollBarWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    /** A React ref that is passed down to the scrollbars component */\n    scrollRef: PropTypes.object,\n    /** Whether to always show the scrollbars (default: false) */\n    scrollAlwaysVisible: PropTypes.bool,\n};\n","import React from 'react';\nimport { authStore } from '../auth/auth-screen';\nimport TdLib from '../TdWeb/tdlib';\nimport englishLanguagePack from './english.json';\n\nvar currentLanguagePack= null;\n\nconst applyKeys= (item, index) => (<React.Fragment key={index}>{item}</React.Fragment>);\n\nexport function initLanguagePack(){\n    TdLib.sendQuery({\n        '@type': 'setOption', \n        'name': 'localization_target', \n        'value': {\n            '@type': 'optionValueString', \n            value: 'tdesktop'\n        }\n    }).then(()=>{\n        const languageInfo= getCurrentLanguagePack();\n        TdLib.sendQuery({\n            '@type': 'getLanguagePackStrings',\n            language_pack_id: languageInfo.id || 'en'\n        }).then(result=>{\n            currentLanguagePack = {};\n            result.strings.forEach(string=>{\n                currentLanguagePack[string.key] = string;\n            });\n\n            authStore.dispatch({ // Force re-render9\n                type: 'SET_STATE',\n                state: authStore.getState().state\n            });\n        });\n    });\n}\n\n/**\n * Gets the language pack info for the selected language\n * @param {boolean} englishIsDefault If true, returns english if the user didn't set a language\n * @returns {import('../TdWeb/td_api').TdApi.td_LanguagePackInfo|null} Language pack object\n */\nexport function getCurrentLanguagePack(englishIsDefault= true) {\n    let languageInfo= localStorage.getItem('dibgram-active-language');\n    if(languageInfo) languageInfo= JSON.parse(languageInfo);\n    if((!languageInfo) && englishIsDefault) languageInfo= {\n        '@type': 'languagePackInfo',\n        base_language_pack_id: '',\n        id: 'en',\n        is_beta: false,\n        is_installed: false,\n        is_official: true,\n        is_rtl: false,\n        local_string_count: 2784,\n        name: 'English',\n        native_name: 'English',\n        plural_code: 'en',\n        total_string_count: 2784,\n        translated_string_count: 2784,\n        translation_url: 'https://translations.telegram.org/en/'\n    };\n    return languageInfo;\n}\n\nexport function getRtlMode() {\n    return (localStorage.getItem('dibgram-allow-rtl-layout') == 'true') && (getCurrentLanguagePack(false)?.is_rtl || false);\n}\n\nfunction getFormattedText(text){\n    const formatted= applyFormatting(text);\n    if(formatted.length === 1) return formatted[0];\n    return formatted.map(applyKeys);\n}\n\nfunction applyFormatting(format) {\n    var res= [];\n    /* eslint-disable-next-line no-constant-condition */\n    while(true) {\n        if(format.includes('\\n')){ // New line\n            const index= format.indexOf('\\n');\n            applyFormatting(format.substr(0, index)).forEach(e=>res.push(e));\n            res.push(<br/>);\n            format= format.substr(index + 1);\n        } \n        else if(format.includes('**')){ // Bold\n            const execed= /\\*\\*(.+)\\*\\*/.exec(format);\n            applyFormatting(format.substr(0, execed.index)).forEach(e=>res.push(e));\n            res.push(<strong>{execed[1]}</strong>);\n            format= format.substr(execed.index + execed[1].length+4);\n        }\n        else break;\n    }\n    res.push(format);\n    return res;\n}\n\nexport function formatString(format, params= {}) {\n    var res= [];\n    while(format.includes('{')){\n        const execed= /{(\\w+)}/.exec(format);\n        applyFormatting(format.substr(0, execed.index)).forEach(e=>res.push(e));\n        res.push(params[execed[1]]);\n        format= format.substr(execed.index + execed[1].length+2);\n    }\n    return [...res, ...applyFormatting(format)];\n}\n\n// Returns 'zero', 'one', 'two', 'few', 'many' or 'other' depending on the number\nfunction getCountMode(count) {\n    if(count === 0) return 'zero';\n    if(count === 1) return 'one';\n    if(count === 2) return 'two';\n    if(count > 2 && count < 10) return 'few';\n    if(count >= 10) return 'many';\n    return 'other';\n}\n\nfunction getPluralString(mode, callback) {\n    switch(mode) {\n    case 'zero': return callback('zero') || callback('few') || callback('many') || callback('other');\n    case 'one': return callback('one') || callback('other');\n    case 'two': return callback('two') || callback('few') || callback('many') || callback('other');\n    case 'few': return callback('few') || callback('many') || callback('other');\n    case 'many': return callback('many') || callback('other');\n    case 'other': return callback('other');\n    }\n}\n\n/**\n * Returns the localized string for the given language pack string.  \n * Use `__fmt` for formatted strings, or `__pl` for pluralized strings.\n * @example ```js\n * __('lng_menu_settings') // 'Settings'\n * __('lng_error_phone_flood') // 'Sorry, you have deleted and re-created your account too many times recently. Please wait for a few days before signing up again.'\n * ```\n * @param {string} key Language pack string name\n * @returns {string | React.ReactNode[]} Localized version of the string\n */\nexport default function __(key) {\n    if(currentLanguagePack) {\n        const languagePackString= currentLanguagePack[key].value;\n        if(languagePackString['@type'] === 'languagePackStringValueOrdinary') {\n            return getFormattedText(languagePackString.value);\n        }\n    }\n\n    const languagePack = englishLanguagePack;\n    return getFormattedText(languagePack[key]);\n}\n\n/**\n * Returns the localized string for the given language pack string, formatted with the given parameters.\n * @example \n * ```js\n * __fmt('lng_menu_settings', {name: 'John'}) // 'John'\n * ```\n * @param {string} name Language pack string name\n * @param {{[key: string]: string}} params An object containing formatting parameters\n * @returns Localized version of the string, with formattings applied\n */\nexport function __fmt(name, params, useFragments= true) {\n    return  formatString(__(name), params).map(useFragments? applyKeys : e=>e);\n}\n\nexport function __pl(key, count, params={}) {\n    var callback= null;\n    if(currentLanguagePack) {\n        if(currentLanguagePack[key].value['@type'] === 'languagePackStringValuePluralized') {\n            const pluralized= currentLanguagePack[key].value;\n            callback= (mode) => pluralized[mode+'_value'];\n        }\n    }\n    else callback=  (mode) => englishLanguagePack[key+'#'+mode];\n\n    const pluralizedString= getPluralString(getCountMode(count), callback);\n    const formatted= formatString(pluralizedString, {count, ...params});\n    if(formatted.length === 1) return formatted[0];\n    return formatted.map(applyKeys);\n}\n\n/**\n * Formats an array of objects in the format `A, B, C and D`\n * Uses the format strings given as the parameters to do the formatting.\n * The default values for the strings are `{accumulated}, {user}` and `{accumulated} and {user}`\n * \n * @param {boolean} isInvite If true, the value of the strings `lng_action_invite_users_and_one` and `lng_action_invite_users_and_last` will be used. Otherwise, `lng_action_add_users_and_one` and `lng_action_add_users_and_last` will be used.\n * @param {React.ReactNode[]} users An array of objects to format\n * @param {boolean} usesReact If true, the result will be returned as an array of objects, each wrapped in a React Fragment. If false, the result will be returned as a string.\n */\nexport function __collection(isInvite, users, usesReact= false) {\n    if(users.length == 1) return users[0];\n\n    const format= __(isInvite? 'lng_action_invite_users_and_one' : 'lng_action_add_users_and_one');\n    const formatLast= __(isInvite? 'lng_action_invite_users_and_last' : 'lng_action_add_users_and_last');\n\n    var result= [users[0]];\n    for(let i= 1; i < users.length - 1; i++) {\n        const user= users[i];\n        result= formatString(format, {accumulated: result, user}).flat();\n    }\n    result= formatString(formatLast, {accumulated: result, user: users[users.length - 1]}).flat();\n    return usesReact? result.map(applyKeys) : result.join('');\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport filters from '../../../ui/icon/chat_filters/chat-filters';\nimport RippleEffect, {handleMyMouseEventsFunction} from '../../../ui/elements/ripple-effect';\nimport HamburgerMenuButton from './hamburger-menu/menu-button';\nimport { compareChatList } from '../../chat-store';\nimport TdLib from '../../../TdWeb/tdlib';\nimport ScrollView from '../../../ui/scroll/scrollbar';\nimport './chat-folders.scss';\nimport __ from '../../../language-pack/language-pack';\n\nexport var chatListScrollToTopEvent = [function(){}];\n\n/**\n * Renders a chat folder button\n */\nexport function ChatFolder({folder, active, onClick, unread}) {\n    // Ripple effect\n    const ripple= React.useState({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave]= handleMyMouseEventsFunction(ripple);\n\n    const [iconName, setIconName]= React.useState(folder.icon_name);\n\n    React.useEffect(()=> { // Get folder chats, TDLib won't show them if this request isn't sent\n        TdLib.sendQuery({\n            '@type': 'loadChats',\n            'chat_list': {\n                '@type': 'chatListFilter',\n                'chat_filter_id': folder.id,\n            },\n            'limit': 50 // Only get 50 chats //TODO: Implement loading more chats\n        });\n    }, []);\n\n    React.useEffect(()=> {\n        if(!folder.icon_name) {\n            // Default icon is used and we don't know what it is.\n            TdLib.sendQuery({ // Get chat filter info so we can get an idea what it is\n                '@type': 'getChatFilter',\n                'chat_filter_id': folder.id\n            }).then(folder=> {\n                TdLib.sendQuery({ // Ask TDLib what the icon should be\n                    '@type': 'getChatFilterDefaultIconName',\n                    'filter': folder\n                }).then(result=> setIconName(result.text));\n            });\n        }\n    }, [folder]);\n\n    function handleClick(e){\n        onClick(e);\n        chatListScrollToTopEvent[0]?.();\n    }\n\n    var icon= (filters[iconName] || filters['Custom']); // If the icon was empty, show a generic icon instead.\n    icon= icon[active+0] || icon[0]; // Some icons dont have active variant\n    return (\n        <div className={active ? 'item active' : 'item'}>\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-sideBarBgRipple)\"/>\n            <button\n                onMouseDown={mouseDown}\n                onMouseUp={mouseUp}\n                onMouseLeave={mouseLeave}\n                onClick={handleClick}>\n\n                <div className=\"icon\" dangerouslySetInnerHTML={{__html: icon}}></div>\n                <div className=\"title\">{folder.title}</div>\n                {unread?.unread_chats_count? (\n                    <div className=\"unread-badge\" \n                        data-muted={(unread?.unread_unmuted_chats_count==0) ? 'true' : 'false'}>\n                        <span>{unread?.unread_chats_count}</span>\n                    </div>\n                ): null}\n            </button>\n        </div>\n    );\n}\n\nChatFolder.propTypes= {\n    /** The folder object provided by TdLib */\n    folder: PropTypes.object.isRequired,\n    /** A boolean indicating if the folder is currently selected */\n    active: PropTypes.bool.isRequired,\n    /** A function to call when the folder is clicked */\n    onClick: PropTypes.func.isRequired,\n    /** An object containing unread messages and chats count, from `chatStore` */\n    unread: PropTypes.object\n};\n\n/**\n * Renders the chat folders list\n */\nfunction ChatFolderList({folders, currentFolder, unread, dispatch, onHamburgerMenuOpened}) {\n    if(!folders || folders.length==0) return null;\n\n    return (\n        <div id=\"chat-folders-list\">\n            <HamburgerMenuButton.WithFolders onClick={onHamburgerMenuOpened}/>\n\n            <ScrollView scrollBarWidth=\"4\" className=\"list scrollbar full-size\">\n                <ChatFolder \n                    active={compareChatList(currentFolder, {'@type': 'chatListMain'})} \n                    folder={{ title: __('lng_filters_all'), icon_name: 'All' }}\n                    unread={unread.main}\n                    onClick={()=> dispatch({\n                        type: 'SET_CURRENT_CHAT_LIST',\n                        chatList: { '@type': 'chatListMain' }\n                    })}/>\n                \n                {folders.map(folder=> (\n                    <ChatFolder folder={folder} key={folder.id}\n                        unread={unread.filters[folder.id]}\n                        active={compareChatList(currentFolder, \n                            {'@type': 'chatListFilter', 'chat_filter_id': folder.id})}\n                        onClick={()=> dispatch({\n                            type: 'SET_CURRENT_CHAT_LIST',\n                            chatList: { \n                                '@type': 'chatListFilter',\n                                chat_filter_id: folder.id\n                            }\n                        })}/>\n                ))}\n            </ScrollView>\n        </div>\n    );\n}\nChatFolderList.propTypes={\n    /** An array of chat filters */\n    folders: PropTypes.arrayOf(PropTypes.object),\n    /** Current chat list */\n    currentFolder: PropTypes.object,\n    /** A list of unread messages info for each chat list */\n    unread: PropTypes.object,\n    \n    dispatch: PropTypes.func,\n    /** Fires when main menu is triggered */\n    onHamburgerMenuOpened: PropTypes.func\n};\nexport default connect(state=>({\n    folders:state.filters, \n    currentFolder: state.currentChatList,\n    unread: state.unread\n}))(ChatFolderList);","import { ProgressRing } from 'progress-ring';\nimport 'progress-ring/src/styles.css';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Renders a spinner which in addition to spinning, also changes size.\n */\nexport default class LoadingSpinner extends React.Component {\n    static props= {\n        /** Spinner circle size */\n        size: PropTypes.number.isRequired,\n        /** Spinner thickness */\n        lineWidth: PropTypes.number.isRequired,\n        /** Spinner color */\n        progressColor: PropTypes.string.isRequired\n    }\n    state= {\n        percentage: 10 // From 10 to 90, this specifies how much the spinner grows and shrinks while spinning (reversed)\n    }\n    render () {\n        return (\n            <div className=\"loading-spinner\">\n                <ProgressRing\n                    percent={this.state.percentage}\n                    caps='round'\n                    trackColor=\"transparent\"\n                    spin=\"true\"\n                    {...this.props}\n                    transitionDuration=\"2000\"/>\n            </div>\n        );\n    }\n\n    componentDidMount () {\n        this.intervalNum= setInterval(() => { // Spinner grows and shrinks while spinning\n            this.setState({\n                percentage: (90 - this.state.percentage)\n            });\n        }, 2000);\n    }\n\n    componentWillUnmount () {\n        clearInterval(this.intervalNum);\n    }\n}","import React from 'react';\nimport LoadingSpinner from '../elements/loading-spinner';\nimport { connect } from 'react-redux';\n\n/**\n * Renders the connecting spinner at the bottom left corner, which is hidden when connected\n */\nexport default connect(state=> ({state: state})) (function ConnectionState({state}) {\n    return (\n        <div className={'connectionState'+(([\n            'connectionStateConnecting',\n            'connectionStateConnectingToProxy',\n            'connectionStateWaitingForNetwork'\n        ].includes(state))? '' : ' connected')}>\n            <LoadingSpinner\n                progressColor=\"var(--theme-color-menuIconFg)\"\n                size=\"20\"\n                lineWidth=\"2\"/>\n        </div>\n    );\n});\n","import TdLib from './tdlib';\n\n/**\n * Downloads a file. Promise is resolved when the file is downloaded.\n * @param {number} file_id ID of file to be downloaded\n * @param {number} priority From 1 to 32, higher number results in earlier download\n * @returns {import('tdweb').TdObject} File object\n */\nexport function downloadFile (file_id, priority) {\n    let onReject;\n    TdLib.sendQuery({\n        '@type': 'downloadFile',\n        'file_id': file_id,\n        'priority': priority,\n        'offset': 0,\n        'limit': 0,\n        'synchronous': false\n    }).catch(onReject);\n\n    return new Promise((resolve, reject) => {\n        downloadCallbacks[file_id]=result=> {\n            resolve(result);\n            delete downloadCallbacks[file_id];\n        };\n        onReject=reject;\n    });\n}\nvar downloadCallbacks = {};\n\nTdLib.registerUpdateHandler('updateFile', function (update) {\n    if(update.file.local.is_downloading_completed){\n        downloadCallbacks[update.file.id]?.(update.file);\n    }\n});\n\nconst cachedFiles= {};\n\n/**\n * Gets file content (downloads if necessary). Promise is resolved with a `filePart` object when file content is ready\n * @param {import('tdweb').TdObject} file File object\n * @param {number} priority Download priority from 1 to 32. Higher value = earlier download\n * @param {boolean} enableCache If true, file content will be stored in a cache in the RAM. Files larger than 500KiB will not be cached whatsoever.\n * @returns {import('tdweb').TdObject} A `filePart` object\n * \n */\nexport function getFileContent(file, priority, enableCache=true) {\n    if(file.id in cachedFiles){ // If we have it in cache, we can use that\n        return Promise.resolve({data: cachedFiles[file.id]});\n    }\n\n    function resolveFilePart(filePart){\n        if(enableCache && file.size<=500*1024){\n            cachedFiles[file.id]=filePart.data;\n        }\n        return filePart;\n    }\n\n    if(file.local.is_downloading_completed){ // File is already downloaded - only read file\n        return new Promise((resolve, reject) => {\n            TdLib.sendQuery({\n                '@type': 'readFilePart',\n                'file_id': file.id,\n                'offset': 0,\n                'count': 0\n            }).then((f)=>resolve(resolveFilePart(f))).catch(reject);\n        });\n    } \n    else if(file.local.is_downloading_active){ // File is already being downloaded - gets quite complex here.\n        return new Promise((resolve, reject) => {\n            const callback = downloadCallbacks[file.id];\n            downloadCallbacks[file.id] = (result) => { // Replace old callback with a new callback that calls the old one and also does its own stuff\n                callback(result); // Call the old callback\n                TdLib.sendQuery({ // Read the file\n                    '@type': 'readFilePart',\n                    'file_id': file.id,\n                    'offset': 0,\n                    'count': 0\n                }).then((f)=>resolve(resolveFilePart(f))).catch(reject);\n            };\n        });\n    } else {\n        return new Promise((resolve, reject) => { // File is not downloaded.\n            downloadFile(file.id, priority).then(()=> { // Download it...\n                TdLib.sendQuery({ // ...then read it\n                    '@type': 'readFilePart',\n                    'file_id': file.id,\n                    'offset': 0,\n                    'count': 0\n                }).then((f)=>resolve(resolveFilePart(f))).catch(reject);\n            }).catch(reject);\n        });\n    }\n}\n\n/**\n * Converts a blob to a URL\n * @param {Blob} blob Blob to convert\n * @returns {string} Created URL\n */\nexport function blobToUrl (blob) {\n    return (window.URL || window.webkitURL).createObjectURL(blob);\n}\n","import TdLib from './tdlib';\n\n/**\n * Contains all options received from TdLib `updateOption`s\n */\nvar options={};\n\nTdLib.registerUpdateHandler('updateOption', function (update) {\n    options[update.name]=update.value.value;\n});\n\nexport default options;\n","export default __webpack_public_path__ + \"static/media/TgLogo.d1ff1195.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { blobToUrl, getFileContent } from '../../TdWeb/file';\nimport options from '../../TdWeb/options';\nimport './profile-photo.scss';\nimport tgLogo from '../../ui/img/TgLogo.png';\nimport { saved_messages, replies_userpic } from '../icon/icons';\n\n/**\n * Converts a name to initials.\n * @param {string} name Input name\n * @returns {string} One or two uppercase letters\n */\nexport function profileNameToInitials(name) {\n    const words=name.replace(/[\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007F]/g,'') // Remove non-word characters\n        .toUpperCase().split(' ');\n    if(words[0].length==0){\n        return '';\n    } else if(words.length===1) {\n        return words[0][0];\n    } else {\n        return words[0][0] + words[words.length-1][0];\n    }\n}\n\n/**\n * Renders a chat / profile photo.\n */\nexport default function ProfilePhoto (props) {\n    const [photo, setPhoto] = React.useState(null);\n    const [photoObj, setPhotoObj] = React.useState(null);\n    const [loaded, setLoaded] = React.useState(false);\n    const isServiceMessages= props.id==options['telegram_service_notifications_chat_id'];\n    const isSavedMessages= props.id==options['my_id'];\n    const isReplies= props.id==options['replies_bot_chat_id'];\n    \n    React.useEffect(() => { // Fetch image data\n        var mounted=true;\n        if(props.photo){\n            if(photoObj!=props.photo){ // No need for any fetch if the same photo is already loaded\n                getFileContent(props.photo, 8).then(file=> {\n                    if(!mounted) return;\n                    setPhoto(blobToUrl(file.data));\n                    setPhotoObj(props.photo);\n                });\n            }\n        } else { // No photo\n            if(photo && photoObj){\n                setPhoto(null);\n                setPhotoObj(null);\n            }\n        }\n        return ()=> mounted=false;\n    }, [props.photo]);\n\n    var customIcon; \n    if(isSavedMessages && (!props?.disableSavedMessages)){ // Use saved messages icon instead of user pic (if not disabled)\n        customIcon= [0, saved_messages];\n    }\n    if(isReplies){ // Replies chat has no icons and we supply one ourselves\n        customIcon= [0, replies_userpic];\n    }\n    if((!props.photo) && isServiceMessages) { // Service messages may have no photo (e.g. on test DC)\n        customIcon = [1, tgLogo];\n    }\n    return (\n        <div className=\"profile-photo\">\n            {(!loaded || !(props.photo && photo)) && <Initials id={props.id} name={props.name}/>}\n            {\n                customIcon? (\n                    customIcon[0]?\n                        <React.Fragment>\n                            {(!loaded) && <Initials id={props.id} name={props.name}/>}\n                            <img onLoad={()=> setLoaded(true)} src={customIcon[1]}/>\n                        </React.Fragment>\n                        :\n                        <div className=\"svg\" dangerouslySetInnerHTML={{__html: customIcon[1]}}/>\n                ) : (\n                    (props.photo && photo) && <img onLoad={()=> setLoaded(true)} src={photo}/> \n                )\n            }\n        </div>\n    );\n}\nProfilePhoto.propTypes = {\n    /** Chat/user name, used for initials */\n    name: PropTypes.string.isRequired,\n    /** Chat type id (supergroup id, user id, etc.), used for initials background */\n    id: PropTypes.number.isRequired,\n    /** Chat / user photo (e.g. `chat.photo?.small`) */\n    photo: PropTypes.object,\n    /** If false, saved messages icon will be used when user_id = my_id */\n    disableSavedMessages: PropTypes.bool\n};\n\n/** Renders photo initials fallback */\nfunction Initials({id, name}) {\n    return (\n        <span className={'initials color_'+ ((Math.abs(id || 0) % 7) + 1)}>\n            {profileNameToInitials(name)}\n        </span>\n    );\n}\nInitials.propTypes = {\n    /** Chat/user name, used to generate initials */\n    name: PropTypes.string.isRequired,\n    /** Chat type ID, used to generate background color */\n    id: PropTypes.number.isRequired\n};\n\n/**\n * Returns a chat's type ID. (supergroup Id / basic group ID / user ID)\n * @param {import('tdweb').TdObject} chat Input chat\n * @returns Chat type ID\n */\nexport function getChatTypeId(chat) {\n    switch (chat?.type?.['@type']) {\n    case 'chatTypeSupergroup': {\n        return chat?.type?.supergroup_id;\n    }\n    case 'chatTypeBasicGroup': {\n        return chat?.type?.basic_group_id;\n    }\n    case 'chatTypePrivate':\n    case 'chatTypeSecret': {\n        return chat?.type?.user_id;\n    }\n    }\n    return null;\n}\n","import { createStore } from 'redux';\nimport TdLib from '../TdWeb/tdlib';\n\nconst usersStore = createStore((state = {}, action) => {\n    switch (action.type) {\n    case 'UPD_USER':\n        return {\n            ...state,\n            [action.user.id]: action.user\n        };\n    case 'UPD_USER_STATUS':\n        return {\n            ...state,\n            [action.userId]: {\n                ...state[action.userId],\n                status: action.status\n            }\n        };\n    default:\n        return state;\n    }\n}, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nTdLib.registerUpdateHandler('updateUser', (update) => {\n    usersStore.dispatch({\n        type: 'UPD_USER',\n        user: update.user\n    });\n});\n\nTdLib.registerUpdateHandler('updateUserStatus', (update) => {\n    usersStore.dispatch({\n        type: 'UPD_USER_STATUS',\n        userId: update.user_id,\n        status: update.status\n    });\n});\n\nexport default usersStore;\n","import currencies from './currencies';\n\n/**\n * Converts currency to string\n * @param {string} currency Three-letter currency code\n * @param {number} total_amount The total amount\n * @returns Formatted currency string\n */\nexport default function currencyAmountToString (currency, total_amount) {\n    const {symbol, thousands_sep, decimal_sep, symbol_left, space_between, exp}= currencies[currency];\n    const calculatedAmount= total_amount / 10.0**exp;\n    const formattedAmount= calculatedAmount.toFixed(exp).replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, thousands_sep).replace(/\\./, decimal_sep);\n    var withSymbol= symbol_left ? `${symbol}${space_between ? ' ' : ''}${formattedAmount}` : `${formattedAmount}${space_between ? ' ' : ''}${symbol}`;\n    return withSymbol;\n    \n    // var formatter = new Intl.NumberFormat('en-US', {\n    //     style: 'currency',\n    //     currency: currency,\n        \n    //     minimumFractionDigits: 2,\n    //     maximumFractionDigits: 2,\n    // });\n    // return formatter.format(total_amount / 10**currencyObject.exp); // Move two last digits to the right of the decimal point\n}","import { __fmt } from '../language-pack/language-pack';\n\n/**\n * \n * @param {import(\"../TdWeb/td_api\").TdApi.td_User} user \n * @returns \n */\nexport function getUserFullName({first_name, last_name}) {\n    return last_name ? __fmt('lng_full_name', {first_name, last_name}, false).join('') : first_name;\n}","import __, { __fmt } from '../../language-pack/language-pack';\n\nexport default function MessaagePinnedMessage({message, from}) {\n    switch (message.content['@type']) {\n    case 'messageAnimation':\n        return __fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_gif'), from: from});\n\n    case 'messageAudio':\n        return __fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_audio'), from: from});\n\n    case 'messageContact':\n        return __fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_contact'), from: from});\n\n    case 'messageDice':\n        return __fmt('lng_action_pinned_message', {text: message.content.emoji, from: from});\n\n    case 'messageDocument':\n        return __fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_file'), from: from});\n\n    case 'messageGame':\n        return __fmt('lng_action_pinned_media', {media: __fmt('lng_action_pinned_media_game', {game: message.content.game.title}), from: from});\n\n    case 'messagePhoto':\n        return __fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_photo'), from: from});\n\n    case 'messagePoll':\n        return __fmt('lng_action_pinned_message', {text: message.content.poll.question, from: from});\n\n    case 'messageSticker':\n        return __fmt('lng_action_pinned_media', {media: __fmt('lng_action_pinned_media_emoji_sticker', {emoji: message.content.sticker.emoji}), from: from});\n    \n    case 'messageText':\n        var text= message.content.text.text;\n        if( text.length > 21 ) {\n            text = `${text.substr(0, 16)}...`;\n        }\n        return __fmt('lng_action_pinned_message', {text: text, from: from});\n    \n    case 'messageUnsupported':\n        return __fmt('lng_action_pinned_message', {text: __('lng_message_unsupported').substr(0, 16)+'...', from: from});\n\n    case 'messageLocation':\n    case 'messageVenue':\n        return __fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_location'), from: from});\n\n    case 'messageVideo':\n        return __fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_video'), from: from});\n\n    case 'messageVideoNote':\n        return __fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_video_message'), from: from});\n\n    case 'messageVoiceNote':\n        return __fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_voice'), from: from});\n\n    default:\n        return __fmt('lng_action_pinned_message', {text: '', from: from});\n    }\n}","\n/**\n * Converts a date and time to a short string.\n * - If the date is in the last 20 hours, the time is displayed in the format HH:MM.\n * - If the date is in the last 7 days, the weekday is displayed.\n * - If the date is older, the date is displayed in the format DD.MM.YY.\n * @param {Date|Number} date Input date\n */\nexport function smallDateTimeToString(date) {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    const now = new Date();\n    const yesterday = new Date(now.getTime() - 20 * 60 * 60 * 1000);\n    const lastWeek = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n\n    if (date.getTime() >= yesterday.getTime()) {\n        return timeToString(date);\n    } else if (date.getTime() >= lastWeek.getTime()) {\n        return weekdayToString(date);\n    } else {\n        return dateToString(date);\n    }\n}\n\n/**\n * Formats time in 12-hour format\n * @param {Date|Number} date input date\n */\nexport function timeToString(date) {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    var hours = date.getHours();\n    var minutes = date.getMinutes();\n    const ampm = hours >= 12 ? 'PM' : 'AM';\n    hours = hours % 12;\n    hours = hours ? hours : 12; // the hour '0' should be '12'\n    minutes = minutes < 10 ? `0${minutes}` : minutes;\n    return `${hours}:${minutes} ${ampm}`;\n}\n\n/**\n * Formats weekday in WWW format\n * @param {Date|Number} date input date\n */\nexport function weekdayToString(date) {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    return weekdays[date.getDay()];\n}\n\n/**\n * Formats date in DD.MM.YY format\n * @param {Date|Number} date input date\n */\nexport function dateToString(date) {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    var day = date.getDate();\n    var month = date.getMonth() + 1;\n    const year = String(date.getFullYear()).slice(2);\n    if (day < 10) {\n        day = `0${day}`;\n    }\n    if (month < 10) {\n        month = `0${month}`;\n    }\n    return `${day}.${month}.${year}`;\n}\n\n/**\n * Converts a future day to a string.  \n * If the day is today, returns 'today'.  \n * If the day is tomorrow, returns 'tomorrow'.  \n * If the day is neither today or tomorrow, returns the monthe and day. (eg. 'February 12')\n * @param {Date|Number} date Input date\n * @returns {string} `today`, `tomorrow` or month+day\n */\nexport function futureDayToString(date) {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    const today = new Date();\n    const tomorrow = new Date(today.getTime() + 24 * 60 * 60 * 1000);\n\n    if (date.getDate() == today.getDate() && date.getMonth() == today.getMonth()) {\n        return 'today';\n    } else if (date.getDate() == tomorrow.getDate() && date.getMonth() == tomorrow.getMonth()) {\n        return 'tomorrow';\n    } else {\n        const months= ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n        return `${months[date.getMonth()]} ${date.getDate()}`;\n    }\n}\n\n/**\n * Converts a duration to string.\n * If the duration is less than 2 minutes, the string is in the format 'X seconds'.\n * If the duration is less than 2 hours, the string is in the format 'X minutes'.\n * If the duration is less than 1 day, the string is in the format 'X hours'.\n * If the duration is longer, the string is in the format 'X days'.\n * @param {Number} duration Duration in seconds\n */\nexport function durationToString(duration) {\n    if (duration < 2 * 60) {\n        return `${duration} seconds`;\n    } else if (duration < 2 * 60 * 60) {\n        return `${Math.floor(duration / 60)} minutes`;\n    } else if (duration < 24 * 60 * 60) {\n        return `${Math.floor(duration / 60 / 60)} hours`;\n    } else {\n        return `${Math.floor(duration / 24 / 60 / 60)} days`;\n    }\n}\n\n/**\n * Converts a TDLIb unix time to a `Date` object.\n */\nexport function TdLibDateToDate(tdLibDate) {\n    return new Date(tdLibDate * 1000);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TdLib from '../../TdWeb/tdlib';\nimport currencyAmountToString from '../sections/payments/currency-tostring';\nimport {getUserFullName} from '../user-misc';\nimport { getChatNoCache } from '../chat-store';\nimport MessagePinnedMessage from './message-pinned-message';\nimport { durationToString, futureDayToString, timeToString } from '../../time-tostring';\nimport __, { __collection, __fmt, __pl } from '../../language-pack/language-pack';\n\n/**\n * Gets a textual representation of the message without a thumbnail.\n * Usage examples: \n * - Last message in chat list\n * - Search results \n * TODO: add possibility to hide sender name (for search results)\n * @returns A span element containing a textual representation of the message. Contains span.part-1 and span.part-2\n */\nexport default function MessageSummaryWithoutIcon({message, className, users, chat}) {\n    if(!message) return null;\n\n    switch(message.content['@type']) {\n    case 'messageAnimation': // GIF\n        return (\n            <MayHaveCaptionThumbnail\n                type=\"GIF\" //TODO: Find the localized string\n                caption={message.content.caption?.text} \n                className={className} \n                message={message} \n                chat={chat}\n                users={users}\n                thumbnails={[message.content?.animation?.minithumbnail?.data]}/>\n        );\n    \n    case 'messageAudio': // Audio/music file\n        var title= message.content.audio.title || message.content.audio.file_name; // If there is no title, use file name instead\n        if(message.content.audio.performer) // Prepend performer name\n            title= message.content.audio.performer+ ' ­­– ' + title;\n        return (\n            <MayHaveCaption \n                type={title} \n                caption={message.content.caption?.text} \n                className={className} \n                message={message} \n                chat={chat}\n                users={users}/>\n        );\n\n    case 'messageBasicGroupChatCreate': // X created the group «xxxx»\n        return (\n            <span className={className}>\n                <span className=\"part-1\">{__fmt('lng_action_created_chat', {from: <SenderFullName chat={chat} message={message} users={users}/>, title: message.content.title})}</span>\n            </span>\n        );\n\n    case 'messageCall': // Call\n        var text='';\n        if(message.is_outgoing) { // You made the call\n            switch(message.content.discard_reason?.['@type']) {\n            case 'callDiscardReasonMissed':\n                text= __(message.content.is_video? 'lng_call_video_cancelled' : 'lng_call_cancelled');\n                break;\n            default:\n                text= __(message.content.is_video? 'lng_call_video_outgoing' : 'lng_call_outgoing');\n            }\n        } else { // The other user called you\n            switch(message.content.discard_reason?.['@type']) {\n            case 'callDiscardReasonDeclined':\n                text= __(message.content.is_video? 'lng_call_video_declined' : 'lng_call_declined');\n                break;\n            case 'callDiscardReasonMissed':\n                text= __(message.content.is_video? 'lng_call_video_missed' : 'lng_call_missed');\n                break;\n            default: \n                text= __(message.content.is_video? 'lng_call_video_incoming' : 'lng_call_incoming');\n            }\n        } \n        return (\n            <span className={className}>\n                <MessageSummarySender message={message} chat={chat} users={users}/>\n                <span className=\"part-1\">{text}</span>\n            </span>\n        );\n\n    case 'messageChatAddMembers': // X added Y\n        // If the user joined the group by themselves, it appears as 'X added X' and that is not accurate.\n        if(message.content.member_user_ids[0] == message.sender?.user_id) {\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{__fmt('lng_action_user_joined', {from: <SenderFullName message={message} chat={chat} users={users}/>})}</span>\n                </span>\n            );\n        }\n\n        var newMembers= message.content.member_user_ids.map(id=> // convert user IDs to names\n            getUserFullName(users[id]));\n        newMembers= __collection(false, newMembers, false);\n        \n        return (\n            <span className={className}><span className=\"part-1\">\n                {__fmt(newMembers.length> 1 ? 'lng_action_add_users_many' : 'lng_action_add_user', {\n                    from: <SenderFullName message={message} chat={chat} users={users}/>,\n                    users: newMembers,\n                    user: newMembers\n                })}\n            </span></span>\n        );\n\n    case 'messageChatChangePhoto': // Chat photo changed\n        // Telegram Desktop shows chat photo change events as 'Photo' instead of 'X changed group photo' or 'Channel photo changed'\n        return (\n            <span className={className}>\n                <span className=\"part-1\">{__('lng_attach_photo')}</span> \n            </span>\n        );\n\n    case 'messageChatChangeTitle': // Chat was renamed\n        if(message.is_channel_post) {\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{__fmt('lng_action_changed_title_channel', {title: message.content.title})}</span>\n                </span>\n            );\n        } else {\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{__fmt('lng_action_changed_title', {\n                        from: <SenderFullName message={message} chat={chat} users={users}/>,\n                        title: message.content.title\n                    })}</span>\n                </span>\n            );\n        }\n\n    case 'messageChatDeleteMember': // X removed Y\n        var deletedMember= users[message.content.user_id];\n        if( deletedMember.id == message.sender?.user_id ) {\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_user_left', {\n                        from: <SenderFullName message={message} chat={chat} users={users}/>\n                    })}\n                </span></span>\n            );\n        }\n        return (\n            <span className={className}><span className=\"part-1\">\n                {__fmt('lng_action_kick_user', {\n                    from: <SenderFullName message={message} chat={chat} users={users}/>,\n                    user: getUserFullName(deletedMember)\n                })}\n            </span></span>\n        );\n\n    case 'messageChatDeletePhoto': // Chat photo was deleted\n        if(message.is_channel_post) {\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{__('lng_action_removed_photo_channel')}</span>\n                </span>\n            );\n        } else {\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_removed_photo', {\n                        from:  <SenderFullName message={message} chat={chat} users={users}/>\n                    })}\n                </span></span>\n            );\n        }\n\n    case 'messageChatJoinByLink': // X joined the group via invite link\n        return (\n            <span className={className}><span className=\"part-1\">\n                {__fmt('lng_action_user_joined_by_link', {\n                    from: <SenderFullName message={message} chat={chat} users={users}/>\n                })}\n            </span></span>\n        );\n\n    case 'messageChatSetTheme':\n        if(message.is_channel_post) {\n            if(message.content.theme_name){\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_action_theme_changed_channel', {\n                            emoji: message.content.theme_name\n                        })} \n                    </span></span>\n                );\n            } else {\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__('lng_action_theme_disabled_channel')}\n                    </span></span>\n                );\n            }\n        } else {\n            if(message.content.theme_name){\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        <ServiceMessageIncludingYou \n                            message={message} chat={chat} users={users}\n                            lpString=\"lng_action_theme_changed\"\n                            lpString_you=\"lng_action_you_theme_changed\"\n                            params={{emoji: message.content.theme_name}}/>\n                    </span></span>\n                );\n            } else {\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        <ServiceMessageIncludingYou \n                            message={message} chat={chat} users={users}\n                            lpString=\"lng_action_theme_disabled\"\n                            lpString_you=\"lng_action_you_theme_disabled\"/>\n                    </span></span>\n                );\n            }\n        }\n\n    case 'messageChatSetTtl': // Auto-delete / self-destruct timer changed\n        var ttlTimeUnit= {\n            86400: __('lng_ttl_about_duration1'), \n            604800: __('lng_ttl_about_duration2'),\n            2678400: __('lng_ttl_about_duration3'),\n        }[message.content.ttl];\n\n        if(message.is_channel_post) {\n            if(message.content.ttl) { // If TTL is disabled, it will be set to 0\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_action_ttl_changed_channel', {\n                            duration: ttlTimeUnit\n                        })}\n                    </span></span>\n                );\n            } else {\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__('lng_action_ttl_removed_channel')}\n                    </span></span>\n                );\n            }\n        } else {\n            if(message.content.ttl) { // If TTL is disabled, it will be set to 0\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        <ServiceMessageIncludingYou \n                            message={message} chat={chat} users={users}\n                            lpString=\"lng_action_ttl_changed\"\n                            lpString_you=\"lng_action_ttl_changed_you\"\n                            params={{duration: ttlTimeUnit}}/>\n                    </span></span>\n                );\n            } else {\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        <ServiceMessageIncludingYou \n                            message={message} chat={chat} users={users}\n                            lpString=\"lng_action_ttl_removed\"\n                            lpString_you=\"lng_action_ttl_removed_you\"/>\n                    </span></span>\n                );\n            }\n        }\n\n    case 'messageChatUpgradeFrom': // It is too complicated to get basic group last message.\n    case 'messageChatUpgradeTo': // TODO: It's complicated, but it should be done.\n        return (\n            <span className={className}>\n                <span className=\"part-1\">Group was upgraded to a super-group</span>\n            </span>\n        );\n\n    case 'messageContact': // Shared contact\n        return (\n            <span className={className}>\n                <MessageSummarySender message={message} chat={chat} users={users}/>\n                <span className=\"part-1\">{__('lng_in_dlg_contact')}</span>\n            </span>\n        );\n\n    case 'messageContactRegistered': // X joined Telegram\n        return (\n            <span className={className}><span className=\"part-1\">\n                {__fmt('lng_action_user_registered', {\n                    from: <SenderFullName message={message} chat={chat} users={users}/>\n                })}\n            </span></span>\n        );\n\n    case 'messageCustomServiceAction': // ¯\\_(ツ)_/¯\n        return (\n            <span className={className}>\n                <span className=\"part-1\">{message.content.text}</span>\n            </span>\n        );\n\n    case 'messageDice': // Dice (🎲🎯🎳⚽🏀)\n        return (\n            <span className={className}>\n                <MessageSummarySender message={message} chat={chat} users={users}/>\n                <span className=\"part-1\">{message.content.emoji}</span>\n            </span>\n        );\n\n    case 'messageDocument': // File/document\n        return (\n            <MayHaveCaptionThumbnail\n                type={message.content.document.file_name} \n                caption={message.content.caption?.text} \n                className={className} \n                message={message} \n                chat={chat}\n                users={users}\n                thumbnails={[message.content?.document?.minithumbnail?.data]}/>\n        );\n    \n    case 'messageExpiredPhoto': \n        return (\n            <span className={className}>\n                <span className=\"part-1\">{__('lng_ttl_photo_expired')}</span>\n            </span>\n        );\n    \n    case 'messageExpiredVideo':\n        return (\n            <span className={className}>\n                <span className=\"part-1\">{__('lng_ttl_video_expired')}</span>\n            </span>\n        );\n    \n    case 'messageGame': // Game\n        return (\n            <span className={className}>\n                <MessageSummarySender message={message} chat={chat} users={users}/>\n                <span className=\"part-1\">🎮 {message.content.game.title}</span>\n            </span>\n        );\n\n    case 'messageGameScore': // X scored {score} in {game}\n        // Text to use if game message is not available\n        var noGameTitleFallback= (\n            <span className={className}><span className=\"part-1\">\n                <ServiceMessageIncludingYou \n                    message={message} chat={chat} users={users}\n                    lpString=\"lng_action_game_score_no_game\"\n                    lpString_you=\"lng_action_game_you_scored_no_game\"\n                    count={message.content.score}/>\n            </span></span>\n        );\n\n        // Get game message\n        var GameScoreWithTitle= React.lazy(()=>new Promise(resolve=> {\n            TdLib.sendQuery({\n                '@type': 'getMessage',\n                chat_id: chat.id,\n                message_id: message.content.game_message_id\n            }).then(\n                result=> { \n                    //eslint-disable-next-line react/display-name\n                    resolve({ default: ()=> (\n                        <span className={className}><span className=\"part-1\">\n                            <ServiceMessageIncludingYou \n                                message={message} chat={chat} users={users}\n                                lpString=\"lng_action_game_score\"\n                                lpString_you=\"lng_action_game_you_scored\"\n                                count={message.content.score}\n                                params={{game: result.content.game.title}}/>\n                        </span></span>\n                    )});\n                },\n                ()=> { // Failed\n                    //eslint-disable-next-line react/display-name\n                    resolve({ default: ()=> noGameTitleFallback});\n                }\n            );\n        }));\n\n        return (\n            <React.Suspense fallback={noGameTitleFallback}>\n                <GameScoreWithTitle/>\n            </React.Suspense>\n        );\n\n    case 'messageInvoice': // Invoice (a buyable product)\n        return (\n            <span className={className}>\n                <MessageSummarySender message={message} chat={chat} users={users}/>\n                <span className=\"part-1\">{message.content.title}</span>\n            </span>\n        );\n\n    case 'messageLocation': // Location\n        return (\n            <span className={className}>\n                <MessageSummarySender message={message} chat={chat} users={users}/>\n                <span className=\"part-1\">{__('lng_maps_point')}</span>\n            </span>\n        );\n\n    case 'messagePassportDataSent': // You sent some Telegram passport data\n        var passportDataTypeToString= {\n            'passportElementTypeAddress':               'lng_passport_address',\n            'passportElementTypeBankStatement':         'lng_passport_address_statement',\n            'passportElementTypeDriverLicense':         'lng_passport_identity_license',\n            'passportElementTypeEmailAddress':          'lng_passport_email_title',\n            'passportElementTypeIdentityCard':          'lng_passport_identity_card',\n            'passportElementTypeInternalPassport':      'lng_passport_identity_internal',\n            'passportElementTypePassport':              'lng_passport_identity_passport',\n            'passportElementTypePassportRegistration':  'lng_passport_address_registration',\n            'passportElementTypePersonalDetails':       'lng_passport_personal_details',\n            'passportElementTypePhoneNumber':           'lng_passport_phone_title',\n            'passportElementTypeRentalAgreement':       'lng_passport_address_agreement',\n            'passportElementTypeTemporaryRegistration': 'lng_passport_address_temporary',\n            'passportElementTypeUtilityBill':           'lng_passport_address_bill',\n        };\n        var passportDataTypes= message.content.types.map(type=> __(passportDataTypeToString[type['@type']]).toLowerCase());\n        return (\n            <span className={className}><span className=\"part-1\">\n                {__fmt('lng_action_secure_values_sent', {\n                    user: chat.title,\n                    documents: passportDataTypes.join(', ')\n                })}\n            </span></span>\n        );\n\n    case 'messagePaymentSuccessful': // You paid [real] money\n        // To be shown if invoice is not available\n        var noInvoiceTitleFallback= (\n            <span className={className}><span className=\"part-1\">\n                {__fmt('lng_action_payment_done', {\n                    amount: currencyAmountToString(message.content.currency, message.content.total_amount),\n                    user: chat.title\n                })}\n            </span></span>\n        );\n\n        // Get invoice message\n        var PaymentInfoWithInvoiceTitle= React.lazy(()=>new Promise(resolve=> {\n            TdLib.sendQuery({\n                '@type': 'getMessage',\n                chat_id: message.content.invoice_chat_id,\n                message_id: message.content.invoice_message_id\n            }).then(\n                result=> { \n                    //eslint-disable-next-line react/display-name\n                    resolve({ default: ()=> (\n                        <span className={className}><span className=\"part-1\">\n                            {__fmt('lng_action_payment_done_for', {\n                                amount: currencyAmountToString(message.content.currency, message.content.total_amount),\n                                user: chat.title,\n                                invoice: result.content.title\n                            })}\n                        </span></span>\n                    )});\n                },\n                ()=> { // Failed\n                    resolve({ default: ()=> noInvoiceTitleFallback});\n                }\n            );\n        }));\n\n        return (\n            <React.Suspense fallback={noInvoiceTitleFallback}>\n                <PaymentInfoWithInvoiceTitle/>\n            </React.Suspense>\n        );\n\n    case 'messagePhoto': // A photo\n        if(message.content.is_secret) { // Self-destructing photo, not implemented\n            if(message.is_outgoing) { // You sent it\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\">{__('lng_ttl_photo_sent')}</span>\n                    </span>\n                );\n            } else { // You received it\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_ttl_photo_received', {\n                            from: <SenderFullName message={message} chat={chat} users={users}/>\n                        })}\n                    </span></span>\n                );\n            }\n        } else { // Normal photo\n            return (\n                <MayHaveCaptionThumbnail \n                    type={__('lng_in_dlg_photo')}\n                    caption={message.content.caption?.text} \n                    className={className} \n                    message={message} \n                    chat={chat}\n                    users={users}\n                    thumbnails={[message.content?.photo?.minithumbnail?.data]}/>\n            );\n        }\n    \n    case 'messagePinMessage':\n\n        // Get pinned message message\n        var PinnedMessageMessage= React.lazy(()=>new Promise(resolve=> {\n            TdLib.sendQuery({\n                '@type': 'getMessage',\n                chat_id: chat.id,\n                message_id: message.content.message_id\n            }).then(\n                result=> { \n                    //eslint-disable-next-line react/display-name\n                    resolve({ default: ()=> (\n                        <span className={className}><span className=\"part-1\">\n                            <MessagePinnedMessage message={result} sender={<SenderFullName message={message} chat={chat} users={users}/>}/>\n                        </span></span>\n                    )});\n                },\n                ()=> { // Failed\n                    //eslint-disable-next-line react/display-name\n                    resolve({ default: ()=> (\n                        <span className={className}><span className=\"part-1\">\n                            {__fmt('lng_action_pinned_media', {\n                                from: <SenderFullName message={message} chat={chat} users={users}/>,\n                                media: __('lng_deleted_message')\n                            })}\n                        </span></span>\n                    )});\n                }\n            );\n        }));\n\n        return (\n            <React.Suspense fallback={\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_pinned_media', {\n                        from: <SenderFullName message={message} chat={chat} users={users}/>,\n                        media: __('lng_contacts_loading')\n                    })}\n                </span></span>\n            }>\n                <PinnedMessageMessage/>\n            </React.Suspense>\n        );\n    \n    case 'messagePoll':\n        return (\n            <span className={className}>\n                <span className=\"part-1\">{message.content.poll.question}</span>\n            </span>\n        );\n    \n    // case 'messageProximityAlertTriggered': // TODO: Reproduce this message and implement it\n    // case 'messageScreenshotTaken':\n    case 'messageSticker': // Sticker\n        return (\n            <span className={className}>\n                <MessageSummarySender message={message} chat={chat} users={users}/>\n                <span className=\"part-1\">\n                    {__fmt('lng_in_dlg_sticker_emoji', {\n                        emoji: message.content.sticker.emoji\n                    })}\n                </span>\n            </span>\n        );\n\n    case 'messageSupergroupChatCreate': // Supergroup created\n        if(message.is_channel_post) {\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{__('lng_action_created_channel')}</span>\n                </span>\n            );\n        } else {\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_created_chat', {\n                        from: <SenderFullName message={message} chat={chat} users={users}/>,\n                        title: message.content.title\n                    })}\n                </span></span>\n            );\n        }\n\n    case 'messageText':\n        return (\n            <span className={className}>\n                <MessageSummarySender message={message} chat={chat} users={users}/>\n                <span className=\"part-2\">{message.content.text.text.replace(/(\\n|\\r|\\r\\n|\\n\\r)/g, ' ')}</span>\n            </span>\n        );\n\n    case 'messageUnsupported': // Is not supported :(\n        return ( //TODO localize\n            <span className={className}>\n                <MessageSummarySender message={message} chat={chat} users={users}/>\n                <span className=\"part-2\">This message is not supported by your version of DIBgram. Please update to the latest version.</span>\n            </span>\n        );\n    \n    case 'messageVenue': // Venue/location\n        return ( //TODO find the translation string\n            <span className={className}>\n                <MessageSummarySender message={message} chat={chat} users={users}/>\n                <span className=\"part-1\">Location, </span>\n                <span className=\"part-2\">{message.content.venue.title}</span>\n            </span>\n        );\n\n    case 'messageVideo': // Video\n        if(message.content.is_secret) { // Self-destructing photo, not implemented\n            if(message.is_outgoing) { // You sent it\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\">{__('lng_ttl_video_sent')}</span>\n                    </span>\n                );\n            } else { // You received it\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_ttl_video_received', {\n                            from: <SenderFullName message={message} chat={chat} users={users}/>\n                        })}\n                    </span></span>\n                );\n            }\n        } else { // Normal photo\n            return (\n                <MayHaveCaptionThumbnail\n                    type={__('lng_in_dlg_video')}\n                    caption={message.content.caption?.text} \n                    className={className} \n                    message={message} \n                    chat={chat}\n                    users={users}\n                    isVideo={true}\n                    thumbnails={[message.content?.video?.minithumbnail?.data]}/>\n            );\n        }\n\n    case 'messageVideoNote':\n        return (\n            <span className={className}>\n                <MessageSummarySender message={message} chat={chat} users={users}/>\n                <span className=\"part-1\">{__('lng_in_dlg_video_message')}</span>\n            </span>\n        );\n\n    case 'messageVoiceChatScheduled':\n        if(message.is_channel_post) {\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_group_call_scheduled_channel', {\n                        date: __fmt('lng_mediaview_date_time', {\n                            date: futureDayToString(message.content.start_date),\n                            time: timeToString(message.content.start_date)\n                        })\n                    })}\n                </span></span>\n            );\n        } else {\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_group_call_scheduled_group', {\n                        from: <SenderFullName message={message} chat={chat} users={users}/>,\n                        date: __fmt('lng_mediaview_date_time', {\n                            date: futureDayToString(message.content.start_date),\n                            time: timeToString(message.content.start_date)\n                        })\n                    })}\n                </span></span>\n            );\n        }\n\n    case 'messageVoiceChatStarted':\n        if(message.is_channel_post) {\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{__('lng_action_group_call_started_channel')}</span>\n                </span>\n            );\n        } else {\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_group_call_started_group', {\n                        from: <SenderFullName message={message} chat={chat} users={users}/>\n                    })}\n                </span></span>\n            );\n        }\n\n    case 'messageVoiceChatEnded':\n        if(message.is_channel_post) {\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_group_call_finished', {\n                        duration: durationToString(message.content.duration)\n                    })}\n                </span></span>\n            );\n        } else {\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_group_call_finished_group', {\n                        from: <SenderFullName message={message} chat={chat} users={users}/>,\n                        duration: durationToString(message.content.duration)\n                    })}\n                </span></span>\n            );\n        }\n\n    case 'messageInviteVoiceChatParticipants':\n        var invitedMembers= message.content.user_ids.map(id=> // convert user IDs to names\n            getUserFullName(users[id]));\n        invitedMembers= __collection(true, invitedMembers, false); // A, B, and C\n        return (\n            <span className={className}><span className=\"part-1\">\n                {__fmt((invitedMembers.length==1 ? 'lng_action_invite_user' : 'lng_action_invite_users_many'), {\n                    from: <SenderFullName message={message} chat={chat} users={users}/>,\n                    user: invitedMembers,\n                    users: invitedMembers,\n                    chat: __('lng_action_invite_user_chat')\n                })}\n            </span></span>\n        );\n\n    case 'messageVoiceNote':\n        return (\n            <MayHaveCaption \n                type={__('lng_in_dlg_audio')}\n                caption={message.content.caption?.text} \n                className={className} \n                message={message} \n                chat={chat}\n                users={users}/>\n        );\n\n    case 'messageWebsiteConnected':\n        return (\n            <span className={className}><span className=\"part-1\">\n                {__fmt('lng_action_bot_allowed_from_domain', {\n                    domain: message.content.domain_name\n                })}\n            </span></span>\n        );\n\n    default:\n        return null;\n    }\n}\nMessageSummaryWithoutIcon.propTypes= {\n    /** Input message */\n    message: PropTypes.object,\n    className: PropTypes.string,\n    /** The chat in which the message was */\n    chat: PropTypes.object,\n    /** A dictionary of all users */\n    users: PropTypes.object,\n};\n\n\n/** If caption has a value, adds a comma to type and returns type */ \nfunction MayHaveCaption({type, caption, className, message, chat, users}) {\n    if(caption) type+=',';\n    return (\n        <span className={className}>\n            <MessageSummarySender message={message} chat={chat} users={users}/>\n            <span className=\"part-1\">{type}</span> <span className=\"part-2\">{caption.replace(/(\\n|\\r|\\r\\n|\\n\\r)/g, ' ')}</span>\n        </span>\n    );\n}\nMayHaveCaption.propTypes= {\n    /** Message type, e.g. 'GIF', 'Video' */\n    type: PropTypes.string.isRequired,\n    /** Message caption, can be empty */\n    caption: PropTypes.string,\n    className: PropTypes.string,\n    /** Message object */\n    message: PropTypes.object,\n    /** The chat in which the message was sent */\n    chat: PropTypes.object,\n    /** A dictionary of all users */\n    users: PropTypes.object.isRequired\n};\n\n/** If caption has a value, adds a comma to type and returns type */ \nfunction MayHaveCaptionThumbnail({thumbnails, isVideo, type, caption, className, message, chat, users}) {\n    if(!thumbnails?.length) return <MayHaveCaption type={type} caption={caption} className={className} message={message} chat={chat} users={users}/>;\n    return (\n        <span className={className}>\n            <MessageSummarySender message={message} chat={chat} users={users}/>\n            {thumbnails.map((data, i) => data && <span className={'thumbnail'+ (isVideo? ' video': '')} key={i}><img src={'data:image/jpeg;base64,'+data}/></span>)} \n            {caption? \n                <span className=\"part-2\">{caption.replace(/(\\n|\\r|\\r\\n|\\n\\r)/g, ' ')}</span>\n                :<span className=\"part-1\">{type}</span> \n            }\n        </span>\n    );\n}\nMayHaveCaptionThumbnail.propTypes= {\n    /** An array of one or more base64-encoded image data */\n    thumbnails: PropTypes.arrayOf(PropTypes.string),\n    /** If true, a tiny play icon will be shown on the image */\n    isVideo: PropTypes.bool,\n    /** Message type, e.g. 'GIF', 'Video' */\n    type: PropTypes.string.isRequired,\n    /** Message caption, can be empty */\n    caption: PropTypes.string,\n    className: PropTypes.string,\n    /** Message object */\n    message: PropTypes.object,\n    /** The chat in which the message was sent */\n    chat: PropTypes.object,\n    /** A dictionary of all users */\n    users: PropTypes.object.isRequired\n};\n\n/** Sender's first name + last name */\nfunction SenderFullName({message, chat, users, includeYou}) {\n    if(includeYou) { // Use 'You' if the message is outgoing?\n        return message.is_outgoing ? __('lng_from_you') : <SenderFullName message={message} chat={chat} users={users}/>;\n    }\n    const sender=message.sender;\n    const user=users[sender.user_id];\n    if(sender['@type']=='messageSenderUser') {\n        return getUserFullName(user); \n    } else if(sender['@type']=='messageSenderChat') { // Anonymous admin\n        return chat.title;\n    }\n}\n\n/**\n * Formats a service message which 'from' can be 'You' or a user's full name\n * @param {object} message The message object\n * @param {object} chat The chat in which the message was sent\n * @param {object} users A dictionary of all users\n * @param {string} lpString Language pack string key for the service message\n * @param {string} lpString_you Language pack string key for the service message if the service message is outgoing\n * @param {string} params Parameters for the language pack string\n * @param {number|undefined} count If provided, the language pack strings will be treated as pluralized\n */\nfunction ServiceMessageIncludingYou({message, chat, users, lpString, lpString_you, params={}, count=undefined}) {\n    var string= lpString_you;\n    var sender;\n    if(!message.is_outgoing){\n        string= lpString;\n\n        const user=users[message.sender.user_id];\n        if(message.sender['@type']=='messageSenderUser') {\n            sender= getUserFullName(user); \n        } else if(message.sender['@type']=='messageSenderChat') { // Anonymous admin\n            sender= chat.title;\n        }\n    }\n\n    if(count==undefined) {\n        return __fmt(string, {\n            from: sender,\n            ...params\n        });\n    } else {\n        return __pl(string, count, {\n            from: sender,\n            ...params\n        });\n    }\n}\n\n/** Short sender names in the beginning of message previews */\nexport const MessageSummarySender= \n    function MessageSummarySender ({message, chat, users}) {\n        if(!message) return null;\n\n        var part1;\n        if(chat && (!message.is_channel_post)) { // Channel posts dont have sender names\n            if(message.is_outgoing) {\n                part1= __('lng_from_you');\n            } else if(['chatTypeBasicGroup', 'chatTypeSupergroup'].includes(chat.type['@type'])) { // Message is sent in a group\n                if(message.sender['@type']=='messageSenderUser') {\n                    part1= users[message.sender.user_id].first_name;\n                }\n            }\n            if(message.sender['@type']=='messageSenderChat') {\n                part1= getChatNoCache(message.sender.chat_id).title;\n            }\n        }\n        return part1? <span className=\"sender\">{__fmt('lng_dialogs_text_from_wrapped', {from: part1})}</span> : null;\n    };\nMessageSummarySender.propTypes= {\n    /** Message to check the sender */\n    message: PropTypes.object.isRequired,\n    /** Chat in which the message was sent */\n    chat: PropTypes.object.isRequired,\n    /** A dictionary of all users */\n    users: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './link-button.scss';\n\n/**\n * Renders a button looking like a link.\n */\nexport default function LinkButton({href, children, onClick, ...rest}) {\n    const click= href ? ()=> window.open(href) : onClick;\n    return (\n        <button className=\"link-button\" onClick={click} {...rest}>{children}</button>\n    );\n}\nLinkButton.propTypes = {\n    /** Link content */\n    children: PropTypes.node.isRequired,\n    /** Function to be called when link is clicked. */\n    onClick: PropTypes.func,\n    /** If provided, the URL will be opened in a new tab on click. */\n    href: PropTypes.string\n};\n","import {createStore} from 'redux';\nimport TdLib from '../TdWeb/tdlib';\n\nfunction reducer(state, action) {\n    switch (action.type) {\n    case 'UPD_SUPERGROUP':\n        return {\n            ...state,\n            [action.supergroup.id]: action.supergroup\n        };\n    default:\n        return state;\n    }\n}\n\nconst supergroupStore= createStore(reducer);\nexport default supergroupStore;\n\nTdLib.registerUpdateHandler('updateSupergroup', (update) => {\n    supergroupStore.dispatch({\n        type: 'UPD_SUPERGROUP',\n        supergroup: update.supergroup\n    });\n});","import __ from '../language-pack/language-pack';\nimport supergroupStore from './supergroup-store';\nimport usersStore from './users-store';\n\n/**\n * Check if the chat is with a deleted user\n * @param {import('tdweb').TdObject} chat The chat to check\n * @param {{[key: number]: import('tdweb').TdObject}} users A dictionary of all users (e.g. usersStore state)\n * @returns True if the chat is private and the other party's account is deleted\n */\nexport function isChatWithDeletedAccount(chat, users) {\n    switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup': // Groups are not applicable\n    case 'chatTypeSupergroup':\n        return false;\n    \n    case 'chatTypeSecret':\n    case 'chatTypePrivate': \n        var user= (users || usersStore.getState())?.[chat.type.user_id];\n        return user && user.type['@type'] === 'userTypeDeleted';\n    }\n    return false;\n}\n\n/**\n * Returns the chat's title and handles deleted account\n * @param {object} chat The chat to get the name of\n * @param {{[key: number]: object}} users A list of all users (e.g. usersStore state). If not provided, usersStore will be used\n * @returns Chat title, or 'Deleted Account'\n */\nexport function chatTitleOrDeletedAccount(chat, users) {\n    if(isChatWithDeletedAccount(chat, users))\n        return __('lng_deleted');\n    return chat.title;\n}\n\n/**\n * Checks if a user, bot or channel is verified\n * @param {import('tdweb').TdObject} chat The chat to be checked\n * @returns {boolean} True if the chat is verified, false if not\n */\nexport function isChatVerified(chat){\n    switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n        return false;\n\n    case 'chatTypeSupergroup':\n        var supergroup= supergroupStore.getState()?.[chat.type.supergroup_id];\n        return supergroup.is_verified;\n        \n    case 'chatTypeSecret':\n    case 'chatTypePrivate': \n        var user= usersStore.getState()?.[chat.type.user_id];\n        return user.is_verified;\n    }\n    return false;\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { createStore } from 'redux';\nimport { connect } from 'react-redux';\nimport './context-menu.scss';\n\n/**\n * A context menu (right click menu)\n */\nexport function ContextMenu({x, y, children}) {\n    const [direction, setDirection] = React.useState('br');\n    const [hide, setHide] = React.useState(false);\n    const ref = React.useRef();\n    React.useEffect(() => {\n        setTimeout(() => {\n            const rect = ref.current.children[0].getBoundingClientRect();\n            const {width, height} = rect;\n            const {clientWidth, clientHeight} = document.documentElement;\n            var X = 'r', Y = 'b';\n            if (x + width > clientWidth) {\n                X = 'l';\n            }\n            if (y + height > clientHeight) {\n                Y = 't';\n            }\n            setDirection(Y + X);\n        }, 0);\n    }, []);\n\n    function handleMouseDown() {\n        setHide(true);\n        setTimeout(() => {\n            contextMenusStore.dispatch({\n                type: 'REMOVE_CONTEXT_MENUS'\n            });\n        }, 500);\n    }\n\n    return (\n        <div className={'context-menu' + (hide? ' hidden' : '')} \n            style={{'--x': x+'px', '--y': y+'px'}} \n            onMouseDown={e=> (!e.target.classList.contains('menu-item') && handleMouseDown())}\n            onMouseUp={e=> ((e.target.classList.contains('menu-item')) && handleMouseDown())}>\n\n            <div className={'menu ' + direction} ref={ref}>\n                {children}\n            </div>\n        </div>\n    );\n}\nContextMenu.propTypes = {\n    /** Position relative to viewport */\n    x: PropTypes.number.isRequired,\n    /** Position relative to viewport */\n    y: PropTypes.number.isRequired,\n    children: PropTypes.node.isRequired\n};\n\nexport const contextMenusStore = createStore(function (state = null, action) {\n    if (action.type === 'ADD_CONTEXT_MENU') {\n        return action.menu;\n    }\n    else if (action.type === 'REMOVE_CONTEXT_MENUS') {\n        return null;\n    }\n    return state;\n});\n\nexport const ContextMenus= connect(state=>({menus:state}))(({menus}) => menus);\n\n/**\n * Create a context menu\n * @param {React.SyntheticEvent} e Pass down `e` from the event handler\n * @param {React.ReactNode} menu Context menu contents\n */\nexport function createContextMenu(e, menu) {\n    e.preventDefault();\n    setTimeout(() => { // This is to fix ripple effect glitch\n        contextMenusStore.dispatch({\n            type: 'ADD_CONTEXT_MENU',\n            menu: <ContextMenu x={e.nativeEvent.pageX} y={e.nativeEvent.pageY}>{menu}</ContextMenu>\n        });\n    }, 50); // Human brain cannot notice 50ms delay\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './menu.scss';\nimport RippleEffect, { handleMyMouseEventsFunction } from '../elements/ripple-effect';\n\n/**\n * A dropdown menu (not to be confused with `<select>`).\n */\nexport default function Menu(props) {\n    return (\n        <div className=\"menu\" {...props}/>\n    );\n}\n\n/**\n * Dropdown menu contents (created as a separate component so that it can be wrapped by other components).\n */\nMenu.MenuContents= function MenuContents(props) {\n    return (\n        <div className=\"menu-contents\" {...props}/>\n    );\n};\n\n/**\n * A menu item.\n */\nMenu.MenuItem= function MenuItem({children, ...rest}) {\n    const ripple= React.useState({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave] = handleMyMouseEventsFunction(ripple);\n    return (\n        <div className=\"menu-item\" {...rest} onMouseDown={mouseDown} onMouseUp={mouseUp} onMouseLeave={mouseLeave}>\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-windowBgRipple)\"/>\n            <div className=\"content\">\n                {children}\n            </div>\n        </div>\n    );\n};\nMenu.MenuItem.propTypes = {\n    children: PropTypes.node\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './toast.scss';\nimport { createStore } from 'redux';\nimport { connect } from 'react-redux';\n\n/**\n * Renders a toast (a small text which is temporarily shown in the middle of the screen)\n */\nexport default function Toast({children}) {\n    const [closed, setClosed] = React.useState(false);\n    React.useEffect(() => {\n        setTimeout(() => { // Automatically close after 6 seconds\n            setClosed(true); // When an element has a closing dialog, a CSS class should be added to trigger the animation\n            setTimeout(() => { // Then we wait until the animation is finished\n                addToast(null); // And we can safely remove the element\n            }, 2000);\n        }, 6000);\n    }, []);\n    return (\n        <div className={'toast' + (closed? ' closed':'')}>\n            <div className=\"toast-content\">\n                {children}\n            </div>\n        </div>\n    );\n}\nToast.propTypes = {\n    children: PropTypes.node.isRequired,\n};\n\nexport const toastStore= createStore((state=null, action) => {\n    if(action.type=='SET_TOAST') return action.toast;\n    return state;\n});\n\nexport const Toasts= connect(state=>({toast: state}))(function Toasts({toast}){\n    return toast;\n});\n\nexport function addToast(toast) {\n    toastStore.dispatch({\n        type: 'SET_TOAST',\n        toast\n    });\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { createStore } from 'redux';\n\n/**\n * A redux store which state is an array of objects with {id: unique ID of dialog, element: react element of the dialog}\n */\nexport var dialogStore= createStore(\n    /**\n     * @param {any[]} state\n     * @param {Object} action\n     */\n    function (state= [], action) {\n        switch (action.type) {\n        case 'ADD_DIALOG':\n            return [\n                ...state,\n                action.dialog\n            ];\n        \n        case 'REMOVE_DIALOG':\n            return state.filter(value => value.id!=action.id);\n        \n        default:\n            break;\n        }\n    },\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\n/**\n * Opens a dialog\n * @param {string} id A unique ID for the dialog\n * @param {React.ReactElement} dialog The dialog React element\n */\nexport function addDialog(id, dialog) {\n    dialogStore.dispatch({\n        type: 'ADD_DIALOG',\n        dialog: {\n            element: dialog,\n            id: id\n        }\n    });\n}\n\n/**\n * Closes an existing dialog\n * @param {string} id The dialog unique ID\n */\nexport function removeDialog(id) {\n    dialogStore.dispatch({\n        type: 'REMOVE_DIALOG',\n        id: id\n    });\n}\n\n/**\n * Renders all dialogs.\n */\nconst Dialogs= (connect(function (state) {\n    return {dialogs: state || []};\n    // eslint-disable-next-line no-unused-vars\n})(function Dialogs({dialogs, dispatch, ...rest}) {\n    return (\n        <div data-dialog={!!dialogs.length} {...rest}>\n            {dialogs.map(el => <React.Fragment key={el.id}>{el.element}</React.Fragment>) || null}\n        </div>\n    );\n}));\n\nexport default Dialogs;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport RippleEffect, {handleMyMouseEventsFunction} from './ripple-effect';\n\n/**\n * Renders a small button with accent color\n */\nexport default function SmallButton ({children, attention, ...rest}) {\n    const ripple= React.useState({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave]= handleMyMouseEventsFunction(ripple);\n    return (\n        <button \n            className=\"small-button\" \n            data-attention={attention? 'true': 'false'}\n            onMouseDown={mouseDown}\n            onMouseUp={mouseUp}\n            onMouseLeave={mouseLeave}\n            {...rest}>\n\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-lightButtonBgRipple)\"/>\n\n            {/* Because we use absolute positioning on the actual content, we need a copy of it without absolute position to get the correct parent size. */}\n            <div className=\"invisibleText\">\n                {children}\n            </div>\n\n            <div className=\"content\">\n                {children}\n            </div>\n            \n        </button>\n    );\n}\nSmallButton.propTypes= {\n    /** The button's content */\n    children: PropTypes.node.isRequired,\n    /** Fires when the button is clicked */\n    onClick: PropTypes.func,\n    /** Setting to true causes the button to become red */\n    attention: PropTypes.bool\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { removeDialog } from './dialogs';\n/**\n * Renders a modal dialog\n * Use React ref to access the `close()` method.\n */\nexport default class Dialog extends React.Component{\n    static propTypes= {\n        children: PropTypes.node.isRequired,\n        /** Dialog width in CSS format */\n        width: PropTypes.string,\n        /** Unique ID of this dialog, used to close it. */\n        id: PropTypes.any.isRequired,\n        className: PropTypes.string\n    };\n    state= {\n        closing: false\n    }\n    ref = React.createRef();\n    /** @param {React.SyntheticEvent} e */\n    onClick= (e) => {\n        if (e.target === this.ref.current) {\n            this.close();\n        }\n    }\n    render(){\n        return (\n            <div ref={this.ref} onClick={this.onClick} id={this.props.id} className={'modal-dialog' + ((this.state.closing) ? ' closing ' : ' ') + this.props.className}>\n                <div style={{\n                    'width': this.props.width || 'auto'\n                }}>\n                    {this.props.children}\n                </div>\n            </div>\n        );\n    }\n    close= ()=>{\n        this.setState({\n            closing: true\n        });\n        setTimeout(() => {\n            removeDialog(this.props.id);\n        }, 1000);\n    }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SmallButton from '../elements/small-button';\nimport Dialog from './dialog';\nimport __ from '../../language-pack/language-pack';\n/**\n * Renders a modal dialog with a title and cancel and OK button. OK button text can be changed.\n */\nexport default class ConfirmDialog extends React.Component{\n    dialogRef = React.createRef();\n    handleOK =()=>{\n        this.dialogRef.current.close();\n        this.props.onOK && this.props.onOK();\n    }\n    handleCancel =()=>{\n        this.dialogRef.current.close();\n        this.props.onCancel && this.props.onCancel();\n    }\n    handleButton =(handler)=>{\n        this.dialogRef.current.close();\n        handler && handler();\n    }\n    render() {\n        return (\n            <Dialog className=\"confirm-dialog\" id={this.props.id} ref={this.dialogRef} width={this.props.width || '320px'}>\n                <h1>{this.props.title || ''}</h1>\n                <div className={'content' + (this.props.largeFont? ' large-font' : '')}>\n                    {this.props.children}\n                </div>\n                <div className=\"options\">\n                    {this.props.thirdButton ?  (\n                        <SmallButton \n                            className=\"small-button left\"\n                            style={{'float': 'left'}}\n                            onClick={ this.props.thirdButtonClosesDialog ?\n                                ()=>this.handleButton(this.props.onThirdButtonClick)\n                                : this.props.onThirdButtonClick}>\n                            {this.props.thirdButton}\n                        </SmallButton>\n                    ) : null}\n                    {this.props.hideCancelButton ? null : (\n                        <SmallButton onClick={()=>this.handleButton(this.props.onCancel)}>\n                            {__('lng_cancel')}\n                        </SmallButton>\n                    )}\n                    <SmallButton onClick={()=>this.handleButton(this.props.onOK)} attention={this.props.attention}>\n                        {this.props.OKButtonText || __('lng_box_ok')}\n                    </SmallButton>\n                </div>\n            </Dialog>\n        );\n    }\n}\nConfirmDialog.propTypes= {\n    children: PropTypes.node.isRequired,\n    /** Dialog width in CSS format */\n    width: PropTypes.string,\n    /** Dialog header */\n    title: PropTypes.string,\n    /** Text content of the OK button*/\n    OKButtonText: PropTypes.string,\n    /** Pass true to only show the OK button */\n    hideCancelButton: PropTypes.bool,\n    /** Unique ID of this dialog, used to close it. */\n    id: PropTypes.any.isRequired,\n    /** Called when the OK button is pressed */\n    onOK: PropTypes.func,\n    /** Called when the cancel button is pressed */\n    onCancel: PropTypes.func,\n    /** Third button text (optional) */\n    thirdButton: PropTypes.string,\n    /** Pass true if third button click closes dialog */\n    thirdButtonClosesDialog: PropTypes.bool,\n    /** Called when third button is pressed */\n    onThirdButtonClick: PropTypes.func,\n    /** If true, the OK button will become red, meaning the user should pay attention */\n    attention: PropTypes.bool,\n    /** If true, the dialog text will be larger */\n    largeFont: PropTypes.bool\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect, Provider } from 'react-redux';\nimport TdLib from '../../../TdWeb/tdlib';\nimport chatStore, { compareChatList } from '../../chat-store';\nimport './chat-list.scss';\nimport ProfilePhoto, { getChatTypeId } from '../../../ui/components/profile-photo';\nimport { dialogs_chat, dialogs_channel, dialogs_bot, dialogs_pinned, dialogs_verified_star, dialogs_verified_check, dialogs_sending, dialogs_sent, dialogs_received, archive_userpic, history_to_down } from '../../../ui/icon/icons';\nimport usersStore from '../../users-store';\nimport ScrollView from '../../../ui/scroll/scrollbar';\nimport MessageSummaryWithoutIcon from '../../message/message-summary-noicon';\nimport LinkButton from '../../../ui/elements/link-button';\nimport { isChatWithDeletedAccount, isChatVerified, chatTitleOrDeletedAccount } from '../../chat-misc';\nimport { smallDateTimeToString } from '../../../time-tostring';\nimport { getMessageStatus } from '../../message-misc';\nimport options from '../../../TdWeb/options';\nimport RippleEffect, { handleMyMouseEvents, handleMyMouseEventsFunction } from '../../../ui/elements/ripple-effect';\nimport { createContextMenu } from '../../../ui/menu/context-menu';\nimport Menu from '../../../ui/menu/menu';\nimport Toast, { addToast } from '../../../ui/dialog/toast';\nimport { addDialog } from '../../../ui/dialog/dialogs';\nimport ConfirmDialog from '../../../ui/dialog/confirm-dialog';\nimport './history-to-down.scss';\nimport IconButton from '../../../ui/elements/icon-button';\nimport { chatListScrollToTopEvent } from './chat-folders';\nimport __, { __pl } from '../../../language-pack/language-pack';\n\n/**********************************************************************************************\n * Because of the length of this file, it is recommended to use a tool to view document outline\n **********************************************************************************************/\n\n/**\n * Returns a sorted list of all chats in the given chat list\n * \n * Also for every chat, sets `chat.position` to the matching position (creates copy instead of modifying original object)\n * @param {import('tdweb').TdObject[]} chats\n * @param {import('tdweb').TdObject} list\n */\nexport function getChatsFromList(chats, list) {\n    return chats.map(chat => { // Step 1 - get the chat positions which refer to the current list\n        for( const position of chat.positions ) {\n            if (compareChatList(list, position.list)) {\n                if( position.order=='0' ) return false; // Replace a chat without a suitable position with `false`\n                return {\n                    ...chat,\n                    position: position // Store the position in chat object\n                };\n            }\n        }\n        return chat;\n    })\n        .filter(chat => !!chat.position) // Step 2 - Remove `false` values (chats outside the list)\n        .sort((a, b) => { // Step 3 - Sort it by position.order\n            let order1= a.position.order, order2= b.position.order;\n\n            if (order1 == order2) {\n                return 0;\n            }\n            if (order1 < order2) {\n                return 1;\n            }\n            return -1;\n        });\n}\n\n/**\n * Renders the chats within a chat list\n */\nconst ChatList= connect(state=> ({connectionState: state}))(\n    class ChatList extends React.Component { \n        static propTypes = {\n            chats: PropTypes.array.isRequired,\n            list: PropTypes.object.isRequired,\n            connectionState: PropTypes.string.isRequired,\n            unread: PropTypes.object.isRequired,\n        }\n        state= {\n            scrollToTopVisible: false,\n            chatListFinished: false\n        }\n        scrollRef= React.createRef();\n\n        onScroll= (e) => {\n            const visible= e.target.scrollTop > 480;\n            if (visible != this.state.scrollToTopVisible) {\n                this.setState({scrollToTopVisible: visible});\n            }\n        }\n\n        // When updating, TDLib sends updates of type updateChatLastMessage, where only the last one is needed.\n        // This greatly hurts performance.\n        // However, we can workaround it by not re-rendering until all updates have arrived.\n        shouldComponentUpdate(nextProps, nextState) {\n            return (nextProps.chats !== this.props.chats \n                || nextProps.list !== this.props.list \n                || nextProps.unread !== this.props.unread\n                || nextProps.connectionState !== this.props.connectionState\n                || nextState.scrollToTopVisible !== this.state.scrollToTopVisible\n                || nextState.chatListFinished !== this.state.chatListFinished)\n                && nextProps.connectionState != 'connectionStateUpdating'\n                && nextState.chatListFinished; // Do not re-render if updating\n        }\n\n        render() {\n            // Get chats from the list (this needs to be repeated on every modification)\n            const array= getChatsFromList(this.props.chats, this.props.list).map(chat=><Chat key={chat.id} chat={chat} />);\n            \n            return (\n                <React.Fragment>\n                    <ScrollView scrollRef={this.scrollRef} id=\"chat-list\" scrollBarWidth=\"4\" onScroll={this.onScroll}>\n                        {this.props.list['@type']=='chatListMain' && (\n                            <Provider store={chatStore}>\n                                <ArchivedChatsItem chats={this.props.chats}/>\n                            </Provider>\n                        )}\n                        <Provider store={usersStore}>\n                            {array.length ? array :  <EmptyChatList list={this.props.list} unread={this.props.unread}/>}\n                        </Provider>\n                    </ScrollView>\n                    <IconButton icon={history_to_down} onClick={this.scrollToTop}\n                        className={'history-to-down '+(this.state.scrollToTopVisible ? 'visible' : '')}/>\n                </React.Fragment>\n            );\n        }\n\n        scrollToTop= () => {\n            this.scrollRef.current?.view.scroll({\n                top: 0,\n                behavior: 'smooth',\n            });\n        }\n\n        componentDidMount() {\n            chatListScrollToTopEvent[0]= this.scrollToTop;\n            // Request TDLib to return chats in main list and archive list\n            TdLib.sendQuery({\n                '@type': 'loadChats',\n                'chat_list': {\n                    '@type': 'chatListMain'\n                },\n                'limit': 50\n            }).then(()=> {\n                this.setState({\n                    chatListFinished: true\n                });\n            });\n            TdLib.sendQuery({\n                '@type': 'loadChats',\n                'chat_list': {\n                    '@type': 'chatListArchive'\n                },\n                'limit': 50\n            });\n        }\n    }\n);\nexport default ChatList;\n\n/**\n * Renders a single chat\n */\nclass ChatListItem extends React.Component {\n    constructor(props) {\n        super(props);\n        [this.mouseDown, this.mouseUp, this.mouseLeave]= handleMyMouseEvents(this);\n    }\n    state= {\n        ripple: {\n            state: 'off'\n        }\n    };\n    shouldComponentUpdate(nextProps, nextState) {\n        function getUser(props){ // Gets the user which is the other party of the chat. Used to see if the needed user has changed\n            if(props.chat.type['@type']=='chatTypePrivate') {\n                return props.users[props.chat.type.user_id];\n            }\n            return null;\n        }\n        return nextProps.chat.id !== this.props.chat.id\n            || nextProps.chat.last_message !== this.props.chat.last_message\n            || nextProps.chat.draft_message !== this.props.chat.draft_message\n            || nextProps.chat.unread_count !== this.props.chat.unread_count\n            || nextProps.chat.unread_mention_count !== this.props.chat.unread_mention_count\n            || nextProps.chat.is_marked_as_unread !== this.props.chat.is_marked_as_unread\n            || nextProps.chat.position.is_pinned !== this.props.chat.position.is_pinned\n            || nextProps.chat.photo?.small?.id !== this.props.chat.photo?.small?.id\n            || nextProps.chat.title !== this.props.chat.title\n            || nextProps.chat.last_read_outbox_message_id !== this.props.chat.last_read_outbox_message_id\n            || nextState.ripple !== this.state.ripple\n            || getUser(nextProps) !== getUser(this.props);\n    }\n    render(){\n        const chat= {...this.props.chat}; // Clone chat object to avoid mutating it. Mutating it causes Saved messages and Deleted account chats to get past shouldComponentUpdate.\n        var chatType= '';\n        if (chat.type?.['@type'] == 'chatTypeBasicGroup' ||      // Groups are basic groups and non-channel supergroups\n                (chat.type?.['@type'] == 'chatTypeSupergroup' &&\n                chat.type?.is_channel == false)\n        ){\n            chatType= dialogs_chat;\n        } \n        else if (chat.type?.['@type'] == 'chatTypeSupergroup' && // Channels are supergroups with is_channel set to true\n                chat.type?.is_channel == true){\n            chatType= dialogs_channel;\n        } \n        else if ((chat.type?.['@type'] == 'chatTypePrivate') &&  // Bots are private chats with bot user type\n                (this.props.users[chat.type?.user_id]?.type?.['@type'] == 'userTypeBot')){\n            chatType= dialogs_bot;\n        }\n        if (chat.id==options['replies_bot_chat_id']) { // Replies bot does not have a type icon\n            chatType= '';\n        }\n\n        if(isChatWithDeletedAccount(chat, this.props.users)) {\n            chat.title= __('lng_deleted'); // Chat object is a copy, so there is no problem with mutating it.\n        }\n\n        const isVerified= isChatVerified(chat);\n\n        if (chat.id==options['my_id']) {\n            chat.title= __('lng_saved_messages');\n        }\n\n        var messageStatus = null;\n        switch(getMessageStatus(chat, chat.last_message)) { // Is the message sending, sent or seen?\n        case 'sending': \n            messageStatus = <span className=\"message-status-icon sending\" dangerouslySetInnerHTML={{__html: dialogs_sending}}/>;\n            break;\n        case 'sent': \n            messageStatus = <span className=\"message-status-icon sent\" dangerouslySetInnerHTML={{__html: dialogs_sent}}/>;\n            break;\n        case 'seen': \n            messageStatus = <span className=\"message-status-icon seen\" dangerouslySetInnerHTML={{__html: dialogs_received}}/>;\n            break;\n        }\n\n        var unreadBadge = null;\n        const unreadBadgeClass= chat.notification_settings.mute_for ? 'unread-badge muted' : 'unread-badge';\n        // Show the mention badge alone if there is exactly one mention and no other unread messages\n        if (chat.unread_mention_count == 1 && chat.unread_count == chat.unread_mention_count) {\n            unreadBadge = <span className=\"unread-badge mention\">@</span>;\n        } \n        // Show the mention badge with unread badge together if there are more than one unread messages and there are mentions\n        else if (chat.unread_mention_count > 0 && chat.unread_count > 1 ) {\n            unreadBadge = <React.Fragment>\n                <span className=\"unread-badge mention\">@</span>\n                <span className={unreadBadgeClass}>{chat.unread_count}</span>\n            </React.Fragment>;\n        }\n        // Show the unread badge alone if there are no mentions and there are unread messages\n        else if (chat.unread_count > 0 && chat.unread_mention_count == 0) {\n            unreadBadge = <span className={unreadBadgeClass}>{chat.unread_count}</span>;\n        }\n        // Show an empty badge if chat is manually marked as unread\n        else if (chat.is_marked_as_unread) {\n            unreadBadge = <span className={unreadBadgeClass}></span>;\n        }\n\n        var isOnline= false; // User online status\n        if((chat.type['@type']== 'chatTypePrivate') && // Only private chats (except saved messages and service notifications)\n            (chat.id!=options['my_id']) && (chat.id!=options['telegram_service_notifications_chat_id']) ){ \n            const user= this.props.users[chat.type.user_id];\n            if(user) {\n                isOnline= user.type['@type'] == 'userTypeRegular' && user.status['@type'] == 'userStatusOnline'; // Shouldn't be a bot\n            }\n        }\n\n        return(\n            <div className=\"chat\" onContextMenu={e=> createContextMenu(e, <ChatContextMenu chat={chat}/>)}\n                onMouseDown={this.mouseDown} onMouseUp={this.mouseUp} onMouseLeave={this.mouseLeave}>\n                <RippleEffect {...this.state.ripple} color=\"var(--theme-color-dialogsRippleBg)\"/>\n                <div className=\"content\" data-online={isOnline ? 'true' : 'false'}>\n                    <ProfilePhoto name={chat.title} photo={chat.photo?.small} id={getChatTypeId(chat)}/>\n                    <div className=\"details\">\n                        <div className=\"top\">\n                            <div className=\"left\">\n                                <div className=\"type-icon\" dangerouslySetInnerHTML={{__html: chatType}}></div>\n                                <div className=\"title\">{chat.title}</div>\n                                {isVerified && <span className=\"verified-icon\">\n                                    <span className=\"verified-icon-star\" dangerouslySetInnerHTML={{__html: dialogs_verified_star}}></span>\n                                    <span className=\"verified-icon-check\" dangerouslySetInnerHTML={{__html: dialogs_verified_check}}></span>\n                                </span>}\n                            </div>\n                            <div className=\"right\">\n                                {messageStatus}\n                                {chat.last_message?.date && <span className=\"date\">{smallDateTimeToString(chat.last_message.date)}</span>}\n                            </div>\n                        </div>\n                        <div className=\"bottom\">\n                            <div className=\"left\">\n                                {(chat.draft_message && !unreadBadge) ?  // I don't know why, but Telegram Desktop does not show the draft message if the chat is unread.\n                                    <span className=\"last-message\">\n                                        <span className=\"draft\">{__('lng_from_draft')}:</span> <span className=\"part-2\">{chat.draft_message.input_message_text.text.text}</span>\n                                    </span> \n                                    :\n                                    <MessageSummaryWithoutIcon message={chat.last_message} users={this.props.users} chat={chat} className=\"last-message\"/>\n                                }\n                            </div>\n                            <div className=\"right\">\n                                {unreadBadge || ( // Unread badge overrides pinned icon\n                                    chat.position?.is_pinned && <span className=\"pinned_icon\" dangerouslySetInnerHTML={{__html: dialogs_pinned}}></span>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nChatListItem.propTypes = {\n    /** The chat (TdObject) */\n    chat: PropTypes.object.isRequired,\n    /** A dictionary of all users */\n    users: PropTypes.object.isRequired\n};\nconst Chat = connect(state=> ({users: state}))(ChatListItem);\n\n/** Renders the context menu of a chat */\nfunction ChatContextMenu({chat}) {\n    const [movableChatLists, setMovableChatLists] = React.useState([]);\n\n    // Archive/unarchive chats\n    React.useEffect(() => {\n        TdLib.sendQuery({ // Only TDLib can know what lists we can add the chat to\n            '@type': 'getChatListsToAddChat',\n            chat_id: chat.id\n        }).then(result => {\n            setMovableChatLists(result.chat_lists.map(chatList=> {\n                const text= { // Only archive / unarchive\n                    'chatListMain': __('lng_archived_add'), \n                    'chatListArchive': __('lng_archived_remove')\n                }[chatList['@type']];\n                if(!text) return;\n                return (\n                    <Menu.MenuItem key={chatList.chat_filter_id || chatList['@type']} onClick={() => {\n                        TdLib.sendQuery({\n                            '@type': 'addChatToList',\n                            chat_id: chat.id,\n                            chat_list: chatList\n                        }).then(() => {\n                            if(chatList['@type'] == 'chatListMain') {\n                                addToast(<Toast>{__('lng_archived_removed')}</Toast>);\n                            } \n                            else if(chatList['@type'] == 'chatListArchive') {\n                                addToast(<Toast>{__('lng_archived_added')}</Toast>);\n                            }\n                        });\n                    }}>\n                        {text}\n                    </Menu.MenuItem>\n                );\n            }));\n        });\n    }, []);\n\n    return (\n        <Menu.MenuContents>\n            {movableChatLists /* Archive/unarchive */}\n            <Menu.MenuItem onClick={()=> { // Pin/unpin\n                TdLib.sendQuery({\n                    '@type': 'toggleChatIsPinned',\n                    chat_list: chat.position.list,\n                    chat_id: chat.id,\n                    is_pinned: !chat.position.is_pinned\n                }).catch(error=> {\n                    // Maximum pinned messages\n                    if(error.code == 400) {\n                        const max= chat.position.list['@type'] == 'chatListMain'? options['pinned_chat_count_max'] : options['pinned_archived_chat_count_max'];\n                        addDialog('maximum-pinned-chats-reached', (\n                            <ConfirmDialog id=\"maximum-pinned-chats-reached\" largeFont={true} hideCancelButton={true}>\n                                {__pl('lng_error_pinned_max', max)}\n                            </ConfirmDialog>\n                        ));\n                    }\n                });\n            }}>\n                {chat.position.is_pinned? __('lng_context_unpin_from_top') : __('lng_context_pin_to_top')}\n            </Menu.MenuItem>\n        </Menu.MenuContents>\n    );\n}\nChatContextMenu.propTypes = {\n    chat: PropTypes.object.isRequired\n};\n\nconst ArchivedChatsItem= connect(state=> ({\n    archiveButtonState: state.archiveButtonState,\n    unread: state.unread.archive\n})) (function ArchivedChatsItem({chats, unread, archiveButtonState}) {\n    const chatsInList = getChatsFromList(chats, {'@type': 'chatListArchive'}); // Check if there are any archved chats\n    if(!chatsInList.length) return null; // If there are no archived chats, render nothing\n\n    // Ripple\n    const ripple= React.useState({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave]= handleMyMouseEventsFunction(ripple);\n\n    function onArchiveOpen() {\n        chatStore.dispatch({\n            type: 'SET_ARCHIVE_STATE',\n            archiveState: 'open'\n        });\n    }\n\n    // Change button type to collapsed/expanded/moved to main menu\n    function setButtonState(state) {\n        chatStore.dispatch({\n            type: 'SET_ARCHIVE_BUTTON_STATE',\n            archiveButtonState: state\n        });\n    }\n\n    const moveToMainMenuToast= <Toast>{__('lng_context_archive_to_menu_info')}</Toast>;\n\n    switch(archiveButtonState) {\n    case 'expanded': // Looks like a regular chat\n    default:\n        return (\n            <div \n                className=\"chat archived\" onClick={onArchiveOpen}\n                onMouseDown={mouseDown} onMouseUp={mouseUp} onMouseLeave={mouseLeave}\n                onContextMenu={e=> createContextMenu(e, (\n                    <Menu.MenuContents>\n                        <Menu.MenuItem onClick={()=>{\n                            setButtonState('collapsed');\n                            localStorage.setItem('dibgram-archived-chats-button-mode', 'collapsed');\n                        }}>\n                            {__('lng_context_archive_collapse')}\n                        </Menu.MenuItem>\n                        <Menu.MenuItem onClick={()=>{\n                            setButtonState('hidden-expanded');\n                            localStorage.setItem('dibgram-archived-chats-button-mode', 'hidden-expanded');\n                            addToast(moveToMainMenuToast);\n                        }}>\n                            {__('lng_context_archive_to_menu')}\n                        </Menu.MenuItem>\n                    </Menu.MenuContents>\n                ))}>\n                <RippleEffect {...ripple[0]} color=\"var(--theme-color-dialogsRippleBg)\"/>\n                <div className=\"content\">\n                    <div className=\"profile-photo\">\n                        <div className=\"svg\" dangerouslySetInnerHTML={{__html: archive_userpic}}/>\n                    </div>\n                    <div className=\"details\">\n                        <div className=\"top\">\n                            <div className=\"left\">\n                                <div className=\"title\">{__('lng_archived_name')}</div>\n                            </div>\n                        </div>\n                        <div className=\"bottom\">\n                            <div className=\"left\">\n                                <div className=\"last-message\">\n                                    <span className=\"part-1\">\n                                        {chatsInList\n                                            .filter(chat=> chat.unread_count > 0)\n                                            .map(chat => chatTitleOrDeletedAccount(chat) + ', ')\n                                            .join('')}\n                                    </span>\n                                    <span className=\"part-2\">\n                                        {chatsInList\n                                            .filter(chat=> chat.unread_count == 0)\n                                            .map(chatTitleOrDeletedAccount)\n                                            .join(', ')}\n                                    </span>\n                                </div>\n                            </div>\n                            {unread.unread_messages_count? (\n                                <div className=\"right\">\n                                    <span className=\"unread-badge muted\">{unread.unread_messages_count}</span>\n                                </div>\n                            ) : null}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n\n    case 'collapsed': // Only title / tiny icon\n        return (\n            <div\n                className=\"chat archived collapsed\" onClick={onArchiveOpen}\n                onMouseDown={mouseDown} onMouseUp={mouseUp} onMouseLeave={mouseLeave}\n                onContextMenu={e=> createContextMenu(e, (\n                    <Menu.MenuContents>\n                        <Menu.MenuItem onClick={()=>{\n                            setButtonState('expanded');\n                            localStorage.setItem('dibgram-archived-chats-button-mode', 'expanded');\n                        }}>\n                            {__('lng_context_archive_expand')}\n                        </Menu.MenuItem>\n                        <Menu.MenuItem onClick={()=>{\n                            setButtonState('hidden-collapsed');\n                            localStorage.setItem('dibgram-archived-chats-button-mode', 'hidden-collapsed');\n                            addToast(moveToMainMenuToast);\n                        }}>\n                            {__('lng_context_archive_to_menu')}\n                        </Menu.MenuItem>\n                    </Menu.MenuContents>\n                ))}>\n                <RippleEffect {...ripple[0]} color=\"var(--theme-color-dialogsRippleBg)\"/>\n                <div className=\"content\">\n                    {__('lng_archived_name')}\n                    {unread.unread_messages_count? (\n                        <div className=\"details\">\n                            <span className=\"unread-badge muted\">{unread.unread_messages_count}</span>\n                        </div>\n                    ) : null}\n                </div>\n            </div>\n        );\n    case 'hidden-expanded': // Not here, it's in main menu\n    case 'hidden-collapsed':\n        return null;\n    }\n});\nArchivedChatsItem.propTypes = {\n    /** A list of all chats (not just current list) */\n    chats: PropTypes.array.isRequired\n};\n\n/** Renders the empty chat list fallback */\nfunction EmptyChatList({list, unread}) {\n    const loadingFallBack= (\n        <div className=\"empty\">\n            <div>Loading...</div>\n        </div>\n    );\n    if(list['@type']=='chatListFilter'){ // Empty filter / Filter not loaded\n        if(unread.filters?.[list.chat_filter_id]?.total_chats_count !== 0) return loadingFallBack;\n        return (\n            <div className=\"empty\">\n                <div>No chats currently belong to this folder.</div>\n                <LinkButton>Edit Folder</LinkButton>\n            </div>\n        );\n    } else { // There are no chats at all / Chats not loaded\n        if(unread.main?.total_chats_count !== 0) return loadingFallBack;\n        return (\n            <div className=\"empty\">\n                <div>Your chats will be here</div>\n                <LinkButton>New contact</LinkButton>\n            </div>\n        );\n    }\n}\n","/**\n * Gets message sending status. Can return 3 values:\n * - `\"sending\"`: the message is outgoing and is being sent.\n * - `\"sent\"`: the message is outgoing and was sent.\n * - `\"seen\"`: the message is outgoing and was seen by the other party.\n * - `\"unread\"`: the message is incoming and was not seen by this party.\n * - `\"read\"`: the message is incoming and was seen by this party.\n * @param {import(\"tdweb\").TdObject} chat The chat in which the message was sent.\n * @param {import(\"tdweb\").TdObject} message The message to check.\n */\nexport function getMessageStatus(chat, message) {\n    if(!chat || !message) return undefined;\n    if(message.is_outgoing) {\n        if(message.sending_state) {\n            return 'sending';\n        }\n        if(chat.last_read_outbox_message_id >= message.id) {\n            return 'seen';\n        }\n        return 'sent';\n    }\n    if(chat.last_read_inbox_message_id >= message.id) {\n        return 'read';\n    }\n    return 'unread';\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './search-box.scss';\nimport { info_close } from '../../../../ui/icon/icons';\nimport __ from '../../../../language-pack/language-pack';\n\n/**\n * Renders the search box.\n */\nexport default function SearchBox(props) {\n    return (\n        <div id=\"search-box\">\n            <input \n                placeholder={__('lng_dlg_filter')}\n                value={props.value}\n                onChange={props.onChange}\n                {...props}/>\n            <button \n                className=\"clear\" \n                onClick={()=> props.onChange && props.onChange({target: {value: ''}})}\n                data-visible={(props.value || '').length}\n                dangerouslySetInnerHTML={{__html: info_close}}>\n            </button>\n        </div>\n    );\n}\nSearchBox.propTypes= {\n    value: PropTypes.string,\n    onChange: PropTypes.func\n};","import { createStore } from 'redux';\nimport TdLib from './tdlib';\n\nconst connectionStore = createStore(\n    (state = 'connectionStateConnecting', action) => {\n        switch (action.type) {\n        case 'SET_CONNECTION':\n            return  action.connection;\n        default:\n            return state;\n        }\n    }\n);\n\nTdLib.registerUpdateHandler('updateConnectionState', (update) => {\n    connectionStore.dispatch({\n        type: 'SET_CONNECTION',\n        connection: update.state['@type']\n    });\n});\nexport default connectionStore;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './nav-animation.scss';\n\n/**\n * Renders two navigation sections (outer and inner) with an animation between them\n * \n * You need to set a background color to the outer section. (it has the CSS class 'nav-animation-outer')\n */\nexport default function NavAnimation({ children, innerScreen, className, innerClass, state, mode, ...props }) {\n    return (\n        <div className={'nav-animation ' + mode + ' ' + state + ' ' + className} {...props}>\n            <div className=\"outer\">\n                {children}\n            </div>\n            {state!='closed' && \n                <div className={'inner ' + innerClass}>\n                    {innerScreen}\n                </div>\n            }\n        </div>\n    );\n}\nNavAnimation.propTypes = {\n    children: PropTypes.node.isRequired,\n    /**\n     * The type of animation to use:\n     * - `slide-over`: The parent screen swipes a little to left, while the child screen slides in from the right. \n     *   A shadow is also shown over the parent screen in the animation.\n     * - `swipe-fade`: More subtle animation, the parent screen fades out while moving left, while at the same time the child screen fades in from the right.\n     */\n    mode: PropTypes.oneOf(['slide-over', 'swipe-fade']),\n    /** The child screen content, only needed when open */\n    innerScreen: PropTypes.node,\n    /** The current state of the animation. Can be `open`, `closing` or `closed` */\n    state: PropTypes.oneOf(['open', 'closing', 'closed']),\n    /** The class name to apply to the outer element */\n    className: PropTypes.string,\n    /** The class name to apply to the inner element */\n    innerClass: PropTypes.string\n};\n\nexport function closeNavAnimation(getState, setState) {\n    // First set state to closing, which triggers the closing animation. After that, we can delete the element.\n    setState('closing');\n    setTimeout(() => {\n        if(getState() == 'closing') { // This condition is to prevent glitches when archive is opened again before 2s\n            setState('closed');\n        }\n    }, 2000);\n}\n","import React from 'react';\nimport { connect, Provider } from 'react-redux';\nimport ConnectionState from '../../../ui/components/connecting';\nimport ChatList from './chat-list';\nimport SearchBox from './search/search-box';\nimport HamburgerMenuButton from './hamburger-menu/menu-button';\nimport connectionStore from '../../../TdWeb/connectionStore';\nimport IconButton from '../../../ui/elements/icon-button';\nimport './chat-list-bar.scss';\nimport { info_back } from '../../../ui/icon/icons';\nimport chatStore from '../../chat-store';\nimport NavAnimation, { closeNavAnimation } from '../../../ui/elements/nav-animation';\nimport __ from '../../../language-pack/language-pack';\n\n/**\n * Renders the navigation menu, containing chat list, search field and search results [and the main menu button]\n */\nconst ChatListBar = connect(function (state) {\n    return {\n        useFolders: (state.filters || []).length != 0,\n        chats: state.chats, \n        list: state.currentChatList,\n        archiveState: state.archiveState,\n        unread: state.unread\n    };\n})(function ChatListBar({useFolders, chats, list, archiveState, unread, onHamburgerMenuOpened}) {\n    var [searchText, setSearchText] = React.useState('');\n    \n    function closeArchive() {\n        closeNavAnimation(() => chatStore.getState().archiveState,\n            state => {\n                chatStore.dispatch({\n                    type: 'SET_ARCHIVE_STATE',\n                    archiveState: state\n                });\n            }\n        );\n    }\n\n    return (\n        <React.Fragment>\n            <NavAnimation \n                mode=\"slide-over\" \n                id=\"chat-list-bar\"\n                state={archiveState}\n                innerClass=\"archived-chats\"\n                innerScreen={\n                    <Provider store={connectionStore}>\n                        <div className=\"chat-list-header\">\n                            <IconButton icon={info_back} onClick={closeArchive}/>\n                            {unread.main.unread_unmuted_messages_count? (\n                                <div className=\"unread-badge\">\n                                    <span>{unread.main.unread_unmuted_messages_count}</span>\n                                </div>\n                            ): null}\n                            <div className=\"title\">{__('lng_archived_name')}</div>\n                        </div>\n                        <ChatList chats={chats} list={{'@type': 'chatListArchive'}} unread={unread}/>\n                    </Provider>\n                }>\n                <div className=\"chat-list-header\">\n                    {(!useFolders) && <HamburgerMenuButton.WithoutFolders onClick={onHamburgerMenuOpened}/>}\n                    <SearchBox value={searchText} onChange={e => setSearchText(e.target.value)}/>\n                </div>\n                <Provider store={connectionStore}>\n                    <ChatList chats={chats} list={list} unread={unread}/>\n                </Provider>\n            </NavAnimation>\n            <Provider store={connectionStore}>\n                <ConnectionState/>\n            </Provider>\n        </React.Fragment>\n    );\n});\nexport default ChatListBar;\n","export default '0.0.2-beta2';","import React from 'react';\nimport PropTypes from 'prop-types';\nimport RippleEffect, {handleMyMouseEventsFunction} from '../elements/ripple-effect';\nimport './button.scss';\n\n/**\n * Renders a tool strip button. Has an icon and children, if provided will align to the right.\n */\nexport default function ToolStripButton({icon, text, children, hideIcon, ...rest}) {\n    const ripple = React.useState({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave]= handleMyMouseEventsFunction(ripple);\n    return (\n        <div className=\"tool-strip-button\" {...rest}\n            onMouseDown={mouseDown} onMouseUp={mouseUp} onMouseLeave={mouseLeave}>\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-windowBgRipple)\"/>\n            <div className=\"content\">\n                {(!hideIcon) && <div className=\"icon\" dangerouslySetInnerHTML={{__html: icon}}></div>} \n                <div className=\"title\">{text}</div>\n                {children && (\n                    <div className=\"right\">\n                        {children}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\nToolStripButton.propTypes = {\n    /** Icon HTML */\n    icon: PropTypes.string,\n    /** Button text */\n    text: PropTypes.string,\n    /** Optionally, an element to show aligned to right */\n    children: PropTypes.node,\n    /** If true, does not show the icon. This removes the space allocated to the icon. */\n    hideIcon: PropTypes.bool\n};","/**\n * There are 3 ways to import the items\n * 1. import each component from the respective file\n * 2. import each component from tool-strip.js\n * 3. import the default export from tool-strip.js and access the object members\n * You can use whichever you want.\n */\n\nimport ToolStripButton from './button';\nimport ToolStripSection from './section';\nimport ToolStripSeparator from './separator';\nimport ToolStripToggleButton from './toggle-button';\n\n/**\n * A collection of different components to create a generic menu.\n * \n * Contains sections, menu-items, two kinds of separators, switches, check-boxes, etc.s\n */\nconst ToolStrip = {\n    Button: ToolStripButton,\n    Section: ToolStripSection,\n    ToggleButton: ToolStripToggleButton,\n    Separator: ToolStripSeparator\n};\nexport default ToolStrip;\nexport { ToolStripButton, ToolStripSection, ToolStripToggleButton, ToolStripSeparator };\n","import React from 'react';\nimport './section.scss';\n\n/**\n * Renders a tool strip section. Use different sections when using separators.\n */\nexport default function Section(props) {\n    return <div className=\"tool-strip-section\" {...props}/>;\n}\n// Too simple for a separate file, no?","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ToolStripButton from './button';\nimport './toggle-button.scss';\n\nexport default function ToolStripToggleButton({icon, text, onChange, isActive, ...rest}) {\n    function toggle() {\n        onChange(!isActive);\n    }\n    return (\n        <ToolStripButton icon={icon} text={text} onClick={toggle} {...rest}>\n            <input type=\"checkbox\" className=\"toggle-button\" checked={isActive} readOnly/>\n        </ToolStripButton>\n    );\n}\nToolStripToggleButton.propTypes = {\n    /** HTML of the icon to display */\n    icon: PropTypes.string,\n    /** Button text */\n    text: PropTypes.string,\n    /** Callback when the button is toggled */\n    onChange: PropTypes.func,\n    /** the on/off state of the button */\n    isActive: PropTypes.bool\n};\n","import React from 'react';\r\nimport './separator.scss';\r\n\r\n/**\r\n * Renders a tool strip button. Has an icon and children, if provided will align to the right.\r\n */\r\nexport default function ToolStripSeparator(props) {\r\n    return (\r\n        <div className=\"tool-strip-separator\" {...props}/>\r\n    );\r\n}","// DIBgram themes are converted to CSS in runtime here.\n\nexport function convertThemeToCSS(theme){ // Convert theme colors to CSS vars\n    var css={};\n    for(const name in theme){\n        var obj= theme[name];\n        if(typeof obj.value == 'string') {\n            css['--theme-color-' + name]= obj.value;\n        } else if(typeof obj.value == 'object') { // A color is equal to another color\n            css['--theme-color-' + name]= `var(--theme-color-${obj.value.equals})`;\n        }\n    }\n    return css;\n}","import React from 'react';\nimport classic from './classic.json';\nimport day from './day.json';\nimport tinted from './tinted.json';\nimport night from './night.json';\nimport { convertThemeToCSS } from './dibgram-theme-to-css';\nimport { createStore } from 'redux';\nimport { connect } from 'react-redux';\nimport { getRtlMode } from '../../language-pack/language-pack';\n\nconst themes = { day, classic, tinted, night };\n\nfunction getThemeFromStorage() {\n    let theme = localStorage.getItem('dibgram-theme');\n    if (!theme) { // if theme is not set in localStorage, use OS theme\n        theme= window.matchMedia?.('(prefers-color-scheme: dark)').matches ? 'night' : 'day';\n        localStorage.setItem('dibgram-theme', theme);\n    }\n    return theme;\n}\n\nexport const themeStore = createStore(\n    (state = { \n        theme: getThemeFromStorage(),\n        rtl: getRtlMode()\n    }, action) => {\n        switch (action.type) {\n        case 'SET_THEME':\n            return { ...state, theme: action.theme };\n        case 'SET_RTL':\n            return { ...state, rtl: action.rtl };\n        default:\n            return state;\n        }\n    }\n);\n\n/**\n * All children of this component will be rendered with the theme. Can be treated as a div.\n */\nexport const ThemeProvider= connect(state=> state) (\n    // eslint-disable-next-line no-unused-vars\n    function ThemeProvider({ theme, rtl, dispatch, ...rest}) {\n        return (\n            <div dir={rtl ? 'rtl' : 'ltr'}\n                data-theme-is-dark={themes[theme].isDark.value}\n                {...rest} \n                style={convertThemeToCSS({...classic, ...themes[theme]})}\n            />\n        );\n    });\n\nexport function setTheme(theme) {\n    localStorage.setItem('dibgram-theme', theme);\n    themeStore.dispatch({ type: 'SET_THEME', theme });\n}\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport RippleEffect, { handleMyMouseEventsFunction } from '../elements/ripple-effect';\r\nimport { three_dots } from '../icon/icons';\r\nimport './three-dots-menu.scss';\r\nimport { getRtlMode } from '../../language-pack/language-pack';\r\n\r\nexport default function ThreeDotsMenu({children, ...rest}) {\r\n    const ripple= React.useState({state: 'off'});\r\n    const [onMouseDown, onMouseUp, onMouseLeave]= handleMyMouseEventsFunction(ripple);\r\n\r\n    const [visible, setVisible]= React.useState(false);\r\n\r\n    return (\r\n        <div className={'three-dots-menu ' + (rest.className || '')} onMouseLeave={e=> {\r\n            onMouseLeave(e);\r\n            setVisible(false);\r\n        }}>\r\n            <button className=\"icon-button\" onMouseDown={e=> {\r\n                onMouseDown(e);\r\n                setVisible(true);\r\n            }}>\r\n                <span dangerouslySetInnerHTML={{__html: three_dots}} />\r\n                <RippleEffect {...ripple[0]} color=\"var(--theme-color-windowBgOver)\" small={true}/>\r\n            </button>\r\n            {visible && <div className={'menu ' + (getRtlMode() ? 'br' : 'bl')} onClick={e=> {\r\n                onMouseUp(e);\r\n                setVisible(false);\r\n            }}>\r\n                {children}\r\n            </div>}\r\n        </div>\r\n    );\r\n}\r\nThreeDotsMenu.propTypes = {\r\n    children: PropTypes.node,\r\n};\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { info_close, title_search } from '../icon/icons';\nimport './search.scss';\nimport IconButton from '../elements/icon-button';\nimport __ from '../../language-pack/language-pack';\n\nexport default function BoxSearch({value, onChange}) {\n    return (\n        <div className=\"box-search\">\n            <span className=\"icon\" dangerouslySetInnerHTML={{__html: title_search}} />\n            <input type=\"text\" placeholder={__('lng_dlg_filter')} value={value} onChange={onChange} />\n            <IconButton icon={info_close} className=\"icon-button clear\" \n                onClick={()=> onChange && onChange({target: {value: ''}})}\n                data-visible={(value || '').length}/>\n        </div>\n    );\n}\nBoxSearch.propTypes = {\n    value: PropTypes.string,\n    onChange: PropTypes.func\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Dialog from '../../../ui/dialog/dialog';\nimport SmallButton from '../../../ui/elements/small-button';\nimport ScrollView from '../../../ui/scroll/scrollbar';\nimport RippleEffect, { handleMyMouseEventsFunction } from '../../../ui/elements/ripple-effect';\nimport BoxSearch from '../../../ui/dialog/search';\nimport __, { getCurrentLanguagePack } from '../../../language-pack/language-pack';\nimport TdLib from '../../../TdWeb/tdlib';\nimport './choose-language.scss';\nimport { addDialog } from '../../../ui/dialog/dialogs';\nimport ConfirmDialog from '../../../ui/dialog/confirm-dialog';\nimport ToolStrip from '../../../ui/tool-strip/tool-strip';\n\nexport default function ChooseLanguageDialog({id}) {\n    const ref = React.useRef();\n    var [languages, setLanguages] = React.useState([]);\n    const [search, setSearch] = React.useState('');\n    if(search.length > 0) {\n        languages = languages.filter(country => country.name.toLowerCase().startsWith(search.toLowerCase()));\n    }\n\n    React.useEffect(() => {\n        TdLib.sendQuery({\n            '@type': 'getLocalizationTargetInfo',\n            'only_local': false\n        }).then(response => {\n            setLanguages(response.language_packs);\n        });\n    }, []);\n\n    const currentPack= getCurrentLanguagePack();\n\n    return (\n        <Dialog ref={ref} id={id} width=\"320px\" className=\"confirm-dialog\">\n            <h1>{__('lng_languages')}</h1>\n\n            <BoxSearch value={search} onChange={(e) => setSearch(e.target.value)} />\n\n            <ScrollView scrollAlwaysVisible>\n                <ToolStrip.Section>\n                    {languages.map(pack => (\n                        <LanguagePack \n                            key={pack.id} \n                            pack={pack} \n                            onClick={()=> selectLanguage(pack)} \n                            selected={currentPack.id == pack.id}/>\n                    ))}\n                </ToolStrip.Section>\n            </ScrollView>\n\n            <div className=\"options\">\n                <SmallButton onClick={()=> {ref.current.close();}}>{__('lng_close')}</SmallButton>\n            </div>\n        </Dialog>\n    );\n}\nChooseLanguageDialog.propTypes = {\n    id: PropTypes.string.isRequired\n};\n\nexport function LanguagePack({pack, onClick, selected}) {\n    const ripple = React.useState({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave] = handleMyMouseEventsFunction(ripple);\n    return (\n        <div className=\"language-pack-item\" onClick={onClick} onMouseDown={mouseDown} onMouseUp={mouseUp} onMouseLeave={mouseLeave}>\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-windowBgRipple)\"/>\n            <div className=\"content\">\n                <input type=\"radio\" name=\"settings-language-pack-selector\" checked={selected}/>\n                <div className=\"right\">\n                    <div className=\"name\">{pack.native_name}</div>\n                    <div className=\"english-name\">{pack.name}</div>\n                </div>\n            </div>\n        </div>\n    );\n}\nLanguagePack.propTypes = {\n    pack: PropTypes.object.isRequired,\n    onClick: PropTypes.func,\n    selected: PropTypes.bool\n};\n\nfunction selectLanguage(pack) {\n    TdLib.sendQuery({\n        '@type': 'getLanguagePackStrings',\n        language_pack_id: pack.id,\n        keys: [ 'lng_sure_save_language' ]\n    }).then(response => {\n        addDialog('settings-language-restart-confirm-dialog', (\n            <ConfirmDialog largeFont={true} onOK={() => {\n                localStorage.setItem('dibgram-active-language', JSON.stringify(pack));\n                window.location.reload();\n            }} id=\"settings-language-restart-confirm-dialog\">\n                {__('lng_sure_save_language')}<br/>\n                <br/>\n                {response.strings[0].value.value}\n            </ConfirmDialog>\n        ));\n        TdLib.sendQuery({ // Request language pack strings so it is already cached after restart\n            '@type': 'getLanguagePackStrings',\n            language_pack_id: pack.id,\n        });\n    });\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from '../../../../ui/elements/icon-button';\nimport { info_back, info_close } from '../../../../ui/icon/icons';\nimport __ from '../../../../language-pack/language-pack';\nimport ToolStrip from '../../../../ui/tool-strip/tool-strip';\nimport { themeStore } from '../../../../ui/themes/theme';\nimport { getRtlMode } from '../../../../language-pack/language-pack';\n\nexport default function SettingsAdvanced({onClose, onBack}) {\n    const [enableRtl, setEnableRtl] = React.useState(localStorage.getItem('dibgram-allow-rtl-layout') == 'true');\n\n    return (\n        <React.Fragment>\n            <div className=\"header\">\n                <IconButton className=\"icon-button back\" icon={info_back} onClick={onBack} />\n                <h3 className=\"title\">{__('lng_settings_advanced')}</h3>\n                <IconButton className=\"icon-button close\" icon={info_close} onClick={onClose}/>\n            </div>\n            <ToolStrip.Section>\n                <ToolStrip.ToggleButton text=\"Allow right-to-left\" hideIcon={true} isActive={enableRtl} onChange={() => {\n                    setEnableRtl(!enableRtl);\n                    localStorage.setItem('dibgram-allow-rtl-layout', !enableRtl);\n                    themeStore.dispatch({type: 'SET_RTL', rtl: getRtlMode()});\n                }} />\n            </ToolStrip.Section>\n        </React.Fragment>\n    );\n}\nSettingsAdvanced.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    onBack: PropTypes.func.isRequired\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Dialog from '../../../ui/dialog/dialog';\r\nimport ToolStrip from '../../../ui/tool-strip/tool-strip';\r\nimport ScrollView from '../../../ui/scroll/scrollbar';\r\nimport TdLib from '../../../TdWeb/tdlib';\r\nimport { addDialog } from '../../../ui/dialog/dialogs';\r\nimport ConfirmDialog from '../../../ui/dialog/confirm-dialog';\r\nimport ThreeDotsMenu from '../../../ui/menu/three-dots-menu';\r\nimport Menu from '../../../ui/menu/menu';\r\nimport './settings-dialog.scss';\r\nimport { info_close, settings_advenced, settings_chat, settings_faq, settings_folders, settings_info, settings_language, settings_notifications, settings_privacy_security } from '../../../ui/icon/icons';\r\nimport ProfilePhoto from '../../../ui/components/profile-photo';\r\nimport IconButton from '../../../ui/elements/icon-button';\r\nimport options from '../../../TdWeb/options';\r\nimport { connect } from 'react-redux';\r\nimport { getUserFullName } from '../../user-misc';\r\nimport __ from '../../../language-pack/language-pack';\r\nimport ChooseLanguageDialog from './choose-lanugage';\r\nimport NavAnimation, { closeNavAnimation } from '../../../ui/elements/nav-animation';\r\nimport SettingsAdvanced from './advanced/advanced';\r\n\r\nfunction Settings ({id, users}) {\r\n    const dialogRef = React.useRef();\r\n    const user= users[options['my_id']];\r\n    const [navState, setNavState] = React.useState('closed');\r\n    const [section, setSection] = React.useState(null);\r\n\r\n    function openSection(Section) {\r\n        setSection(<Section onClose={dialogRef.current.close} onBack={()=> {\r\n            closeNavAnimation(()=>navState, setNavState);\r\n        }}/>);\r\n        setNavState('open');\r\n    }\r\n\r\n    return (\r\n        <Dialog className=\"settings-dialog\" id={id} ref={dialogRef} width=\"392px\">\r\n            <NavAnimation className=\"dialog-content\" innerScreen={section} mode=\"swipe-fade\" state={navState}>\r\n                <div className=\"header\">\r\n                    <h3 className=\"title\">{__('lng_menu_settings')}</h3>\r\n                    <IconButton className=\"icon-button close\" icon={info_close} onClick={() => {\r\n                        dialogRef.current.close();\r\n                    }} />\r\n                    \r\n                    <ThreeDotsMenu className=\"more-options\">\r\n                        <Menu.MenuContents>\r\n                            <Menu.MenuItem>{__('lng_menu_add_account')}</Menu.MenuItem>\r\n                            <Menu.MenuItem>{__('lng_settings_information')}</Menu.MenuItem>\r\n                            <Menu.MenuItem onClick={() => {\r\n                                addDialog('log-out-from-main-menu-confirm-dialog',\r\n                                    <ConfirmDialog largeFont={true}\r\n                                        id=\"log-out-from-main-menu-confirm-dialog\"\r\n                                        OKButtonText={__('lng_settings_logout')} onOK={()=> {\r\n                                            TdLib.sendQuery({\r\n                                                '@type': 'logOut'\r\n                                            });\r\n                                        }} attention={true}>\r\n                                        {__('lng_sure_logout')}\r\n                                    </ConfirmDialog>\r\n                                );\r\n                            }}>{__('lng_settings_logout')}</Menu.MenuItem>\r\n                        </Menu.MenuContents>\r\n                    </ThreeDotsMenu>\r\n                </div>\r\n                <ScrollView scrollBarWidth=\"4\">\r\n                    <div className=\"scroll-content\">\r\n                        <ToolStrip.Section className=\"profile-info\">\r\n                            <ProfilePhoto id={options['my_id']} name={user ? getUserFullName(user) : ''} photo={user?.profile_photo?.small} disableSavedMessages={true}/>\r\n                            <span>\r\n                                <p className=\"name\">{user && getUserFullName(user)}</p>\r\n                                <p className=\"status\">{__('lng_status_online') /*TODO: Implement real status instead of a dummy 'online' */}</p>\r\n                            </span>\r\n                        </ToolStrip.Section>\r\n                        <ToolStrip.Separator/>\r\n                        <ToolStrip.Section>\r\n                            <ToolStrip.Button icon={settings_info} text={__('lng_settings_information')}/>\r\n                            <ToolStrip.Button icon={settings_notifications} text={__('lng_settings_section_notify')}/>\r\n                            <ToolStrip.Button icon={settings_privacy_security} text={__('lng_settings_section_privacy')}/>\r\n                            <ToolStrip.Button icon={settings_chat} text={__('lng_settings_section_chat_settings')}/>\r\n                            <ToolStrip.Button icon={settings_folders} text={__('lng_settings_section_filters')}/>\r\n                            <ToolStrip.Button icon={settings_advenced} text={__('lng_settings_advanced')} onClick={()=> openSection(SettingsAdvanced)}/>\r\n                            <ToolStrip.Button icon={settings_language} text={__('lng_settings_language')}\r\n                                onClick={()=>addDialog('settings-change-language-dialog', <ChooseLanguageDialog id=\"settings-change-language-dialog\"/>)}>\r\n                                <span className=\"value\">{__('lng_language_name')}</span>\r\n                            </ToolStrip.Button>\r\n                        </ToolStrip.Section>\r\n                        <ToolStrip.Separator/>\r\n                        <ToolStrip.Section>\r\n                            <ToolStrip.Button icon={settings_faq} text={__('lng_settings_faq')} onClick={() => window.open('https://telegram.org/faq')}/>\r\n                            <ToolStrip.Button text={__('lng_settings_ask_question')}/>\r\n                        </ToolStrip.Section>\r\n                    </div>\r\n                </ScrollView>\r\n            </NavAnimation>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nSettings.propTypes= {\r\n    /** Unique ID of this dialog, used to close it. */\r\n    id: PropTypes.any.isRequired,\r\n    users: PropTypes.any.isRequired\r\n};\r\n\r\nconst SettingsDialog = connect( (users)=> ({users}) ) (Settings);\r\nexport default SettingsDialog;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './menu.scss';\nimport TdLib from '../../../../TdWeb/tdlib';\nimport ProfilePhoto from '../../../../ui/components/profile-photo';\nimport { getChatsFromList } from '../chat-list';\nimport chatStore from '../../../chat-store';\nimport { archive_userpic, menu_new_channel, menu_new_group, menu_night_mode, menu_settings, settings_name, settings_phone_number } from '../../../../ui/icon/icons';\nimport { connect, Provider } from 'react-redux';\nimport { createContextMenu } from '../../../../ui/menu/context-menu';\nimport Menu from '../../../../ui/menu/menu';\nimport ScrollView from '../../../../ui/scroll/scrollbar';\nimport LinkButton from '../../../../ui/elements/link-button';\nimport version from '../../../../../version';\nimport Dialogs, { addDialog, dialogStore } from '../../../../ui/dialog/dialogs';\nimport ConfirmDialog from '../../../../ui/dialog/confirm-dialog';\nimport ToolStrip from '../../../../ui/tool-strip/tool-strip';\nimport { setTheme, themeStore } from '../../../../ui/themes/theme';\nimport SettingsDialog from '../../settings/settings-dialog';\nimport usersStore from '../../../users-store';\nimport options from '../../../../TdWeb/options';\nimport { getUserFullName } from '../../../user-misc';\nimport __, { __fmt } from '../../../../language-pack/language-pack';\n\n/**\n * Renders the main menu (always rendered but not always visible)\n */\nconst HamburgerMenu= connect(state=> ({\n    chats: state.chats,\n    archiveButtonState: state.archiveButtonState,\n})) (\n    function HamburgerMenu ({visible, onClose, chats, archiveButtonState}) {\n        const [me, setMe] = React.useState(null);\n        React.useEffect(() => {\n            TdLib.sendQuery({ // Get current user info\n                '@type': 'getMe'\n            }).then(result => {\n                // Format phone number and put it in state\n                if(result.phone_number) {\n                    TdLib.sendQuery({\n                        '@type': 'getPhoneNumberInfo',\n                        phone_number_prefix: result.phone_number\n                    }).then(info => {\n                        // Format phone number\n                        if(info.country_calling_code){\n                            result.phone_number= `+${info.country_calling_code} ${info.formatted_phone_number}`;\n                        }\n                        setMe(result);\n                    });\n                } \n                else setMe(result);\n            });\n        }, []); // equivalent to componentDidMount\n\n        const [nightMode, setNightMode] = React.useState(['tinted', 'night'].includes(themeStore.getState().theme));\n\n        /**@type React.KeyboardEventHandler<HTMLDivElement> */\n        function onKeyDown (e){\n            // `Esc` closes the menu\n            if(e.key === 'Escape') {\n                onClose();\n            }\n        }\n        // Autofocus menu\n        var ref = React.useRef(null);\n        React.useEffect(() => {\n            if(visible) {\n                ref.current.focus();\n            }\n        }, [visible]);\n\n        // Get chats from archive to see if archive button should be shown\n        const showArchivedChats = getChatsFromList(chats, {'@type': 'chatListArchive'}).length > 0;\n\n        return (\n            <div id=\"hamburger-menu\" ref={ref} className={visible ? 'visible' : ''} \n                onKeyDown={onKeyDown} tabIndex={0}>\n                <div className=\"content\">\n                    <div className=\"header\">\n                        <div className=\"row-1\">\n                            <ProfilePhoto \n                                id={me?.id || 0} \n                                name={(me?.first_name || '') + (me?.last_name? (' ' + me.last_name) : '')} \n                                photo={me?.profile_photo?.small}\n                                disableSavedMessages={true}/>\n                            <div className=\"buttons\">\n                                {(showArchivedChats && (['hidden-collapsed', 'hidden-expanded'].includes(archiveButtonState))) && (\n                                    <button \n                                        className=\"button\" \n                                        dangerouslySetInnerHTML={{__html: archive_userpic}}\n                                        onClick={() => {\n                                            chatStore.dispatch({\n                                                type: 'SET_ARCHIVE_STATE',\n                                                archiveState: 'open'\n                                            });\n                                            onClose();\n                                        }}\n                                        onContextMenu={e=> createContextMenu(e, (\n                                            <Menu.MenuContents>\n                                                <Menu.MenuItem onClick={()=> {\n                                                    const newState= {'hidden-collapsed': 'collapsed', 'hidden-expanded': 'expanded'}[archiveButtonState];\n                                                    chatStore.dispatch({\n                                                        type: 'SET_ARCHIVE_BUTTON_STATE',\n                                                        archiveButtonState: newState\n                                                    });\n                                                    localStorage.setItem('dibgram-archived-chats-button-mode', newState);\n                                                    onClose();\n                                                }}>{__('lng_context_archive_to_list')}</Menu.MenuItem>\n                                            </Menu.MenuContents>\n                                        ))}/>\n                                )}\n                            </div>\n                        </div>\n                        <div className=\"row-2\">\n                            <div className=\"name\">\n                                {me && getUserFullName(me)}\n                            </div>\n                            <div className=\"phone-number\">\n                                {me?.phone_number}\n                            </div>\n                        </div>\n                    </div>\n                    <ScrollView scrollAlwaysVisible>\n                        <div className=\"scroll-content\">\n                            <div className=\"options\">\n                                <ToolStrip.Section>\n                                    <ToolStrip.Button icon={menu_new_group} text={__('lng_create_group_title')}/>\n                                    <ToolStrip.Button icon={menu_new_channel} text={__('lng_create_channel_title')}/>\n                                    <ToolStrip.Button icon={settings_name} text={__('lng_menu_contacts')}/>\n                                    <ToolStrip.Button icon={settings_phone_number} text={__('lng_menu_calls')}/>\n                                    <ToolStrip.Button icon={menu_settings} text={__('lng_menu_settings')} onClick={()=> {\n                                        onClose();\n                                        addDialog('full-settings-dialog',\n                                            <Provider store={usersStore}>\n                                                <SettingsDialog id=\"full-settings-dialog\" />\n                                            </Provider>\n                                        );\n                                    }}/>\n                                    <ToolStrip.ToggleButton icon={menu_night_mode} text={__('lng_menu_night_mode')} isActive={nightMode} onChange={(isNight)=> {\n                                        setNightMode(isNight);\n                                        setTheme(isNight ? 'night' : 'day');\n                                    }}/>\n                                </ToolStrip.Section>\n                            </div>\n                            <div className=\"about\">\n                                <div className=\"row-1\">\n                                    <LinkButton href=\"https://github.com/DIBgram/DIBgram\">DIBgram</LinkButton>\n                                </div>\n                                <div className=\"row-2\">\n                                    <LinkButton href=\"https://github.com/DIBgram/DIBgram/releases/\">{__fmt('lng_settings_current_version', {version})}</LinkButton> ­– <LinkButton onClick={()=> {\n                                        // About DIBgram\n                                        onClose();\n                                        addDialog('main-menu-about-dibgram-dialog', (\n                                            <ConfirmDialog id=\"main-menu-about-dibgram-dialog\"\n                                                width=\"390px\" title=\"DIBgram\" OKButtonText=\"CLOSE\"\n                                                hideCancelButton={true}>\n\n                                                <LinkButton className=\"version link-button\"\n                                                    style={{color: 'var(--theme-color-windowSubTextFg)'}} \n                                                    href=\"https://github.com/DIBgram/DIBgram/releases/\">\n                                                        version {version}, TDLib {options['version']}\n                                                </LinkButton>\n\n                                                <p>Unofficial Telegram app based on <LinkButton href=\"https://core.telegram.org/tdlib\">TDLib</LinkButton> for speed and security.</p>\n\n                                                <p>This software is licensed under <LinkButton href=\"https://github.com/DIBgram/DIBgram/blob/main/LICENSE\">GNU GPL</LinkButton> version 3.<br/>\n                                                Source code is available on <LinkButton href=\"https://github.com/DIBgram/DIBgram\">GitHub</LinkButton>.</p>\n\n                                                <p>Visit the <LinkButton href=\"https://telegram.org/faq\">Telegram FAQ</LinkButton> for more info.</p>\n                                            </ConfirmDialog>\n                                        ));\n                                    }}>\n                                        {__('lng_menu_about')}\n                                    </LinkButton>\n                                </div>\n                            </div>\n                        </div>\n                    </ScrollView>\n                </div>\n                <Provider store={dialogStore}>\n                    <Dialogs className=\"shadow\" onClick={onClose}/>\n                </Provider>\n            </div>\n        );\n    });\nHamburgerMenu.propTypes = {\n    visible: PropTypes.bool.isRequired,\n    onClose: PropTypes.func\n};\nexport default HamburgerMenu;\n","import React from 'react';\nimport ChatFoldersList from './sections/navigation-menu/chat-folders';\nimport ChatListBar from './sections/navigation-menu/chat-list-bar';\nimport chatStore from './chat-store';\nimport { connect, Provider } from 'react-redux';\nimport './messengerWindow.scss';\nimport HamburgerMenu from './sections/navigation-menu/hamburger-menu/menu';\nimport {Resizable} from 're-resizable';\n\n/**\n * Renders the messenger screen\n */\nexport const MessengerWindow= connect(({rtl})=>({rtl})) (function MessengerWindow ({rtl}) {\n\n    const [isMenuOpen, setIsMenuOpen] = React.useState(false);\n\n    return (\n        <div id=\"messenger-screen\">\n            <Provider store={chatStore}>\n                <HamburgerMenu visible={isMenuOpen} onClose={()=> setIsMenuOpen(false)}/>\n                <ChatFoldersList onHamburgerMenuOpened={()=> setIsMenuOpen(true)}/>\n                <Resizable defaultSize={{width: 260}} minWidth={260}\n                    className=\"chat-list-bar-container\" handleClasses={{right: 'chat-list-bar-resize-handle', left: 'chat-list-bar-resize-handle'}}\n                    enable={{top: false, right: !rtl, bottom: false, left: rtl, topRight: false, bottomRight: false, bottomLeft: false, topLeft: false}}>\n                    <ChatListBar onHamburgerMenuOpened={()=> setIsMenuOpen(true)}/>\n                </Resizable>\n            </Provider>\n            <div id=\"chat-container\">\n                \n            </div>\n        </div>\n    );\n});","import TdLib from './tdlib';\nimport {getCredentials} from './config';\nimport {getUseTestDc} from './tdlib';\nimport version from '../../version';\n\nTdLib.registerUpdateHandler('updateAuthorizationState',function (update) {\n    const credentials= getCredentials();\n    const auth_state= update['authorization_state'];\n    \n    if(auth_state['@type']==='authorizationStateWaitEncryptionKey'){\n        TdLib.sendQuery({'@type': 'checkDatabaseEncryptionKey', 'encryption_key': ''});\n    }\n    if(auth_state['@type']==='authorizationStateWaitTdlibParameters'){\n        TdLib.sendQuery({\n            '@type': 'setTdlibParameters',\n            'parameters': {\n                'database_directory': 'tdlib',\n                'use_message_database': true,\n                'use_secret_chats': false,\n                'api_id': credentials.api_id,\n                'api_hash': credentials.api_hash,\n                'system_language_code': 'en',\n                'device_model': 'Web',\n                'application_version': version,\n                'enable_storage_optimizer': true,\n                'use_test_dc': getUseTestDc(),\n            }\n        });\n    }\n});\n\n/**\n * Provides functions to pass required authorization data to Telegram\n */\nexport default class Auth {\n    /**\n     * Pass phone number of the account to be logged in to\n     * @param {string} number The phone number the user entered\n     * @returns TdLib query result\n     */\n    static givePhoneNumber(number) {\n        return TdLib.sendQuery({'@type': 'setAuthenticationPhoneNumber', 'phone_number': number});\n    }\n    /**\n     * Pass authorization code the user has received\n     * @param {string} code The code the user entered\n     * @returns TdLib query result\n     */\n    static checkAuthCode(code) {\n        return TdLib.sendQuery({'@type': 'checkAuthenticationCode', 'code': code});\n    }\n    /**\n     * Pass 2FA password of the account\n     * @param {string} pass The password the user entered\n     * @returns TdLib query result\n     */\n    static check2FACode(pass) {\n        return TdLib.sendQuery({'@type': 'checkAuthenticationPassword', 'password': pass});\n    }\n    /**\n     * Sign up to Telegram\n     * @param {string} first The first name to be used in the new account\n     * @param {string} last Tha last name to be used in the new account\n     * @returns TdLib query result\n     */\n    static registerNewAccount(first, last) {\n        return TdLib.sendQuery({'@type': 'registerUser', 'first_name': first, 'last_name': last});\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport RippleEffect, {handleMyMouseEvents} from './ripple-effect';\n\n/**\n * Renders a BIG button which is filled with accent color\n */\nexport default class BigHighlightedButton extends React.Component{\n    static propTypes= {\n        /** Fires when the button is clicked */\n        onClick: PropTypes.func,\n        /** The button's content */\n        children: PropTypes.node.isRequired\n    };\n    state= {\n        ripple: {\n            state: 'off'\n        }\n    }\n    constructor() {\n        super();\n        [this.mouseDown, this.mouseUp, this.mouseLeave]= handleMyMouseEvents(this);\n    }\n\n    render () {\n        return (\n            <button \n                className=\"big-highlighted-button\" \n                onClick={this.props.onClick}\n                onMouseDown={this.mouseDown}\n                onMouseUp={this.mouseUp}\n                onMouseLeave={this.mouseLeave}>\n\n                <RippleEffect {...this.state.ripple} color=\"var(--theme-color-activeButtonBgRipple)\"/>\n                <div className=\"content\">\n                    {this.props.children}\n                </div>\n            </button>\n        );\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Renders a beautiful field with a title and underline\n */\nexport default class UnderlinedInput extends React.Component {\n    constructor(args) {\n        super(args);\n\n        this.state= {\n            inactive: false,\n            mouseX: '50%',\n            titleClass: this.getTitleClass(this.props.autoFocus)\n        };\n    }\n\n    getTitleClass (focus) {\n        return (focus || (!!this.props.value)) ? 'title top' : 'title placeholder';\n    }\n\n    render () {\n        var className='underlined-input';\n        if(this.state.inactive) {\n            className+=' inactive';\n        }\n        if(this.props.autoFocus) {\n            className+=' autoFocus';\n        }\n        if(this.props.invalid) {\n            className+=' invalid';\n        }\n        return (\n            <div className={className}\n                style={{'--mouse-left': this.state.mouseX || '50%'}}>\n                { this.props.title ? (\n                    <div className={this.state.titleClass}>{this.props.title}</div>\n                ) : null }\n                <input \n                    ref={this.props.iRef}\n                    type={this.props.type} \n                    onChange={this.props.onChange} \n                    value={this.props.value}\n                    onMouseDown={this.handleMouseDown}\n                    onFocus={this.handleFocus}\n                    onBlur={this.handleBlur}\n                    autoFocus={this.props.autoFocus || false}\n                    onKeyDown={this.handleKeyDown}\n                    maxLength={this.props.maxLength}\n                    onCopy={e=> {\n                        if(this.props.disableCopy) {\n                            e.preventDefault();\n                        }\n                    }}/>\n                <div className=\"underline\"></div>\n            </div>\n        );\n    }\n\n    handleFocus =()=>{\n        this.setState({\n            inactive: false,\n            titleClass: this.getTitleClass(true)\n        });\n    }\n    handleBlur =()=>{\n        this.setState({\n            inactive: true, \n            mouseX: '50%',\n            titleClass: this.getTitleClass(false)\n        });\n    }\n    handleMouseDown =(e)=>{\n        this.setState({\n            mouseX: e.nativeEvent.offsetX+'px'\n        });\n    }\n    handleKeyDown =(e)=>{\n        this.props.onKeyDown?.(e);\n        if(e.key=='Enter') {\n            this.props.onEnterKeyPressed && this.props.onEnterKeyPressed();\n        }\n        if(this.props.preventNumberScrolling) {\n            if(e.key=='ArrowUp' || e.key=='ArrowDown') {\n                e.preventDefault();\n            }\n        }\n    }\n\n}\nUnderlinedInput.propTypes = {\n    /** Input type, can be `text`, `number`, `tel`, `password`, `email`, `url` */\n    type: PropTypes.oneOf(['text', 'number', 'tel', 'password', 'email', 'url']).isRequired,\n    /** Fired when input is modified */\n    onChange: PropTypes.func,\n    /** Input value */\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    /** The maximum number of characters the input can have */\n    maxLength: PropTypes.number,\n    active: PropTypes.bool,\n    /** If set to true, the input will gain focus when it renders */\n    autoFocus: PropTypes.bool,\n    /** Fires when the 'Enter' key is pressed */\n    onEnterKeyPressed: PropTypes.func,\n    /** Input title/placeholder */\n    title: PropTypes.string,\n    /** If true, the input will become red */\n    invalid: PropTypes.bool,\n    /** If true, text cannot be copied from the input */\n    disableCopy: PropTypes.bool,\n    /** If true, up and down buttons cannot change input value */\n    preventNumberScrolling: PropTypes.bool,\n    /** `<input>` React ref */\n    iRef: PropTypes.object,\n    /** Fires when a key is pushed down while the element is in focus. */\n    onKeyDown: PropTypes.func\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Dialog from '../../../ui/dialog/dialog';\nimport SmallButton from '../../../ui/elements/small-button';\nimport ScrollView from '../../../ui/scroll/scrollbar';\nimport './country-select.scss';\nimport RippleEffect, { handleMyMouseEventsFunction } from '../../../ui/elements/ripple-effect';\nimport BoxSearch from '../../../ui/dialog/search';\nimport __ from '../../../language-pack/language-pack';\n\nexport default function CountrySelect({onChange, id, countries}) {\n    const ref = React.useRef();\n    \n    const [search, setSearch] = React.useState('');\n    if(search.length > 0) {\n        countries = countries.filter(country => country.name.toLowerCase().startsWith(search.toLowerCase()));\n    }\n\n    return (\n        <Dialog ref={ref} id={id} width=\"320px\" className=\"confirm-dialog\">\n            <h1>{__('lng_country_select')}</h1>\n\n            <BoxSearch value={search} onChange={(e) => setSearch(e.target.value)} />\n\n            <ScrollView scrollAlwaysVisible>\n                {countries.map(country => (country.is_hidden? null: (\n                    <CountrySelectItem key={country.country_code} country={country} onClick={ ()=>{\n                        onChange?.('+' + country.calling_codes[0]);\n                        ref.current.close();\n                    }}/>\n                )))}\n            </ScrollView>\n\n            <div className=\"options\">\n                <SmallButton onClick={()=> {ref.current.close();}}>{__('lng_close')}</SmallButton>\n            </div>\n        </Dialog>\n    );\n}\nCountrySelect.propTypes = {\n    onChange: PropTypes.func,\n    id: PropTypes.string.isRequired,\n    countries: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport function CountrySelectItem({country, onClick}) {\n    const ripple = React.useState({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave] = handleMyMouseEventsFunction(ripple);\n    return (\n        <div className=\"country-select-item\" onClick={onClick} onMouseDown={mouseDown} onMouseUp={mouseUp} onMouseLeave={mouseLeave}>\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-windowBgRipple)\"/>\n            <div className=\"content\">\n                <span className=\"name\">{country.english_name}</span>\n                <span className=\"codes\">{country.calling_codes.map(c=> '+' + c).join(', ')}</span>\n            </div>\n        </div>\n    );\n}\nCountrySelectItem.propTypes = {\n    country: PropTypes.object.isRequired,\n    onClick: PropTypes.func,\n};\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport Auth from '../../../TdWeb/auth';\nimport connectionStore from '../../../TdWeb/connectionStore';\nimport ConfirmDialog from '../../../ui/dialog/confirm-dialog';\nimport { addDialog } from '../../../ui/dialog/dialogs';\nimport BigHighlightedButton from '../../../ui/elements/highlighted-button';\nimport UnderlinedInput from '../../../ui/elements/underlined-input';\nimport { manageStatusTextContent } from '../../auth-screen';\nimport ConnectionState from '../../../ui/components/connecting';\nimport callingCodes from './phone-number-calling-codes.json';\nimport './phone-number.scss';\nimport CountrySelect from './country-select';\nimport TdLib from '../../../TdWeb/tdlib';\nimport { intro_country_dropdown } from '../../../ui/icon/icons';\nimport __ from '../../../language-pack/language-pack';\n\n/**\n * Renders the phone number step of authorization screen\n */\nexport default class AuthWindowStepPhoneNumber extends React.Component {\n    constructor(args) {\n        super(args);\n        manageStatusTextContent(this);\n    }\n    state= {\n        number: '',\n        number_p: '+',\n        invalid: false,\n        statusContent: '',\n        statusVisible: false,\n        dropDownText: '',\n        countries: [],\n    };\n\n    ref1= React.createRef();\n    ref2= React.createRef();\n\n    componentDidMount() {\n        TdLib.sendQuery({\n            '@type': 'getCountries',\n        }).then(result => {\n            this.setState({\n                countries: result.countries,\n            });\n        });\n    }\n\n\n    handlePNFieldChange = (event) => {\n        const value = event.target.value.replace(/[^0-9-]/g, '');\n        this.setState({\n            number: value,\n            invalid: false // We shouldn't show the phone number as invalid, since it has changed after submission\n        });\n        this.changeStatus(''); // The same\n    }\n\n    openCountryDropdown = () => {\n        addDialog('login-phone-number-country-selector-dialog', (\n            <CountrySelect id=\"login-phone-number-country-selector-dialog\"\n                countries={this.state.countries} onChange={cc=> {\n                    this.setState({\n                        number_p: cc,\n                        dropDownText: this.getCountryDropdownText(cc),\n                    });\n                }}/>\n        ));\n    }\n\n    getCountryDropdownText(callingCode) {\n        var countryName= __('lng_bad_country_code');\n        if(callingCode == '+') {\n            countryName= __('lng_country_code');\n        }\n        for(let country of callingCodes) {\n            if( callingCode.substr(1) == country.callingCode) {\n                countryName = country.name;\n                break;\n            }\n        }\n        return countryName;\n    }\n\n    handlePNFieldChange_p = (event) => {\n        var value = '+' + event.target.value.replace(/[^0-9-]/g, '');\n\n        if(value.length > 5) {\n            let length = 1;\n            for(let country of callingCodes) {\n                if(value.startsWith(country.callingCode, 1)) {\n                    length = country.callingCode.length+1;\n                    break;\n                }\n            }\n\n            let value_new = value.substr(0, length);\n            let rest= value.substr(length);\n\n            this.setState({\n                number_p: value_new,\n                number: rest + this.state.number,\n                invalid: false,\n                dropDownText: this.getCountryDropdownText(value_new)\n            });\n            this.ref2.current.focus();\n        }\n        else {\n            this.setState({\n                number_p: value,\n                dropDownText: this.getCountryDropdownText(value)\n            });\n        }\n\n        this.changeStatus('');\n    }\n\n    /** @param {React.SyntheticEvent<HTMLInputElement>} e */\n    handleKeyDown = (e) => { // Focus the previous field when the user presses the backspace key\n        if(e.nativeEvent.key === 'Backspace') {\n            if(this.state.number.length === 0) {\n                this.ref1.current.focus();\n            }\n        }\n    }\n\n    submitNumber= async () => {\n        const number = this.state.number_p + ' ' + this.state.number;\n        Auth.givePhoneNumber(number).catch(reason=> {\n            switch(reason.message){\n            case 'PHONE_NUMBER_FLOOD':\n                addDialog( 'phone_number_flood_error',\n                    <ConfirmDialog width=\"320px\" hideCancelButton={true} largeFont={true} id=\"phone_number_flood_error\">\n                        {__('lng_error_phone_flood')}\n                    </ConfirmDialog>\n                );\n                this.changeStatus('');\n                break;\n\n            case 'PHONE_NUMBER_INVALID':\n                this.setState({invalid: true});\n                this.changeStatus(__('lng_bad_phone'));\n                break;\n\n            case 'Another authorization query has started': \n                break;\n\n            default:\n                // We don't know what error it is, so just show it to the user, he/she might understand it.\n                this.setState({invalid: false});\n                this.changeStatus(reason.message);\n                break;\n            }\n        });\n    }\n    render () {\n        const Status=this.Status;\n        return (\n            <div id=\"auth\" className=\"auth-step-phoneNumber\">\n\n                <h2>{__('lng_phone_title')}</h2>\n\n                <p className=\"description\">\n                    {__('lng_phone_desc')}\n                </p>\n\n                {//TODO: Add phone number placeholder\n                }\n\n                <div className=\"country-dropdown\" onClick={this.openCountryDropdown}>\n                    {this.state.dropDownText || __('lng_country_code')}\n                    <span dangerouslySetInnerHTML={{__html: intro_country_dropdown}}/>\n                </div>\n\n                <div className=\"phone-number-input\">\n                    <UnderlinedInput\n                        iRef={this.ref1}\n                        type=\"tel\" \n                        value={this.state.number_p} \n                        autoFocus={true}\n                        onChange={this.handlePNFieldChange_p}\n                        onEnterKeyPressed={this.submitNumber}\n                        preventNumberScrolling={false}/>\n                    \n                    <UnderlinedInput\n                        iRef={this.ref2}\n                        type=\"tel\" \n                        value={this.state.number} \n                        onChange={this.handlePNFieldChange}\n                        onEnterKeyPressed={this.submitNumber}\n                        invalid={this.state.invalid}\n                        preventNumberScrolling={false}\n                        onKeyDown={this.handleKeyDown}/>\n                </div>\n\n                <Status/>\n\n                <BigHighlightedButton\n                    onClick={this.submitNumber}>\n                    {__('lng_intro_next')}\n                </BigHighlightedButton>\n\n                <Provider store={connectionStore}>\n                    <ConnectionState/>\n                </Provider>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { manageStatusTextContent } from '../../auth-screen';\nimport Auth from '../../../TdWeb/auth';\nimport UnderlinedInput from '../../../ui/elements/underlined-input';\nimport BigHighlightedButton from '../../../ui/elements/highlighted-button';\nimport { Provider } from 'react-redux';\nimport connectionStore from '../../../TdWeb/connectionStore';\nimport ConnectionState from '../../../ui/components/connecting';\nimport './verification-code.scss';\nimport __ from '../../../language-pack/language-pack';\n\n/**\n * Renders verification code step of authorization screen\n */\nexport default class AuthWindowStepCode extends React.Component {\n    static propTypes= {\n        info: PropTypes.object\n    };\n    constructor(args) {\n        super(args);\n        manageStatusTextContent(this);\n    }\n    state= {\n        code: '',\n        invalid: false,\n        statusContent: '',\n        statusVisible: false\n    };\n\n    handleCodeFieldChange= (event) => {\n        this.setState({\n            code: event.target.value,\n            invalid: false // Verification code is changed, and we don't know if it is correct or not. Do not show it as invalid anymore\n        });\n        this.changeStatus('');\n        if(event.target.value.length==this.props.info.type.length) { // Automatically submit code if it is filled in\n            this.handleContinueButton(event.target.value);\n        }\n    }\n    handleContinueButton= (code) => {\n        // `code` might be the authorization code, or an event object. If it is not the authorization code, get it ourselves\n        if(typeof code != 'string') {\n            code= undefined;\n        }\n        code = code || this.state.code;\n\n        if(code.length!=this.props.info.type.length) return; // The code is not complete. It is definitely wrong.\n\n        Auth.checkAuthCode(code).catch(reason=> {\n            if(reason.message==='PHONE_CODE_INVALID'){\n                this.setState({invalid: true});\n                this.changeStatus(__('lng_bad_code'));\n            }\n            else {\n                // We don't know the error, all we can do is to just inform the user about it\n                this.setState({invalid: true});\n                this.changeStatus(reason.message);\n            }\n        });\n    }\n    render () {\n        const Status = this.Status;\n\n        var message= (this.props.info.type['@type']=='authenticationCodeTypeSms') ?\n            (<p className=\"description\">{__('lng_code_desc')}</p>) \n            :\n            (<p className=\"description\">{__('lng_code_from_telegram')}</p>);\n            \n        return (\n            <div id=\"auth\" className=\"auth-step-code\">\n\n                <h2>{this.props.info.phone_number}</h2>\n\n                {message}\n\n                <UnderlinedInput\n                    type=\"number\" \n                    value={this.state.code} \n                    onChange={this.handleCodeFieldChange}\n                    autoFocus={true}\n                    title={__('lng_code_ph')}\n                    maxLength={this.props.info.type.length}\n                    onEnterKeyPressed={this.handleContinueButton}\n                    invalid={this.state.invalid}\n                    preventNumberScrolling={true}/>\n\n                <Status/>\n\n                <BigHighlightedButton\n                    onClick={this.handleContinueButton}>\n                    {__('lng_intro_next')}\n                </BigHighlightedButton>\n\n                <Provider store={connectionStore}>\n                    <ConnectionState/>\n                </Provider>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { manageStatusTextContent } from '../../auth-screen';\nimport Auth from '../../../TdWeb/auth';\nimport UnderlinedInput from '../../../ui/elements/underlined-input';\nimport LinkButton from '../../../ui/elements/link-button';\nimport BigHighlightedButton from '../../../ui/elements/highlighted-button';\nimport { Provider } from 'react-redux';\nimport connectionStore from '../../../TdWeb/connectionStore';\nimport ConnectionState from '../../../ui/components/connecting';\nimport './cloud-password.scss';\nimport __, { __fmt } from '../../../language-pack/language-pack';\n\n\n/**\n * Renders 2FA password step of authorization screen\n */\nexport default class AuthWindowStepPassword extends React.Component {\n    constructor(args) {\n        super(args);\n        manageStatusTextContent(this);\n    }\n    static propTypes= {\n        info: PropTypes.object\n    };\n    state= {\n        password: '',\n        invalid: false,\n        statusContent: '',\n        statusVisible: false\n    };\n    handlePasswordFieldChange= (event) => {\n        this.setState({\n            password: event.target.value,\n            invalid: false, // Password was changed, and we don't know if it is wrong or not. We should not show it as wrong\n        });\n        this.changeStatus(''); // Same\n    }\n    handleContinueButton= async () => {\n        Auth.check2FACode(this.state.password).catch(reason=> {\n            if(reason.message=='PASSWORD_HASH_INVALID') {\n                this.setState({invalid: true});\n                this.changeStatus(__('auth.password.wrong_password'));\n            }\n            else {\n                // We don't know what the error is, so all we can do is to show it to the user\n                this.setState({invalid: true});\n                this.changeStatus(reason.message);\n            }\n        });\n    }\n    render () {\n        const Status=this.Status;\n        return (\n            <div id=\"auth\" className=\"auth-step-password\">\n                <div className=\"content\">\n\n                    <h2>{__('lng_signin_title')}</h2>\n\n                    <p className=\"description\">{__('lng_signin_desc')}</p>\n\n                    <UnderlinedInput\n                        type=\"password\"\n                        value={this.state.password} \n                        onChange={this.handlePasswordFieldChange}\n                        autoFocus={true} \n                        title={__('lng_signin_password')}\n                        onEnterKeyPressed={this.handleContinueButton}\n                        disableCopy={true}\n                        invalid={this.state.invalid}/>\n\n                    <div className=\"hint\">\n                        {this.props.info.password_hint?__fmt('lng_signin_hint', {paddword_hint: this.props.info.password_hint}):<span>&nbsp;</span>}\n                    </div>\n\n                    <div className=\"forgot-password\">\n                        <LinkButton>{__('lng_signin_recover')}</LinkButton>\n                    </div>\n\n                    <Status/>\n\n                    <BigHighlightedButton \n                        onClick={this.handleContinueButton}>\n                        {__('lng_intro_submit')}\n                    </BigHighlightedButton>\n\n                </div>\n                <Provider store={connectionStore}>\n                    <ConnectionState/>\n                </Provider>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types'; \nimport RippleEffect, { handleMyMouseEventsFunction } from '../../../ui/elements/ripple-effect';\nimport { new_chat_photo } from '../../../ui/icon/icons';\nimport './signup-profile-photo.scss';\nimport { blobToUrl } from '../../../TdWeb/file';\n\nexport default function SignUpProfilePic({image, onChange}) {\n    const ripple= React.useState({state: 'off'});\n    const [onMouseDown, onMouseUp, onMouseLeave]= handleMyMouseEventsFunction(ripple);\n    return (\n        <div className={'icon-button sign-up-profile-pic' + (image? ' has-image' : '')} \n            {...{onMouseDown, onMouseUp, onMouseLeave}}>\n\n            {image && <img src={blobToUrl(image)} alt=\"profile\"/>}\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-activeButtonBgRipple)\" small={true}/>\n            <span dangerouslySetInnerHTML={{__html: new_chat_photo}} />\n            <label>\n                <input type=\"file\" accept=\"image/*\" onChange={onChange} />\n            </label>\n        </div>\n    );\n}\nSignUpProfilePic.propTypes = {\n    image: PropTypes.instanceOf(Blob),\n    onChange: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Provider } from 'react-redux';\nimport Auth from '../../../TdWeb/auth';\nimport connectionStore from '../../../TdWeb/connectionStore';\nimport ConfirmDialog from '../../../ui/dialog/confirm-dialog';\nimport { addDialog } from '../../../ui/dialog/dialogs';\nimport BigHighlightedButton from '../../../ui/elements/highlighted-button';\nimport UnderlinedInput from '../../../ui/elements/underlined-input';\nimport ConnectionState from '../../../ui/components/connecting';\nimport TdLib from '../../../TdWeb/tdlib';\nimport LinkButton from '../../../ui/elements/link-button';\nimport SignUpProfilePic from './signup-profile-photo';\nimport './register.scss';\nimport __, { __fmt } from '../../../language-pack/language-pack';\n\n/**\n * Render sign up step of authorization screen\n */\nexport default class AuthWindowStepRegister extends React.Component {\n    static propTypes= {\n        tos: PropTypes.object,\n    }\n    \n    state= {\n        firstName: '',\n        lastName: '',\n        statusContent: '',\n        statusVisible: false,\n        image: null,\n    };\n    handleFirstNameFieldChange= (event) => {\n        this.setState({firstName: event.target.value});\n    }\n    handleLastNameFieldChange= (event) => {\n        this.setState({lastName: event.target.value});\n    }\n    handleContinueButton= () => {\n        Auth.registerNewAccount(this.state.firstName, this.state.lastName).catch(reason=> {\n            this.setState({textUnderField: reason.message});\n        }).then(()=> {\n            if(this.state.image) {\n                TdLib.sendQuery({\n                    '@type': 'setProfilePhoto',\n                    photo: {\n                        '@type': 'inputChatPhotoStatic',\n                        photo: {\n                            '@type': 'inputFileBlob',\n                            data: this.state.image,\n                        }\n                    }\n                });\n            }\n        });\n    }\n\n    showTos= () => {\n        addDialog('signup-tos-dialog', (\n            <ConfirmDialog id=\"signup-tos-dialog\" width=\"364px\"\n                hideCancelButton={true} title={__('lng_terms_header')}>\n                \n                {this.props.tos.text.text}\n            </ConfirmDialog>\n        ));\n    }\n\n    render () {\n        return (\n            <div className=\"auth-container\">\n                <div id=\"auth\" className=\"auth-step-signup\">\n                    <div className=\"content\">\n\n                        <h2>{__('lng_signup_title')}</h2>\n\n                        <p className=\"description\">{__('lng_signup_desc')}</p>\n\n                        <SignUpProfilePic image={this.state.image} onChange={e=> this.setState({\n                            image: e.target.files[0]\n                        })}/>\n\n                        <UnderlinedInput\n                            type=\"text\" \n                            title={__('lng_signup_firstname')}\n                            value={this.state.firstName} \n                            onChange={this.handleFirstNameFieldChange}\n                            autoFocus={true} />\n\n                        <UnderlinedInput \n                            type=\"text\" \n                            title={__('lng_signup_lastname')}\n                            value={this.state.lastName} \n                            onChange={this.handleLastNameFieldChange} />\n\n                        <div className=\"status\">\n                            {this.state.textUnderField || ''}\n                        </div>\n\n                        <BigHighlightedButton\n                            onClick={this.handleContinueButton}>\n                            {__('lng_intro_finish')}\n                        </BigHighlightedButton>\n\n                    </div>\n                    <Provider store={connectionStore}>\n                        <ConnectionState/>\n                    </Provider>\n                </div>\n                <div className=\"tos-notice\">\n                    {__fmt('lng_terms_signup', {link: <LinkButton onClick={this.showTos}>{__('lng_terms_signup_link')}</LinkButton>})} \n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TdLib from '../TdWeb/tdlib';\nimport {MessengerWindow} from '../messenger/messengerWindow';\nimport Dialogs, { dialogStore } from '../ui/dialog/dialogs';\nimport './auth.scss';\nimport { connect, Provider } from 'react-redux';\nimport AuthWindowStepPhoneNumber from './auth-step/phone-number/phone-number';\nimport AuthWindowStepCode from './auth-step/verification-code/verification-code';\nimport AuthWindowStepPassword from './auth-step/cloud-password/cloud-password';\nimport AuthWindowStepRegister from './auth-step/register/register';\nimport { createStore } from 'redux';\nimport { themeStore } from '../ui/themes/theme';\n\nexport const authStore = createStore((state= { 'state': null }, action) => {\n    switch (action.type) {\n    case 'SET_STATE':\n        return {\n            ...state,\n            'state': action.state\n        };\n    default:\n        return state;\n    }\n});\n\n/**\n * Start managing a status text block with fade effects.  \n * Usage:\n * ```js\n * // constructor\n * manageStatusTextContent(this);\n * \n * // render\n * <Status/>\n * \n * // TdLib.sendQuery({...}).then\n * this.changeStatus(\"Wrong code\")\n * \n * // state\n * {\n *   statusContent: '',\n *   statusVisible: false\n * }\n * ```\n * \n * @param {React.Component} thisClass pass `this` as this argument\n * @returns Store this function and call it to change \n */\nexport function manageStatusTextContent(thisClass) {\n    thisClass.Status= function Status(){\n        return (\n            <div className={'status'+ (thisClass.state.statusVisible?'':' hidden')}>{thisClass.state.statusContent}</div>\n        );\n    };\n    thisClass.changeStatus= function(string){\n        if(string) {\n            thisClass.setState({\n                statusContent: string,\n                statusVisible: true\n            });\n        } else {\n            thisClass.setState({\n                statusVisible: false\n            });\n            setTimeout(() => {\n                if(!thisClass.state.statusVisible) { // Prevent timeout overlapping with later status changes\n                    thisClass.setState({\n                        statusContent: null\n                    });\n                }\n            }, 1000);\n        }\n    };\n}\n\n/**\n * Renders the messenger or authorization screens (layer 1). Does not include dialogs and toasts\n */\nexport const MainApp= connect(state=> ({step: state.state}))(class MainApp extends React.Component {\n    static propTypes = {\n        step: PropTypes.object\n    };\n\n    componentDidMount(){\n        // Handle authorization state updates\n        TdLib.registerUpdateHandler('updateAuthorizationState', (update) => {\n            authStore.dispatch({\n                type: 'SET_STATE',\n                state: update.authorization_state\n            });\n        });\n    }\n\n    shouldComponentUpdate(nextProps) {\n        // Some authorization states are handled without the user knowing. We don't change what's shown to the users if that happens.\n        const states= [\n            'authorizationStateWaitPhoneNumber',\n            'authorizationStateWaitCode',\n            'authorizationStateWaitPassword',\n            'authorizationStateWaitRegistration',\n            'authorizationStateReady',\n            'authorizationStateClosed',\n        ];\n        if(states.includes(nextProps.step['@type'])) {\n            return true;\n        }\n        return false;\n    }\n    \n    render () {\n        switch (this.props.step?.['@type']) {\n        case 'authorizationStateWaitPhoneNumber':\n            // Enter your phone number\n            return (\n                <React.Fragment>\n                    <Provider store={dialogStore}>\n                        <Dialogs/>\n                    </Provider>\n                    <AuthWindowStepPhoneNumber/>\n                </React.Fragment>\n            );\n\n        case 'authorizationStateWaitCode':\n            // Enter the verification code sent to you\n            return (\n                <React.Fragment>\n                    <Provider store={dialogStore}>\n                        <Dialogs/>\n                    </Provider>\n                    <AuthWindowStepCode info={this.props.step.code_info}/>\n                </React.Fragment>\n            );\n\n        case 'authorizationStateWaitPassword':\n            // Enter your 2-factor auth password\n            return (\n                <React.Fragment>\n                    <Provider store={dialogStore}>\n                        <Dialogs/>\n                    </Provider>\n                    <AuthWindowStepPassword info={this.props.step}/>\n                </React.Fragment>\n            );\n\n        case 'authorizationStateWaitRegistration':\n            // There isn't an account on this number, you need to sign up\n            return (\n                <React.Fragment>\n                    <Provider store={dialogStore}>\n                        <Dialogs/>\n                    </Provider>\n                    <AuthWindowStepRegister tos={this.props.step.terms_of_service}/>\n                </React.Fragment>\n            );\n\n        case 'authorizationStateReady':\n            // Logged in\n            return (\n                <Provider store={themeStore}>\n                    <MessengerWindow/>\n                </Provider>\n            );\n\n        case 'authorizationStateClosed':\n            // TDLib session is closed.\n            window.location.reload();\n            return (\n                <p>This session is closed. Please wait till DIBgram reloads automatically...</p>\n            );\n        \n        default:\n            // TDLib is still loading\n            return <p>Loading...</p>;\n        }\n    }\n});\n","import TdLib from './tdlib';\n\n/**\n * Sets initial online state\n */\nexport default function setInitialOnlineStatus(){\n    TdLib.sendQuery({\n        '@type': 'setOption',\n        name: 'online',\n        value: {\n            '@type': 'optionValueBoolean',\n            value: document.hasFocus()\n        }\n    });\n}\n\nwindow.onfocus = () => { // Become online when tab/window focuses\n    TdLib.sendQuery({\n        '@type': 'setOption',\n        name: 'online',\n        value: {\n            '@type': 'optionValueBoolean',\n            value: true\n        }\n    });\n};\n\nwindow.onblur = () => { // Become offline when switching tabs/windows\n    TdLib.sendQuery({\n        '@type': 'setOption',\n        name: 'online',\n        value: {\n            '@type': 'optionValueBoolean',\n            value: false\n        }\n    });\n};","import React from 'react';\nimport { Provider } from 'react-redux';\nimport {authStore, MainApp} from './dibgram/auth/auth-screen';\nimport { initLanguagePack } from './dibgram/language-pack/language-pack';\nimport setInitialOnlineStatus from './dibgram/TdWeb/online-handler';\nimport TdLib from './dibgram/TdWeb/tdlib';\nimport ConfirmDialog from './dibgram/ui/dialog/confirm-dialog';\nimport {addDialog} from './dibgram/ui/dialog/dialogs';\nimport { toastStore, Toasts } from './dibgram/ui/dialog/toast';\nimport './dibgram/ui/main.scss';\nimport { ContextMenus, contextMenusStore } from './dibgram/ui/menu/context-menu';\nimport { ThemeProvider, themeStore } from './dibgram/ui/themes/theme';\n\nTdLib.initializeTdLib().then(function () {\n    setInitialOnlineStatus();\n    initLanguagePack();\n});\n\nif(process.env.NODE_ENV== 'development') {\n    window['sendQuery']= TdLib.sendQuery;\n}\n\n/**\n * Renders the whole React app\n */\nfunction App() {\n    React.useEffect(() => { // A fatal error occurred in TdLib\n        TdLib.registerUpdateHandler('updateFatalError', window.simulateFatalError=  function (update) {\n            console.error('Fatal error:', update.error);\n            \n            addDialog( 'tdlib_fatal_error',\n                <ConfirmDialog \n                    width=\"400px\" \n                    hideCancelButton={true} \n                    id=\"tdlib_fatal_error\" \n                    thirdButton=\"Refresh\"\n                    onThirdButtonClick={window.location.reload.bind(window.location)}\n                    thirdButtonClosesDialog={false}\n                    title=\"Fatal Error\">\n                    \n                    A fatal error occurred in TdLib.<br/> \n                    Try refreshing, clearing site data or opening \n                    DIBgram in a private window. <br/>\n                    If none of these helped, report this to the developers \n                    by <a href=\"https://github.com/DIBgram/DIBgram/issues/new/choose\" rel=\"noreferrer\" target=\"_blank\"\n                        style={{color: 'var(--theme-color-windowActiveTextFg)'}}>filing an issue.</a>\n                    <br/><br/>\n                    <pre>{update.error.toString()}</pre>\n                </ConfirmDialog>\n            );\n        });\n    }, []);\n\n    return (\n        <Provider store={themeStore}>\n            <ThemeProvider id=\"app\">\n                <Provider store={toastStore}>\n                    <Toasts/>\n                </Provider>\n                <Provider store={authStore}>\n                    <MainApp/>\n                </Provider>\n                <Provider store={contextMenusStore}>\n                    <ContextMenus/>\n                </Provider>\n            </ThemeProvider>\n        </Provider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\n/* eslint-disable indent */\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import './remove-item-from-array';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}