{"version":3,"sources":["dibgram/language-pack/special-strings lazy /^/.//.*/.json$/ groupOptions: {} namespace object","remove-item-from-array.js","dibgram/TdWeb/tdlib.ts","dibgram/TdWeb/tdweb.js","dibgram/TdWeb/config.js","dibgram/ui/icon/chat_filters/chat-filters.js","dibgram/ui/elements/ripple-effect.js","dibgram/ui/elements/icon-button.js","dibgram/ui/icon/icons.js","dibgram/messenger/sections/navigation-menu/hamburger-menu/menu-button.js","dibgram/messenger/message-stores.ts","dibgram/messenger/message/chat-history.ts","dibgram/messenger/chat-store.js","dibgram/ui/scroll/scrollbar.js","dibgram/language-pack/string-format.js","dibgram/language-pack/language-pack.js","dibgram/messenger/sections/navigation-menu/chat-folders.js","dibgram/ui/elements/loading-spinner.js","dibgram/ui/components/connecting.js","dibgram/messenger/users-store.js","dibgram/ui/elements/link-button.js","dibgram/messenger/supergroup-store.js","dibgram/messenger/chat-misc.js","dibgram/ui/menu/context-menu.js","dibgram/ui/menu/menu.js","dibgram/ui/dialog/toast.js","dibgram/TdWeb/options.js","dibgram/messenger/message-misc.js","dibgram/TdWeb/file.js","dibgram/ui/img/TgLogo.png","dibgram/ui/components/profile-photo.js","dibgram/time-tostring.js","dibgram/messenger/sections/payments/currency-tostring.js","dibgram/messenger/user-misc.js","dibgram/messenger/message/message-pinned-message.js","dibgram/messenger/message/message-summary-noicon.js","dibgram/ui/dialog/dialogs.js","dibgram/ui/elements/small-button.js","dibgram/ui/dialog/dialog.js","dibgram/ui/dialog/confirm-dialog.js","dibgram/messenger/sections/navigation-menu/chat-list-item.js","dibgram/messenger/sections/navigation-menu/chat-list.js","dibgram/messenger/sections/navigation-menu/search/search-box.js","dibgram/TdWeb/connectionStore.js","dibgram/ui/elements/nav-animation.js","dibgram/messenger/sections/navigation-menu/chat-list-bar.js","version.js","dibgram/ui/tool-strip/button.js","dibgram/ui/tool-strip/tool-strip.js","dibgram/ui/tool-strip/section.js","dibgram/ui/tool-strip/toggle-button.js","dibgram/ui/tool-strip/separator.js","dibgram/ui/themes/dibgram-theme-to-css.js","dibgram/ui/themes/theme.js","dibgram/ui/menu/three-dots-menu.js","dibgram/ui/dialog/search.js","dibgram/messenger/sections/settings/choose-language.js","dibgram/messenger/sections/settings/advanced/advanced.js","dibgram/messenger/sections/settings/settings-dialog.js","dibgram/messenger/sections/navigation-menu/hamburger-menu/menu.js","dibgram/messenger/message/ui/message-containers.tsx","dibgram/messenger/sections/chat/headers/title.js","dibgram/messenger/basic-group-store.js","dibgram/messenger/sections/chat/footer/footer.js","dibgram/messenger/message/ui/types/messageText.tsx","dibgram/messenger/users-wrapper.js","dibgram/messenger/message/ui/types/messageUnsupported.tsx","dibgram/messenger/message/ui/message.tsx","dibgram/messenger/sections/chat/history/history.js","dibgram/messenger/sections/chat/chat-section.js","dibgram/messenger/messengerWindow.js","dibgram/TdWeb/auth.js","dibgram/ui/elements/highlighted-button.js","dibgram/ui/elements/underlined-input.js","dibgram/auth/auth-step/phone-number/country-select.js","dibgram/auth/auth-step/phone-number/phone-number.js","dibgram/auth/auth-step/verification-code/verification-code.js","dibgram/auth/auth-step/cloud-password/cloud-password.js","dibgram/auth/auth-step/register/signup-profile-photo.js","dibgram/auth/auth-step/register/register.js","dibgram/auth/auth-screen.js","dibgram/TdWeb/online-handler.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","t","keys","Object","module","exports","removeItemFromArray","item","i","this","length","splice","Array","prototype","remove","getUseTestDc","urlPar","URL","window","location","href","searchParams","get","TdLib","op","log","use_test_dc","log_updates","log_queries","useDatabase","instanceName","onUpdate","update","console","forEach","h","TdClient","sendQuery","type","handler","undefined","push","call","query","reject","send","result","error","warn","chatFilerIcons","All","Bots","Channels","Custom","Groups","Private","Setup","Unread","Cat","Crown","Favorite","Flower","Game","Home","Love","Mask","Party","Sport","Study","Trade","Travel","Work","RippleEffect","props","small","X","Y","width","rX","rY","height","Math","hypot","abs","max","state","className","style","getMaxRadius","backgroundColor","color","React","Component","getRelativeCoordinates","event","rect","target","getBoundingClientRect","clientX","left","clientY","top","handleMyMouseEvents","This","ripple","setState","setTimeout","clientWidth","clientHeight","bind","mouseUp","handleMyMouseEventsFunction","setRipple","up","nativeEvent","offsetX","offsetY","IconButton","icon","rest","useState","onMouseDown","onMouseUp","onMouseLeave","dangerouslySetInnerHTML","__html","archive_userpic","dialogs_sending","info_back","info_close","HamburgerMenuButton","WithFolders","mouseDown","mouseLeave","onClick","PureComponent","WithoutFolders","reducer","messages","isLoaded","action","message","messageId","messageIds","includes","Number","reduce","messageStores","loadChatHistory","chatId","fromMessageId","limit","chat_id","from_message_id","dispatch","total_count","registerUpdateHandler","old_message_id","message_ids","message_id","content","new_content","edit_date","reply_markup","is_pinned","interaction_info","chatStore","createStore","currentChatList","archiveState","archiveButtonState","localStorage","getItem","chats","filters","selectedChat","unread","main","archive","chatList","chat_list","unread_messages_count","unread_count","unread_unmuted_messages_count","unread_unmuted_count","chat_filter_id","total_chats_count","unread_chats_count","unread_unmuted_chats_count","marked_as_unread_chats_count","marked_as_unread_count","marked_as_unread_unmuted_chats_count","marked_as_unread_unmuted_count","chat","changed","newChat","positions","position","compareChatList","list","payload","property","value","__REDUX_DEVTOOLS_EXTENSION__","action_bar","default_disable_notification","draft_message","chat_filters","has_scheduled_messages","is_blocked","is_marked_as_unread","last_message","message_ttl_setting","notification_settings","online_member_count","permissions","photo","last_read_inbox_message_id","last_read_outbox_message_id","reply_markup_message_id","theme_name","title","unread_mention_count","pending_join_requests","video_chat","list1","list2","getChatNoCache","getState","ScrollView","scrollBarWidth","scrollRef","scrollAlwaysVisible","propsRest","mouseEntered","setMouseEntered","timeoutId","setTimeoutId","data-mouse-entered","renderTrackHorizontal","renderTrackVertical","renderThumbHorizontal","renderThumbVertical","onMouseEnter","clearTimeout","autoHide","data-auto-hide","autoHideTimeout","hideTracksWhenNotNeeded","ref","applyKeys","index","Fragment","getFormattedText","text","formatted","applyFormatting","format","res","indexOf","substr","execed","exec","formatString","params","getCountMode","count","getPluralString","mode","callback","currentLanguagePack","specialStrings","specialStringsEnglish","getCurrentLanguagePack","englishIsDefault","languageInfo","JSON","parse","base_language_pack_id","is_beta","is_installed","is_official","is_rtl","local_string_count","name","native_name","plural_code","total_string_count","translated_string_count","translation_url","getRtlMode","__","key","languagePackString","englishLanguagePack","__fmt","useFragments","__pl","pluralized","pluralizedString","__collection","isInvite","users","usesReact","getLPString","formatLast","user","accumulated","flat","join","_s__","_s__fmt","chatListScrollToTopEvent","ChatFolder","folder","active","icon_name","iconName","setIconName","useEffect","data-muted","connect","folders","currentFolder","onHamburgerMenuOpened","LoadingSpinner","percentage","percent","caps","trackColor","spin","transitionDuration","intervalNum","setInterval","clearInterval","size","PropTypes","number","isRequired","lineWidth","progressColor","string","usersStore","userId","status","user_id","LinkButton","children","click","open","supergroupStore","supergroup","isChatWithDeletedAccount","chatTitleOrDeletedAccount","ContextMenu","x","y","direction","setDirection","hide","setHide","useRef","handleMouseDown","contextMenusStore","current","document","documentElement","classList","contains","menu","ContextMenus","menus","createContextMenu","preventDefault","pageX","pageY","Menu","MenuContents","MenuItem","propTypes","node","Toast","closed","setClosed","addToast","toastStore","toast","Toasts","options","getMessageStatus","is_outgoing","sending_state","downloadFile","file_id","priority","onReject","catch","downloadCallbacks","file","local","is_downloading_completed","cachedFiles","blobToUrl","blob","webkitURL","createObjectURL","profileNameToInitials","words","replace","toUpperCase","split","ProfilePhoto","customIcon","setPhoto","photoObj","setPhotoObj","loaded","setLoaded","isServiceMessages","isSavedMessages","isReplies","mounted","enableCache","data","resolveFilePart","filePart","f","is_downloading_active","getFileContent","disableSavedMessages","tgLogo","Initials","onLoad","src","getIdColorCode","getChatTypeId","supergroup_id","basic_group_id","smallDateTimeToString","date","TdLibDateToDate","now","Date","yesterday","getTime","lastWeek","timeToString","getDay","weekdayToString","day","getDate","month","getMonth","year","String","getFullYear","dateToString","hours","getHours","minutes","getMinutes","ampm","futureDayToString","today","tomorrow","durationToString","duration","floor","tdLibDate","currencyAmountToString","currency","total_amount","currencies","symbol","thousands_sep","decimal_sep","symbol_left","space_between","exp","formattedAmount","toFixed","getUserFullName","first_name","last_name","MessaagePinnedMessage","from","media","emoji","game","poll","question","sticker","MessageSummaryWithoutIcon","MayHaveCaptionThumbnail","caption","thumbnails","animation","minithumbnail","audio","file_name","performer","MayHaveCaption","SenderFullName","discard_reason","is_video","member_user_ids","sender","newMembers","is_channel_post","deletedMember","ServiceMessageIncludingYou","lpString","lpString_you","ttlTimeUnit","86400","604800","2678400","ttl","noGameTitleFallback","score","GameScoreWithTitle","lazy","game_message_id","default","Suspense","fallback","passportDataTypeToString","passportDataTypes","types","toLowerCase","documents","noInvoiceTitleFallback","amount","PaymentInfoWithInvoiceTitle","invoice_chat_id","invoice_message_id","invoice","is_secret","PinnedMessageMessage","venue","isVideo","video","start_date","time","invitedMembers","user_ids","domain","domain_name","includeYou","MessageSummarySender","part1","dialogStore","dialog","filter","addDialog","element","removeDialog","Dialogs","dialogs","data-dialog","el","SmallButton","attention","data-attention","Dialog","closing","createRef","close","ConfirmDialog","dialogRef","handleOK","onOK","handleCancel","onCancel","handleButton","largeFont","thirdButton","thirdButtonClosesDialog","onThirdButtonClick","hideCancelButton","OKButtonText","ChatListItem","openChat","nextProps","nextState","getUser","selected","chatType","is_channel","isVerified","is_verified","isChatVerified","messageStatus","unreadBadge","unreadBadgeClass","mute_for","isOnline","onContextMenu","ChatContextMenu","data-online","input_message_text","Chat","movableChatLists","setMovableChatLists","chat_lists","getChatsFromList","order","sort","a","b","order1","order2","ChatList","connectionState","scrollToTopVisible","chatListFinished","onScroll","visible","scrollTop","scrollToTop","view","scroll","behavior","array","store","EmptyChatList","ArchivedChatsItem","chatsInList","onArchiveOpen","setButtonState","moveToMainMenuToast","setItem","loadingFallBack","SearchBox","placeholder","onChange","data-visible","connectionStore","connection","NavAnimation","innerScreen","innerClass","closeNavAnimation","ChatListBar","useFolders","searchText","setSearchText","ArchiveScreen","closeArchive","ToolStripButton","hideIcon","ToolStrip","Button","Section","ToggleButton","isActive","checked","readOnly","Separator","convertThemeToCSS","theme","css","obj","equals","themes","classic","tinted","night","getThemeFromStorage","matchMedia","matches","themeStore","rtl","ThemeProvider","dir","data-theme-is-dark","isDark","ThreeDotsMenu","setVisible","BoxSearch","ChooseLanguageDialog","languages","setLanguages","search","setSearch","country","startsWith","response","language_packs","currentPack","pack","LanguagePack","specialStringsImport","cache","apply","stringify","reload","language_pack_id","strings","selectLanguage","SettingsAdvanced","onClose","onBack","enableRtl","setEnableRtl","SettingsDialog","navState","setNavState","section","setSection","profile_photo","HamburgerMenu","me","setMe","phone_number","phone_number_prefix","info","country_calling_code","formatted_phone_number","nightMode","setNightMode","focus","showArchivedChats","onKeyDown","tabIndex","newState","isNight","version","tdlib","gpl_link","github_link","faq_link","ServiceMessage","MessageBubble","showTail","BubbleMessage","senderId","MessageFooter","tick","TitleHeader","SubText","group_call_id","can_be_reported","basicGroup","member_count","is_support","lastSeen","was_online","diff","diffMinutes","diffHours","currentDate","lastSeenDate","toLocaleTimeString","toLocaleDateString","lastSeenToString","basicGroupStore","basic_group","ChatFooter","MessageText","messageContent","BubbleMsg","WrappedComponent","withUsers","MessageUnsupported","entities","Message","memo","ChatHistory","ChatSection","c","ChatSectionContentWrapperPrivate","ChatSectionContentWrapper","ChatSectionContentWrapperBasicGroup","basicGroups","ChatSectionContentWrapperSupergroup","supergroups","MessengerWindow","isMenuOpen","setIsMenuOpen","defaultSize","minWidth","handleClasses","right","enable","bottom","topRight","bottomRight","bottomLeft","topLeft","credentials","api_id","api_hash","auth_state","Auth","pass","first","last","BigHighlightedButton","UnderlinedInput","args","handleFocus","inactive","titleClass","getTitleClass","handleBlur","mouseX","handleKeyDown","onEnterKeyPressed","preventNumberScrolling","autoFocus","invalid","iRef","onFocus","onBlur","maxLength","onCopy","disableCopy","CountrySelect","countries","is_hidden","CountrySelectItem","calling_codes","country_code","english_name","AuthWindowStepPhoneNumber","number_p","statusContent","statusVisible","dropDownText","ref1","ref2","handlePNFieldChange","changeStatus","openCountryDropdown","cc","getCountryDropdownText","handlePNFieldChange_p","callingCodes","callingCode","value_new","submitNumber","givePhoneNumber","reason","manageStatusTextContent","countryName","Status","AuthWindowStepCode","handleCodeFieldChange","handleContinueButton","checkAuthCode","AuthWindowStepPassword","password","handlePasswordFieldChange","check2FACode","password_hint","SignUpProfilePic","image","alt","accept","AuthWindowStepRegister","firstName","lastName","handleFirstNameFieldChange","handleLastNameFieldChange","registerNewAccount","textUnderField","showTos","tos","files","link","authStore","thisClass","MainApp","step","authorization_state","code_info","terms_of_service","onfocus","onblur","initializeTdLib","hasFocus","specialStringsCache","initLanguagePack","App","simulateFatalError","rel","toString","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onSuccess","ReactDOM","render","StrictMode","getElementById","process","origin","addEventListener","fetch","headers","contentType","ready","unregister","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"w5mYAAA,IAAIA,EAAM,CACT,YAAa,CACZ,IACA,GAED,YAAa,CACZ,IACA,GAED,YAAa,CACZ,IACA,GAED,YAAa,CACZ,IAED,YAAa,CACZ,IACA,GAED,YAAa,CACZ,IACA,GAED,YAAa,CACZ,IACA,GAED,YAAa,CACZ,IACA,GAED,YAAa,CACZ,IACA,IAED,YAAa,CACZ,IACA,IAED,YAAa,CACZ,IACA,IAED,eAAgB,CACf,IACA,IAED,YAAa,CACZ,IACA,IAED,YAAa,CACZ,IACA,IAED,YAAa,CACZ,IACA,KAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7B,OAAON,QAAQQ,IAAIF,EAAIG,MAAM,GAAGd,IAAIG,EAAoBK,IAAID,MAAK,WAChE,OAAOJ,EAAoBY,EAAEH,EAAI,MAGnCX,EAAoBe,KAAO,WAC1B,OAAOC,OAAOD,KAAKhB,IAEpBC,EAAoBW,GAAK,GACzBM,EAAOC,QAAUlB,G,wQC1EF,SAASmB,EAAoBC,GACxC,IAAK,IAAIC,EAAI,EAAGA,EAAIC,KAAKC,OAAQF,IACxBC,KAAKD,KAAOD,GACbE,KAAKE,OAAOH,EAAG,G,OAK3BI,MAAMC,UAAUC,OAAQR,E,gHCRjB,SAASS,IACZ,IAAIC,EAAO,IAAIC,IAAIC,OAAOC,SAASC,MAAMC,aAAaC,IAAI,QAC1D,QAAGN,IACiB,MAATA,GAAyB,SAATA,G,8DAYVO,E,oGAQjB,WACI,IC3BuBC,ED2BhBC,EE7B8H,CAACC,aAAa,EAAMD,IAAK,CAACE,aAAa,EAAKC,aAAa,IF6BvLH,IAaP,OAZA,YAAAF,EAAK,GAAL,IC5BuBC,ED4BS,CAC5BK,aAAa,EACbC,cAlBD,IAAIb,IAAIC,OAAOC,SAASC,MAAMC,aAAaC,IAAI,YAAc,MAkBjBP,IAAiB,OAAS,cACrEgB,SAAU,SAAUC,GACbP,EAAIE,aACHM,QAAQR,IAAI,WAAWO,GAExB,YAAAT,EAAK,GAAL,GAAsBS,EAAO,WAC5B,YAAAT,EAAK,GAAL,GAAsBS,EAAO,UAAUE,SAAQ,SAAAC,GAAC,OAAIA,EAAEH,QCnC/D,IAAII,IAASZ,IDuCTD,EAAMc,UAAU,CAAC,QAAS,4B,mCAQrC,SAAwDC,EAA6BC,QAChDC,IAA9B,YAAAjB,EAAK,GAAL,GAAsBe,KACrB,YAAAf,EAAK,GAAL,GAAsBe,GAAO,IAEjC,YAAAf,EAAK,GAAL,GAAsBe,GAAMG,KAAKF,K,qCAQrC,SAA0DD,EAA6BC,QAClDC,IAA9B,YAAAjB,EAAK,GAAL,GAAsBe,IAGzBhC,EAAoBoC,KAAK,YAAAnB,EAAK,GAAL,GAAsBe,GAAOC,K,uBAS1D,SAA6CI,GACzC,IAAOlB,EE5E8H,CAACC,aAAa,EAAMD,IAAK,CAACE,aAAa,EAAKC,aAAa,IF4EvLH,IAIP,OAHGA,EAAIG,aAAgC,uBAAjBe,EAAM,UACxBV,QAAQR,IAAI,UAAUkB,GAEnB,IAAIpD,SAAQ,SAACC,EAASoD,GACzB,YAAArB,EAAK,GAAL,GAAgBsB,KAAKF,GAAOlD,MAAK,SAACqD,GAC3BrB,EAAIG,aACHK,QAAQR,IAAI,iBAAkBqB,GAElCtD,EAAQsD,MACT,SAACC,GACGtB,EAAIG,aACHK,QAAQe,KAAK,iBAAkBD,GAEnCH,EAAOG,a,2BAtEFxB,E,oDAAAA,E,qBAGkD,K,WGMxD0B,EAzBM,CACjBC,IAAU,CAAC,+7EAAD,wiGACVC,KAAU,CAAC,2+EAAD,u9DACVC,SAAU,CAAC,oxEAAD,oxCACVC,OAAU,CAAC,ogDAAD,m2BACVC,OAAU,CAAC,ygEAAD,u3CACVC,QAAU,CAAC,66CAAD,2iCACVC,MAAU,CAAC,i6CACXC,OAAU,CAAC,4lEAAD,45CAEVC,IAAU,CAAC,6gIAAD,2uFACVC,MAAU,CAAC,0hGAAD,o6DACVC,SAAU,CAAC,8rLAAD,msGACVC,OAAU,CAAC,irFAAD,wmEACVC,KAAU,CAAC,6zHAAD,k6EACVC,KAAU,CAAC,24DAAD,gwCACVC,KAAU,CAAC,2xCAAD,69BACVC,KAAU,CAAC,s5DAAD,o2CACVC,MAAU,CAAC,k3CAAD,8gDACVC,MAAU,CAAC,i1FAAD,2pGACVC,MAAU,CAAC,u7KAAD,o7EACVC,MAAU,CAAC,y5FACXC,OAAU,CAAC,svLAAD,wsHACVC,KAAU,CAAC,qxDAAD,83C,OCjBOC,E,kKAmBjB,WACI,GAAI/D,KAAKgE,MAAMC,MAgBR,CACH,MAA8BjE,KAAKgE,MAA5BE,EAAP,EAAOA,EAAGC,EAAV,EAAUA,EAAGC,EAAb,EAAaA,MACNC,EAAWH,EAAIE,EAAQ,EAAnBE,EAAsBH,EADjC,EAAoBI,OAC0B,EAE9C,OADwBC,KAAKC,MAAMD,KAAKE,IAAIL,GAAKG,KAAKE,IAAIJ,IAC/BF,EAAQ,EAVnC,OAAOI,KAAKG,IACAH,KAAKC,MAAMzE,KAAKgE,MAAME,EAAwBlE,KAAKgE,MAAMG,GACzDK,KAAKC,MAAMzE,KAAKgE,MAAMI,MAAQpE,KAAKgE,MAAME,EAAKlE,KAAKgE,MAAMG,GACzDK,KAAKC,MAAMzE,KAAKgE,MAAME,EAAwBlE,KAAKgE,MAAMO,OAASvE,KAAKgE,MAAMG,GAC7EK,KAAKC,MAAMzE,KAAKgE,MAAMI,MAAQpE,KAAKgE,MAAME,EAAKlE,KAAKgE,MAAMO,OAASvE,KAAKgE,MAAMG,M,oBASjG,WACI,MAAqB,OAAlBnE,KAAKgE,MAAMY,MAAqB,KAE/B,qBACIC,UAAW,UAAU7E,KAAKgE,MAAMY,OAAQ5E,KAAKgE,MAAMC,MAAO,SAAS,IACnEa,MAAO,CACH,SAAU9E,KAAKgE,MAAMG,GAAK,GAAG,KAC7B,UAAWnE,KAAKgE,MAAME,GAAK,GAAG,KAC9B,WAAYlE,KAAK+E,eAAe,KAChCC,gBAAiBhF,KAAKgE,MAAMiB,a,GApDNC,IAAMC,WA0DhD,SAASC,EAAuBC,GAC5B,IAAMC,EAAOD,EAAME,OAAOC,wBAC1B,MAAO,CACHtB,EAAGmB,EAAMI,QAAUH,EAAKI,KACxBvB,EAAGkB,EAAMM,QAAUL,EAAKM,KAKzB,SAASC,EAAoBC,GAChC,MAAO,CAEF,SAAS7G,GAAI,IAAD,OAET,GAA4B,OAAzBe,KAAK4E,MAAMmB,OAAOnB,MAcjB,OAbA5E,KAAKgG,SAAS,CACVD,OAAQ,CAAEnB,MAAO,cAErBqB,YAAW,WACP,EAAKD,SAAS,CACVD,OAAO,yBACHnB,MAAO,WACJQ,EAAuBnG,IAFxB,IAGFmF,MAAOnF,EAAEsG,OAAOW,YAChB3B,OAAQtF,EAAEsG,OAAOY,mBAG1B,IAGPnG,KAAKgG,SAAS,CACVD,OAAO,yBACHnB,MAAO,WACJQ,EAAuBnG,IAFxB,IAGFmF,MAAOnF,EAAEsG,OAAOW,YAChB3B,OAAQtF,EAAEsG,OAAOY,kBAG1BC,KAAKN,GAEP,SAAS7G,GACNe,KAAKgG,SAAS,CACVD,OAAO,yBACHnB,MAAO,YACJQ,EAAuBnG,IAFxB,IAGFmF,MAAOnF,EAAEsG,OAAOW,YAChB3B,OAAQtF,EAAEsG,OAAOY,kBAG1BC,KAAKN,GAEP,SAAS7G,GACsB,WAAzBe,KAAK4E,MAAMmB,OAAOnB,OACjB5E,KAAKqG,QAAQpH,IAElBmH,KAAKN,IAIT,SAASQ,EAAT,GAA2D,IAAD,mBAApBP,EAAoB,KAAZQ,EAAY,KAuB7D,SAASC,EAAGvH,GACRsH,EAAW,CACP3B,MAAO,WACPV,EAAGjF,EAAEwH,YAAYC,QACjBvC,EAAGlF,EAAEwH,YAAYE,QACjBvC,MAAOnF,EAAEsG,OAAOW,YAChB3B,OAAQtF,EAAEsG,OAAOY,eAUzB,MAAO,CAtCP,SAAclH,GAEV,GAAiB,OAAd8G,EAAOnB,MAUN,OATA2B,EAAU,CAAE3B,MAAO,aACnBqB,YAAW,WACPM,EAAS,yBACL3B,MAAO,WACJQ,EAAuBnG,IAFrB,IAGLmF,MAAOnF,EAAEsG,OAAOW,YAChB3B,OAAQtF,EAAEsG,OAAOY,kBAEtB,IAGPI,EAAS,yBACL3B,MAAO,WACJQ,EAAuBnG,IAFrB,IAGLmF,MAAOnF,EAAEsG,OAAOW,YAChB3B,OAAQtF,EAAEsG,OAAOY,iBAoBXK,EANd,SAAevH,GACM,WAAd8G,EAAOnB,OACN4B,EAAGvH,K,sCC1JA,SAAS2H,EAAT,GAAsC,IAAjBC,EAAgB,EAAhBA,KAASC,EAAO,iBAC1Cf,EAAQb,IAAM6B,SAAS,CAACnC,MAAO,QACrC,EAA8C0B,EAA4BP,GAA1E,mBAAOiB,EAAP,KAAoBC,EAApB,KAA+BC,EAA/B,KACA,OACI,iDAAQrC,UAAU,eAAkBiC,GAApC,IAA+CE,cAAaC,YAAWC,eAAvE,UACI,sBAAMC,wBAAyB,CAACC,OAAQP,KACxC,cAAC,EAAD,2BAAkBd,EAAO,IAAzB,IAA6Bd,MAAM,kCAAkChB,OAAO,SCVjF,IAAMoD,EAAe,+yDASfC,EAAe,2hIAOfC,EAAS,yjCACTC,EAAU,k3CCdnBC,G,MAAqB,IAKzBA,EAAoBC,YAApB,kDASI,aAAe,IAAD,uBACV,gBANJ9C,MAAO,CACHmB,OAAQ,CACJnB,MAAO,QAGD,MAEuCiB,EAAoB,gBAF3D,0BAET,EAAK8B,UAFI,KAEO,EAAKtB,QAFZ,KAEqB,EAAKuB,WAF1B,OATlB,0CAaI,WACI,OACI,yBAAQvI,GAAG,wBAAwBwF,UAAU,eACzCmC,YAAahH,KAAK2H,UAClBV,UAAWjH,KAAKqG,QAChBa,aAAclH,KAAK4H,WACnBC,QAAS7H,KAAKgE,MAAM6D,QAJxB,UAKI,sBAAKxI,GAAG,OAAR,UAAe,yBAAa,yBAAa,4BACzC,cAAC,EAAD,2BAAkBW,KAAK4E,MAAMmB,QAA7B,IAAqCd,MAAM,+CArB3D,GAA2DC,IAAM4C,eA8BjEL,EAAoBM,eAAgB,SAAyB/D,GACzD,OACI,cAAC4C,EAAD,aACIC,KDpCa,6NCqCbxH,GAAG,wBACHwF,UAAU,0BACNb,KAIDyD,Q,gCC1BR,SAASO,IAGoC,IAH5BpD,EAG2B,uDAHD,CAC9CqD,SAAU,GACVC,SAAU,GACVC,EAA+C,uCAC/C,OAAQA,EAAOtG,MACX,IAAK,eACD,IADiB,EACXQ,EAA4C,GADjC,cAEK8F,EAAOF,UAFZ,IAEjB,2BAAuC,CAAC,IAA7BG,EAA4B,QACnC/F,EAAO+F,EAAQ/I,IAAM+I,GAHR,8BAKjB,OAAO,2BACAxD,GADP,IAEIqD,SAAS,2BACFrD,EAAMqD,UACN5F,GAEP6F,SAAUtD,EAAMsD,SAAS,IAGjC,IAAK,cACD,OAAO,2BACAtD,GADP,IAEIqD,SAAS,2BACFrD,EAAMqD,UADL,kBAEHE,EAAOC,QAAQ/I,GAAK8I,EAAOC,YAIxC,IAAK,kBACD,IAAM/F,EAA4C,GAClD,IAAK,IAAMgG,KAAazD,EAAMqD,SACrBE,EAAOG,WAAWC,SAASC,OAAOH,MACnChG,EAAOgG,GAAazD,EAAMqD,SAASI,IAG3C,OAAO,2BACAzD,GADP,IAEIqD,SAAU5F,IAGlB,IAAK,iBACD,OAAO,2BACAuC,GADP,IAEIqD,SAAS,2BACFrD,EAAMqD,UADL,kBAEHE,EAAOE,UAAYF,EAAOM,OAAO7D,EAAMqD,SAASE,EAAOE,gBAIpE,QACI,OAAOzD,GAIZ,IAAM8D,EAA+E,GCxErF,SAASC,EAAgBC,GAAiE,IAAjDC,EAAgD,uDAAhC,EAAGC,EAA6B,uDAAtB,IACtE,OAAO,IAAIhK,SAAgB,SAACC,EAASoD,GACjCrB,EAAMc,UAAU,CACZ,QAAS,iBACTmH,QAASH,EACTI,gBAAiBH,EACjBC,MAAOA,IACR9J,MAAK,SAACqD,IACLA,EAAQA,GACE4F,UACNS,EAAcE,GAAQK,SAAS,CAC3BpH,KAAM,eACNoG,SAAU5F,EAAO4F,WAGzBlJ,EAAQsD,EAAO6G,eAChB/G,MAIXrB,EAAMqI,sBAAiD,oBAAoB,SAAC5H,GACxEmH,EAAcnH,EAAO6G,QAAQW,SAASE,SAAS,CAC3CpH,KAAM,cACNuG,QAAS7G,EAAO6G,aAGxBtH,EAAMqI,sBAA2D,8BAA8B,SAAC5H,GAC5FmH,EAAcnH,EAAO6G,QAAQW,SAASE,SAAS,CAC3CpH,KAAM,kBACNyG,WAAY,CAAC/G,EAAO6H,kBAExBV,EAAcnH,EAAO6G,QAAQW,SAASE,SAAS,CAC3CpH,KAAM,cACNuG,QAAS7G,EAAO6G,aAGxBtH,EAAMqI,sBAAqD,wBAAwB,SAAC5H,GAChFmH,EAAcnH,EAAOwH,SAASE,SAAS,CACnCpH,KAAM,kBACNyG,WAAY/G,EAAO8H,iBAG3BvI,EAAMqI,sBAAqD,wBAAwB,SAAC5H,GAChFmH,EAAcnH,EAAOwH,SAASE,SAAS,CACnCpH,KAAM,iBACNwG,UAAW9G,EAAO+H,WAClBb,OAAQ,SAACL,GACL,OAAO,2BACAA,GADP,IAEImB,QAAShI,EAAOiI,oBAKhC1I,EAAMqI,sBAAoD,uBAAuB,SAAC5H,GAC9EmH,EAAcnH,EAAOwH,SAASE,SAAS,CACnCpH,KAAM,iBACNwG,UAAW9G,EAAO+H,WAClBb,OAAQ,SAACL,GACL,OAAO,2BACAA,GADP,IAEIqB,UAAWlI,EAAOkI,UAClBC,aAAcnI,EAAOmI,qBAKrC5I,EAAMqI,sBAAsD,yBAAyB,SAAC5H,GAClFmH,EAAcnH,EAAOwH,SAASE,SAAS,CACnCpH,KAAM,iBACNwG,UAAW9G,EAAO+H,WAClBb,OAAQ,SAACL,GACL,OAAO,2BACAA,GADP,IAEIuB,UAAWpI,EAAOoI,kBAKlC7I,EAAMqI,sBAA6D,gCAAgC,SAAC5H,GAChGmH,EAAcnH,EAAOwH,SAASE,SAAS,CACnCpH,KAAM,iBACNwG,UAAW9G,EAAO+H,WAClBb,OAAQ,SAACL,GACL,OAAO,2BACAA,GADP,IAEIwB,iBAAkBrI,EAAOqI,yBCtFzC,IAAMC,EAAWC,aAGjB,WAYY,IAZKlF,EAYN,uDAZa,CACpBmF,gBAAiB,CAAC,QAAS,gBAC3BC,aAAc,SACdC,mBAAoBC,aAAaC,QAAQ,sCACzCC,MAAO,GACPC,QAAS,GACTC,cAAe,EACfC,OAAQ,CACJC,KAAM,GACNC,QAAS,GACTJ,QAAS,KAEdlC,EAAQ,uCACP,OAAQA,EAAOtG,MACX,IAAK,wBACD,OAAO,2BACA+C,GADP,IAEImF,gBAAiB5B,EAAOuC,WAEhC,IAAK,oBACD,OAAO,2BACA9F,GADP,IAEIoF,aAAc7B,EAAO6B,eAE7B,IAAK,8BACD,MAAiC,iBAA9B7B,EAAOwC,UAAU,SACT,2BACA/F,GADP,IAEI2F,OAAO,2BACA3F,EAAM2F,QADP,IAEFC,KAAK,2BACE5F,EAAM2F,OAAOC,MADhB,IAEAI,sBAAuBzC,EAAO0C,aAC9BC,8BAA+B3C,EAAO4C,2BAId,oBAA9B5C,EAAOwC,UAAU,SAChB,2BACA/F,GADP,IAEI2F,OAAO,2BACA3F,EAAM2F,QADP,IAEFE,QAAQ,2BACD7F,EAAM2F,OAAOE,SADb,IAEHG,sBAAuBzC,EAAO0C,aAC9BC,8BAA+B3C,EAAO4C,2BAId,mBAA9B5C,EAAOwC,UAAU,SAChB,2BACA/F,GADP,IAEI2F,OAAO,2BACA3F,EAAM2F,QADP,IAEFF,QAAQ,2BACDzF,EAAM2F,OAAOF,SADb,kBAEFlC,EAAOwC,UAAUK,eAFf,2BAGIpG,EAAM2F,OAAOF,QAAQlC,EAAOwC,UAAUK,iBAH1C,IAICJ,sBAAuBzC,EAAO0C,aAC9BC,8BAA+B3C,EAAO4C,6BAMnDnG,EACX,IAAK,2BACD,MAAiC,iBAA9BuD,EAAOwC,UAAU,SACT,2BACA/F,GADP,IAEI2F,OAAO,2BACA3F,EAAM2F,QADP,IAEFC,KAAK,2BACE5F,EAAM2F,OAAOC,MADhB,IAEAS,kBAAmB9C,EAAOe,YAC1BgC,mBAAoB/C,EAAO0C,aAC3BM,2BAA4BhD,EAAO4C,qBACnCK,6BAA8BjD,EAAOkD,uBACrCC,qCAAsCnD,EAAOoD,qCAIrB,oBAA9BpD,EAAOwC,UAAU,SAChB,2BACA/F,GADP,IAEI2F,OAAO,2BACA3F,EAAM2F,QADP,IAEFE,QAAQ,2BACD7F,EAAM2F,OAAOE,SADb,IAEHQ,kBAAmB9C,EAAOe,YAC1BgC,mBAAoB/C,EAAO0C,aAC3BM,2BAA4BhD,EAAO4C,qBACnCK,6BAA8BjD,EAAOkD,uBACrCC,qCAAsCnD,EAAOoD,qCAIrB,mBAA9BpD,EAAOwC,UAAU,SAChB,2BACA/F,GADP,IAEI2F,OAAO,2BACA3F,EAAM2F,QADP,IAEFF,QAAQ,2BACDzF,EAAM2F,OAAOF,SADb,kBAEFlC,EAAOwC,UAAUK,eAFf,2BAGIpG,EAAM2F,OAAOF,QAAQlC,EAAOwC,UAAUK,iBAH1C,IAICC,kBAAmB9C,EAAOe,YAC1BgC,mBAAoB/C,EAAO0C,aAC3BM,2BAA4BhD,EAAO4C,qBACnCK,6BAA8BjD,EAAOkD,uBACrCC,qCAAsCnD,EAAOoD,uCAM1D3G,EAEX,IAAK,2BACD,OAAO,2BACAA,GADP,IAEIqF,mBAAoB9B,EAAO8B,qBAEnC,IAAK,WACD,OAAO,2BACArF,GADP,IAEIwF,MAAM,GAAD,mBACExF,EAAMwF,OADR,CAEDjC,EAAOqD,SAGnB,IAAK,uBACD,OAAO,2BACA5G,GADP,IAEIwF,MAAOxF,EAAMwF,MAAM3L,KAAI,SAAC+M,GACpB,GAAIA,EAAKnM,KAAO8I,EAAOY,QAAS,CAC5B,IAAI0C,GAAQ,EACRC,EAAO,2BACJF,GADI,IAEPG,UAAWH,EAAKG,UAAUlN,KAAI,SAACmN,GAC3B,OAAIC,EAAgBD,EAASE,KAAM3D,EAAOyD,SAASE,OAC/CL,GAAQ,EACDtD,EAAOyD,UAEXA,OAGf,OAAIH,EASGC,EARI,2BACAF,GADP,IAEIG,UAAU,GAAD,mBACFH,EAAKG,WADH,CAELxD,EAAOyD,aAMvB,OAAOJ,OAGnB,IAAK,uBACD,OAAO,2BACA5G,GADP,IAEIyF,QAASlC,EAAO4D,UAExB,IAAK,uBACD,OAAO,2BACAnH,GADP,IAEIwF,MAAOxF,EAAMwF,MAAM3L,KAAI,SAAC+M,GACpB,OAAIA,EAAKnM,KAAO8I,EAAOY,QACZ,2BACAyC,GADP,kBAEKrD,EAAO6D,SAAW7D,EAAO8D,QAG3BT,OAGnB,IAAK,cACD,OAAO,2BACA5G,GADP,IAEI0F,aAAcnC,EAAOY,UAE7B,QACI,OAAOnE,KA3LfnE,OAAOyL,8BAAgCzL,OAAOyL,gCA+LlDpL,EAAMqI,sBAAsB,yBAAyB,SAAC5H,GAClDsI,EAAUZ,SAAV,aACIpH,KAAM,4BACHN,OAIXT,EAAMqI,sBAAsB,4BAA4B,SAAC5H,GACrDsI,EAAUZ,SAAV,aACIpH,KAAM,+BACHN,OAIXT,EAAMqI,sBAAsB,iBAAiB,SAAA5H,GDjNtC,IAAyBqH,ECkN5BiB,EAAUZ,SAAS,CACfpH,KAAM,WACN2J,KAAMjK,EAAOiK,ODpNW5C,ECsNZrH,EAAOiK,KAAKnM,GDrN5BqJ,EAAcE,GAAUkB,YAAY9B,MCwNxClH,EAAMqI,sBAAsB,uBAAuB,SAAA5H,GAC/CsI,EAAUZ,SAAS,CACfpH,KAAM,uBACNmK,SAAU,aACVjD,QAASxH,EAAOwH,QAChBkD,MAAO1K,EAAO4K,gBAItBrL,EAAMqI,sBAAsB,wCAAwC,SAAA5H,GAChEsI,EAAUZ,SAAS,CACfpH,KAAM,uBACNmK,SAAU,+BACVjD,QAASxH,EAAOwH,QAChBkD,MAAO1K,EAAO6K,kCAItBtL,EAAMqI,sBAAsB,0BAA0B,SAAA5H,GAClDsI,EAAUZ,SAAS,CACfpH,KAAM,uBACNmK,SAAU,gBACVjD,QAASxH,EAAOwH,QAChBkD,MAAO1K,EAAO8K,gBAL0C,oBAOvC9K,EAAOoK,WAPgC,IAO5D,2BAAuC,CAAC,IAA/BC,EAA8B,QACnC/B,EAAUZ,SAAS,CACfpH,KAAM,uBACNkH,QAASxH,EAAOwH,QAChB6C,SAAUA,KAX0C,kCAgBhE9K,EAAMqI,sBAAsB,qBAAqB,SAAA5H,GAC1CA,EAAO+K,cACNzC,EAAUZ,SAAS,CACfpH,KAAM,uBACNkK,QAASxK,EAAO+K,kBAK5BxL,EAAMqI,sBAAsB,kCAAkC,SAAA5H,GAC1DsI,EAAUZ,SAAS,CACfpH,KAAM,uBACNmK,SAAU,yBACVjD,QAASxH,EAAOwH,QAChBkD,MAAO1K,EAAOgL,4BAItBzL,EAAMqI,sBAAsB,uBAAuB,SAAA5H,GAC/CsI,EAAUZ,SAAS,CACfpH,KAAM,uBACNmK,SAAU,aACVjD,QAASxH,EAAOwH,QAChBkD,MAAO1K,EAAOiL,gBAItB1L,EAAMqI,sBAAsB,8BAA8B,SAAA5H,GACtDsI,EAAUZ,SAAS,CACfpH,KAAM,uBACNmK,SAAU,sBACVjD,QAASxH,EAAOwH,QAChBkD,MAAO1K,EAAOkL,yBAItB3L,EAAMqI,sBAAsB,yBAAyB,SAAA5H,GACjDsI,EAAUZ,SAAS,CACfpH,KAAM,uBACNmK,SAAU,eACVjD,QAASxH,EAAOwH,QAChBkD,MAAO1K,EAAOmL,eALyC,oBAOtCnL,EAAOoK,WAP+B,IAO3D,2BAAuC,CAAC,IAA/BC,EAA8B,QACnC/B,EAAUZ,SAAS,CACfpH,KAAM,uBACNkH,QAASxH,EAAOwH,QAChB6C,SAAUA,KAXyC,kCAgB/D9K,EAAMqI,sBAAsB,+BAA+B,SAAA5H,GACvDsI,EAAUZ,SAAS,CACfpH,KAAM,uBACNmK,SAAU,sBACVjD,QAASxH,EAAOwH,QAChBkD,MAAO1K,EAAOoL,yBAItB7L,EAAMqI,sBAAsB,kCAAkC,SAAA5H,GAC1DsI,EAAUZ,SAAS,CACfpH,KAAM,uBACNmK,SAAU,wBACVjD,QAASxH,EAAOwH,QAChBkD,MAAO1K,EAAOqL,2BAItB9L,EAAMqI,sBAAsB,+BAA+B,SAAA5H,GACvDsI,EAAUZ,SAAS,CACfpH,KAAM,uBACNmK,SAAU,sBACVjD,QAASxH,EAAOwH,QAChBkD,MAAO1K,EAAOsL,yBAItB/L,EAAMqI,sBAAsB,yBAAyB,SAAA5H,GACjDsI,EAAUZ,SAAS,CACfpH,KAAM,uBACNmK,SAAU,cACVjD,QAASxH,EAAOwH,QAChBkD,MAAO1K,EAAOuL,iBAItBhM,EAAMqI,sBAAsB,mBAAmB,SAAA5H,GAC3CsI,EAAUZ,SAAS,CACfpH,KAAM,uBACNmK,SAAU,QACVjD,QAASxH,EAAOwH,QAChBkD,MAAO1K,EAAOwL,WAItBjM,EAAMqI,sBAAsB,sBAAsB,SAAA5H,GAC9CsI,EAAUZ,SAAS,CACfpH,KAAM,uBACNkH,QAASxH,EAAOwH,QAChB6C,SAAUrK,EAAOqK,cAIzB9K,EAAMqI,sBAAsB,uBAAuB,SAAA5H,GAC/CsI,EAAUZ,SAAS,CACfpH,KAAM,uBACNmK,SAAU,eACVjD,QAASxH,EAAOwH,QAChBkD,MAAO1K,EAAOsJ,eAElBhB,EAAUZ,SAAS,CACfpH,KAAM,uBACNmK,SAAU,6BACVjD,QAASxH,EAAOwH,QAChBkD,MAAO1K,EAAOyL,gCAItBlM,EAAMqI,sBAAsB,wBAAwB,SAAA5H,GAChDsI,EAAUZ,SAAS,CACfpH,KAAM,uBACNmK,SAAU,8BACVjD,QAASxH,EAAOwH,QAChBkD,MAAO1K,EAAO0L,iCAItBnM,EAAMqI,sBAAsB,yBAAyB,SAAA5H,GACjDsI,EAAUZ,SAAS,CACfpH,KAAM,uBACNmK,SAAU,0BACVjD,QAASxH,EAAOwH,QAChBkD,MAAO1K,EAAO2L,6BAItBpM,EAAMqI,sBAAsB,mBAAmB,SAAA5H,GAC3CsI,EAAUZ,SAAS,CACfpH,KAAM,uBACNmK,SAAU,aACVjD,QAASxH,EAAOwH,QAChBkD,MAAO1K,EAAO4L,gBAItBrM,EAAMqI,sBAAsB,mBAAmB,SAAA5H,GAC3CsI,EAAUZ,SAAS,CACfpH,KAAM,uBACNmK,SAAU,QACVjD,QAASxH,EAAOwH,QAChBkD,MAAO1K,EAAO6L,WAItBtM,EAAMqI,sBAAsB,gCAAgC,SAAA5H,GACxDsI,EAAUZ,SAAS,CACfpH,KAAM,uBACNmK,SAAU,uBACVjD,QAASxH,EAAOwH,QAChBkD,MAAO1K,EAAO8L,0BAItBvM,EAAMqI,sBAAsB,iCAAiC,SAAA5H,GACzDsI,EAAUZ,SAAS,CACfpH,KAAM,uBACNmK,SAAU,wBACVjD,QAASxH,EAAOwH,QAChBkD,MAAO1K,EAAO+L,2BAItBxM,EAAMqI,sBAAsB,uBAAuB,SAAA5H,GAC/CsI,EAAUZ,SAAS,CACfpH,KAAM,uBACNmK,SAAU,aACVjD,QAASxH,EAAOwH,QAChBkD,MAAO1K,EAAOgM,gBAItBzM,EAAMqI,sBAAsB,4BAA4B,SAAA5H,GACpDsI,EAAUZ,SAAS,CACfpH,KAAM,uBACNmK,SAAU,uBACVjD,QAASxH,EAAOwH,QAChBkD,MAAO1K,EAAO8L,0BAIPxD,QAQR,SAASgC,EAAgB2B,EAAOC,GACnC,OAAID,EAAM,UAAYC,EAAM,WAGN,kBAAlBD,EAAM,UACCA,EAAMxC,gBAAkByC,EAAMzC,gBAyBtC,SAAS0C,EAAerO,GAAK,IAAD,4BACfwK,EAAU8D,kBADK,aACf,EAAsBvD,OADP,IAC/B,IAAI,EAAJ,qBAA6C,CAAC,IAAtCoB,EAAqC,QACzC,GAAGA,EAAKnM,IAAIA,EAAI,OAAOmM,GAFI,+B,2EC9dpB,SAASoC,EAAT,GAAqF,IAAhEC,EAA+D,EAA/DA,eAAgBC,EAA+C,EAA/CA,UAAWC,EAAoC,EAApCA,oBAAwBC,EAAY,iBAC/F,EAAwC9I,IAAM6B,UAAS,GAAvD,mBAAOkH,EAAP,KAAqBC,EAArB,KACA,EAAkChJ,IAAM6B,SAAS,MAAjD,mBAAOoH,EAAP,KAAkBC,EAAlB,KACA,OACI,cAAC,aAAD,aACIvJ,UAAU,YACVC,MAAQ,CAAE,eAAgB+I,GAAkB,GAAG,MAC/CQ,qBAAoBJ,EACpBK,sBAAuB,SAAAtK,GAAK,OAAI,+CAASA,GAAT,IAAgBa,UAAU,uBAC1D0J,oBAAqB,SAAAvK,GAAK,OAAI,+CAASA,GAAT,IAAgBa,UAAU,qBACxD2J,sBAAuB,SAAAxK,GAAK,OAAI,+CAASA,GAAT,IAAgBa,UAAU,uBAC1D4J,oBAAqB,SAAAzK,GAAK,OAAI,+CAASA,GAAT,IAAgBa,UAAU,qBACxD6J,aAAc,WACVR,GAAgB,GAChBE,EAAanI,YAAW,WACpBiI,GAAgB,KACjB,OAEPhH,aAAc,WACVgH,GAAgB,GAChBS,aAAaR,IAEjBS,UAAWb,EACXc,iBAAgBd,EAAqB,QAAU,OAC/Ce,gBAAiB,IACjBC,yBAAyB,EACzBC,IAAKlB,GACDE,I,kBCjCHiB,GAAW,SAACnP,EAAMoP,GAAP,OAAkB,cAAC,IAAMC,SAAP,UAA6BrP,GAARoP,IAExD,SAASE,GAAiBC,GAC7B,IAAMC,EAAWC,GAAgBF,GACjC,OAAwB,IAArBC,EAAUrP,OAAqBqP,EAAU,GACrCA,EAAU7Q,IAAIwQ,IAGlB,SAASM,GAAgBC,GAG5B,IAFA,IAAIC,EAAK,KAGL,GAAGD,EAAOjH,SAAS,MAAM,CACrB,IAAM2G,EAAOM,EAAOE,QAAQ,MAC5BH,GAAgBC,EAAOG,OAAO,EAAGT,IAAQzN,SAAQ,SAAAxC,GAAC,OAAEwQ,EAAIzN,KAAK/C,MAC7DwQ,EAAIzN,KAAK,wBACTwN,EAAQA,EAAOG,OAAOT,EAAQ,OAE7B,KAAGM,EAAOjH,SAAS,MAMnB,MALD,IAAMqH,EAAQ,eAAeC,KAAKL,GAClCD,GAAgBC,EAAOG,OAAO,EAAGC,EAAOV,QAAQzN,SAAQ,SAAAxC,GAAC,OAAEwQ,EAAIzN,KAAK/C,MACpEwQ,EAAIzN,KAAK,iCAAS4N,EAAO,MACzBJ,EAAQA,EAAOG,OAAOC,EAAOV,MAAQU,EAAO,GAAG3P,OAAO,GAK9D,OADAwP,EAAIzN,KAAKwN,GACFC,EAGJ,SAASK,GAAaN,GAEzB,IAF8C,IAAbO,EAAY,uDAAJ,GACrCN,EAAK,GACHD,EAAOjH,SAAS,MAAK,CACvB,IAAMqH,EAAQ,UAAUC,KAAKL,GAC7BD,GAAgBC,EAAOG,OAAO,EAAGC,EAAOV,QAAQzN,SAAQ,SAAAxC,GAAC,OAAEwQ,EAAIzN,KAAK/C,MACpEwQ,EAAIzN,KAAK+N,EAAOH,EAAO,KACvBJ,EAAQA,EAAOG,OAAOC,EAAOV,MAAQU,EAAO,GAAG3P,OAAO,GAE1D,MAAM,GAAN,OAAWwP,EAAX,YAAmBF,GAAgBC,KAIhC,SAASQ,GAAaC,GACzB,OAAa,IAAVA,EAAoB,OACV,IAAVA,EAAoB,MACV,IAAVA,EAAoB,MACpBA,EAAQ,GAAKA,EAAQ,GAAW,MAChCA,GAAS,GAAW,OAChB,QAGJ,SAASC,GAAgBC,EAAMC,GAClC,OAAOD,GACH,IAAK,OAAQ,OAAOC,EAAS,SAAWA,EAAS,QAAUA,EAAS,SAAWA,EAAS,SACxF,IAAK,MAAO,OAAOA,EAAS,QAAUA,EAAS,SAC/C,IAAK,MAAO,OAAOA,EAAS,QAAUA,EAAS,QAAUA,EAAS,SAAWA,EAAS,SACtF,IAAK,MAAO,OAAOA,EAAS,QAAUA,EAAS,SAAWA,EAAS,SACnE,IAAK,OAAQ,OAAOA,EAAS,SAAWA,EAAS,SACjD,IAAK,QAAS,OAAOA,EAAS,U,aCtDlCC,GAAqB,KACrBC,GAAgBC,GAwCb,SAASC,KAAgD,IAAzBC,IAAwB,yDACvDC,EAAcxG,aAAaC,QAAQ,2BAkBvC,OAjBGuG,IAAcA,EAAcC,KAAKC,MAAMF,KACrCA,GAAiBD,IAAkBC,EAAc,CAClD,QAAS,mBACTG,sBAAuB,GACvBxR,GAAI,KACJyR,SAAS,EACTC,cAAc,EACdC,aAAa,EACbC,QAAQ,EACRC,mBAAoB,KACpBC,KAAM,UACNC,YAAa,UACbC,YAAa,KACbC,mBAAoB,KACpBC,wBAAyB,KACzBC,gBAAiB,0CAEdd,EAGJ,SAASe,KAAc,IAAD,EACzB,MAA4D,QAApDvH,aAAaC,QAAQ,+BAA2C,UAAAqG,IAAuB,UAAvB,eAA+BS,UAAU,GAatG,SAASS,GAAGC,GACvB,GAAGtB,GAAqB,CACpB,IAAMuB,EAAoBvB,GAAoBsB,GAAK1F,MACnD,GAAmC,oCAAhC2F,EAAmB,SAClB,OAAOxC,GAAiBwC,EAAmB3F,OAKnD,OAAOmD,GADcyC,EACgBF,IAalC,SAASG,GAAMX,EAAMpB,GAA6B,IAArBgC,IAAoB,yDACpD,OAAQjC,GAAa4B,GAAGP,GAAOpB,GAAQtR,IAAIsT,EAAc9C,GAAY,SAAAhQ,GAAC,OAAEA,IAGrE,SAAS+S,GAAKL,EAAK1B,GAAmB,IAAZF,EAAW,uDAAJ,GAChCK,EAAU,KACd,GAAGC,IACC,GAA+C,sCAA5CA,GAAoBsB,GAAK1F,MAAM,SAAkD,CAChF,IAAMgG,EAAY5B,GAAoBsB,GAAK1F,MAC3CmE,EAAU,SAACD,GAAD,OAAU8B,EAAW9B,EAAK,iBAGvCC,EAAW,SAACD,GAAD,OAAU0B,EAAoBF,EAAI,IAAIxB,IAEtD,IAAM+B,EAAkBhC,GAAgBF,GAAaC,GAAQG,GACvDd,EAAWQ,GAAaoC,EAAD,aAAoBjC,SAAUF,IAC3D,OAAwB,IAArBT,EAAUrP,OAAqBqP,EAAU,GACrCA,EAAU7Q,IAAIwQ,IAYlB,SAASkD,GAAaC,EAAUC,GAA2C,IAApCC,EAAmC,wDAAjBC,EAAiB,uDAAJb,GACzE,GAAmB,GAAhBW,EAAMpS,OAAa,OAAOoS,EAAM,GAMnC,IAJA,IAAM7C,EAAQ+C,EAAYH,EAAU,kCAAoC,gCAClEI,EAAYD,EAAYH,EAAU,mCAAqC,iCAEzE/P,EAAQ,CAACgQ,EAAM,IACXtS,EAAG,EAAGA,EAAIsS,EAAMpS,OAAS,EAAGF,IAAK,CACrC,IAAM0S,EAAMJ,EAAMtS,GAClBsC,EAAQyN,GAAaN,EAAQ,CAACkD,YAAarQ,EAAQoQ,SAAOE,OAG9D,OADAtQ,EAAQyN,GAAa0C,EAAY,CAACE,YAAarQ,EAAQoQ,KAAMJ,EAAMA,EAAMpS,OAAS,KAAK0S,OAChFL,EAAWjQ,EAAO5D,IAAIwQ,IAAa5M,EAAOuQ,KAAK,IAGnD,SAASC,GAAKlB,GACjB,OAAOrB,GAAeqB,GAGnB,SAASmB,GAAQnB,EAAK5B,GAA6B,IAArBgC,IAAoB,yDACrD,OAAOjC,GAAa+C,GAAKlB,GAAM5B,GAAQtR,IAAIsT,EAAc9C,GAAY,SAAAhQ,GAAC,OAAEA,IC9IrE,IAAI8T,GAA2B,CAAC,cAKhC,SAASC,GAAT,GAAwD,IAAnCC,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,OAAQrL,EAAkB,EAAlBA,QAAS0C,EAAS,EAATA,OAE3CxE,EAAQb,IAAM6B,SAAS,CAACnC,MAAO,QACrC,EAAwC0B,EAA4BP,GAApE,mBAAO4B,EAAP,KAAkBtB,EAAlB,KAA2BuB,EAA3B,KAEA,EAA+B1C,IAAM6B,SAASkM,EAAOE,WAArD,mBAAOC,EAAP,KAAiBC,EAAjB,KAEAnO,IAAMoO,WAAU,WACZxS,EAAMc,UAAU,CACZ,QAAS,YACT,UAAa,CACT,QAAS,iBACT,eAAkBqR,EAAO5T,IAE7B,MAAS,OAEd,IAEH6F,IAAMoO,WAAU,WACRL,EAAOE,WAEPrS,EAAMc,UAAU,CACZ,QAAS,gBACT,eAAkBqR,EAAO5T,KAC1BL,MAAK,SAAAiU,GACJnS,EAAMc,UAAU,CACZ,QAAS,+BACT,OAAUqR,IACXjU,MAAK,SAAAqD,GAAM,OAAGgR,EAAYhR,EAAOgN,cAG7C,CAAC4D,IAOJ,IAAIpM,EAAOwD,EAAQ+I,IAAa/I,EAAO,OAEvC,OADAxD,EAAMA,EAAKqM,EAAO,IAAMrM,EAAK,GAEzB,sBAAKhC,UAAWqO,EAAS,cAAgB,OAAzC,UACI,cAAC,EAAD,2BAAkBnN,EAAO,IAAzB,IAA6Bd,MAAM,wCACnC,yBACI+B,YAAaW,EACbV,UAAWZ,EACXa,aAAcU,EACdC,QAdZ,SAAqB5I,GAAG,IAAD,EACnB4I,EAAQ5I,GACR,UAAA8T,GAAyB,UAAzB,cAAAA,KAQI,UAMI,qBAAKlO,UAAU,OAAOsC,wBAAyB,CAACC,OAAQP,KACxD,qBAAKhC,UAAU,QAAf,SAAwBoO,EAAO7F,SACxB,OAAN7C,QAAM,IAANA,OAAA,EAAAA,EAAQW,oBACL,qBAAKrG,UAAU,eACX0O,aAAiD,IAA9B,OAANhJ,QAAM,IAANA,OAAA,EAAAA,EAAQY,4BAAiC,OAAS,QADnE,SAEI,sCAAOZ,QAAP,IAAOA,OAAP,EAAOA,EAAQW,uBAEpB,WAkEJsI,oBAAQ,SAAA5O,GAAK,MAAG,CAC3B6O,QAAQ7O,EAAMyF,QACdqJ,cAAe9O,EAAMmF,gBACrBQ,OAAQ3F,EAAM2F,UAHHiJ,EA9Cf,YAA4F,IAAnEC,EAAkE,EAAlEA,QAASC,EAAyD,EAAzDA,cAAenJ,EAA0C,EAA1CA,OAAQtB,EAAkC,EAAlCA,SAAU0K,EAAwB,EAAxBA,sBAC/D,OAAIF,GAA2B,GAAhBA,EAAQxT,OAGnB,sBAAKZ,GAAG,oBAAR,UACI,cAAC,EAAoBqI,YAArB,CAAiCG,QAAS8L,IAE1C,eAAC/F,EAAD,CAAYC,eAAe,IAAIhJ,UAAU,2BAAzC,UACI,cAACmO,GAAD,CACIE,OAAQrH,EAAgB6H,EAAe,CAAC,QAAS,iBACjDT,OAAQ,CAAE7F,MAAOsE,GAAG,mBAAoByB,UAAW,OACnD5I,OAAQA,EAAOC,KACf3C,QAAS,kBAAKoB,EAAS,CACnBpH,KAAM,wBACN6I,SAAU,CAAE,QAAS,qBAG5B+I,EAAQhV,KAAI,SAAAwU,GAAM,OACf,cAACD,GAAD,CAAYC,OAAQA,EAChB1I,OAAQA,EAAOF,QAAQ4I,EAAO5T,IAC9B6T,OAAQrH,EAAgB6H,EACpB,CAAC,QAAS,iBAAkB,eAAkBT,EAAO5T,KACzDwI,QAAS,kBAAKoB,EAAS,CACnBpH,KAAM,wBACN6I,SAAU,CACN,QAAS,iBACTM,eAAgBiI,EAAO5T,QARF4T,EAAO5T,aAjBf,Q,qCCtFxBuU,G,4MASjBhP,MAAO,CACHiP,WAAY,I,4CAEhB,WACI,OACI,qBAAKhP,UAAU,kBAAf,SACI,cAAC,KAAD,yBACIiP,QAAS9T,KAAK4E,MAAMiP,WACpBE,KAAK,QACLC,WAAW,cACXC,KAAK,QACDjU,KAAKgE,OALb,IAMIkQ,mBAAmB,c,+BAKnC,WAAsB,IAAD,OACjBlU,KAAKmU,YAAaC,aAAY,WAC1B,EAAKpO,SAAS,CACV6N,WAAa,GAAK,EAAKjP,MAAMiP,eAElC,O,kCAGP,WACIQ,cAAcrU,KAAKmU,iB,GAnCiBjP,IAAMC,WAA7ByO,GACV5P,MAAO,CAEVsQ,KAAMC,KAAUC,OAAOC,WAEvBC,UAAWH,KAAUC,OAAOC,WAE5BE,cAAeJ,KAAUK,OAAOH,YCRzBjB,oBAAQ,SAAA5O,GAAK,MAAI,CAACA,MAAOA,KAAzB4O,EAAmC,YAAmC,IAAT5O,EAAQ,EAARA,MACxE,OACI,qBAAKC,UAAW,mBAAoB,CAChC,4BACA,mCACA,oCACF0D,SAAS3D,GAAS,GAAK,cAJzB,SAKI,cAAC,GAAD,CACI+P,cAAc,gCACdL,KAAK,KACLI,UAAU,WCdpBG,I,MAAa/K,aAAY,WAAyB,IAAxBlF,EAAuB,uDAAf,GAAIuD,EAAW,uCACnD,OAAQA,EAAOtG,MACX,IAAK,WACD,OAAO,2BACA+C,GADP,kBAEKuD,EAAOsK,KAAKpT,GAAK8I,EAAOsK,OAEjC,IAAK,kBACD,OAAO,2BACA7N,GADP,kBAEKuD,EAAO2M,OAFZ,2BAGWlQ,EAAMuD,EAAO2M,SAHxB,IAIQC,OAAQ5M,EAAO4M,WAG3B,QACI,OAAOnQ,KAEhBnE,OAAOyL,8BAAgCzL,OAAOyL,iCAEjDpL,EAAMqI,sBAAsB,cAAc,SAAC5H,GACvCsT,GAAW5L,SAAS,CAChBpH,KAAM,WACN4Q,KAAMlR,EAAOkR,UAIrB3R,EAAMqI,sBAAsB,oBAAoB,SAAC5H,GAC7CsT,GAAW5L,SAAS,CAChBpH,KAAM,kBACNiT,OAAQvT,EAAOyT,QACfD,OAAQxT,EAAOwT,YAIRF,U,yCC/BA,SAASI,GAAT,GAAyD,IAApCtU,EAAmC,EAAnCA,KAAMuU,EAA6B,EAA7BA,SAAUrN,EAAmB,EAAnBA,QAAYf,EAAO,kBAC7DqO,EAAOxU,EAAO,kBAAKF,OAAO2U,KAAKzU,IAAQkH,EAC7C,OACI,gDAAQhD,UAAU,cAAcgD,QAASsN,GAAWrO,GAApD,aAA2DoO,KCKnE,IAAMG,GAAiBvL,aAZvB,SAAiBlF,EAAOuD,GACpB,OAAQA,EAAOtG,MACX,IAAK,iBACD,OAAO,2BACA+C,GADP,kBAEKuD,EAAOmN,WAAWjW,GAAK8I,EAAOmN,aAEvC,QACI,OAAO1Q,MAKJyQ,MCNR,SAASE,GAAyB/J,EAAM6G,GAAQ,IAAD,EAClD,OAAQ7G,EAAK3J,KAAK,UACd,IAAK,qBACL,IAAK,qBACD,OAAO,EAEX,IAAK,iBACL,IAAK,kBACD,IAAI4Q,EAAI,UAAGJ,GAASwC,GAAWlH,kBAAvB,aAAE,EAAmCnC,EAAK3J,KAAKmT,SACvD,OAAOvC,GAA+B,oBAAvBA,EAAK5Q,KAAK,SAEjC,OAAO,EASJ,SAAS2T,GAA0BhK,EAAM6G,GAC5C,OAAGkD,GAAyB/J,EAAM6G,GACvBX,GAAG,eACPlG,EAAK4B,MDfhBtM,EAAMqI,sBAAsB,oBAAoB,SAAC5H,GAC7C8T,GAAgBpM,SAAS,CACrBpH,KAAM,iBACNyT,WAAY/T,EAAO+T,gB,MEZpB,SAASG,GAAT,GAAwC,IAAlBC,EAAiB,EAAjBA,EAAGC,EAAc,EAAdA,EAAGT,EAAW,EAAXA,SAC/B,EAAkChQ,IAAM6B,SAAS,MAAjD,mBAAO6O,EAAP,KAAkBC,EAAlB,KACA,EAAwB3Q,IAAM6B,UAAS,GAAvC,mBAAO+O,EAAP,KAAaC,EAAb,KACM/G,EAAM9J,IAAM8Q,SAiBlB,SAASC,IACLF,GAAQ,GACR9P,YAAW,WACPiQ,GAAkBjN,SAAS,CACvBpH,KAAM,2BAEX,KAGP,OAzBAqD,IAAMoO,WAAU,WACZrN,YAAW,WACP,IAAMX,EAAO0J,EAAImH,QAAQjB,SAAS,GAAG1P,wBAC9BpB,EAAiBkB,EAAjBlB,MAAOG,EAAUe,EAAVf,OACd,EAAoC6R,SAASC,gBAAtCnQ,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,aAChBjC,EAAI,IAAKC,EAAI,IACbuR,EAAItR,EAAQ8B,IACZhC,EAAI,KAEJyR,EAAIpR,EAAS4B,IACbhC,EAAI,KAER0R,EAAa1R,EAAID,KAClB,KACJ,IAYC,qBAAKW,UAAW,gBAAkBiR,EAAM,UAAY,IAChDhR,MAAO,CAAC,MAAO4Q,EAAE,KAAM,MAAOC,EAAE,MAChC3O,YAAa,SAAA/H,GAAC,OAAKA,EAAEsG,OAAO+Q,UAAUC,SAAS,cAAgBN,KAC/DhP,UAAW,SAAAhI,GAAC,OAAKA,EAAEsG,OAAO+Q,UAAUC,SAAS,cAAiBN,KAHlE,SAKI,qBAAKpR,UAAW,QAAU+Q,EAAW5G,IAAKA,EAA1C,SACKkG,MAaV,IAAMgB,GAAoBpM,aAAY,WAAiC,IAAvBlF,EAAsB,uDAAd,KAAMuD,EAAQ,uCACzE,MAAoB,qBAAhBA,EAAOtG,KACAsG,EAAOqO,KAEO,yBAAhBrO,EAAOtG,KACL,KAEJ+C,KAGE6R,GAAcjD,aAAQ,SAAA5O,GAAK,MAAG,CAAC8R,MAAM9R,KAAvB4O,EAAgC,qBAAEkD,SAOtD,SAASC,GAAkB1X,EAAGuX,GACjCvX,EAAE2X,iBACF3Q,YAAW,WACPiQ,GAAkBjN,SAAS,CACvBpH,KAAM,mBACN2U,KAAM,cAACf,GAAD,CAAaC,EAAGzW,EAAEwH,YAAYoQ,MAAOlB,EAAG1W,EAAEwH,YAAYqQ,MAAtD,SAA8DN,QAEzE,I,0BC1EQ,SAASO,GAAK/S,GACzB,OACI,iCAAKa,UAAU,QAAWb,IAOlC+S,GAAKC,aAAc,SAAsBhT,GACrC,OACI,iCAAKa,UAAU,iBAAoBb,KAO3C+S,GAAKE,SAAU,YAAwC,IAArB/B,EAAoB,EAApBA,SAAapO,EAAO,kBAC5Cf,EAAQb,IAAM6B,SAAS,CAACnC,MAAO,QACrC,EAAyC0B,EAA4BP,GAArE,mBAAO4B,EAAP,KAAkBtB,EAAlB,KAA2BuB,EAA3B,KACA,OACI,8CAAK/C,UAAU,aAAgBiC,GAA/B,IAAqCE,YAAaW,EAAWV,UAAWZ,EAASa,aAAcU,EAA/F,UACI,cAAC,EAAD,2BAAkB7B,EAAO,IAAzB,IAA6Bd,MAAM,uCACnC,qBAAKJ,UAAU,UAAf,SACKqQ,SAKjB6B,GAAKE,SAASC,UAAY,CACtBhC,SAAUX,KAAU4C,M,MC9BT,SAASC,GAAT,GAA4B,IAAZlC,EAAW,EAAXA,SAC3B,EAA4BhQ,IAAM6B,UAAS,GAA3C,mBAAOsQ,EAAP,KAAeC,EAAf,KASA,OARApS,IAAMoO,WAAU,WACZrN,YAAW,WACPqR,GAAU,GACVrR,YAAW,WACPsR,GAAS,QACV,OACJ,OACJ,IAEC,qBAAK1S,UAAW,SAAWwS,EAAQ,UAAU,IAA7C,SACI,qBAAKxS,UAAU,gBAAf,SACKqQ,MASV,IAAMsC,GAAY1N,aAAY,WAAyB,IAAxBlF,EAAuB,uDAAjB,KAAMuD,EAAW,uCACzD,MAAgB,aAAbA,EAAOtG,KAA0BsG,EAAOsP,MACpC7S,KAGE8S,GAAQlE,aAAQ,SAAA5O,GAAK,MAAG,CAAC6S,MAAO7S,KAAxB4O,EAAiC,YAClD,OAD0E,EAAPiE,SAIhE,SAASF,GAASE,GACrBD,GAAWvO,SAAS,CAChBpH,KAAM,YACN4V,U,UCtCJE,GAAQ,GAEZ7W,EAAMqI,sBAAsB,gBAAgB,SAAU5H,GAClDoW,GAAQpW,EAAO4P,MAAM5P,EAAO0K,MAAMA,SAGvB0L,UCDR,SAASC,GAAiBpM,EAAMpD,GACnC,GAAIoD,GAASpD,EACb,OAAGA,EAAQyP,YACJzP,EAAQ0P,cACA,UAERtM,EAAKyB,6BAA+B7E,EAAQ/I,GACpC,OAEJ,OAERmM,EAAKwB,4BAA8B5E,EAAQ/I,GACnC,OAEJ,SChBJ,SAAS0Y,GAAcC,EAASC,GACnC,IAAIC,EAUJ,OATApX,EAAMc,UAAU,CACZ,QAAS,eACT,QAAWoW,EACX,SAAYC,EACZ,OAAU,EACV,MAAS,EACT,aAAe,IAChBE,MAAMD,GAEF,IAAIpZ,SAAQ,SAACC,EAASoD,GACzBiW,GAAkBJ,GAAS,SAAA3V,GACvBtD,EAAQsD,UACD+V,GAAkBJ,IAE7BE,EAAS/V,KAGjB,IAAIiW,GAAoB,GAExBtX,EAAMqI,sBAAsB,cAAc,SAAU5H,GACD,IAAD,EAA3CA,EAAO8W,KAAKC,MAAMC,2BACjB,UAAAH,GAAkB7W,EAAO8W,KAAKhZ,WAA9B,cAAA+Y,GAAoC7W,EAAO8W,UAInD,IAAMG,GAAa,GAgEZ,SAASC,GAAWC,GACvB,OAAQjY,OAAOD,KAAOC,OAAOkY,WAAWC,gBAAgBF,G,UCpG7C,OAA0B,mCCalC,SAASG,GAAsB1H,GAClC,IAAM2H,EAAM3H,EAAK4H,QAAQ,0DAA0D,IAC9EC,cAAcC,MAAM,KACzB,OAAoB,GAAjBH,EAAM,GAAG7Y,OACD,GACc,IAAf6Y,EAAM7Y,OACL6Y,EAAM,GAAG,GAETA,EAAM,GAAG,GAAKA,EAAMA,EAAM7Y,OAAO,GAAG,GAOpC,SAASiZ,GAAclV,GAClC,IA0BImV,EA1BJ,EAA0BjU,IAAM6B,SAAS,MAAzC,mBAAOgG,EAAP,KAAcqM,EAAd,KACA,EAAgClU,IAAM6B,SAAS,MAA/C,mBAAOsS,EAAP,KAAiBC,EAAjB,KACA,EAA4BpU,IAAM6B,UAAS,GAA3C,mBAAOwS,EAAP,KAAeC,EAAf,KACMC,EAAmBzV,EAAM3E,IAAIsY,GAAO,uCACpC+B,EAAiB1V,EAAM3E,IAAIsY,GAAO,MAClCgC,EAAW3V,EAAM3E,IAAIsY,GAAO,oBA+BlC,OA7BAzS,IAAMoO,WAAU,WACZ,IAAIsG,GAAQ,EAeZ,OAdG5V,EAAM+I,MACFsM,GAAUrV,EAAM+I,OFMxB,SAAwBsL,EAAMJ,GAA6B,IAAnB4B,IAAkB,yDAC7D,GAAGxB,EAAKhZ,MAAMmZ,GACV,OAAO1Z,QAAQC,QAAQ,CAAC+a,KAAMtB,GAAYH,EAAKhZ,MAGnD,SAAS0a,EAAgBC,GAIrB,OAHGH,GAAexB,EAAK/D,MAAM,QACzBkE,GAAYH,EAAKhZ,IAAI2a,EAASF,MAE3BE,EAGX,OAAG3B,EAAKC,MAAMC,yBACH,IAAIzZ,SAAQ,SAACC,EAASoD,GACzBrB,EAAMc,UAAU,CACZ,QAAS,eACT,QAAWyW,EAAKhZ,GAChB,OAAU,EACV,MAAS,IACVL,MAAK,SAACib,GAAD,OAAKlb,EAAQgb,EAAgBE,OAAK9B,MAAMhW,MAGhDkW,EAAKC,MAAM4B,sBACR,IAAIpb,SAAQ,SAACC,EAASoD,GACzB,IAAMiO,EAAWgI,GAAkBC,EAAKhZ,IACxC+Y,GAAkBC,EAAKhZ,IAAM,SAACgD,GAC1B+N,EAAS/N,GACTvB,EAAMc,UAAU,CACZ,QAAS,eACT,QAAWyW,EAAKhZ,GAChB,OAAU,EACV,MAAS,IACVL,MAAK,SAACib,GAAD,OAAKlb,EAAQgb,EAAgBE,OAAK9B,MAAMhW,OAIjD,IAAIrD,SAAQ,SAACC,EAASoD,GACzB4V,GAAaM,EAAKhZ,GAAI4Y,GAAUjZ,MAAK,WACjC8B,EAAMc,UAAU,CACZ,QAAS,eACT,QAAWyW,EAAKhZ,GAChB,OAAU,EACV,MAAS,IACVL,MAAK,SAACib,GAAD,OAAKlb,EAAQgb,EAAgBE,OAAK9B,MAAMhW,MACjDgW,MAAMhW,MEjDLgY,CAAenW,EAAM+I,MAAO,GAAG/N,MAAK,SAAAqZ,GAC5BuB,IACJR,EAASX,GAAUJ,EAAKyB,OACxBR,EAAYtV,EAAM+I,WAIvBA,GAASsM,IACRD,EAAS,MACTE,EAAY,OAGb,kBAAKM,GAAQ,KACrB,CAAC5V,EAAM+I,QAGP2M,KAAoB,OAAC1V,QAAD,IAACA,OAAD,EAACA,EAAOoW,wBAC3BjB,EAAY,CAAC,EtB5BM,6SsB8BpBQ,IACCR,EAAY,CAAC,EtBhCO,qrCsBkCnBnV,EAAM+I,OAAU0M,IACjBN,EAAa,CAAC,EAAGkB,KAGjB,sBAAKxV,UAAU,gBAAf,YACO0U,KAAYvV,EAAM+I,OAASA,KAAW,cAACuN,GAAD,CAAUjb,GAAI2E,EAAM3E,GAAI8R,KAAMnN,EAAMmN,OAEzEgI,EACIA,EAAW,GACP,eAAC,IAAMhK,SAAP,YACOoK,GAAW,cAACe,GAAD,CAAUjb,GAAI2E,EAAM3E,GAAI8R,KAAMnN,EAAMmN,OAClD,qBAAKoJ,OAAQ,kBAAKf,GAAU,IAAOgB,IAAKrB,EAAW,QAGvD,qBAAKtU,UAAU,MAAMsC,wBAAyB,CAACC,OAAQ+R,EAAW,MAErEnV,EAAM+I,OAASA,GAAU,qBAAKwN,OAAQ,kBAAKf,GAAU,IAAOgB,IAAKzN,OAkBtF,SAASuN,GAAT,GAA+B,IAAZjb,EAAW,EAAXA,GAAI8R,EAAO,EAAPA,KACnB,OACI,sBAAMtM,UAAW,kBAAmB4V,GAAepb,GAAnD,SACKwZ,GAAsB1H,KAW5B,SAASsJ,GAAepb,GAE3B,MADY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACpBmF,KAAKE,IAAIrF,GAAM,GAAK,GAQ5B,SAASqb,GAAclP,GAAO,IAAD,EAChC,cAAQA,QAAR,IAAQA,GAAR,UAAQA,EAAM3J,YAAd,aAAQ,EAAa,UACjB,IAAK,qBAAuB,IAAD,EACvB,cAAO2J,QAAP,IAAOA,GAAP,UAAOA,EAAM3J,YAAb,aAAO,EAAY8Y,cAEvB,IAAK,qBAAuB,IAAD,EACvB,cAAOnP,QAAP,IAAOA,GAAP,UAAOA,EAAM3J,YAAb,aAAO,EAAY+Y,eAEvB,IAAK,kBACL,IAAK,iBAAmB,IAAD,EACnB,cAAOpP,QAAP,IAAOA,GAAP,UAAOA,EAAM3J,YAAb,aAAO,EAAYmT,QAG3B,OAAO,KC5HJ,SAAS6F,GAAsBC,GAChB,iBAARA,IAAkBA,EAAMC,GAAgBD,IAClD,IAAME,EAAM,IAAIC,KACVC,EAAY,IAAID,KAAKD,EAAIG,UAAY,MACrCC,EAAW,IAAIH,KAAKD,EAAIG,UAAY,QAE1C,OAAIL,EAAKK,WAAaD,EAAUC,UACrBE,GAAaP,GACbA,EAAKK,WAAaC,EAASD,UA0BnC,SAAyBL,GACV,iBAARA,IAAkBA,EAAMC,GAAgBD,IAElD,MADiB,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAC5CA,EAAKQ,UA5BVC,CAAgBT,GAmCxB,SAAsBA,GACP,iBAARA,IAAkBA,EAAMC,GAAgBD,IAClD,IAAIU,EAAMV,EAAKW,UACXC,EAAQZ,EAAKa,WAAa,EACxBC,EAAOC,OAAOf,EAAKgB,eAAevc,MAAM,GAC1Cic,EAAM,KACNA,EAAG,WAAOA,IAEVE,EAAQ,KACRA,EAAK,WAAOA,IAEhB,MAAM,GAAN,OAAUF,EAAV,YAAiBE,EAAjB,YAA0BE,GA5CfG,CAAajB,GAQrB,SAASO,GAAaP,GACP,iBAARA,IAAkBA,EAAMC,GAAgBD,IAClD,IAAIkB,EAAQlB,EAAKmB,WACbC,EAAUpB,EAAKqB,aACbC,EAAOJ,GAAS,GAAK,KAAO,KAIlC,OAFAA,GADAA,GAAgB,KACQ,GACxBE,EAAUA,EAAU,GAAV,WAAmBA,GAAYA,EACnC,GAAN,OAAUF,EAAV,YAAmBE,EAAnB,YAA8BE,GAuC3B,SAASC,GAAkBvB,GACZ,iBAARA,IAAkBA,EAAMC,GAAgBD,IAClD,IAAMwB,EAAQ,IAAIrB,KACZsB,EAAW,IAAItB,KAAKqB,EAAMnB,UAAY,OAE5C,GAAIL,EAAKW,WAAaa,EAAMb,WAAaX,EAAKa,YAAcW,EAAMX,WAC9D,MAAO,QACJ,GAAIb,EAAKW,WAAac,EAASd,WAAaX,EAAKa,YAAcY,EAASZ,WAC3E,MAAO,WAGP,MAAM,GAAN,OADc,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAC5Gb,EAAKa,YAAtB,YAAqCb,EAAKW,WAY3C,SAASe,GAAiBC,GAC7B,OAAIA,EAAW,IACL,GAAN,OAAUA,EAAV,YACOA,EAAW,KACZ,GAAN,OAAUjY,KAAKkY,MAAMD,EAAW,IAAhC,YACOA,EAAW,MACZ,GAAN,OAAUjY,KAAKkY,MAAMD,EAAW,GAAK,IAArC,UAEM,GAAN,OAAUjY,KAAKkY,MAAMD,EAAW,GAAK,GAAK,IAA1C,SA4DD,SAAS1B,GAAgB4B,GAC5B,OAAO,IAAI1B,KAAiB,IAAZ0B,G,aC/JL,SAASC,GAAwBC,EAAUC,GACtD,MAA6EC,GAAWF,GAAjFG,EAAP,EAAOA,OAAQC,EAAf,EAAeA,cAAeC,EAA9B,EAA8BA,YAAaC,EAA3C,EAA2CA,YAAaC,EAAxD,EAAwDA,cAAeC,EAAvE,EAAuEA,IAEjEC,GADkBR,EAAY,SAAG,GAAMO,IACLE,QAAQF,GAAKtE,QAAQ,kCAAmCkE,GAAelE,QAAQ,KAAMmE,GAE7H,OADgBC,EAAW,UAAMH,GAAN,OAAeI,EAAgB,IAAM,IAArC,OAA0CE,GAA1C,UAAiEA,GAAjE,OAAmFF,EAAgB,IAAM,IAAzG,OAA8GJ,GCLtI,SAASQ,GAAT,GAAmD,IAAzBC,EAAwB,EAAxBA,WAAYC,EAAY,EAAZA,UACzC,OAAOA,EAAY5L,GAAM,gBAAiB,CAAC2L,aAAYC,cAAY,GAAO9K,KAAK,IAAM6K,ECN1E,SAASE,GAAT,GAAiD,IAAjBvV,EAAgB,EAAhBA,QAASwV,EAAO,EAAPA,KACpD,OAAQxV,EAAQmB,QAAQ,UACpB,IAAK,mBACD,OAAOuI,GAAM,0BAA2B,CAAC+L,MAAOnM,GAAG,+BAAgCkM,KAAMA,IAE7F,IAAK,eACD,OAAO9L,GAAM,0BAA2B,CAAC+L,MAAOnM,GAAG,iCAAkCkM,KAAMA,IAE/F,IAAK,iBACD,OAAO9L,GAAM,0BAA2B,CAAC+L,MAAOnM,GAAG,mCAAoCkM,KAAMA,IAEjG,IAAK,cACD,OAAO9L,GAAM,4BAA6B,CAACzC,KAAMjH,EAAQmB,QAAQuU,MAAOF,KAAMA,IAElF,IAAK,kBACD,OAAO9L,GAAM,0BAA2B,CAAC+L,MAAOnM,GAAG,gCAAiCkM,KAAMA,IAE9F,IAAK,cACD,OAAO9L,GAAM,0BAA2B,CAAC+L,MAAO/L,GAAM,+BAAgC,CAACiM,KAAM3V,EAAQmB,QAAQwU,KAAK3Q,QAASwQ,KAAMA,IAErI,IAAK,eACD,OAAO9L,GAAM,0BAA2B,CAAC+L,MAAOnM,GAAG,iCAAkCkM,KAAMA,IAE/F,IAAK,cACD,OAAO9L,GAAM,4BAA6B,CAACzC,KAAMjH,EAAQmB,QAAQyU,KAAKC,SAAUL,KAAMA,IAE1F,IAAK,iBACD,OAAO9L,GAAM,0BAA2B,CAAC+L,MAAO/L,GAAM,wCAAyC,CAACgM,MAAO1V,EAAQmB,QAAQ2U,QAAQJ,QAASF,KAAMA,IAElJ,IAAK,cACD,IAAIvO,EAAMjH,EAAQmB,QAAQ8F,KAAKA,KAI/B,OAHIA,EAAKpP,OAAS,KACdoP,EAAI,UAAMA,EAAKM,OAAO,EAAG,IAArB,QAEDmC,GAAM,4BAA6B,CAACzC,KAAMA,EAAMuO,KAAMA,IAEjE,IAAK,qBACD,OAAO9L,GAAM,4BAA6B,CAACzC,KAAMqC,GAAG,2BAA2B/B,OAAO,EAAG,IAAI,MAAOiO,KAAMA,IAE9G,IAAK,kBACL,IAAK,eACD,OAAO9L,GAAM,0BAA2B,CAAC+L,MAAOnM,GAAG,oCAAqCkM,KAAMA,IAElG,IAAK,eACD,OAAO9L,GAAM,0BAA2B,CAAC+L,MAAOnM,GAAG,iCAAkCkM,KAAMA,IAE/F,IAAK,mBACD,OAAO9L,GAAM,0BAA2B,CAAC+L,MAAOnM,GAAG,yCAA0CkM,KAAMA,IAEvG,IAAK,mBACD,OAAO9L,GAAM,0BAA2B,CAAC+L,MAAOnM,GAAG,iCAAkCkM,KAAMA,IAE/F,QACI,OAAO9L,GAAM,4BAA6B,CAACzC,KAAM,GAAIuO,KAAMA,KCrCxD,SAASO,GAAT,GAAuE,IAAD,4BAAlC/V,EAAkC,EAAlCA,QAASvD,EAAyB,EAAzBA,UAAWwN,EAAc,EAAdA,MAAO7G,EAAO,EAAPA,KAC1E,IAAIpD,EAAS,OAAO,KAEpB,OAAOA,EAAQmB,QAAQ,UACnB,IAAK,mBACD,OACI,cAAC6U,GAAD,CACIvc,KAAK,MACLwc,QAAO,UAAEjW,EAAQmB,QAAQ8U,eAAlB,aAAE,EAAyBhP,KAClCxK,UAAWA,EACXuD,QAASA,EACToD,KAAMA,EACN6G,MAAOA,EACPiM,WAAY,WAAClW,EAAQmB,eAAT,iBAAC,EAAiBgV,iBAAlB,iBAAC,EAA4BC,qBAA7B,aAAC,EAA2C1E,QAGpE,IAAK,eACD,IAAI1M,EAAOhF,EAAQmB,QAAQkV,MAAMrR,OAAShF,EAAQmB,QAAQkV,MAAMC,UAGhE,OAFGtW,EAAQmB,QAAQkV,MAAME,YACrBvR,EAAOhF,EAAQmB,QAAQkV,MAAME,UAAW,mBAAUvR,GAElD,cAACwR,GAAD,CACI/c,KAAMuL,EACNiR,QAAO,UAAEjW,EAAQmB,QAAQ8U,eAAlB,aAAE,EAAyBhP,KAClCxK,UAAWA,EACXuD,QAASA,EACToD,KAAMA,EACN6G,MAAOA,IAGnB,IAAK,8BACD,OACI,sBAAMxN,UAAWA,EAAjB,SACI,sBAAMA,UAAU,SAAhB,SAA0BiN,GAAM,0BAA2B,CAAC8L,KAAM,cAACiB,GAAD,CAAgBrT,KAAMA,EAAMpD,QAASA,EAASiK,MAAOA,IAAUjF,MAAOhF,EAAQmB,QAAQ6D,YAIpK,IAAK,cACD,IAAIiC,EAAK,GACT,GAAGjH,EAAQyP,YACP,iBAAOzP,EAAQmB,QAAQuV,sBAAvB,aAAO,EAAiC,UACpC,IAAK,0BACDzP,EAAMqC,GAAGtJ,EAAQmB,QAAQwV,SAAU,2BAA6B,sBAChE,MACJ,QACI1P,EAAMqC,GAAGtJ,EAAQmB,QAAQwV,SAAU,0BAA4B,0BAGvE,iBAAO3W,EAAQmB,QAAQuV,sBAAvB,aAAO,EAAiC,UACpC,IAAK,4BACDzP,EAAMqC,GAAGtJ,EAAQmB,QAAQwV,SAAU,0BAA4B,qBAC/D,MACJ,IAAK,0BACD1P,EAAMqC,GAAGtJ,EAAQmB,QAAQwV,SAAU,wBAA0B,mBAC7D,MACJ,QACI1P,EAAMqC,GAAGtJ,EAAQmB,QAAQwV,SAAU,0BAA4B,qBAG3E,OACI,uBAAMla,UAAWA,EAAjB,UACI,cAAC,GAAD,CAAsBuD,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,IAC3D,sBAAMxN,UAAU,SAAhB,SAA0BwK,OAItC,IAAK,wBAED,GAAGjH,EAAQmB,QAAQyV,gBAAgB,KAAhC,UAAsC5W,EAAQ6W,cAA9C,aAAsC,EAAgBjK,SACrD,OACI,sBAAMnQ,UAAWA,EAAjB,SACI,sBAAMA,UAAU,SAAhB,SAA0BiN,GAAM,yBAA0B,CAAC8L,KAAM,cAACiB,GAAD,CAAgBzW,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,UAKlI,IAAI6M,EAAY9W,EAAQmB,QAAQyV,gBAAgBvgB,KAAI,SAAAY,GAAE,OAClDme,GAAgBnL,EAAMhT,OAG1B,OAFA6f,EAAY/M,IAAa,EAAO+M,GAAY,GAGxC,sBAAMra,UAAWA,EAAjB,SAA4B,sBAAMA,UAAU,SAAhB,SACvBiN,GAAMoN,EAAWjf,OAAQ,EAAI,4BAA8B,sBAAuB,CAC/E2d,KAAM,cAACiB,GAAD,CAAgBzW,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,IAC3DA,MAAO6M,EACPzM,KAAMyM,QAKtB,IAAK,yBAED,OACI,sBAAMra,UAAWA,EAAjB,SACI,sBAAMA,UAAU,SAAhB,SAA0B6M,GAAG,wBAIzC,IAAK,yBACD,OAAGtJ,EAAQ+W,gBAEH,sBAAMta,UAAWA,EAAjB,SACI,sBAAMA,UAAU,SAAhB,SAA0BiN,GAAM,mCAAoC,CAAC1E,MAAOhF,EAAQmB,QAAQ6D,YAKhG,sBAAMvI,UAAWA,EAAjB,SACI,sBAAMA,UAAU,SAAhB,SAA0BiN,GAAM,2BAA4B,CACxD8L,KAAM,cAACiB,GAAD,CAAgBzW,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,IAC3DjF,MAAOhF,EAAQmB,QAAQ6D,YAM3C,IAAK,0BACD,IAAIgS,EAAe/M,EAAMjK,EAAQmB,QAAQyL,SACzC,OAAIoK,EAAc/f,KAAd,UAAoB+I,EAAQ6W,cAA5B,aAAoB,EAAgBjK,SAEhC,sBAAMnQ,UAAWA,EAAjB,SAA4B,sBAAMA,UAAU,SAAhB,SACvBiN,GAAM,uBAAwB,CAC3B8L,KAAM,cAACiB,GAAD,CAAgBzW,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,UAMvE,sBAAMxN,UAAWA,EAAjB,SAA4B,sBAAMA,UAAU,SAAhB,SACvBiN,GAAM,uBAAwB,CAC3B8L,KAAM,cAACiB,GAAD,CAAgBzW,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,IAC3DI,KAAM+K,GAAgB4B,SAKtC,IAAK,yBACD,OAAGhX,EAAQ+W,gBAEH,sBAAMta,UAAWA,EAAjB,SACI,sBAAMA,UAAU,SAAhB,SAA0B6M,GAAG,wCAKjC,sBAAM7M,UAAWA,EAAjB,SAA4B,sBAAMA,UAAU,SAAhB,SACvBiN,GAAM,2BAA4B,CAC/B8L,KAAO,cAACiB,GAAD,CAAgBzW,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,UAMhF,IAAK,wBACD,OACI,sBAAMxN,UAAWA,EAAjB,SAA4B,sBAAMA,UAAU,SAAhB,SACvBiN,GAAM,iCAAkC,CACrC8L,KAAM,cAACiB,GAAD,CAAgBzW,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,UAK3E,IAAK,2BACD,OACI,sBAAMxN,UAAWA,EAAjB,SAA4B,sBAAMA,UAAU,SAAhB,SACvBiN,GAAM,oCAAqC,CACxC8L,KAAM,cAACiB,GAAD,CAAgBzW,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,UAK3E,IAAK,sBACD,OAAGjK,EAAQ+W,gBACJ/W,EAAQmB,QAAQ4D,WAEX,sBAAMtI,UAAWA,EAAjB,SAA4B,sBAAMA,UAAU,SAAhB,SACvBiN,GAAM,mCAAoC,CACvCgM,MAAO1V,EAAQmB,QAAQ4D,iBAM/B,sBAAMtI,UAAWA,EAAjB,SAA4B,sBAAMA,UAAU,SAAhB,SACvB6M,GAAG,yCAKbtJ,EAAQmB,QAAQ4D,WAEX,sBAAMtI,UAAWA,EAAjB,SAA4B,sBAAMA,UAAU,SAAhB,SACxB,cAACwa,GAAD,CACIjX,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,EACrCiN,SAAS,2BACTC,aAAa,+BACbxP,OAAQ,CAAC+N,MAAO1V,EAAQmB,QAAQ4D,kBAKxC,sBAAMtI,UAAWA,EAAjB,SAA4B,sBAAMA,UAAU,SAAhB,SACxB,cAACwa,GAAD,CACIjX,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,EACrCiN,SAAS,4BACTC,aAAa,sCAMrC,IAAK,oBACD,IAAIC,EAAa,CACbC,MAAO/N,GAAG,2BACVgO,OAAQhO,GAAG,2BACXiO,QAASjO,GAAG,4BACdtJ,EAAQmB,QAAQqW,KAElB,OAAGxX,EAAQ+W,gBACJ/W,EAAQmB,QAAQqW,IAEX,sBAAM/a,UAAWA,EAAjB,SAA4B,sBAAMA,UAAU,SAAhB,SACvBiN,GAAM,iCAAkC,CACrC2K,SAAU+C,QAMlB,sBAAM3a,UAAWA,EAAjB,SAA4B,sBAAMA,UAAU,SAAhB,SACvB6M,GAAG,sCAKbtJ,EAAQmB,QAAQqW,IAEX,sBAAM/a,UAAWA,EAAjB,SAA4B,sBAAMA,UAAU,SAAhB,SACxB,cAACwa,GAAD,CACIjX,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,EACrCiN,SAAS,yBACTC,aAAa,6BACbxP,OAAQ,CAAC0M,SAAU+C,SAK3B,sBAAM3a,UAAWA,EAAjB,SAA4B,sBAAMA,UAAU,SAAhB,SACxB,cAACwa,GAAD,CACIjX,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,EACrCiN,SAAS,yBACTC,aAAa,mCAMrC,IAAK,yBACL,IAAK,uBACD,OACI,sBAAM1a,UAAWA,EAAjB,SACI,sBAAMA,UAAU,SAAhB,SAA0BgO,GAAK,yCAI3C,IAAK,iBACD,OACI,uBAAMhO,UAAWA,EAAjB,UACI,cAAC,GAAD,CAAsBuD,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,IAC3D,sBAAMxN,UAAU,SAAhB,SAA0B6M,GAAG,2BAIzC,IAAK,2BACD,OACI,sBAAM7M,UAAWA,EAAjB,SAA4B,sBAAMA,UAAU,SAAhB,SACvBiN,GAAM,6BAA8B,CACjC8L,KAAM,cAACiB,GAAD,CAAgBzW,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,UAK3E,IAAK,6BACD,OACI,sBAAMxN,UAAWA,EAAjB,SACI,sBAAMA,UAAU,SAAhB,SAA0BuD,EAAQmB,QAAQ8F,SAItD,IAAK,uBACL,IAAK,cACD,OACI,uBAAMxK,UAAWA,EAAjB,UACI,cAAC,GAAD,CAAsBuD,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,IAC3D,sBAAMxN,UAAU,SAAhB,SAA0BuD,EAAQmB,QAAQuU,WAItD,IAAK,kBACD,OACI,cAACM,GAAD,CACIvc,KAAMuG,EAAQmB,QAAQ6M,SAASsI,UAC/BL,QAAO,UAAEjW,EAAQmB,QAAQ8U,eAAlB,aAAE,EAAyBhP,KAClCxK,UAAWA,EACXuD,QAASA,EACToD,KAAMA,EACN6G,MAAOA,EACPiM,WAAY,WAAClW,EAAQmB,eAAT,iBAAC,EAAiB6M,gBAAlB,iBAAC,EAA2BoI,qBAA5B,aAAC,EAA0C1E,QAGnE,IAAK,sBACD,OACI,sBAAMjV,UAAWA,EAAjB,SACI,sBAAMA,UAAU,SAAhB,SAA0B6M,GAAG,6BAIzC,IAAK,sBACD,OACI,sBAAM7M,UAAWA,EAAjB,SACI,sBAAMA,UAAU,SAAhB,SAA0B6M,GAAG,6BAIzC,IAAK,cACD,OACI,uBAAM7M,UAAWA,EAAjB,UACI,cAAC,GAAD,CAAsBuD,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,IAC3D,uBAAMxN,UAAU,SAAhB,0BAA6BuD,EAAQmB,QAAQwU,KAAK3Q,YAI9D,IAAK,mBAED,IAAIyS,EACA,sBAAMhb,UAAWA,EAAjB,SAA4B,sBAAMA,UAAU,SAAhB,SACxB,cAACwa,GAAD,CACIjX,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,EACrCiN,SAAS,gCACTC,aAAa,qCACbtP,MAAO7H,EAAQmB,QAAQuW,YAK/BC,EAAoB7a,IAAM8a,MAAK,kBAAI,IAAIlhB,SAAQ,SAAAC,GAC/C+B,EAAMc,UAAU,CACZ,QAAS,aACTmH,QAASyC,EAAKnM,GACdiK,WAAYlB,EAAQmB,QAAQ0W,kBAC7BjhB,MACC,SAAAqD,GAEItD,EAAQ,CAAEmhB,QAAS,kBACf,sBAAMrb,UAAWA,EAAjB,SAA4B,sBAAMA,UAAU,SAAhB,SACxB,cAACwa,GAAD,CACIjX,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,EACrCiN,SAAS,wBACTC,aAAa,6BACbtP,MAAO7H,EAAQmB,QAAQuW,MACvB/P,OAAQ,CAACgO,KAAM1b,EAAOkH,QAAQwU,KAAK3Q,mBAInD,WAEIrO,EAAQ,CAAEmhB,QAAS,kBAAKL,cAKpC,OACI,cAAC,IAAMM,SAAP,CAAgBC,SAAUP,EAA1B,SACI,cAACE,EAAD,MAIZ,IAAK,iBACD,OACI,uBAAMlb,UAAWA,EAAjB,UACI,cAAC,GAAD,CAAsBuD,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,IAC3D,sBAAMxN,UAAU,SAAhB,SAA0BuD,EAAQmB,QAAQ6D,WAItD,IAAK,kBACD,OACI,uBAAMvI,UAAWA,EAAjB,UACI,cAAC,GAAD,CAAsBuD,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,IAC3D,sBAAMxN,UAAU,SAAhB,SAA0B6M,GAAG,uBAIzC,IAAK,0BACD,IAAI2O,EAA0B,CAC1B,2BAA4C,uBAC5C,iCAA4C,iCAC5C,iCAA4C,gCAC5C,gCAA4C,2BAC5C,gCAA4C,6BAC5C,oCAA4C,iCAC5C,4BAA4C,iCAC5C,wCAA4C,oCAC5C,mCAA4C,gCAC5C,+BAA4C,2BAC5C,mCAA4C,iCAC5C,yCAA4C,iCAC5C,+BAA4C,6BAE5CC,EAAmBlY,EAAQmB,QAAQgX,MAAM9hB,KAAI,SAAAoD,GAAI,OAAG6P,GAAG2O,EAAyBxe,EAAK,WAAW2e,iBACpG,OACI,sBAAM3b,UAAWA,EAAjB,SAA4B,sBAAMA,UAAU,SAAhB,SACvBiN,GAAM,gCAAiC,CACpCW,KAAMjH,EAAK4B,MACXqT,UAAWH,EAAkB1N,KAAK,YAKlD,IAAK,2BAED,IAAI8N,EACA,sBAAM7b,UAAWA,EAAjB,SAA4B,sBAAMA,UAAU,SAAhB,SACvBiN,GAAM,0BAA2B,CAC9B6O,OAAQ/D,GAAuBxU,EAAQmB,QAAQsT,SAAUzU,EAAQmB,QAAQuT,cACzErK,KAAMjH,EAAK4B,YAMnBwT,EAA6B1b,IAAM8a,MAAK,kBAAI,IAAIlhB,SAAQ,SAAAC,GACxD+B,EAAMc,UAAU,CACZ,QAAS,aACTmH,QAASX,EAAQmB,QAAQsX,gBACzBvX,WAAYlB,EAAQmB,QAAQuX,qBAC7B9hB,MACC,SAAAqD,GAEItD,EAAQ,CAAEmhB,QAAS,kBACf,sBAAMrb,UAAWA,EAAjB,SAA4B,sBAAMA,UAAU,SAAhB,SACvBiN,GAAM,8BAA+B,CAClC6O,OAAQ/D,GAAuBxU,EAAQmB,QAAQsT,SAAUzU,EAAQmB,QAAQuT,cACzErK,KAAMjH,EAAK4B,MACX2T,QAAS1e,EAAOkH,QAAQ6D,kBAKxC,WACIrO,EAAQ,CAAEmhB,QAAS,kBAAKQ,cAKpC,OACI,cAAC,IAAMP,SAAP,CAAgBC,SAAUM,EAA1B,SACI,cAACE,EAAD,MAIZ,IAAK,eACD,OAAGxY,EAAQmB,QAAQyX,UACZ5Y,EAAQyP,YAEH,sBAAMhT,UAAWA,EAAjB,SACI,sBAAMA,UAAU,SAAhB,SAA0B6M,GAAG,0BAKjC,sBAAM7M,UAAWA,EAAjB,SAA4B,sBAAMA,UAAU,SAAhB,SACvBiN,GAAM,yBAA0B,CAC7B8L,KAAM,cAACiB,GAAD,CAAgBzW,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,UAOvE,cAAC+L,GAAD,CACIvc,KAAM6P,GAAG,oBACT2M,QAAO,UAAEjW,EAAQmB,QAAQ8U,eAAlB,aAAE,EAAyBhP,KAClCxK,UAAWA,EACXuD,QAASA,EACToD,KAAMA,EACN6G,MAAOA,EACPiM,WAAY,WAAClW,EAAQmB,eAAT,iBAAC,EAAiBwD,aAAlB,iBAAC,EAAwByR,qBAAzB,aAAC,EAAuC1E,QATxD,IAAD,QAaX,IAAK,oBAGD,IAAImH,EAAsB/b,IAAM8a,MAAK,kBAAI,IAAIlhB,SAAQ,SAAAC,GACjD+B,EAAMc,UAAU,CACZ,QAAS,aACTmH,QAASyC,EAAKnM,GACdiK,WAAYlB,EAAQmB,QAAQD,aAC7BtK,MACC,SAAAqD,GAEItD,EAAQ,CAAEmhB,QAAS,kBACf,sBAAMrb,UAAWA,EAAjB,SAA4B,sBAAMA,UAAU,SAAhB,SACxB,cAAC,GAAD,CAAsBuD,QAAS/F,EAAQ4c,OAAQ,cAACJ,GAAD,CAAgBzW,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,gBAIhH,WAEItT,EAAQ,CAAEmhB,QAAS,kBACf,sBAAMrb,UAAWA,EAAjB,SAA4B,sBAAMA,UAAU,SAAhB,SACvBiN,GAAM,0BAA2B,CAC9B8L,KAAM,cAACiB,GAAD,CAAgBzW,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,IAC3DwL,MAAOnM,GAAG,yCAQlC,OACI,cAAC,IAAMyO,SAAP,CAAgBC,SACZ,sBAAMvb,UAAWA,EAAjB,SAA4B,sBAAMA,UAAU,SAAhB,SACvBiN,GAAM,0BAA2B,CAC9B8L,KAAM,cAACiB,GAAD,CAAgBzW,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,IAC3DwL,MAAOnM,GAAG,8BAJtB,SAQI,cAACuP,EAAD,MAIZ,IAAK,cACD,OACI,sBAAMpc,UAAWA,EAAjB,SACI,sBAAMA,UAAU,SAAhB,SAA0BuD,EAAQmB,QAAQyU,KAAKC,aAM3D,IAAK,iBACD,OACI,uBAAMpZ,UAAWA,EAAjB,UACI,cAAC,GAAD,CAAsBuD,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,IAC3D,sBAAMxN,UAAU,SAAhB,SACKiN,GAAM,2BAA4B,CAC/BgM,MAAO1V,EAAQmB,QAAQ2U,QAAQJ,aAMnD,IAAK,8BACD,OAAG1V,EAAQ+W,gBAEH,sBAAMta,UAAWA,EAAjB,SACI,sBAAMA,UAAU,SAAhB,SAA0B6M,GAAG,kCAKjC,sBAAM7M,UAAWA,EAAjB,SAA4B,sBAAMA,UAAU,SAAhB,SACvBiN,GAAM,0BAA2B,CAC9B8L,KAAM,cAACiB,GAAD,CAAgBzW,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,IAC3DjF,MAAOhF,EAAQmB,QAAQ6D,YAM3C,IAAK,cACD,OACI,uBAAMvI,UAAWA,EAAjB,UACI,cAAC,GAAD,CAAsBuD,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,IAC3D,sBAAMxN,UAAU,SAAhB,SAA0BuD,EAAQmB,QAAQ8F,KAAKA,KAAK0J,QAAQ,qBAAsB,UAI9F,IAAK,qBACD,OACI,cADK,CACL,QAAMlU,UAAWA,EAAjB,UACI,cAAC,GAAD,CAAsBuD,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,IAC3D,sBAAMxN,UAAU,SAAhB,SAA0BgO,GAAK,iCAI3C,IAAK,eACD,OACI,cADK,CACL,QAAMhO,UAAWA,EAAjB,UACI,cAAC,GAAD,CAAsBuD,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,IAC3D,sBAAMxN,UAAU,SAAhB,wBACA,sBAAMA,UAAU,SAAhB,SAA0BuD,EAAQmB,QAAQ2X,MAAM9T,WAI5D,IAAK,eACD,OAAGhF,EAAQmB,QAAQyX,UACZ5Y,EAAQyP,YAEH,sBAAMhT,UAAWA,EAAjB,SACI,sBAAMA,UAAU,SAAhB,SAA0B6M,GAAG,0BAKjC,sBAAM7M,UAAWA,EAAjB,SAA4B,sBAAMA,UAAU,SAAhB,SACvBiN,GAAM,yBAA0B,CAC7B8L,KAAM,cAACiB,GAAD,CAAgBzW,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,UAOvE,cAAC+L,GAAD,CACIvc,KAAM6P,GAAG,oBACT2M,QAAO,UAAEjW,EAAQmB,QAAQ8U,eAAlB,aAAE,EAAyBhP,KAClCxK,UAAWA,EACXuD,QAASA,EACToD,KAAMA,EACN6G,MAAOA,EACP8O,SAAS,EACT7C,WAAY,WAAClW,EAAQmB,eAAT,iBAAC,EAAiB6X,aAAlB,iBAAC,EAAwB5C,qBAAzB,aAAC,EAAuC1E,QAVxD,IAAD,QAcX,IAAK,mBACD,OACI,uBAAMjV,UAAWA,EAAjB,UACI,cAAC,GAAD,CAAsBuD,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,IAC3D,sBAAMxN,UAAU,SAAhB,SAA0B6M,GAAG,iCAIzC,IAAK,4BACD,OAAGtJ,EAAQ+W,gBAEH,sBAAMta,UAAWA,EAAjB,SAA4B,sBAAMA,UAAU,SAAhB,SACvBiN,GAAM,0CAA2C,CAC9CgJ,KAAMhJ,GAAM,0BAA2B,CACnCgJ,KAAMuB,GAAkBjU,EAAQmB,QAAQ8X,YACxCC,KAAMjG,GAAajT,EAAQmB,QAAQ8X,oBAO/C,sBAAMxc,UAAWA,EAAjB,SAA4B,sBAAMA,UAAU,SAAhB,SACvBiN,GAAM,wCAAyC,CAC5C8L,KAAM,cAACiB,GAAD,CAAgBzW,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,IAC3DyI,KAAMhJ,GAAM,0BAA2B,CACnCgJ,KAAMuB,GAAkBjU,EAAQmB,QAAQ8X,YACxCC,KAAMjG,GAAajT,EAAQmB,QAAQ8X,oBAO3D,IAAK,0BACD,OAAGjZ,EAAQ+W,gBAEH,sBAAMta,UAAWA,EAAjB,SACI,sBAAMA,UAAU,SAAhB,SAA0B6M,GAAG,6CAKjC,sBAAM7M,UAAWA,EAAjB,SAA4B,sBAAMA,UAAU,SAAhB,SACvBiN,GAAM,sCAAuC,CAC1C8L,KAAM,cAACiB,GAAD,CAAgBzW,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,UAM/E,IAAK,wBACD,OAAGjK,EAAQ+W,gBAEH,sBAAMta,UAAWA,EAAjB,SAA4B,sBAAMA,UAAU,SAAhB,SACvBiN,GAAM,iCAAkC,CACrC2K,SAAUD,GAAiBpU,EAAQmB,QAAQkT,gBAMnD,sBAAM5X,UAAWA,EAAjB,SAA4B,sBAAMA,UAAU,SAAhB,SACvBiN,GAAM,uCAAwC,CAC3C8L,KAAM,cAACiB,GAAD,CAAgBzW,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,IAC3DoK,SAAUD,GAAiBpU,EAAQmB,QAAQkT,gBAM/D,IAAK,qCACD,IAAI8E,EAAgBnZ,EAAQmB,QAAQiY,SAAS/iB,KAAI,SAAAY,GAAE,OAC/Cme,GAAgBnL,EAAMhT,OAE1B,OADAkiB,EAAgBpP,IAAa,EAAMoP,GAAgB,GAE/C,sBAAM1c,UAAWA,EAAjB,SAA4B,sBAAMA,UAAU,SAAhB,SACvBiN,GAA8B,GAAvByP,EAAethB,OAAY,yBAA2B,+BAAiC,CAC3F2d,KAAM,cAACiB,GAAD,CAAgBzW,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,IAC3DI,KAAM8O,EACNlP,MAAOkP,EACP/V,KAAMkG,GAAG,qCAKzB,IAAK,mBACD,OACI,cAACkN,GAAD,CACI/c,KAAM6P,GAAG,oBACT2M,QAAO,UAAEjW,EAAQmB,QAAQ8U,eAAlB,aAAE,EAAyBhP,KAClCxK,UAAWA,EACXuD,QAASA,EACToD,KAAMA,EACN6G,MAAOA,IAGnB,IAAK,0BACD,OACI,sBAAMxN,UAAWA,EAAjB,SAA4B,sBAAMA,UAAU,SAAhB,SACvBiN,GAAM,qCAAsC,CACzC2P,OAAQrZ,EAAQmB,QAAQmY,kBAKxC,QACI,OAAO,MAenB,SAAS9C,GAAT,GAA2E,IAAlD/c,EAAiD,EAAjDA,KAAMwc,EAA2C,EAA3CA,QAASxZ,EAAkC,EAAlCA,UAAWuD,EAAuB,EAAvBA,QAASoD,EAAc,EAAdA,KAAM6G,EAAQ,EAARA,MAE9D,OADGgM,IAASxc,GAAM,KAEd,uBAAMgD,UAAWA,EAAjB,UACI,cAAC,GAAD,CAAsBuD,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,IAC3D,sBAAMxN,UAAU,SAAhB,SAA0BhD,IAF9B,IAE2C,sBAAMgD,UAAU,SAAhB,SAA0BwZ,EAAQtF,QAAQ,qBAAsB,UAmBnH,SAASqF,GAAT,GAAyG,IAAvEE,EAAsE,EAAtEA,WAAY6C,EAA0D,EAA1DA,QAAStf,EAAiD,EAAjDA,KAAMwc,EAA2C,EAA3CA,QAASxZ,EAAkC,EAAlCA,UAAWuD,EAAuB,EAAvBA,QAASoD,EAAc,EAAdA,KAAM6G,EAAQ,EAARA,MAC5F,OAAG,OAACiM,QAAD,IAACA,OAAD,EAACA,EAAYre,QAEZ,uBAAM4E,UAAWA,EAAjB,UACI,cAAC,GAAD,CAAsBuD,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,IAC1DiM,EAAW7f,KAAI,SAACqb,EAAM/Z,GAAP,OAAa+Z,GAAQ,sBAAMjV,UAAW,aAAcsc,EAAS,SAAU,IAAlD,SAA+D,qBAAK3G,IAAK,0BAA0BV,KAAvC/Z,MAChGse,EACG,sBAAMxZ,UAAU,SAAhB,SAA0BwZ,EAAQtF,QAAQ,qBAAsB,OAC/D,sBAAMlU,UAAU,SAAhB,SAA0BhD,OAPR,cAAC+c,GAAD,CAAgB/c,KAAMA,EAAMwc,QAASA,EAASxZ,UAAWA,EAAWuD,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,IA+B5I,SAASwM,GAAT,GAA6D,IAApCzW,EAAmC,EAAnCA,QAASoD,EAA0B,EAA1BA,KAAM6G,EAAoB,EAApBA,MACpC,GADwD,EAAbsP,WAEvC,OAAOvZ,EAAQyP,YAAcnG,GAAG,gBAAkB,cAACmN,GAAD,CAAgBzW,QAASA,EAASoD,KAAMA,EAAM6G,MAAOA,IAE3G,IAAM4M,EAAO7W,EAAQ6W,OACfxM,EAAKJ,EAAM4M,EAAOjK,SACxB,MAAoB,qBAAjBiK,EAAO,SACCzB,GAAgB/K,GACA,qBAAjBwM,EAAO,SACNzT,EAAK4B,WADT,EAeX,SAASiS,GAAT,GAAiH,IAEzGJ,EAF6B7W,EAA2E,EAA3EA,QAASoD,EAAkE,EAAlEA,KAAM6G,EAA4D,EAA5DA,MAAOiN,EAAqD,EAArDA,SAAUC,EAA2C,EAA3CA,aAA2C,IAA7BxP,cAA6B,MAAtB,GAAsB,MAAlBE,aAAkB,WAAZlO,EAAY,EACxG6S,EAAQ2K,EAEZ,IAAInX,EAAQyP,YAAY,CACpBjD,EAAQ0K,EAER,IAAM7M,EAAKJ,EAAMjK,EAAQ6W,OAAOjK,SACJ,qBAAzB5M,EAAQ6W,OAAO,SACdA,EAAQzB,GAAgB/K,GACO,qBAAzBrK,EAAQ6W,OAAO,WACrBA,EAAQzT,EAAK4B,OAIrB,YAAUrL,GAAPkO,EACQ6B,GAAM8C,EAAD,aACRgJ,KAAMqB,GACHlP,IAGAiC,GAAK4C,EAAQ3E,EAAT,aACP2N,KAAMqB,GACHlP,IAMR,IAAM6R,GACT,YAAwD,IAGhDC,EAHwBzZ,EAAuB,EAAvBA,QAASoD,EAAc,EAAdA,KAAM6G,EAAQ,EAARA,MAC3C,OAAIjK,GAGDoD,IAAUpD,EAAQ+W,kBACd/W,EAAQyP,YACPgK,EAAOnQ,GAAG,gBACJ,CAAC,qBAAsB,sBAAsBnJ,SAASiD,EAAK3J,KAAK,WAC1C,qBAAzBuG,EAAQ6W,OAAO,WACd4C,EAAOxP,EAAMjK,EAAQ6W,OAAOjK,SAASyI,YAGjB,qBAAzBrV,EAAQ6W,OAAO,WACd4C,EAAOnU,EAAetF,EAAQ6W,OAAOlW,SAASqE,QAG/CyU,EAAO,uBAAMhd,UAAU,SAAhB,UAA0BiN,GAAM,gCAAiC,CAAC8L,KAAMiE,IAAxE,OAA2F,MAfrF,M,0BCx2BjBC,GAAahY,aAKpB,WAA8B,IAApBlF,EAAmB,uDAAZ,GAAIuD,EAAQ,uCACzB,OAAQA,EAAOtG,MACX,IAAK,aACD,MAAM,GAAN,mBACO+C,GADP,CAEIuD,EAAO4Z,SAGf,IAAK,gBACD,OAAOnd,EAAMod,QAAO,SAAA/V,GAAK,OAAIA,EAAM5M,IAAI8I,EAAO9I,SAM1DoB,OAAOyL,8BAAgCzL,OAAOyL,gCAO3C,SAAS+V,GAAU5iB,EAAI0iB,GAC1BD,GAAY7Y,SAAS,CACjBpH,KAAM,aACNkgB,OAAQ,CACJG,QAASH,EACT1iB,GAAIA,KAST,SAAS8iB,GAAa9iB,GACzByiB,GAAY7Y,SAAS,CACjBpH,KAAM,gBACNxC,GAAIA,IAOZ,IAWe+iB,GAXC5O,aAAQ,SAAU5O,GAC9B,MAAO,CAACyd,QAASzd,GAAS,MADd4O,EAGb,YAAgD,IAA9B6O,EAA6B,EAA7BA,QAAsBvb,GAAO,EAApBmC,SAAoB,mBAC9C,OACI,6CAAKqZ,gBAAeD,EAAQpiB,QAAY6G,GAAxC,aACKub,EAAQ5jB,KAAI,SAAA8jB,GAAE,OAAI,cAAC,IAAMpT,SAAP,UAA6BoT,EAAGL,SAAXK,EAAGljB,QAAsC,W,4BCzD9E,SAASmjB,GAAT,GAAuD,IAAhCtN,EAA+B,EAA/BA,SAAUuN,EAAqB,EAArBA,UAAc3b,EAAO,kBAC3Df,EAAQb,IAAM6B,SAAS,CAACnC,MAAO,QACrC,EAAwC0B,EAA4BP,GAApE,mBAAO4B,EAAP,KAAkBtB,EAAlB,KAA2BuB,EAA3B,KACA,OACI,iDACI/C,UAAU,eACV6d,iBAAgBD,EAAW,OAAQ,QACnCzb,YAAaW,EACbV,UAAWZ,EACXa,aAAcU,GACVd,GANR,cAQI,cAAC,EAAD,2BAAkBf,EAAO,IAAzB,IAA6Bd,MAAM,4CAGnC,qBAAKJ,UAAU,gBAAf,SACKqQ,IAGL,qBAAKrQ,UAAU,UAAf,SACKqQ,Q,ICpBIyN,G,4MASjB/d,MAAO,CACHge,SAAS,G,EAEb5T,IAAM9J,IAAM2d,Y,EAEZhb,QAAS,SAAC5I,GACFA,EAAEsG,SAAW,EAAKyJ,IAAImH,SACtB,EAAK2M,S,EAcbA,MAAO,WACH,EAAK9c,SAAS,CACV4c,SAAS,IAEb3c,YAAW,WACPkc,GAAa,EAAKne,MAAM3E,MACzB,M,4CAjBP,WACI,OACI,qBAAK2P,IAAKhP,KAAKgP,IAAKnH,QAAS7H,KAAK6H,QAASxI,GAAIW,KAAKgE,MAAM3E,GAAIwF,UAAW,gBAAmB7E,KAAK4E,MAAMge,QAAW,YAAc,KAAO5iB,KAAKgE,MAAMa,UAAlJ,SACI,qBAAKC,MAAO,CACR,MAAS9E,KAAKgE,MAAMI,OAAS,QADjC,SAGKpE,KAAKgE,MAAMkR,iB,GAzBIhQ,IAAMC,WCCrB4d,G,4MACjBC,UAAY9d,IAAM2d,Y,EAClBI,SAAU,WACN,EAAKD,UAAU7M,QAAQ2M,QACvB,EAAK9e,MAAMkf,MAAQ,EAAKlf,MAAMkf,Q,EAElCC,aAAc,WACV,EAAKH,UAAU7M,QAAQ2M,QACvB,EAAK9e,MAAMof,UAAY,EAAKpf,MAAMof,Y,EAEtCC,aAAc,SAACvhB,GACX,EAAKkhB,UAAU7M,QAAQ2M,QACvBhhB,GAAWA,K,4CAEf,WAAU,IAAD,OACL,OACI,eAAC,GAAD,CAAQ+C,UAAU,iBAAiBxF,GAAIW,KAAKgE,MAAM3E,GAAI2P,IAAKhP,KAAKgjB,UAAW5e,MAAOpE,KAAKgE,MAAMI,OAAS,QAAtG,UACI,6BAAKpE,KAAKgE,MAAMoJ,OAAS,KACzB,qBAAKvI,UAAW,WAAa7E,KAAKgE,MAAMsf,UAAW,cAAgB,IAAnE,SACKtjB,KAAKgE,MAAMkR,WAEhB,sBAAKrQ,UAAU,UAAf,UACK7E,KAAKgE,MAAMuf,YACR,cAACf,GAAD,CACI3d,UAAU,oBACVC,MAAO,CAAC,MAAS,QACjB+C,QAAU7H,KAAKgE,MAAMwf,wBACjB,kBAAI,EAAKH,aAAa,EAAKrf,MAAMyf,qBAC/BzjB,KAAKgE,MAAMyf,mBALrB,SAMKzjB,KAAKgE,MAAMuf,cAEhB,KACHvjB,KAAKgE,MAAM0f,iBAAmB,KAC3B,cAAClB,GAAD,CAAa3a,QAAS,kBAAI,EAAKwb,aAAa,EAAKrf,MAAMof,WAAvD,SACK1R,GAAG,gBAGZ,cAAC8Q,GAAD,CAAa3a,QAAS,kBAAI,EAAKwb,aAAa,EAAKrf,MAAMkf,OAAOT,UAAWziB,KAAKgE,MAAMye,UAApF,SACKziB,KAAKgE,MAAM2f,cAAgBjS,GAAG,0B,GAtCZxM,IAAMC,WCe3Cye,G,kDACF,WAAY5f,GAAQ,IAAD,uBACf,cAAMA,IAGVY,MAAO,CACHmB,OAAQ,CACJnB,MAAO,QANI,EA8BnBif,SAAW,WACPha,EAAUZ,SAAS,CACfpH,KAAM,cACNkH,QAAS,EAAK/E,MAAMwH,KAAKnM,MAjCd,MAEkCwG,EAAoB,gBAFtD,0BAEd,EAAK8B,UAFS,KAEE,EAAKtB,QAFP,KAEgB,EAAKuB,WAFrB,O,yDASnB,SAAsBkc,EAAWC,GAAY,IAAD,QACxC,SAASC,EAAQhgB,GACb,MAA6B,mBAA1BA,EAAMwH,KAAK3J,KAAK,SACRmC,EAAMqO,MAAMrO,EAAMwH,KAAK3J,KAAKmT,SAEhC,KAEX,OAAO8O,EAAUtY,KAAKnM,KAAOW,KAAKgE,MAAMwH,KAAKnM,IACtCykB,EAAUtY,KAAKkB,eAAiB1M,KAAKgE,MAAMwH,KAAKkB,cAChDoX,EAAUtY,KAAKa,gBAAkBrM,KAAKgE,MAAMwH,KAAKa,eACjDyX,EAAUtY,KAAKX,eAAiB7K,KAAKgE,MAAMwH,KAAKX,cAChDiZ,EAAUtY,KAAK6B,uBAAyBrN,KAAKgE,MAAMwH,KAAK6B,sBACxDyW,EAAUtY,KAAKiB,sBAAwBzM,KAAKgE,MAAMwH,KAAKiB,qBACvDqX,EAAUtY,KAAKI,SAASjC,YAAc3J,KAAKgE,MAAMwH,KAAKI,SAASjC,YAC/D,UAAAma,EAAUtY,KAAKuB,aAAf,mBAAsB9I,aAAtB,eAA6B5E,OAA7B,UAAoCW,KAAKgE,MAAMwH,KAAKuB,aAApD,iBAAoC,EAAuB9I,aAA3D,aAAoC,EAA8B5E,KAClEykB,EAAUtY,KAAK4B,QAAUpN,KAAKgE,MAAMwH,KAAK4B,OACzC0W,EAAUtY,KAAKyB,8BAAgCjN,KAAKgE,MAAMwH,KAAKyB,6BAC/D6W,EAAUG,WAAajkB,KAAKgE,MAAMigB,UAClCF,EAAUhe,SAAW/F,KAAK4E,MAAMmB,QAChCie,EAAQF,KAAeE,EAAQhkB,KAAKgE,S,oBAQ/C,WAAS,IAAD,wBACEwH,EAAK,eAAKxL,KAAKgE,MAAMwH,MACvB0Y,EAAU,GACc,uBAAxB,UAAA1Y,EAAK3J,YAAL,eAAY,WACiB,uBAAxB,UAAA2J,EAAK3J,YAAL,eAAY,WACY,IAAzB,UAAA2J,EAAK3J,YAAL,eAAWsiB,YAEfD,EhC3Da,i6HgC6DgB,uBAAxB,UAAA1Y,EAAK3J,YAAL,eAAY,WACY,IAAzB,UAAA2J,EAAK3J,YAAL,eAAWsiB,YACfD,EhChEgB,8vpBgCkEc,oBAAxB,UAAA1Y,EAAK3J,YAAL,eAAY,WAC4C,gBAAzD,UAAA7B,KAAKgE,MAAMqO,MAAX,UAAiB7G,EAAK3J,YAAtB,aAAiB,EAAWmT,gBAA5B,mBAAsCnT,YAAtC,eAA6C,YAClDqiB,EhCrEY,yvHgCuEZ1Y,EAAKnM,IAAIsY,GAAO,sBAChBuM,EAAU,IAGX3O,GAAyB/J,EAAMxL,KAAKgE,MAAMqO,SACzC7G,EAAK4B,MAAOsE,GAAG,gBAGnB,IAAM0S,ElB5CP,SAAwB5Y,GAAM,IAAD,IAChC,OAAQA,EAAK3J,KAAK,UACd,IAAK,qBACD,OAAO,EAEX,IAAK,qBAED,OADc,UAAEwT,GAAgB1H,kBAAlB,aAAE,EAA6BnC,EAAK3J,KAAK8Y,gBACrC0J,YAEtB,IAAK,iBACL,IAAK,kBAED,OADQ,UAAExP,GAAWlH,kBAAb,aAAE,EAAwBnC,EAAK3J,KAAKmT,UAChCqP,YAEpB,OAAO,EkB8BeC,CAAe9Y,GAE7BA,EAAKnM,IAAIsY,GAAO,QAChBnM,EAAK4B,MAAOsE,GAAG,uBAGnB,IAAI6S,EAAgB,KACpB,OAAO3M,GAAiBpM,EAAMA,EAAKkB,eAC/B,IAAK,UACD6X,EAAgB,sBAAM1f,UAAU,8BAA8BsC,wBAAyB,CAACC,OAAQE,KAChG,MACJ,IAAK,OACDid,EAAgB,sBAAM1f,UAAU,2BAA2BsC,wBAAyB,CAACC,OhCnF5E,s0DgCoFT,MACJ,IAAK,OACDmd,EAAgB,sBAAM1f,UAAU,2BAA2BsC,wBAAyB,CAACC,OhCzFxE,wqEgC6FrB,IAAIod,EAAc,KACZC,EAAkBjZ,EAAKoB,sBAAsB8X,SAAW,qBAAuB,eAEpD,GAA7BlZ,EAAK6B,sBAA6B7B,EAAKX,cAAgBW,EAAK6B,qBAC5DmX,EAAc,sBAAM3f,UAAU,uBAAhB,eAGT2G,EAAK6B,qBAAuB,GAAK7B,EAAKX,aAAe,EAC1D2Z,EAAc,eAAC,IAAMrV,SAAP,WACV,sBAAMtK,UAAU,uBAAhB,eACA,sBAAMA,UAAW4f,EAAjB,SAAoCjZ,EAAKX,kBAIxCW,EAAKX,aAAe,GAAkC,GAA7BW,EAAK6B,qBACnCmX,EAAc,sBAAM3f,UAAW4f,EAAjB,SAAoCjZ,EAAKX,eAGlDW,EAAKiB,sBACV+X,EAAc,sBAAM3f,UAAW4f,KAGnC,IAAIE,GAAU,EACd,GAAyB,mBAArBnZ,EAAK3J,KAAK,UACT2J,EAAKnM,IAAIsY,GAAO,OAAenM,EAAKnM,IAAIsY,GAAO,uCAA6C,CAC7F,IAAMlF,EAAMzS,KAAKgE,MAAMqO,MAAM7G,EAAK3J,KAAKmT,SACpCvC,IACCkS,EAAgC,mBAAtBlS,EAAK5Q,KAAK,UAAyD,oBAAxB4Q,EAAKsC,OAAO,UAIzE,OACI,sBAAKlQ,UAAW,QAAU7E,KAAKgE,MAAMigB,SAAU,UAAY,IAAKpc,QAAS7H,KAAK6jB,SAC1Ee,cAAe,SAAA3lB,GAAC,OAAG0X,GAAkB1X,EAAG,cAAC4lB,GAAD,CAAiBrZ,KAAMA,MAC/DxE,YAAahH,KAAK2H,UAAWV,UAAWjH,KAAKqG,QAASa,aAAclH,KAAK4H,WAF7E,UAII,cAAC,EAAD,2BAAkB5H,KAAK4E,MAAMmB,QAA7B,IAAqCd,MAAM,wCAC3C,sBAAKJ,UAAU,UAAUigB,cAAaH,EAAW,OAAS,QAA1D,UACI,cAACzL,GAAD,CAAc/H,KAAM3F,EAAK4B,MAAOL,MAAK,UAAEvB,EAAKuB,aAAP,aAAE,EAAY9I,MAAO5E,GAAIqb,GAAclP,KAC5E,sBAAK3G,UAAU,UAAf,UACI,sBAAKA,UAAU,MAAf,UACI,sBAAKA,UAAU,OAAf,UACI,qBAAKA,UAAU,YAAYsC,wBAAyB,CAACC,OAAQ8c,KAC7D,qBAAKrf,UAAU,QAAf,SAAwB2G,EAAK4B,QAC5BgX,GAAc,uBAAMvf,UAAU,gBAAhB,UACX,sBAAMA,UAAU,qBAAqBsC,wBAAyB,CAACC,OhCrIjE,4vCgCsIE,sBAAMvC,UAAU,sBAAsBsC,wBAAyB,CAACC,OhCvIjE,05GgC0IP,sBAAKvC,UAAU,QAAf,UACK0f,GACA,UAAA/Y,EAAKkB,oBAAL,eAAmBoO,OAAQ,sBAAMjW,UAAU,OAAhB,SAAwBgW,GAAsBrP,EAAKkB,aAAaoO,cAGpG,sBAAKjW,UAAU,SAAf,UACI,qBAAKA,UAAU,OAAf,SACM2G,EAAKa,gBAAkBmY,EACrB,uBAAM3f,UAAU,eAAhB,UACI,uBAAMA,UAAU,QAAhB,UAAyB6M,GAAG,kBAA5B,OADJ,IAC2D,sBAAM7M,UAAU,SAAhB,SAA0B2G,EAAKa,cAAc0Y,mBAAmB1V,KAAKA,UAGhI,cAAC8O,GAAD,CAA2B/V,QAASoD,EAAKkB,aAAc2F,MAAOrS,KAAKgE,MAAMqO,MAAO7G,KAAMA,EAAM3G,UAAU,mBAG9G,qBAAKA,UAAU,QAAf,SACK2f,IACG,UAAAhZ,EAAKI,gBAAL,eAAejC,YAAa,sBAAM9E,UAAU,cAAcsC,wBAAyB,CAACC,OhChK7F,s+C,GgCaAlC,IAAMC,WAqKpB6f,GAAOxR,aAAQ,SAAA5O,GAAK,MAAI,CAACyN,MAAOzN,KAAzB4O,CAAkCoQ,IAGtD,SAASiB,GAAT,GAAkC,IAARrZ,EAAO,EAAPA,KACtB,EAAgDtG,IAAM6B,SAAS,IAA/D,mBAAOke,EAAP,KAAyBC,EAAzB,KAoCA,OAjCAhgB,IAAMoO,WAAU,WACZxS,EAAMc,UAAU,CACZ,QAAS,wBACTmH,QAASyC,EAAKnM,KACfL,MAAK,SAAAqD,GACJ6iB,EAAoB7iB,EAAO8iB,WAAW1mB,KAAI,SAAAiM,GACtC,IAAM2E,EAAM,CACR,aAAgBqC,GAAG,oBACnB,gBAAmBA,GAAG,wBACxBhH,EAAS,UACX,GAAI2E,EACJ,OACI,cAAC0H,GAAKE,SAAN,CAAkEpP,QAAS,WACvE/G,EAAMc,UAAU,CACZ,QAAS,gBACTmH,QAASyC,EAAKnM,GACdsL,UAAWD,IACZ1L,MAAK,WACoB,gBAArB0L,EAAS,SACR6M,GAAS,cAACH,GAAD,UAAQ1F,GAAG,2BAEK,mBAArBhH,EAAS,UACb6M,GAAS,cAACH,GAAD,UAAQ1F,GAAG,6BAVhC,SAcKrC,GAde3E,EAASM,gBAAkBN,EAAS,mBAmBrE,IAGC,eAACqM,GAAKC,aAAN,WACKiO,EACD,cAAClO,GAAKE,SAAN,CAAepP,QAAS,WACpB/G,EAAMc,UAAU,CACZ,QAAS,qBACT+I,UAAWa,EAAKI,SAASE,KACzB/C,QAASyC,EAAKnM,GACdsK,WAAY6B,EAAKI,SAASjC,YAC3BwO,OAAM,SAAA7V,GAEL,GAAiB,KAAdA,EAAMnD,KAAa,CAClB,IAAMwF,EAAoC,gBAA/B6G,EAAKI,SAASE,KAAK,SAA4B6L,GAAO,sBAA4BA,GAAO,+BACpGsK,GAAU,+BACN,cAAC,GAAD,CAAe5iB,GAAG,+BAA+BikB,WAAW,EAAMI,kBAAkB,EAApF,SACK1R,GAAK,uBAAwBrN,WAZlD,SAkBK6G,EAAKI,SAASjC,UAAW+H,GAAG,8BAAgCA,GAAG,+BC7NzE,SAAS0T,GAAiBhb,EAAO0B,GACpC,OAAO1B,EAAM3L,KAAI,SAAA+M,GAAQ,oBACEA,EAAKG,WADP,IACrB,IAAI,EAAJ,qBAAwC,CAAC,IAA9BC,EAA6B,QACpC,GAAIC,EAAgBC,EAAMF,EAASE,MAC/B,MAAoB,KAAhBF,EAASyZ,OACN,2BACA7Z,GADP,IAEII,SAAUA,KAND,8BAUrB,OAAOJ,KAENwW,QAAO,SAAAxW,GAAI,QAAMA,EAAKI,YACtB0Z,MAAK,SAACC,EAAGC,GACN,IAAIC,EAAQF,EAAE3Z,SAASyZ,MAAOK,EAAQF,EAAE5Z,SAASyZ,MAEjD,OAAII,GAAUC,EACH,EAEPD,EAASC,EACF,GAEH,KAOpB,IA8FeC,GA9FCnS,aAAQ,SAAA5O,GAAK,MAAI,CAACghB,gBAAiBhhB,KAAnC4O,CAAA,4MASR5O,MAAO,CACHihB,oBAAoB,EACpBC,kBAAkB,GAXd,EAaRhY,UAAW5I,IAAM2d,YAbT,EAeRkD,SAAU,SAAC9mB,GACP,IAAM+mB,EAAS/mB,EAAEsG,OAAO0gB,UAAY,IAChCD,GAAW,EAAKphB,MAAMihB,oBACtB,EAAK7f,SAAS,CAAC6f,mBAAoBG,KAlBnC,EA+DRE,YAAa,WAAO,IAAD,EACf,YAAKpY,UAAUqI,eAAf,SAAwBgQ,KAAKC,OAAO,CAChCxgB,IAAK,EACLygB,SAAU,YAlEV,2DAyBR,SAAsBvC,EAAWC,GAC7B,OAAQD,EAAU1Z,QAAUpK,KAAKgE,MAAMoG,OAChC0Z,EAAUhY,OAAS9L,KAAKgE,MAAM8H,MAC9BgY,EAAUvZ,SAAWvK,KAAKgE,MAAMuG,QAChCuZ,EAAU8B,kBAAoB5lB,KAAKgE,MAAM4hB,iBACzC9B,EAAUxZ,eAAiBtK,KAAKgE,MAAMsG,cACtCyZ,EAAU8B,qBAAuB7lB,KAAK4E,MAAMihB,oBAC5C9B,EAAU+B,mBAAqB9lB,KAAK4E,MAAMkhB,mBACb,2BAA7BhC,EAAU8B,iBACV7B,EAAU+B,mBAlCb,oBAqCR,WAAU,IAAD,OAECQ,EACFlB,GAAiBplB,KAAKgE,MAAMoG,MAAOpK,KAAKgE,MAAM8H,MACzCrN,KAAI,SAAA+M,GAAI,OACL,cAACwZ,GAAD,CAAoBxZ,KAAMA,EAAMyY,SAAU,EAAKjgB,MAAMsG,cAAgBkB,EAAKnM,IAA/DmM,EAAKnM,OAG5B,OACI,eAAC,IAAM8P,SAAP,WACI,eAACvB,EAAD,CAAYE,UAAW9N,KAAK8N,UAAWzO,GAAG,YAAYwO,eAAe,IAAIkY,SAAU/lB,KAAK+lB,SAAxF,UAC+B,gBAA1B/lB,KAAKgE,MAAM8H,KAAK,UACb,cAAC,IAAD,CAAUya,MAAO1c,EAAjB,SACI,cAAC,GAAD,CAAmBO,MAAOpK,KAAKgE,MAAMoG,UAG7C,cAAC,IAAD,CAAUmc,MAAO1R,GAAjB,SACKyR,EAAMrmB,OAASqmB,EAAS,cAACE,GAAD,CAAe1a,KAAM9L,KAAKgE,MAAM8H,KAAMvB,OAAQvK,KAAKgE,MAAMuG,cAG1F,cAAC3D,EAAD,CAAYC,KjChGJ,61BiCgG2BgB,QAAS7H,KAAKkmB,YAC7CrhB,UAAW,oBAAoB7E,KAAK4E,MAAMihB,mBAAqB,UAAY,WA1DnF,+BAsER,WAAqB,IAAD,OAChB9S,GAAyB,GAAI/S,KAAKkmB,YAElCplB,EAAMc,UAAU,CACZ,QAAS,YACT,UAAa,CACT,QAAS,gBAEb,MAAS,KACV5C,MAAK,WACJ,EAAKgH,SAAS,CACV8f,kBAAkB,OAG1BhlB,EAAMc,UAAU,CACZ,QAAS,YACT,UAAa,CACT,QAAS,mBAEb,MAAS,SAzFT,GACWsD,IAAMC,YA+F3BshB,GAAmBjT,aAAQ,SAAA5O,GAAK,MAAI,CACtCqF,mBAAoBrF,EAAMqF,mBAC1BM,OAAQ3F,EAAM2F,OAAOE,WAFA+I,EAGpB,YAAiE,IAArCpJ,EAAoC,EAApCA,MAAOG,EAA6B,EAA7BA,OAAQN,EAAqB,EAArBA,mBACtCyc,EAActB,GAAiBhb,EAAO,CAAC,QAAS,oBACtD,IAAIsc,EAAYzmB,OAAQ,OAAO,KAG/B,IAAM8F,EAAQb,IAAM6B,SAAS,CAACnC,MAAO,QACrC,EAAwC0B,EAA4BP,GAApE,mBAAO4B,EAAP,KAAkBtB,EAAlB,KAA2BuB,EAA3B,KAEA,SAAS+e,IACL9c,EAAUZ,SAAS,CACfpH,KAAM,oBACNmI,aAAc,SAKtB,SAAS4c,EAAehiB,GACpBiF,EAAUZ,SAAS,CACfpH,KAAM,2BACNoI,mBAAoBrF,IAI5B,IAAMiiB,EAAqB,cAACzP,GAAD,UAAQ1F,GAAG,sCAEtC,OAAOzH,GACH,IAAK,WACL,QACI,OACI,sBACIpF,UAAU,gBAAgBgD,QAAS8e,EACnC3f,YAAaW,EAAWV,UAAWZ,EAASa,aAAcU,EAC1Dgd,cAAe,SAAA3lB,GAAC,OAAG0X,GAAkB1X,EACjC,eAAC8X,GAAKC,aAAN,WACI,cAACD,GAAKE,SAAN,CAAepP,QAAS,WACpB+e,EAAe,aACf1c,aAAa4c,QAAQ,qCAAsC,cAF/D,SAIKpV,GAAG,kCAER,cAACqF,GAAKE,SAAN,CAAepP,QAAS,WACpB+e,EAAe,mBACf1c,aAAa4c,QAAQ,qCAAsC,mBAC3DvP,GAASsP,IAHb,SAKKnV,GAAG,sCAhBpB,UAoBI,cAAC,EAAD,2BAAkB3L,EAAO,IAAzB,IAA6Bd,MAAM,wCACnC,sBAAKJ,UAAU,UAAf,UACI,qBAAKA,UAAU,gBAAf,SACI,qBAAKA,UAAU,MAAMsC,wBAAyB,CAACC,OAAQC,OAE3D,sBAAKxC,UAAU,UAAf,UACI,qBAAKA,UAAU,MAAf,SACI,qBAAKA,UAAU,OAAf,SACI,qBAAKA,UAAU,QAAf,SAAwB6M,GAAG,2BAGnC,sBAAK7M,UAAU,SAAf,UACI,qBAAKA,UAAU,OAAf,SACI,sBAAKA,UAAU,eAAf,UACI,sBAAMA,UAAU,SAAhB,SACK6hB,EACI1E,QAAO,SAAAxW,GAAI,OAAGA,EAAKX,aAAe,KAClCpM,KAAI,SAAA+M,GAAI,OAAIgK,GAA0BhK,GAAQ,QAC9CoH,KAAK,MAEd,sBAAM/N,UAAU,SAAhB,SACK6hB,EACI1E,QAAO,SAAAxW,GAAI,OAAwB,GAArBA,EAAKX,gBACnBpM,IAAI+W,IACJ5C,KAAK,aAIrBrI,EAAOK,sBACJ,qBAAK/F,UAAU,QAAf,SACI,sBAAMA,UAAU,qBAAhB,SAAsC0F,EAAOK,0BAEjD,iBAO5B,IAAK,YACD,OACI,sBACI/F,UAAU,0BAA0BgD,QAAS8e,EAC7C3f,YAAaW,EAAWV,UAAWZ,EAASa,aAAcU,EAC1Dgd,cAAe,SAAA3lB,GAAC,OAAG0X,GAAkB1X,EACjC,eAAC8X,GAAKC,aAAN,WACI,cAACD,GAAKE,SAAN,CAAepP,QAAS,WACpB+e,EAAe,YACf1c,aAAa4c,QAAQ,qCAAsC,aAF/D,SAIKpV,GAAG,gCAER,cAACqF,GAAKE,SAAN,CAAepP,QAAS,WACpB+e,EAAe,oBACf1c,aAAa4c,QAAQ,qCAAsC,oBAC3DvP,GAASsP,IAHb,SAKKnV,GAAG,sCAhBpB,UAoBI,cAAC,EAAD,2BAAkB3L,EAAO,IAAzB,IAA6Bd,MAAM,wCACnC,sBAAKJ,UAAU,UAAf,UACK6M,GAAG,qBACHnH,EAAOK,sBACJ,qBAAK/F,UAAU,UAAf,SACI,sBAAMA,UAAU,qBAAhB,SAAsC0F,EAAOK,0BAEjD,WAIpB,IAAK,kBACL,IAAK,mBACD,OAAO,SASnB,SAAS4b,GAAT,GAAwC,IAMD,IAQ5B,EAda1a,EAAe,EAAfA,KAAMvB,EAAS,EAATA,OACpBwc,EACF,qBAAKliB,UAAU,QAAf,SACI,8BAAM6M,GAAG,2BAGjB,MAAkB,kBAAf5F,EAAK,SAC4D,KAA7D,UAAAvB,EAAOF,eAAP,mBAAiByB,EAAKd,uBAAtB,eAAuCC,mBAAgC8b,EAEtE,sBAAKliB,UAAU,QAAf,UACI,8BAAM6M,GAAG,yBACT,cAACuD,GAAD,UAAavD,GAAG,yBAIc,KAAnC,UAAAnH,EAAOC,YAAP,eAAaS,mBAAgC8b,EAE5C,sBAAKliB,UAAU,QAAf,UACI,8BAAM6M,GAAG,kBACT,cAACuD,GAAD,UAAavD,GAAG,+B,MC3SjB,SAASsV,GAAUhjB,GAC9B,OACI,sBAAK3E,GAAG,aAAR,UACI,mCACI4nB,YAAavV,GAAG,kBAChBzF,MAAOjI,EAAMiI,MACbib,SAAUljB,EAAMkjB,UACZljB,IACR,wBACIa,UAAU,QACVgD,QAAS,kBAAK7D,EAAMkjB,UAAYljB,EAAMkjB,SAAS,CAAC3hB,OAAQ,CAAC0G,MAAO,OAChEkb,gBAAenjB,EAAMiI,OAAS,IAAIhM,OAClCkH,wBAAyB,CAACC,OAAQI,QClBlD,IAAM4f,GAAkBtd,aACpB,WAAkD,IAAjDlF,EAAgD,uDAAxC,4BAA6BuD,EAAW,uCAC7C,OAAQA,EAAOtG,MACX,IAAK,iBACD,OAAQsG,EAAOkf,WACnB,QACI,OAAOziB,MAKvB9D,EAAMqI,sBAAsB,yBAAyB,SAAC5H,GAClD6lB,GAAgBne,SAAS,CACrBpH,KAAM,iBACNwlB,WAAY9lB,EAAOqD,MAAM,cAGlBwiB,U,oFCXA,SAASE,GAAT,GAAgG,IAAxEpS,EAAuE,EAAvEA,SAAUqS,EAA6D,EAA7DA,YAAa1iB,EAAgD,EAAhDA,UAAW2iB,EAAqC,EAArCA,WAAY5iB,EAAyB,EAAzBA,MAAOuL,EAAkB,EAAlBA,KAASnM,EAAS,kBAC1G,OACI,8CAAKa,UAAW,iBAAmBsL,EAAO,IAAMvL,EAAQ,IAAMC,GAAeb,GAA7E,cACI,qBAAKa,UAAU,QAAf,SACKqQ,IAEG,UAAPtQ,GACG,qBAAKC,UAAW,SAAW2iB,EAA3B,SACKD,QAyBd,SAASE,GAAkB9Z,EAAU3H,GAExCA,EAAS,WACTC,YAAW,WACU,WAAd0H,KACC3H,EAAS,YAEd,KC/BP,IA6Ce0hB,GA7CKlU,aAAQ,SAAU5O,GAClC,MAAO,CACH+iB,WAA4C,IAA/B/iB,EAAMyF,SAAW,IAAIpK,OAClCmK,MAAOxF,EAAMwF,MACb0B,KAAMlH,EAAMmF,gBACZC,aAAcpF,EAAMoF,aACpBO,OAAQ3F,EAAM2F,OACdD,aAAc1F,EAAM0F,gBAPRkJ,EASjB,YAA4G,IAAtFmU,EAAqF,EAArFA,WAAYvd,EAAyE,EAAzEA,MAAO0B,EAAkE,EAAlEA,KAAM9B,EAA4D,EAA5DA,aAAcO,EAA8C,EAA9CA,OAAQD,EAAsC,EAAtCA,aAAcqJ,EAAwB,EAAxBA,sBAC9E,EAA8BzO,IAAM6B,SAAS,IAAjD,mBAAK6gB,EAAL,KAAiBC,EAAjB,KAaA,OACI,eAAC,IAAM1Y,SAAP,WACI,eAACmY,GAAD,CACInX,KAAK,aACL9Q,GAAG,gBACHuF,MAAOoF,EACPwd,WAAW,iBACXD,YAAa,cAACO,GAAD,CAAe1d,MAAOA,EAAO2d,aAlBtD,WACIN,IAAkB,kBAAM5d,EAAU8D,WAAW3D,gBACzC,SAAApF,GACIiF,EAAUZ,SAAS,CACfpH,KAAM,oBACNmI,aAAcpF,QAaoD0F,aAAcA,EAAcC,OAAQA,IAL9G,UAMI,sBAAK1F,UAAU,mBAAf,WACO8iB,GAAe,cAAC,EAAoB5f,eAArB,CAAoCF,QAAS8L,IAC/D,cAACqT,GAAD,CAAW/a,MAAO2b,EAAYV,SAAU,SAAAjoB,GAAC,OAAI4oB,EAAc5oB,EAAEsG,OAAO0G,aAExE,cAAC,IAAD,CAAUsa,MAAOa,GAAjB,SACI,cAAC,GAAD,CAAUhd,MAAOA,EAAO0B,KAAMA,EAAMvB,OAAQA,EAAQD,aAAcA,SAG1E,cAAC,IAAD,CAAUic,MAAOa,GAAjB,SACI,cAAC,GAAD,YAOhB,SAASU,GAAT,GAAqE,IAA7Cvd,EAA4C,EAA5CA,OAAQD,EAAoC,EAApCA,aAAcF,EAAsB,EAAtBA,MAAO2d,EAAe,EAAfA,aACjD,OACI,eAAC,IAAD,CAAUxB,MAAOa,GAAjB,UACI,sBAAKviB,UAAU,mBAAf,UACI,cAAC+B,EAAD,CAAYC,KAAMU,EAAWM,QAASkgB,IACrCxd,EAAOC,KAAKM,8BACT,qBAAKjG,UAAU,eAAf,SACI,+BAAO0F,EAAOC,KAAKM,kCAExB,KACH,qBAAKjG,UAAU,QAAf,SAAwB6M,GAAG,0BAE/B,cAAC,GAAD,CAAUtH,MAAOA,EAAO0B,KAAM,CAAC,QAAS,mBAAoBvB,OAAQA,EAAQD,aAAcA,O,gBC7EvF,iB,iDCQA,SAAS0d,GAAT,GAAqE,IAA3CnhB,EAA0C,EAA1CA,KAAMwI,EAAoC,EAApCA,KAAM6F,EAA8B,EAA9BA,SAAU+S,EAAoB,EAApBA,SAAanhB,EAAO,kBACzEf,EAASb,IAAM6B,SAAS,CAACnC,MAAO,QACtC,EAAwC0B,EAA4BP,GAApE,mBAAO4B,EAAP,KAAkBtB,EAAlB,KAA2BuB,EAA3B,KACA,OACI,8CAAK/C,UAAU,qBAAwBiC,GAAvC,IACIE,YAAaW,EAAWV,UAAWZ,EAASa,aAAcU,EAD9D,UAEI,cAAC,EAAD,2BAAkB7B,EAAO,IAAzB,IAA6Bd,MAAM,uCACnC,sBAAKJ,UAAU,UAAf,WACOojB,GAAa,qBAAKpjB,UAAU,OAAOsC,wBAAyB,CAACC,OAAQP,KACxE,qBAAKhC,UAAU,QAAf,SAAwBwK,IACvB6F,GACG,qBAAKrQ,UAAU,QAAf,SACKqQ,W,+DCFzB,IAMegT,GANG,CACdC,OAAQH,GACRI,QCdW,SAAiBpkB,GAC5B,OAAO,iCAAKa,UAAU,sBAAyBb,KDc/CqkB,aEhBW,YAA2E,IAA3CxhB,EAA0C,EAA1CA,KAAMwI,EAAoC,EAApCA,KAAM6X,EAA8B,EAA9BA,SAAUoB,EAAoB,EAApBA,SAAaxhB,EAAO,kBAIrF,OACI,cAACkhB,GAAD,yBAAiBnhB,KAAMA,EAAMwI,KAAMA,EAAMxH,QAJ7C,WACIqf,GAAUoB,KAGoDxhB,GAA9D,aACI,uBAAOjF,KAAK,WAAWgD,UAAU,gBAAgB0jB,QAASD,EAAUE,UAAQ,QFWpFC,UGhBW,SAA4BzkB,GACvC,OACI,iCAAKa,UAAU,wBAA2Bb,M,oCCN3C,SAAS0kB,GAAkBC,GAC9B,IAAIC,EAAI,GACR,IAAI,IAAMzX,KAAQwX,EAAM,CACpB,IAAIE,EAAKF,EAAMxX,GACQ,iBAAb0X,EAAI5c,MACV2c,EAAI,iBAAmBzX,GAAO0X,EAAI5c,MACR,iBAAb4c,EAAI5c,QACjB2c,EAAI,iBAAmBzX,GAAvB,4BAAmD0X,EAAI5c,MAAM6c,OAA7D,MAGR,OAAOF,E,kCCFLG,GAAS,CAAEvN,OAAKwN,WAASC,UAAQC,UAEvC,SAASC,KACL,IACY,IADRR,EAAQze,aAAaC,QAAQ,iBAC5Bwe,IACDA,GAAO,aAAAloB,QAAO2oB,kBAAP,sBAAoB,gCAAgCC,SAAU,QAAU,MAC/Enf,aAAa4c,QAAQ,gBAAiB6B,IAE1C,OAAOA,EAGJ,IAAMW,GAAaxf,aACtB,WAGe,IAHdlF,EAGa,uDAHL,CACL+jB,MAAOQ,KACPI,IAAK9X,MACNtJ,EAAW,uCACV,OAAQA,EAAOtG,MACX,IAAK,YACD,OAAO,2BAAK+C,GAAZ,IAAmB+jB,MAAOxgB,EAAOwgB,QACrC,IAAK,UACD,OAAO,2BAAK/jB,GAAZ,IAAmB2kB,IAAKphB,EAAOohB,MACnC,QACI,OAAO3kB,MAQV4kB,GAAehW,aAAQ,SAAA5O,GAAK,OAAGA,IAAhB4O,EAExB,YAA0D,IAAjCmV,EAAgC,EAAhCA,MAAOY,EAAyB,EAAzBA,IAAkBziB,GAAO,EAApBmC,SAAoB,mBACrD,OACI,6CAAKwgB,IAAKF,EAAM,MAAQ,MACpBG,qBAAoBX,GAAOJ,GAAOgB,OAAO1d,OACrCnF,GAFR,IAGIhC,MAAO4jB,GAAkB,2BAAIM,IAAYD,GAAOJ,W,0BCxCjD,SAASiB,GAAT,GAA6C,IAArB1U,EAAoB,EAApBA,SAAapO,EAAO,kBACjDf,EAAQb,IAAM6B,SAAS,CAACnC,MAAO,QACrC,EAA8C0B,EAA4BP,GAA1E,mBAAOiB,EAAP,KAAoBC,EAApB,KAA+BC,EAA/B,KAEA,EAA6BhC,IAAM6B,UAAS,GAA5C,mBAAOif,EAAP,KAAgB6D,EAAhB,KAEA,OACI,sBAAKhlB,UAAW,oBAAsBiC,EAAKjC,WAAa,IAAKqC,aAAc,SAAAjI,GACvEiI,EAAajI,GACb4qB,GAAW,IAFf,UAII,yBAAQhlB,UAAU,cAAcmC,YAAa,SAAA/H,GACzC+H,EAAY/H,GACZ4qB,GAAW,IAFf,UAII,sBAAM1iB,wBAAyB,CAACC,O9CkBzB,wxB8CjBP,cAAC,EAAD,2BAAkBrB,EAAO,IAAzB,IAA6Bd,MAAM,kCAAkChB,OAAO,QAE/E+hB,GAAW,qBAAKnhB,UAAW,SAAW4M,KAAe,KAAO,MAAO5J,QAAS,SAAA5I,GACzEgI,EAAUhI,GACV4qB,GAAW,IAFH,SAIP3U,O,YCtBF,SAAS4U,GAAT,GAAuC,IAAnB7d,EAAkB,EAAlBA,MAAOib,EAAW,EAAXA,SACtC,OACI,sBAAKriB,UAAU,aAAf,UACI,sBAAMA,UAAU,OAAOsC,wBAAyB,CAACC,O/C+BpC,2xC+C9Bb,uBAAOvF,KAAK,OAAOolB,YAAavV,GAAG,kBAAmBzF,MAAOA,EAAOib,SAAUA,IAC9E,cAACtgB,EAAD,CAAYC,KAAMW,EAAY3C,UAAU,oBACpCgD,QAAS,kBAAKqf,GAAYA,EAAS,CAAC3hB,OAAQ,CAAC0G,MAAO,OACpDkb,gBAAelb,GAAS,IAAIhM,Y,MCA7B,SAAS8pB,GAAT,GAAqC,IAAN1qB,EAAK,EAALA,GACpC2P,EAAM9J,IAAM8Q,SACd,EAA4B9Q,IAAM6B,SAAS,IAA/C,mBAAKijB,EAAL,KAAgBC,EAAhB,KACA,EAA4B/kB,IAAM6B,SAAS,IAA3C,mBAAOmjB,EAAP,KAAeC,EAAf,KACGD,EAAOjqB,OAAS,IACf+pB,EAAYA,EAAUhI,QAAO,SAAAoI,GAAO,OAAIA,EAAQjZ,KAAKqP,cAAc6J,WAAWH,EAAO1J,mBAGzFtb,IAAMoO,WAAU,WACZxS,EAAMc,UAAU,CACZ,QAAS,4BACT,YAAc,IACf5C,MAAK,SAAAsrB,GACJL,EAAaK,EAASC,qBAE3B,IAEH,IAAMC,EAAaha,KAEnB,OACI,eAAC,GAAD,CAAQxB,IAAKA,EAAK3P,GAAIA,EAAI+E,MAAM,QAAQS,UAAU,iBAAlD,UACI,6BAAK6M,GAAG,mBAER,cAACoY,GAAD,CAAW7d,MAAOie,EAAQhD,SAAU,SAACjoB,GAAD,OAAOkrB,EAAUlrB,EAAEsG,OAAO0G,UAE9D,cAAC2B,EAAD,CAAYG,qBAAmB,EAA/B,SACI,cAAC,GAAUqa,QAAX,UACK4B,EAAUvrB,KAAI,SAAAgsB,GAAI,OACf,cAACC,GAAD,CAEID,KAAMA,EACN5iB,QAAS,kBAsCrC,SAAwB4iB,GACpB,IACIE,EADAC,EAAOja,KAAKC,MAAM1G,aAAaC,QAAQ,2CAA6C,MAKpFwgB,EAHAC,EAAMH,EAAKprB,KAAgB,MAATorB,EAAKprB,GAGDP,QAAQC,QAAQ,MAFhB,MAAO,YAA0C0rB,EAAKprB,GAAtD,UAK1B,SAASwrB,IACLF,EAAqB3rB,MAAK,SAAAsR,GAClBsa,EAAMH,EAAKprB,KAAgB,MAATorB,EAAKprB,KACvBurB,EAAMH,EAAKprB,IAAKiR,EAAe4P,QAC/BhW,aAAa4c,QAAQ,yCAA0CnW,KAAKma,UAAUF,KAGlF1gB,aAAa4c,QAAQ,0BAA2BnW,KAAKma,UAAUL,IAC/DhqB,OAAOC,SAASqqB,YAIxBjqB,EAAMc,UAAU,CACZ,QAAS,yBACTopB,iBAAkBP,EAAKprB,GACvBI,KAAM,CAAE,4BAEPT,MAAK,SAAAsrB,GACFrI,GAAU,2CACN,eAAC,GAAD,CAAe5iB,GAAG,2CACdikB,WAAW,EAAMJ,KAAM2H,EAD3B,UAGKnZ,GAAG,0BACJ,uBAAK,uBACJ4Y,EAASW,QAAQ,GAAGhf,MAAMA,UAInCnL,EAAMc,UAAU,CACZ,QAAS,yBACTopB,iBAAkBP,EAAKprB,QA7EG6rB,CAAeT,IAC7BxG,SAAUuG,EAAYnrB,IAAMorB,EAAKprB,IAH5BorB,EAAKprB,WAQ1B,qBAAKwF,UAAU,UAAf,SACI,cAAC2d,GAAD,CAAa3a,QAAS,WAAMmH,EAAImH,QAAQ2M,SAAxC,SAAoDpR,GAAG,oBAShE,SAASgZ,GAAT,GAAkD,IAA3BD,EAA0B,EAA1BA,KAAM5iB,EAAoB,EAApBA,QAASoc,EAAW,EAAXA,SACnCle,EAASb,IAAM6B,SAAS,CAACnC,MAAO,QACtC,EAAyC0B,EAA4BP,GAArE,mBAAO4B,EAAP,KAAkBtB,EAAlB,KAA2BuB,EAA3B,KACA,OACI,sBAAK/C,UAAU,qBAAqBgD,QAASA,EAASb,YAAaW,EAAWV,UAAWZ,EAASa,aAAcU,EAAhH,UACI,cAAC,EAAD,2BAAkB7B,EAAO,IAAzB,IAA6Bd,MAAM,uCACnC,sBAAKJ,UAAU,UAAf,UACI,uBAAOhD,KAAK,QAAQsP,KAAK,kCAAkCoX,QAAStE,IACpE,sBAAKpf,UAAU,QAAf,UACI,qBAAKA,UAAU,OAAf,SAAuB4lB,EAAKrZ,cAC5B,qBAAKvM,UAAU,eAAf,SAA+B4lB,EAAKtZ,gBC9DzC,SAASga,GAAT,GAA8C,IAAnBC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,OAC/C,EAAkCnmB,IAAM6B,SAA6D,QAApDmD,aAAaC,QAAQ,6BAAtE,mBAAOmhB,EAAP,KAAkBC,EAAlB,KAEA,OACI,eAAC,IAAMpc,SAAP,WACI,sBAAKtK,UAAU,SAAf,UACI,cAAC+B,EAAD,CAAY/B,UAAU,mBAAmBgC,KAAMU,EAAWM,QAASwjB,IACnE,oBAAIxmB,UAAU,QAAd,SAAuB6M,GAAG,2BAC1B,cAAC9K,EAAD,CAAY/B,UAAU,oBAAoBgC,KAAMW,EAAYK,QAASujB,OAEzE,cAAC,GAAUhD,QAAX,UACI,cAAC,GAAUC,aAAX,CAAwBhZ,KAAMwD,GAAK,8BAA+BoV,UAAU,EAAMK,SAAUgD,EAAWpE,SAAU,WAC7GqE,GAAcD,GACdphB,aAAa4c,QAAQ,4BAA6BwE,GAClDhC,GAAWrgB,SAAS,CAACpH,KAAM,UAAW0nB,IAAK9X,eCiF/D,IACe+Z,GADQhY,aAAS,SAACnB,GAAD,MAAW,CAACA,WAArBmB,EAlFvB,YAAiC,IAAD,EAAZnU,EAAY,EAAZA,GAAIgT,EAAQ,EAARA,MACd2Q,EAAY9d,IAAM8Q,SAClBvD,EAAMJ,EAAMsF,GAAO,OACzB,EAAgCzS,IAAM6B,SAAS,UAA/C,mBAAO0kB,EAAP,KAAiBC,EAAjB,KACA,EAA8BxmB,IAAM6B,SAAS,MAA7C,mBAAO4kB,EAAP,KAAgBC,EAAhB,KASA,OACI,cAAC,GAAD,CAAQ/mB,UAAU,kBAAkBxF,GAAIA,EAAI2P,IAAKgU,EAAW5e,MAAM,QAAlE,SACI,eAACkjB,GAAD,CAAcziB,UAAU,iBAAiB0iB,YAAaoE,EAASxb,KAAK,aAAavL,MAAO6mB,EAAxF,UACI,sBAAK5mB,UAAU,SAAf,UACI,oBAAIA,UAAU,QAAd,SAAuB6M,GAAG,uBAC1B,cAAC9K,EAAD,CAAY/B,UAAU,oBAAoBgC,KAAMW,EAAYK,QAAS,WACjEmb,EAAU7M,QAAQ2M,WAGtB,cAAC8G,GAAD,CAAe/kB,UAAU,eAAzB,SACI,eAACkS,GAAKC,aAAN,WACI,cAACD,GAAKE,SAAN,UAAgBvF,GAAG,0BACnB,cAACqF,GAAKE,SAAN,UAAgBvF,GAAG,8BACnB,cAACqF,GAAKE,SAAN,CAAepP,QAAS,WACpBoa,GAAU,wCACN,cAAC,GAAD,CAAeqB,WAAW,EACtBjkB,GAAG,wCACHskB,aAAcjS,GAAG,uBAAwBwR,KAAM,WAC3CpiB,EAAMc,UAAU,CACZ,QAAS,YAEd6gB,WAAW,EANlB,SAOK/Q,GAAG,uBAThB,SAYIA,GAAG,iCAInB,cAAC9D,EAAD,CAAYC,eAAe,IAA3B,SACI,sBAAKhJ,UAAU,iBAAf,UACI,eAAC,GAAUujB,QAAX,CAAmBvjB,UAAU,eAA7B,UACI,cAACqU,GAAD,CAAc7Z,GAAIsY,GAAO,MAAWxG,KAAMsB,EAAO+K,GAAgB/K,GAAQ,GAAI1F,MAAK,OAAE0F,QAAF,IAAEA,GAAF,UAAEA,EAAMoZ,qBAAR,aAAE,EAAqB5nB,MAAOmW,sBAAsB,IACtI,iCACI,mBAAGvV,UAAU,OAAb,SAAqB4N,GAAQ+K,GAAgB/K,KAC7C,mBAAG5N,UAAU,SAAb,SAAuB6M,GAAG,6BAGlC,cAAC,GAAU+W,UAAX,IACA,eAAC,GAAUL,QAAX,WACI,cAAC,GAAUD,OAAX,CAAkBthB,KlD3CpB,k8CkD2CyCwI,KAAMqC,GAAG,8BAChD,cAAC,GAAUyW,OAAX,CAAkBthB,KlD1CX,ivDkD0CyCwI,KAAMqC,GAAG,iCACzD,cAAC,GAAUyW,OAAX,CAAkBthB,KlD5CR,m8DkD4CyCwI,KAAMqC,GAAG,kCAC5D,cAAC,GAAUyW,OAAX,CAAkBthB,KlD3CpB,m2CkD2CyCwI,KAAMqC,GAAG,wCAChD,cAAC,GAAUyW,OAAX,CAAkBthB,KlD3CjB,w9CkD2CyCwI,KAAMqC,GAAG,kCACnD,cAAC,GAAUyW,OAAX,CAAkBthB,KlD3ChB,ozDkD2CyCwI,KAAMqC,GAAG,yBAA0B7J,QAAS,kBApD1FugB,EAoD2G+C,GAnD5HS,EAAW,cAACxD,EAAD,CAASgD,QAASpI,EAAU7M,QAAQ2M,MAAOuI,OAAQ,WAC1D5D,IAAkB,kBAAIgE,IAAUC,YAEpCA,EAAY,QAJhB,IAAqBtD,KAqDG,cAAC,GAAUD,OAAX,CAAkBthB,KlD3ChB,2wEkD2CyCwI,KAAMqC,GAAG,yBAChD7J,QAAS,kBAAIoa,GAAU,kCAAmC,cAAC8H,GAAD,CAAsB1qB,GAAG,sCADvF,SAEI,sBAAMwF,UAAU,QAAhB,SAAyB6M,GAAG,4BAGpC,cAAC,GAAU+W,UAAX,IACA,eAAC,GAAUL,QAAX,WACI,cAAC,GAAUD,OAAX,CAAkBthB,KlDjDrB,6vDkDiDyCwI,KAAMqC,GAAG,oBAAqB7J,QAAS,kBAAMpH,OAAO2U,KAAK,+BAC/F,cAAC,GAAU+S,OAAX,CAAkB9Y,KAAMqC,GAAG,+CC8GxCoa,GA5KMtY,aAAQ,SAAA5O,GAAK,MAAI,CAClCwF,MAAOxF,EAAMwF,MACbH,mBAAoBrF,EAAMqF,sBAFTuJ,EAIjB,YAAwE,IAAD,EAA9CwS,EAA8C,EAA9CA,QAASoF,EAAqC,EAArCA,QAAShhB,EAA4B,EAA5BA,MAAOH,EAAqB,EAArBA,mBAC9C,EAAoB/E,IAAM6B,SAAS,MAAnC,mBAAOglB,EAAP,KAAWC,EAAX,KACA9mB,IAAMoO,WAAU,WACZxS,EAAMc,UAAU,CACZ,QAAS,UACV5C,MAAK,SAAAqD,GAEDA,EAAO4pB,aACNnrB,EAAMc,UAAU,CACZ,QAAS,qBACTsqB,oBAAqB7pB,EAAO4pB,eAC7BjtB,MAAK,SAAAmtB,GAEDA,EAAKC,uBACJ/pB,EAAO4pB,aAAP,WAAyBE,EAAKC,qBAA9B,YAAsDD,EAAKE,yBAE/DL,EAAM3pB,MAGT2pB,EAAM3pB,QAEhB,IAEH,MAAkC6C,IAAM6B,SAAS,CAAC,SAAU,SAASwB,SAAS+gB,GAAW3b,WAAWgb,QAApG,mBAAO2D,EAAP,KAAkBC,EAAlB,KAUA,IAAIvd,EAAM9J,IAAM8Q,OAAO,MACvB9Q,IAAMoO,WAAU,WACT0S,GACChX,EAAImH,QAAQqW,UAEjB,CAACxG,IAGJ,IAAMyG,EAAoBrH,GAAiBhb,EAAO,CAAC,QAAS,oBAAoBnK,OAAS,EAEzF,OACI,sBAAKZ,GAAG,iBAAiB2P,IAAKA,EAAKnK,UAAWmhB,EAAU,UAAY,GAChE0G,UAnBR,SAAoBztB,GAEH,WAAVA,EAAE0S,KACDyZ,KAgBsBuB,SAAU,EADpC,UAEI,sBAAK9nB,UAAU,UAAf,UACI,sBAAKA,UAAU,SAAf,UACI,sBAAKA,UAAU,QAAf,UACI,cAACqU,GAAD,CACI7Z,IAAM,OAAF0sB,QAAE,IAAFA,OAAA,EAAAA,EAAI1sB,KAAM,EACd8R,OAAS,OAAF4a,QAAE,IAAFA,OAAA,EAAAA,EAAItO,aAAc,MAAS,OAAFsO,QAAE,IAAFA,OAAA,EAAAA,EAAIrO,WAAY,IAAMqO,EAAGrO,UAAa,IACtE3Q,MAAK,OAAEgf,QAAF,IAAEA,GAAF,UAAEA,EAAIF,qBAAN,aAAE,EAAmB5nB,MAC1BmW,sBAAsB,IAC1B,qBAAKvV,UAAU,UAAf,SACM4nB,GAAsB,CAAC,mBAAoB,mBAAmBlkB,SAAS0B,IACrE,wBACIpF,UAAU,SACVsC,wBAAyB,CAACC,OAAQC,GAClCQ,QAAS,WACLgC,EAAUZ,SAAS,CACfpH,KAAM,oBACNmI,aAAc,SAElBohB,KAEJxG,cAAe,SAAA3lB,GAAC,OAAG0X,GAAkB1X,EACjC,cAAC8X,GAAKC,aAAN,UACI,cAACD,GAAKE,SAAN,CAAepP,QAAS,WACpB,IAAM+kB,EAAU,CAAC,mBAAoB,YAAa,kBAAmB,YAAY3iB,GACjFJ,EAAUZ,SAAS,CACfpH,KAAM,2BACNoI,mBAAoB2iB,IAExB1iB,aAAa4c,QAAQ,qCAAsC8F,GAC3DxB,KAPJ,SAQI1Z,GAAG,4CAM/B,sBAAK7M,UAAU,QAAf,UACI,qBAAKA,UAAU,OAAf,SACKknB,GAAMvO,GAAgBuO,KAE3B,qBAAKlnB,UAAU,eAAf,gBACKknB,QADL,IACKA,OADL,EACKA,EAAIE,qBAIjB,cAACre,EAAD,CAAYG,qBAAmB,EAA/B,SACI,sBAAKlJ,UAAU,iBAAf,UACI,qBAAKA,UAAU,UAAf,SACI,eAAC,GAAUujB,QAAX,WACI,cAAC,GAAUD,OAAX,CAAkBthB,KnDtG3B,ozDmDsGiDwI,KAAMqC,GAAG,4BACjD,cAAC,GAAUyW,OAAX,CAAkBthB,KnDxGzB,4xFmDwGiDwI,KAAMqC,GAAG,8BACnD,cAAC,GAAUyW,OAAX,CAAkBthB,KnDlG5B,2pCmDkGiDwI,KAAMqC,GAAG,uBAChD,cAAC,GAAUyW,OAAX,CAAkBthB,KnDlGpB,y8CmDkGiDwI,KAAMqC,GAAG,oBACxD,cAAC,GAAUyW,OAAX,CAAkBthB,KnDxG5B,kyTmDwGiDwI,KAAMqC,GAAG,qBAAsB7J,QAAS,WAC3EujB,IACAnJ,GAAU,uBACN,cAAC,IAAD,CAAUsE,MAAO1R,GAAjB,SACI,cAAC,GAAD,CAAgBxV,GAAG,+BAI/B,cAAC,GAAUgpB,aAAX,CAAwBxhB,KnDjHhC,knDmDiHuDwI,KAAMqC,GAAG,uBAAwB4W,SAAUgE,EAAWpF,SAAU,SAAC2F,GNtF7I,IAAkBlE,EMuFe4D,EAAaM,GNvF5BlE,EMwFwBkE,EAAU,QAAU,MNvFjE3iB,aAAa4c,QAAQ,gBAAiB6B,GACtCW,GAAWrgB,SAAS,CAAEpH,KAAM,YAAa8mB,kBM0FjB,sBAAK9jB,UAAU,QAAf,UACI,qBAAKA,UAAU,QAAf,SACI,cAACoQ,GAAD,CAAYtU,KAAK,qCAAjB,uBAEJ,sBAAKkE,UAAU,QAAf,UACI,cAACoQ,GAAD,CAAYtU,KAAK,+CAAjB,SAAiEmR,GAAM,+BAAgC,CAACgb,eAD5G,eACuI,cAAC7X,GAAD,CAAYpN,QAAS,WAEpJujB,IACAnJ,GAAU,iCACN,eAAC,GAAD,CAAe5iB,GAAG,iCACd+E,MAAM,QAAQgJ,MAAM,UAAUuW,aAAcjS,GAAG,aAC/CgS,kBAAkB,EAFtB,UAII,cAACzO,GAAD,CAAYpQ,UAAU,sBAClBC,MAAO,CAACG,MAAO,sCACftE,KAAK,+CAFT,SAIKmS,GAAQ,qBAAsB,CAC3Bga,WACAC,MAAOpV,GAAO,YAItB,4BAAI7E,GAAQ,mBAAoB,CAC5Bia,MAAO,cAAC9X,GAAD,CAAYtU,KAAK,kCAAjB,uBAGX,4BAAImR,GAAM,kBAAmB,CACzBkb,SAAU,cAAC/X,GAAD,CAAYtU,KAAK,uDAAjB,qBACVssB,YAAa,cAAChY,GAAD,CAAYtU,KAAK,qCAAjB,wBAGjB,4BAAImR,GAAM,kBAAmB,CACzBob,SAAU,cAACjY,GAAD,CAAYtU,KAAK,2BAAjB,SAA6C+Q,GAAG,kCA5ByD,SAiC9HA,GAAG,kCAO5B,cAAC,IAAD,CAAU6U,MAAOzE,GAAjB,SACI,cAAC,GAAD,CAASjd,UAAU,SAASgD,QAASujB,Y,4CClLlD,SAAS+B,GAAenpB,GAC3B,OACI,iCAAKa,UAAU,2BAA8Bb,IAQ9C,SAASopB,GAAT,GAA8F,IAArElY,EAAoE,EAApEA,SAAoE,IAA1DmY,gBAA0D,SAAxCvmB,EAAwC,kBAChG,OACI,8CAAKjC,UAAS,iBAAYwoB,EAAW,WAAa,KAAUvmB,GAA5D,cACKoO,EACAmY,GAAY,sBAAMxoB,UAAU,OAAOsC,wBAAyB,CAACC,OpDrBlD,wIoDiCjB,SAASkmB,GAAT,GAA2F,IAAnEllB,EAAkE,EAAlEA,QAASoD,EAAyD,EAAzDA,KAAM6G,EAAmD,EAAnDA,MAAO6C,EAA4C,EAA5CA,SAC7C+J,EAAQ,KACRsO,EAAU,EACd,GAA0B,uBAAvB/hB,EAAK3J,KAAK,UAAqC2J,EAAK3J,KAAKsiB,WACxDlF,EAAQzT,EAAK4B,WAEZ,GAA0B,uBAAvB5B,EAAK3J,KAAK,UAA4D,uBAAvB2J,EAAK3J,KAAK,SAC7D,OAAOuG,EAAQ6W,OAAO,UAClB,IAAK,oBACG7W,EAAQyP,cACRoH,EAAQzB,GAAgBnL,EAAMjK,EAAQ6W,OAAOjK,UAC7CuY,EAAU9S,GAAerS,EAAQ6W,OAAOjK,UAE5C,MACJ,IAAK,oBAEDiK,EAD2BvR,EAAetF,EAAQ6W,OAAOlW,SAC5CqE,MAIzB,OACI,qBAAKvI,UAAW,mBAAsBuD,EAAQyP,cAAgBzP,EAAQ+W,gBAAmB,YAAc,IAAvG,SACI,eAACiO,GAAD,WACKnO,GAAU,qBAAKpa,UAAS,+BAA0B0oB,GAAxC,SAAqDtO,IAC/D/J,EACD,qBAAKrQ,UAAU,eAUxB,SAAS2oB,GAAT,GAA0E,IAAlDplB,EAAiD,EAAjDA,QACvBqlB,EAAM,KACV,OAAO7V,GAFqE,EAAxCpM,KAENpD,IAC1B,IAAK,UACDqlB,EAAM,sBAAM5oB,UAAU,eAAesC,wBAAyB,CAACC,OAAQE,KACvE,MACJ,IAAK,OACDmmB,EAAM,sBAAM5oB,UAAU,YAAYsC,wBAAyB,CAACC,OpD9D/C,mzDoD+Db,MACJ,IAAK,OACDqmB,EAAM,sBAAM5oB,UAAU,YAAYsC,wBAAyB,CAACC,OpDlE3C,65EoDoEzB,OACI,sBAAKvC,UAAU,SAAf,UACI,qBAAKA,UAAU,OAAf,SAAuBwW,GAAajT,EAAQ0S,SACzC1S,EAAQ+W,iBAAoBsO,K,MC5E5B,SAASC,GAAY1pB,GAChC,OACI,sBAAKa,UAAU,YAAf,UACI,sBAAKA,UAAU,iBAAf,UACI,sBAAKA,UAAU,QAAf,UACK8S,GAAO,OAAa3T,EAAMwH,KAAKnM,IAAOqS,GAAG,sBACzCiG,GAAO,qBAA2B3T,EAAMwH,KAAKnM,IAAOqS,GAAG,wBACvDiG,GAAO,OAAa3T,EAAMwH,KAAKnM,IAAMsY,GAAO,qBAA2B3T,EAAMwH,KAAKnM,IAAOmW,GAA0BxR,EAAMwH,SAE9H,cAACmiB,GAAD,eAAa3pB,OAEjB,sBAAKa,UAAU,kBAAf,UAE4C,GAAvCb,EAAMwH,KAAK+B,WAAWqgB,eACnB,cAAChnB,EAAD,CAAYC,KrDiBD,igGqDjB2BhC,UAAU,2BAEpD,cAAC+B,EAAD,CAAYC,KrDiBD,ogCqDhBX,cAACD,EAAD,CAAYC,KrDeA,64CqDdZ,cAAC+iB,GAAD,UACI,cAAC7S,GAAKC,aAAN,UACKhT,EAAMwH,KAAKqiB,iBAAmB,cAAC9W,GAAKE,SAAN,UAAgBvF,GAAG,iCAW1E,SAASic,GAAT,GAAwD,IAAtCniB,EAAqC,EAArCA,KAAMiH,EAA+B,EAA/BA,KAAMqb,EAAyB,EAAzBA,WAAYxY,EAAa,EAAbA,WACtC,GAAGA,EACC,OACI,qBAAKzQ,UAAU,OAAf,SACKmN,GAAKxG,EAAK3J,KAAKsiB,WAAa,8BAAgC,0BAA2B7O,EAAWyY,gBAI1G,GAAGD,EACJ,OACI,qBAAKjpB,UAAU,OAAf,SACKmN,GAAK,0BAA2B8b,EAAWC,gBAInD,GAAGtb,EACR,CACI,GAAIjH,EAAKnM,IAAMsY,GAAO,OAAanM,EAAKnM,IAAMsY,GAAO,oBACjD,OAAO,KAEX,GAAInM,EAAKnM,IAAMsY,GAAO,uCAElB,OACI,qBAAK9S,UAAU,OAAf,SACK6M,GAAG,sCAIhB,GAAIe,EAAKub,WACL,OACI,qBAAKnpB,UAAU,OAAf,SACK6M,GAAG,wBAIhB,GAA0B,eAAtBe,EAAK5Q,KAAK,SACV,OACI,qBAAKgD,UAAU,OAAf,SACK6M,GAAG,oBAMhB,IAAIqD,E9BuBL,SAA0BA,GAC7B,OAAQA,EAAO,UACX,IAAK,sBACD,OAAOrD,GAAG,yBAEd,IAAK,qBACD,OAAOA,GAAG,wBAEd,IAAK,oBACD,IAAIyE,EAAU3R,KAAKkY,OAAO,IAAIzB,MAAOE,UAAa,KAC9C8S,EAAWlZ,EAAOmZ,WAClBC,EAAOhY,EAAU8X,EACjBG,EAAc5pB,KAAKkY,MAAMyR,EAAO,IAChCE,EAAY7pB,KAAKkY,MAAMyR,EAAO,MAElC,GAAIC,EAAc,EAEd,OAAO1c,GAAG,2BAEd,GAAI0c,EAAc,GAEd,OAAOpc,GAAK,8BAA+B,CAACoc,IAEhD,GAAIC,EAAY,GAEZ,OAAOrc,GAAK,4BAA6B,CAACqc,IAG9C,IAAIC,EAAcvT,GAAgB5E,GAC9BoY,EAAexT,GAAgBkT,GAEnC,OAAIK,EAAYrS,WAAaoS,GAAa,EAE/Bvc,GAAM,4BAA6B,CAACwP,KAAMiN,EAAaC,mBAAmB,WAEjFF,EAAYrS,WAAaoS,EAAY,GAAKC,EAAYrS,WAAaoS,GAAa,GAEzEvc,GAAM,gCAAiC,CAACwP,KAAMiN,EAAaC,mBAAmB,WAElF1c,GAAM,2BAA4B,CAACgJ,KAAMyT,EAAaE,mBAAmB,WAGpF,IAAK,qBACD,OAAO/c,GAAG,uBAEd,IAAK,mBACD,OAAOA,GAAG,qBAEd,QACI,OAAO,M8BxEEgd,CAAiBjc,EAAKsC,QACnC,OAAIA,GAAUrD,GAAG,qBACL,qBAAK7M,UAAU,cAAf,SAA8BkQ,IAElC,qBAAKlQ,UAAU,OAAf,SAAuBkQ,IAGnC,OAAO,K,MC/EX,IAAM4Z,GAAiB7kB,aAZvB,SAAiBlF,EAAOuD,GACpB,OAAQA,EAAOtG,MACX,IAAK,kBACD,OAAO,2BACA+C,GADP,kBAEKuD,EAAOymB,YAAYvvB,GAAK8I,EAAOymB,cAExC,QACI,OAAOhqB,MAKJ+pB,MAEf7tB,EAAMqI,sBAAsB,oBAAoB,SAAC5H,GAC7CotB,GAAgB1lB,SAAS,CACrBpH,KAAM,kBACN+sB,YAAartB,EAAOqtB,iB,MClBrB,SAASC,KAEZ,OACI,qBAAKhqB,UAAU,W,MCAR,SAASiqB,GAAT,GAAkE,IAA5C1mB,EAA2C,EAA3CA,QAASoD,EAAkC,EAAlCA,KACpCujB,EAAiB3mB,EAAQmB,QAEzBylB,ECHK,SAAmB7pB,GAC9B,IAAM8pB,EAAkBzb,aAAQ,SAAAnB,GAAK,MAAK,CAACA,WAAnBmB,CAA4BrO,GACpD,OAAO,SAAmBnB,GACtB,OACI,cAAC,IAAD,CAAUuiB,MAAO1R,GAAjB,SACI,cAACoa,EAAD,eAAsBjrB,ODFjBkrB,CAAU5B,IAC3B,OACI,cAAC0B,EAAD,CAAW5mB,QAASA,EAASoD,KAAMA,EAAnC,SACI,sBAAK3G,UAAU,UAAf,UACKkqB,EAAe1f,KAAKA,KACrB,cAACme,GAAD,CAAeplB,QAASA,EAASoD,KAAMA,SEThD,SAAS2jB,GAAT,GAAyE,IAA5C/mB,EAA2C,EAA3CA,QAASoD,EAAkC,EAAlCA,KACzC,OACI,cAACsjB,GAAD,CAAatjB,KAAMA,EAAMpD,QAAO,2BACzBA,GADyB,IAE5BmB,QAAS,CACL,QAAS,cACT8F,KAAM,CACF,QAAS,gBACTA,KAAMwD,GAAK,4BACXuc,SAAU,SCLvB,IAAMC,GAASnqB,IAAMoqB,MAAK,YAA8D,IAA5ClnB,EAA2C,EAA3CA,QAASoD,EAAkC,EAAlCA,KACxD,OAAOpD,EAAQmB,QAAQ,UACnB,IAAK,cACD,OAAO,cAACulB,GAAD,CAAatjB,KAAMA,EAAMpD,QAASA,IAC7C,IAAK,qBACL,QACI,OAAO,cAAC+mB,GAAD,CAAoB3jB,KAAMA,EAAMpD,QAASA,QCP/CmnB,GAAa/b,aAAQ,kBAA2B,CAACvL,SAA5B,EAAEA,SAAoCC,SAAtC,EAAYA,YAApBsL,EAA2D,YAAkD,IAAD,EAA3BhI,EAA2B,EAA3BA,KAAMvD,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,SACjHoe,EAAO,GADqH,cAElH5mB,OAAOD,KAAKwI,GAAUqd,QAF4F,IAElI,IAAI,EAAJ,qBAA8C,CAAC,IAArCjmB,EAAoC,QAC1CinB,EAAMtkB,KAAKiG,EAAS5I,KAH0G,8BAKjH,GAAdinB,EAAMrmB,QACLqmB,EAAMtkB,KAAKwJ,EAAKkB,cAGpB,MAA4BxH,IAAM6B,UAAS,GAA3C,mBAAOwS,EAAP,KAAeC,EAAf,KAqBA,OApBAtU,IAAMoO,WAAU,WACPpL,GACDjC,YAAW,WACP0C,EAAgB6C,EAAKnM,MACtB,MAEDka,GAAWrR,GAAYoe,EAAMrmB,OAAS,IACxC0I,EAAgB6C,EAAKnM,GAAIinB,EAAM,GAAGjnB,IAC7BL,MAAK,SAAAiR,GACW,GAATA,GACAuJ,GAAU,QAI3B,CAAChO,EAAKnM,GAAI6I,IACbhD,IAAMoO,WAAU,WACZ,OAAO,WACHkG,GAAU,MAEf,CAAChO,EAAKnM,KAEL,cAACuO,EAAD,CAAY/I,UAAU,oBAAoBgJ,eAAgB,EAA1D,SACI,qBAAKhJ,UAAU,yBAAf,SACKyhB,EAAM7nB,KAAI,SAAA2J,GAAO,OAAI,cAAC,GAAD,CAA0BA,QAASA,EAASoD,KAAMA,GAApCpD,EAAQ/I,cC1B/CmwB,GACbhc,aAAQ,kBAA4B,CAACpJ,MAA7B,EAAEA,MAAkCE,aAApC,EAASA,gBAAjBkJ,EAA6D,YAA6C,IAClGhI,EADiG,EAAtBpB,EAAsB,EAAtBA,MAAOE,EAAe,EAAfA,aAAe,cAExFF,GAFwF,IAErG,IAAI,EAAJ,qBAAoB,CAAC,IAAbqlB,EAAY,QAChB,GAAGA,EAAEpwB,KAAOiL,EAAc,CACtBkB,EAAOikB,EACP,QAL6F,8BASrG,IAAIjkB,EAAM,OACN,qBAAKnM,GAAG,eAAewF,UAAU,UAAjC,SACI,cAACsoB,GAAD,UACKzb,GAAG,0BAIhB,OAAOlG,EAAK3J,KAAK,UACb,IAAK,kBACD,OACI,cAAC,IAAD,CAAU0kB,MAAO1R,GAAjB,SACI,cAAC,GAAD,CAAkCrJ,KAAMA,MAGpD,IAAK,qBACD,OACI,cAAC,IAAD,CAAU+a,MAAOoI,GAAjB,SACI,cAAC,GAAD,CAAqCnjB,KAAMA,MAGvD,IAAK,qBACD,OACI,cAAC,IAAD,CAAU+a,MAAOlR,GAAjB,SACI,cAAC,GAAD,CAAqC7J,KAAMA,UAMzDkkB,GAAkClc,aAAQ,SAAAnB,GAAK,MAAG,CAACA,WAAjBmB,EACpC,YAA0D,IAAfnB,EAAc,EAAdA,MAAO7G,EAAO,EAAPA,KAC9C,OAAO,cAACmkB,GAAD,CAA2Bld,KAAMJ,EAAM7G,EAAK3J,KAAKmT,SAAUxJ,KAAMA,OAI1EokB,GAAqCpc,aAAQ,SAAAqc,GAAW,MAAG,CAACA,iBAAvBrc,EACvC,YAAmE,IAArBqc,EAAoB,EAApBA,YAAarkB,EAAO,EAAPA,KACvD,OAAO,cAACmkB,GAAD,CAA2B7B,WAAY+B,EAAYrkB,EAAK3J,KAAK+Y,gBAAiBpP,KAAMA,OAI7FskB,GAAqCtc,aAAQ,SAAAuc,GAAW,MAAG,CAACA,iBAAvBvc,EACvC,YAAmE,IAArBuc,EAAoB,EAApBA,YAAavkB,EAAO,EAAPA,KACvD,OAAO,cAACmkB,GAAD,CAA2Bra,WAAYya,EAAYvkB,EAAK3J,KAAK8Y,eAAgBnP,KAAMA,OAIlG,SAASmkB,GAA0B3rB,GAa/B,OAZAkB,IAAMoO,WAAU,WAKZ,OAJAxS,EAAMc,UAAU,CACZ,QAAS,WACTmH,QAAS/E,EAAMwH,KAAKnM,KAEjB,WACHyB,EAAMc,UAAU,CACZ,QAAS,YACTmH,QAAS/E,EAAMwH,KAAKnM,QAG7B,CAAC2E,EAAMwH,KAAKnM,KAEX,sBAAKA,GAAG,eAAR,UACI,qBAAKwF,UAAU,UAAf,SACI,cAAC6oB,GAAD,eAAiB1pB,MAErB,cAAC,IAAD,CAAUuiB,MAAO7d,EAAc1E,EAAMwH,KAAKnM,IAA1C,SACI,cAAC,GAAD,eAAiB2E,MAErB,cAAC6qB,GAAD,eAAgB7qB,OChFrB,IAAMgsB,GAAiBxc,aAAQ,kBAAU,CAAC+V,IAAX,EAAEA,OAAV/V,EAA2B,YAAkC,IAAP+V,EAAM,EAANA,IAEhF,EAAoCrkB,IAAM6B,UAAS,GAAnD,mBAAOkpB,EAAP,KAAmBC,EAAnB,KAEA,OACI,qBAAK7wB,GAAG,mBAAR,SACI,eAAC,IAAD,CAAUknB,MAAO1c,EAAjB,UACI,cAAC,GAAD,CAAemc,QAASiK,EAAY7E,QAAS,kBAAK8E,GAAc,MAChE,cAAC,GAAD,CAAiBvc,sBAAuB,kBAAKuc,GAAc,MAC3D,cAAC,KAAD,CAAWC,YAAa,CAAC/rB,MAAO,KAAMgsB,SAAU,IAC5CvrB,UAAU,0BAA0BwrB,cAAe,CAACC,MAAO,8BAA+B5qB,KAAM,+BAChG6qB,OAAQ,CAAC3qB,KAAK,EAAO0qB,OAAQ/G,EAAKiH,QAAQ,EAAO9qB,KAAM6jB,EAAKkH,UAAU,EAAOC,aAAa,EAAOC,YAAY,EAAOC,SAAS,GAFjI,SAGI,cAAC,GAAD,CAAajd,sBAAuB,kBAAKuc,GAAc,QAE3D,qBAAK7wB,GAAG,iBAAR,SACI,cAAC,GAAD,c,sCCvBpByB,EAAMqI,sBAAsB,4BAA2B,SAAU5H,GAC7D,IAAMsvB,EnEN+B,CAACC,OAAQ,QAAQC,SAAU,oCmEO1DC,EAAYzvB,EAAM,oBAEC,wCAAtByvB,EAAW,UACVlwB,EAAMc,UAAU,CAAC,QAAS,6BAA8B,eAAkB,KAErD,0CAAtBovB,EAAW,UACVlwB,EAAMc,UAAU,CACZ,QAAS,qBACT,WAAc,CACV,mBAAsB,QACtB,sBAAwB,EACxB,kBAAoB,EACpB,OAAUivB,EAAYC,OACtB,SAAYD,EAAYE,SACxB,qBAAwB,KACxB,aAAgB,MAChB,oBAAuBjE,GACvB,0BAA4B,EAC5B,YAAexsB,U,IASV2wB,G,oGAMjB,SAAuBzc,GACnB,OAAO1T,EAAMc,UAAU,CAAC,QAAS,+BAAgC,aAAgB4S,M,2BAOrF,SAAqBrV,GACjB,OAAO2B,EAAMc,UAAU,CAAC,QAAS,0BAA2B,KAAQzC,M,0BAOxE,SAAoB+xB,GAChB,OAAOpwB,EAAMc,UAAU,CAAC,QAAS,8BAA+B,SAAYsvB,M,gCAQhF,SAA0BC,EAAOC,GAC7B,OAAOtwB,EAAMc,UAAU,CAAC,QAAS,eAAgB,WAAcuvB,EAAO,UAAaC,Q,KC3DtEC,G,kDAYjB,aAAe,IAAD,uBACV,gBANJzsB,MAAO,CACHmB,OAAQ,CACJnB,MAAO,QAGD,MAEuCiB,EAAoB,gBAF3D,0BAET,EAAK8B,UAFI,KAEO,EAAKtB,QAFZ,KAEqB,EAAKuB,WAF1B,O,0CAKd,WACI,OACI,yBACI/C,UAAU,yBACVgD,QAAS7H,KAAKgE,MAAM6D,QACpBb,YAAahH,KAAK2H,UAClBV,UAAWjH,KAAKqG,QAChBa,aAAclH,KAAK4H,WALvB,UAOI,cAAC,EAAD,2BAAkB5H,KAAK4E,MAAMmB,QAA7B,IAAqCd,MAAM,6CAC3C,qBAAKJ,UAAU,UAAf,SACK7E,KAAKgE,MAAMkR,kB,GA5BkBhQ,IAAMC,WCDnCmsB,G,kDACjB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAmDVC,YAAa,WACT,EAAKxrB,SAAS,CACVyrB,UAAU,EACVC,WAAY,EAAKC,eAAc,MAvDrB,EA0DlBC,WAAY,WACR,EAAK5rB,SAAS,CACVyrB,UAAU,EACVI,OAAQ,MACRH,WAAY,EAAKC,eAAc,MA9DrB,EAiElB1b,gBAAiB,SAAChX,GACd,EAAK+G,SAAS,CACV6rB,OAAQ5yB,EAAEwH,YAAYC,QAAQ,QAnEpB,EAsElBorB,cAAe,SAAC7yB,GAAK,IAAD,IAChB,eAAK+E,OAAM0oB,iBAAX,gBAAuBztB,GACb,SAAPA,EAAE0S,KACD,EAAK3N,MAAM+tB,mBAAqB,EAAK/tB,MAAM+tB,oBAE5C,EAAK/tB,MAAMguB,yBACA,WAAP/yB,EAAE0S,KAAyB,aAAP1S,EAAE0S,KACrB1S,EAAE2X,mBA1EV,EAAKhS,MAAO,CACR6sB,UAAU,EACVI,OAAQ,MACRH,WAAY,EAAKC,cAAc,EAAK3tB,MAAMiuB,YANhC,E,iDAUlB,SAAezF,GACX,OAAQA,GAAYxsB,KAAKgE,MAAMiI,MAAU,YAAc,sB,oBAG3D,WAAW,IAAD,OACFpH,EAAU,mBAUd,OATG7E,KAAK4E,MAAM6sB,WACV5sB,GAAW,aAEZ7E,KAAKgE,MAAMiuB,YACVptB,GAAW,cAEZ7E,KAAKgE,MAAMkuB,UACVrtB,GAAW,YAGX,sBAAKA,UAAWA,EACZC,MAAO,CAAC,eAAgB9E,KAAK4E,MAAMitB,QAAU,OADjD,UAEM7xB,KAAKgE,MAAMoJ,MACT,qBAAKvI,UAAW7E,KAAK4E,MAAM8sB,WAA3B,SAAwC1xB,KAAKgE,MAAMoJ,QACnD,KACJ,uBACI4B,IAAKhP,KAAKgE,MAAMmuB,KAChBtwB,KAAM7B,KAAKgE,MAAMnC,KACjBqlB,SAAUlnB,KAAKgE,MAAMkjB,SACrBjb,MAAOjM,KAAKgE,MAAMiI,MAClBjF,YAAahH,KAAKiW,gBAClBmc,QAASpyB,KAAKwxB,YACda,OAAQryB,KAAK4xB,WACbK,UAAWjyB,KAAKgE,MAAMiuB,YAAa,EACnCvF,UAAW1sB,KAAK8xB,cAChBQ,UAAWtyB,KAAKgE,MAAMsuB,UACtBC,OAAQ,SAAAtzB,GACD,EAAK+E,MAAMwuB,aACVvzB,EAAE2X,oBAGd,qBAAK/R,UAAU,qB,GAhDcK,IAAMC,W,uBCIpC,SAASstB,GAAT,GAAmD,IAA3BvL,EAA0B,EAA1BA,SAAU7nB,EAAgB,EAAhBA,GAAIqzB,EAAY,EAAZA,UAC3C1jB,EAAM9J,IAAM8Q,SAElB,EAA4B9Q,IAAM6B,SAAS,IAA3C,mBAAOmjB,EAAP,KAAeC,EAAf,KAKA,OAJGD,EAAOjqB,OAAS,IACfyyB,EAAYA,EAAU1Q,QAAO,SAAAoI,GAAO,OAAIA,EAAQjZ,KAAKqP,cAAc6J,WAAWH,EAAO1J,mBAIrF,eAAC,GAAD,CAAQxR,IAAKA,EAAK3P,GAAIA,EAAI+E,MAAM,QAAQS,UAAU,iBAAlD,UACI,6BAAK6M,GAAG,wBAER,cAACoY,GAAD,CAAW7d,MAAOie,EAAQhD,SAAU,SAACjoB,GAAD,OAAOkrB,EAAUlrB,EAAEsG,OAAO0G,UAE9D,cAAC2B,EAAD,CAAYG,qBAAmB,EAA/B,SACK2kB,EAAUj0B,KAAI,SAAA2rB,GAAO,OAAKA,EAAQuI,UAAW,KAC1C,cAACC,GAAD,CAA8CxI,QAASA,EAASviB,QAAU,WAC9D,OAARqf,QAAQ,IAARA,KAAW,IAAMkD,EAAQyI,cAAc,IACvC7jB,EAAImH,QAAQ2M,UAFQsH,EAAQ0I,mBAOxC,qBAAKjuB,UAAU,UAAf,SACI,cAAC2d,GAAD,CAAa3a,QAAS,WAAMmH,EAAImH,QAAQ2M,SAAxC,SAAoDpR,GAAG,oBAWhE,SAASkhB,GAAT,GAAgD,IAApBxI,EAAmB,EAAnBA,QAASviB,EAAU,EAAVA,QAClC9B,EAASb,IAAM6B,SAAS,CAACnC,MAAO,QACtC,EAAyC0B,EAA4BP,GAArE,mBAAO4B,EAAP,KAAkBtB,EAAlB,KAA2BuB,EAA3B,KACA,OACI,sBAAK/C,UAAU,sBAAsBgD,QAASA,EAASb,YAAaW,EAAWV,UAAWZ,EAASa,aAAcU,EAAjH,UACI,cAAC,EAAD,2BAAkB7B,EAAO,IAAzB,IAA6Bd,MAAM,uCACnC,sBAAKJ,UAAU,UAAf,UACI,sBAAMA,UAAU,OAAhB,SAAwBulB,EAAQ2I,eAChC,sBAAMluB,UAAU,QAAhB,SAAyBulB,EAAQyI,cAAcp0B,KAAI,SAAAgxB,GAAC,MAAG,IAAMA,KAAG7c,KAAK,c,ICjChEogB,G,kDACjB,WAAYzB,GAAO,IAAD,8BACd,cAAMA,IAGV3sB,MAAO,CACH4P,OAAQ,GACRye,SAAU,IACVf,SAAS,EACTgB,cAAe,GACfC,eAAe,EACfC,aAAc,GACdV,UAAW,IAXG,EAclBW,KAAMnuB,IAAM2d,YAdM,EAelByQ,KAAMpuB,IAAM2d,YAfM,EA4BlB0Q,oBAAsB,SAACluB,GACnB,IAAM4G,EAAQ5G,EAAME,OAAO0G,MAAM8M,QAAQ,WAAY,IACrD,EAAK/S,SAAS,CACVwO,OAAQvI,EACRimB,SAAS,IAEb,EAAKsB,aAAa,KAlCJ,EAqClBC,oBAAsB,WAClBxR,GAAU,6CACN,cAACwQ,GAAD,CAAepzB,GAAG,6CACdqzB,UAAW,EAAK9tB,MAAM8tB,UAAWxL,SAAU,SAAAwM,GACvC,EAAK1tB,SAAS,CACVitB,SAAUS,EACVN,aAAc,EAAKO,uBAAuBD,UA3C5C,EA+DlBE,sBAAwB,SAACvuB,GACrB,IAAI4G,EAAQ,IAAM5G,EAAME,OAAO0G,MAAM8M,QAAQ,WAAY,IAEzD,GAAG9M,EAAMhM,OAAS,EAAG,CACjB,IADiB,EACbA,EAAS,EADI,cAEE4zB,IAFF,IAEjB,IAAI,EAAJ,qBAAiC,CAAC,IAA1BzJ,EAAyB,QAC7B,GAAGne,EAAMoe,WAAWD,EAAQ0J,YAAa,GAAI,CACzC7zB,EAASmqB,EAAQ0J,YAAY7zB,OAAO,EACpC,QALS,8BASjB,IAAI8zB,EAAY9nB,EAAM0D,OAAO,EAAG1P,GAC5B6G,EAAMmF,EAAM0D,OAAO1P,GAEvB,EAAK+F,SAAS,CACVitB,SAAUc,EACVvf,OAAQ1N,EAAO,EAAKlC,MAAM4P,OAC1B0d,SAAS,EACTkB,aAAc,EAAKO,uBAAuBI,KAE9C,EAAKT,KAAKnd,QAAQqW,aAGlB,EAAKxmB,SAAS,CACVitB,SAAUhnB,EACVmnB,aAAc,EAAKO,uBAAuB1nB,KAIlD,EAAKunB,aAAa,KA7FJ,EAiGlB1B,cAAgB,SAAC7yB,GACY,cAAtBA,EAAEwH,YAAYkL,KACmB,IAA7B,EAAK/M,MAAM4P,OAAOvU,QACjB,EAAKozB,KAAKld,QAAQqW,SApGZ,EAyGlBwH,aAzGkB,wBAyGJ,6BAAAzO,EAAA,sDACJ/Q,EAAS,EAAK5P,MAAMquB,SAAW,IAAM,EAAKruB,MAAM4P,OACtDyc,GAAKgD,gBAAgBzf,GAAQ2D,OAAM,SAAA+b,GAC/B,OAAOA,EAAO9rB,SACV,IAAK,qBACD6Z,GAAW,2BACP,cAAC,GAAD,CAAe7d,MAAM,QAAQsf,kBAAkB,EAAMJ,WAAW,EAAMjkB,GAAG,2BAAzE,SACKqS,GAAG,4BAGZ,EAAK8hB,aAAa,IAClB,MAEJ,IAAK,uBACD,EAAKxtB,SAAS,CAACksB,SAAS,IACxB,EAAKsB,aAAa9hB,GAAG,kBACrB,MAEJ,IAAK,0CACD,MAEJ,QAEI,EAAK1L,SAAS,CAACksB,SAAS,IACxB,EAAKsB,aAAaU,EAAO9rB,aAxB3B,2CAvGV+rB,GAAwB,gBAFV,E,qDAiBlB,WAAqB,IAAD,OAChBrzB,EAAMc,UAAU,CACZ,QAAS,iBACV5C,MAAK,SAAAqD,GACJ,EAAK2D,SAAS,CACV0sB,UAAWrwB,EAAOqwB,iB,oCA2B9B,SAAuBoB,GACnB,IAAIM,EAAa1iB,GAAG,wBACF,KAAfoiB,IACCM,EAAa1iB,GAAG,qBAHY,oBAKbmiB,IALa,IAKhC,IAAI,EAAJ,qBAAiC,CAAC,IAA1BzJ,EAAyB,QAC7B,GAAI0J,EAAYnkB,OAAO,IAAMya,EAAQ0J,YAAa,CAC9CM,EAAchK,EAAQjZ,KACtB,QARwB,8BAWhC,OAAOijB,I,oBA0EX,WACI,IAAMC,EAAOr0B,KAAKq0B,OAClB,OACI,sBAAKh1B,GAAG,OAAOwF,UAAU,wBAAzB,UAEI,6BAAK6M,GAAG,qBAER,mBAAG7M,UAAU,cAAb,SACK6M,GAAG,oBAMR,sBAAK7M,UAAU,mBAAmBgD,QAAS7H,KAAKyzB,oBAAhD,UACKzzB,KAAK4E,MAAMwuB,cAAgB1hB,GAAG,oBAC/B,sBAAMvK,wBAAyB,CAACC,OnErJjB,uTmEwJnB,sBAAKvC,UAAU,qBAAf,UACI,cAAC,GAAD,CACIstB,KAAMnyB,KAAKqzB,KACXxxB,KAAK,MACLoK,MAAOjM,KAAK4E,MAAMquB,SAClBhB,WAAW,EACX/K,SAAUlnB,KAAK4zB,sBACf7B,kBAAmB/xB,KAAKg0B,aACxBhC,wBAAwB,IAE5B,cAAC,GAAD,CACIG,KAAMnyB,KAAKszB,KACXzxB,KAAK,MACLoK,MAAOjM,KAAK4E,MAAM4P,OAClB0S,SAAUlnB,KAAKuzB,oBACfxB,kBAAmB/xB,KAAKg0B,aACxB9B,QAASlyB,KAAK4E,MAAMstB,QACpBF,wBAAwB,EACxBtF,UAAW1sB,KAAK8xB,mBAGxB,cAACuC,EAAD,IAEA,cAAC,GAAD,CACIxsB,QAAS7H,KAAKg0B,aADlB,SAEKtiB,GAAG,oBAGR,cAAC,IAAD,CAAU6U,MAAOa,GAAjB,SACI,cAAC,GAAD,a,GAvLmCliB,IAAMC,WCLxCmvB,I,yDAIjB,WAAY/C,GAAO,IAAD,8BACd,cAAMA,IAGV3sB,MAAO,CACHzF,KAAM,GACN+yB,SAAS,EACTgB,cAAe,GACfC,eAAe,GARD,EAWlBoB,sBAAuB,SAAClvB,GACpB,EAAKW,SAAS,CACV7G,KAAMkG,EAAME,OAAO0G,MACnBimB,SAAS,IAEb,EAAKsB,aAAa,IACfnuB,EAAME,OAAO0G,MAAMhM,QAAQ,EAAK+D,MAAMmoB,KAAKtqB,KAAK5B,QAC/C,EAAKu0B,qBAAqBnvB,EAAME,OAAO0G,QAlB7B,EAqBlBuoB,qBAAsB,SAACr1B,GAED,iBAARA,IACNA,OAAM4C,IAEV5C,EAAOA,GAAQ,EAAKyF,MAAMzF,MAElBc,QAAQ,EAAK+D,MAAMmoB,KAAKtqB,KAAK5B,QAErCgxB,GAAKwD,cAAct1B,GAAMgZ,OAAM,SAAA+b,GACP,uBAAjBA,EAAO9rB,SACN,EAAKpC,SAAS,CAACksB,SAAS,IACxB,EAAKsB,aAAa9hB,GAAG,mBAIrB,EAAK1L,SAAS,CAACksB,SAAS,IACxB,EAAKsB,aAAaU,EAAO9rB,cApCjC+rB,GAAwB,gBAFV,E,0CA0ClB,WACI,IAAME,EAASr0B,KAAKq0B,OAEhBjsB,EAAyC,6BAA/BpI,KAAKgE,MAAMmoB,KAAKtqB,KAAK,SAC9B,mBAAGgD,UAAU,cAAb,SAA4B6M,GAAG,mBAE/B,mBAAG7M,UAAU,cAAb,SAA4B6M,GAAG,4BAEpC,OACI,sBAAKrS,GAAG,OAAOwF,UAAU,iBAAzB,UAEI,6BAAK7E,KAAKgE,MAAMmoB,KAAKF,eAEpB7jB,EAED,cAAC,GAAD,CACIvG,KAAK,SACLoK,MAAOjM,KAAK4E,MAAMzF,KAClB+nB,SAAUlnB,KAAKu0B,sBACftC,WAAW,EACX7kB,MAAOsE,GAAG,eACV4gB,UAAWtyB,KAAKgE,MAAMmoB,KAAKtqB,KAAK5B,OAChC8xB,kBAAmB/xB,KAAKw0B,qBACxBtC,QAASlyB,KAAK4E,MAAMstB,QACpBF,wBAAwB,IAE5B,cAACqC,EAAD,IAEA,cAAC,GAAD,CACIxsB,QAAS7H,KAAKw0B,qBADlB,SAEK9iB,GAAG,oBAGR,cAAC,IAAD,CAAU6U,MAAOa,GAAjB,SACI,cAAC,GAAD,a,GAhF4BliB,IAAMC,YCEjCuvB,I,yDACjB,WAAYnD,GAAO,IAAD,8BACd,cAAMA,IAMV3sB,MAAO,CACH+vB,SAAU,GACVzC,SAAS,EACTgB,cAAe,GACfC,eAAe,GAXD,EAalByB,0BAA2B,SAACvvB,GACxB,EAAKW,SAAS,CACV2uB,SAAUtvB,EAAME,OAAO0G,MACvBimB,SAAS,IAEb,EAAKsB,aAAa,KAlBJ,EAoBlBgB,qBApBkB,wBAoBI,uBAAAjP,EAAA,sDAClB0L,GAAK4D,aAAa,EAAKjwB,MAAM+vB,UAAUxc,OAAM,SAAA+b,GACtB,yBAAhBA,EAAO9rB,SACN,EAAKpC,SAAS,CAACksB,SAAS,IACxB,EAAKsB,aAAa9hB,GAAG,8BAIrB,EAAK1L,SAAS,CAACksB,SAAS,IACxB,EAAKsB,aAAaU,EAAO9rB,aATf,2CAlBlB+rB,GAAwB,gBAFV,E,0CAiClB,WACI,IAAME,EAAOr0B,KAAKq0B,OAClB,OACI,sBAAKh1B,GAAG,OAAOwF,UAAU,qBAAzB,UACI,sBAAKA,UAAU,UAAf,UAEI,6BAAK6M,GAAG,sBAER,mBAAG7M,UAAU,cAAb,SAA4B6M,GAAG,qBAE/B,cAAC,GAAD,CACI7P,KAAK,WACLoK,MAAOjM,KAAK4E,MAAM+vB,SAClBzN,SAAUlnB,KAAK40B,0BACf3C,WAAW,EACX7kB,MAAOsE,GAAG,uBACVqgB,kBAAmB/xB,KAAKw0B,qBACxBhC,aAAa,EACbN,QAASlyB,KAAK4E,MAAMstB,UAExB,qBAAKrtB,UAAU,OAAf,SACK7E,KAAKgE,MAAMmoB,KAAK2I,cAAchjB,GAAM,kBAAmB,CAACgjB,cAAe90B,KAAKgE,MAAMmoB,KAAK2I,gBAAgB,0CAG5G,qBAAKjwB,UAAU,kBAAf,SACI,cAACoQ,GAAD,UAAavD,GAAG,0BAGpB,cAAC2iB,EAAD,IAEA,cAAC,GAAD,CACIxsB,QAAS7H,KAAKw0B,qBADlB,SAEK9iB,GAAG,yBAIZ,cAAC,IAAD,CAAU6U,MAAOa,GAAjB,SACI,cAAC,GAAD,a,GAvEgCliB,IAAMC,Y,OCV3C,SAAS4vB,GAAT,GAA8C,IAAnBC,EAAkB,EAAlBA,MAAO9N,EAAW,EAAXA,SACvCnhB,EAAQb,IAAM6B,SAAS,CAACnC,MAAO,QACrC,EAA8C0B,EAA4BP,GAA1E,mBAAOiB,EAAP,KAAoBC,EAApB,KAA+BC,EAA/B,KACA,OACI,sBAAKrC,UAAW,mCAAqCmwB,EAAO,aAAe,IAClEhuB,cAAaC,YAAWC,eADjC,UAGK8tB,GAAS,qBAAKxa,IAAK/B,GAAUuc,GAAQC,IAAI,YAC1C,cAAC,EAAD,2BAAkBlvB,EAAO,IAAzB,IAA6Bd,MAAM,0CAA0ChB,OAAO,KACpF,sBAAMkD,wBAAyB,CAACC,OtEWjB,w5CsEVf,gCACI,uBAAOvF,KAAK,OAAOqzB,OAAO,UAAUhO,SAAUA,S,WCCzCiO,G,4MAKjBvwB,MAAO,CACHwwB,UAAW,GACXC,SAAU,GACVnC,cAAe,GACfC,eAAe,EACf6B,MAAO,M,EAEXM,2BAA4B,SAACjwB,GACzB,EAAKW,SAAS,CAACovB,UAAW/vB,EAAME,OAAO0G,S,EAE3CspB,0BAA2B,SAAClwB,GACxB,EAAKW,SAAS,CAACqvB,SAAUhwB,EAAME,OAAO0G,S,EAE1CuoB,qBAAsB,WAClBvD,GAAKuE,mBAAmB,EAAK5wB,MAAMwwB,UAAW,EAAKxwB,MAAMywB,UAAUld,OAAM,SAAA+b,GACrE,EAAKluB,SAAS,CAACyvB,eAAgBvB,EAAO9rB,aACvCpJ,MAAK,WACD,EAAK4F,MAAMowB,OACVl0B,EAAMc,UAAU,CACZ,QAAS,kBACTmL,MAAO,CACH,QAAS,uBACTA,MAAO,CACH,QAAS,gBACT+M,KAAM,EAAKlV,MAAMowB,c,EAQzCU,QAAS,WACLzT,GAAU,oBACN,cAAC,GAAD,CAAe5iB,GAAG,oBAAoB+E,MAAM,QACxCsf,kBAAkB,EAAMtW,MAAOsE,GAAG,oBADtC,SAGK,EAAK1N,MAAM2xB,IAAItmB,KAAKA,S,4CAKjC,WAAW,IAAD,OACN,OACI,sBAAKxK,UAAU,iBAAf,UACI,sBAAKxF,GAAG,OAAOwF,UAAU,mBAAzB,UACI,sBAAKA,UAAU,UAAf,UAEI,6BAAK6M,GAAG,sBAER,mBAAG7M,UAAU,cAAb,SAA4B6M,GAAG,qBAE/B,cAACqjB,GAAD,CAAkBC,MAAOh1B,KAAK4E,MAAMowB,MAAO9N,SAAU,SAAAjoB,GAAC,OAAG,EAAK+G,SAAS,CACnEgvB,MAAO/1B,EAAEsG,OAAOqwB,MAAM,QAG1B,cAAC,GAAD,CACI/zB,KAAK,OACLuL,MAAOsE,GAAG,wBACVzF,MAAOjM,KAAK4E,MAAMwwB,UAClBlO,SAAUlnB,KAAKs1B,2BACfrD,WAAW,IAEf,cAAC,GAAD,CACIpwB,KAAK,OACLuL,MAAOsE,GAAG,uBACVzF,MAAOjM,KAAK4E,MAAMywB,SAClBnO,SAAUlnB,KAAKu1B,4BAEnB,qBAAK1wB,UAAU,SAAf,SACK7E,KAAK4E,MAAM6wB,gBAAkB,KAGlC,cAAC,GAAD,CACI5tB,QAAS7H,KAAKw0B,qBADlB,SAEK9iB,GAAG,yBAIZ,cAAC,IAAD,CAAU6U,MAAOa,GAAjB,SACI,cAAC,GAAD,SAGR,qBAAKviB,UAAU,aAAf,SACKiN,GAAM,mBAAoB,CAAC+jB,KAAM,cAAC5gB,GAAD,CAAYpN,QAAS7H,KAAK01B,QAA1B,SAAoChkB,GAAG,sC,GAzFzCxM,IAAMC,WCH7C2wB,GAAYhsB,aAAY,WAAuC,IAAtClF,EAAqC,uDAA9B,CAAE,MAAS,MAAQuD,EAAW,uCACvE,OAAQA,EAAOtG,MACX,IAAK,YACD,OAAO,2BACA+C,GADP,IAEI,MAASuD,EAAOvD,QAExB,QACI,OAAOA,MA2BZ,SAASuvB,GAAwB4B,GACpCA,EAAU1B,OAAQ,WACd,OACI,qBAAKxvB,UAAW,UAAWkxB,EAAUnxB,MAAMuuB,cAAc,GAAG,WAA5D,SAAyE4C,EAAUnxB,MAAMsuB,iBAGjG6C,EAAUvC,aAAc,SAAS5e,GAC1BA,EACCmhB,EAAU/vB,SAAS,CACfktB,cAAete,EACfue,eAAe,KAGnB4C,EAAU/vB,SAAS,CACfmtB,eAAe,IAEnBltB,YAAW,WACH8vB,EAAUnxB,MAAMuuB,eAChB4C,EAAU/vB,SAAS,CACfktB,cAAe,SAGxB,OAQR,IAAM8C,GAASxiB,aAAQ,SAAA5O,GAAK,MAAI,CAACqxB,KAAMrxB,EAAMA,SAA9B4O,CAAA,uKAKlB,WAEI1S,EAAMqI,sBAAsB,4BAA4B,SAAC5H,GACrDu0B,GAAU7sB,SAAS,CACfpH,KAAM,YACN+C,MAAOrD,EAAO20B,2BAVR,mCAelB,SAAsBpS,GAUlB,QARc,CACV,oCACA,6BACA,iCACA,qCACA,0BACA,4BAEMvb,SAASub,EAAUmS,KAAK,YAzBpB,oBA+BlB,WAAW,IAAD,EACN,iBAAQj2B,KAAKgE,MAAMiyB,YAAnB,aAAQ,EAAkB,UACtB,IAAK,oCAED,OACI,eAAC,IAAM9mB,SAAP,WACI,cAAC,IAAD,CAAUoX,MAAOzE,GAAjB,SACI,cAAC,GAAD,MAEJ,cAAC,GAAD,OAIZ,IAAK,6BAED,OACI,eAAC,IAAM3S,SAAP,WACI,cAAC,IAAD,CAAUoX,MAAOzE,GAAjB,SACI,cAAC,GAAD,MAEJ,cAAC,GAAD,CAAoBqK,KAAMnsB,KAAKgE,MAAMiyB,KAAKE,eAItD,IAAK,iCAED,OACI,eAAC,IAAMhnB,SAAP,WACI,cAAC,IAAD,CAAUoX,MAAOzE,GAAjB,SACI,cAAC,GAAD,MAEJ,cAAC,GAAD,CAAwBqK,KAAMnsB,KAAKgE,MAAMiyB,UAIrD,IAAK,qCAED,OACI,eAAC,IAAM9mB,SAAP,WACI,cAAC,IAAD,CAAUoX,MAAOzE,GAAjB,SACI,cAAC,GAAD,MAEJ,cAAC,GAAD,CAAwB6T,IAAK31B,KAAKgE,MAAMiyB,KAAKG,sBAIzD,IAAK,0BAED,OACI,cAAC,IAAD,CAAU7P,MAAO+C,GAAjB,SACI,cAAC,GAAD,MAIZ,IAAK,2BAGD,OADA7oB,OAAOC,SAASqqB,SAEZ,4BAAIlY,GAAK,8BAGjB,QAEI,OACI,qBAAKxT,GAAG,OAAOwF,UAAU,UAAzB,SACI,cAAC,GAAD,CAAgByP,KAAM,GAAII,UAAW,EAAGC,cAAc,yCAhGxD,GAA6DzP,IAAMC,YCjEzF1E,OAAO41B,QAAU,WACbv1B,EAAMc,UAAU,CACZ,QAAS,YACTuP,KAAM,SACNlF,MAAO,CACH,QAAS,qBACTA,OAAO,MAKnBxL,OAAO61B,OAAS,WACZx1B,EAAMc,UAAU,CACZ,QAAS,YACTuP,KAAM,SACNlF,MAAO,CACH,QAAS,qBACTA,OAAO,M,OCpBnBnL,EAAMy1B,kBAAkBv3B,MAAK,WDPzB8B,EAAMc,UAAU,CACZ,QAAS,YACTuP,KAAM,SACNlF,MAAO,CACH,QAAS,qBACTA,MAAOmK,SAASogB,clEFrB,WACH,IAAM9lB,EAAcF,KAEdimB,EAAqBvsB,aAAaC,QAAQ,0CAC7CssB,IACCnmB,GAAgBK,KAAKC,MAAM6lB,GAAqB/lB,EAAarR,KAAOkR,IAExE/O,QAAQR,IAAI,oBACZF,EAAMc,UAAU,CACZ,QAAS,YACT,KAAQ,sBACR,MAAS,CACL,QAAS,oBACTqK,MAAO,cAEZjN,MAAK,WACJ8B,EAAMc,UAAU,CACZ,QAAS,yBACTopB,iBAAkBta,EAAarR,IAAM,OACtCL,MAAK,SAAAqD,GACJgO,GAAsB,GACtBhO,EAAO4oB,QAAQxpB,SAAQ,SAAAmT,GACnBvE,GAAoBuE,EAAOjD,KAAOiD,KAGtCkhB,GAAU7sB,SAAS,CACfpH,KAAM,YACN+C,MAAOkxB,GAAUnoB,WAAW/I,cmErBxC8xB,MAuDWC,OA7Cf,WA4BI,OA3BAzxB,IAAMoO,WAAU,WACZxS,EAAMqI,sBAAsB,mBAAoB1I,OAAOm2B,mBAAqB,SAAUr1B,GAClFC,QAAQc,MAAM,eAAgBf,EAAOe,OAErC2f,GAAW,oBACP,eAAC,GAAD,CACI7d,MAAM,QACNsf,kBAAkB,EAClBrkB,GAAG,oBACHkkB,YAAY,UACZE,mBAAoBhjB,OAAOC,SAASqqB,OAAO3kB,KAAK3F,OAAOC,UACvD8iB,yBAAyB,EACzBpW,MAAM,cAPV,6CASoC,uBATpC,8EAWiC,uBAXjC,6DAaO,mBAAGzM,KAAK,uDAAuDk2B,IAAI,aAAatxB,OAAO,SACtFT,MAAO,CAACG,MAAO,yCADhB,8BAEH,uBAAK,uBACL,8BAAM1D,EAAOe,MAAMw0B,qBAIhC,IAGC,cAAC,IAAD,CAAUvQ,MAAO+C,GAAjB,SACI,eAAC,GAAD,CAAejqB,GAAG,MAAlB,UACI,cAAC,IAAD,CAAUknB,MAAO/O,GAAjB,SACI,cAACE,GAAD,MAEJ,cAAC,IAAD,CAAU6O,MAAOuP,GAAjB,SACI,cAAC,GAAD,MAEJ,cAAC,IAAD,CAAUvP,MAAOrQ,GAAjB,SACI,cAACO,GAAD,YClDdsgB,GAAcC,QACW,cAA7Bv2B,OAAOC,SAASu2B,UAEe,UAA7Bx2B,OAAOC,SAASu2B,UAEhBx2B,OAAOC,SAASu2B,SAASC,MAAM,2DAqCnC,SAASC,GAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTp4B,MAAK,SAACy4B,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB/yB,QACf0yB,UAAUC,cAAcO,YAI1Bt2B,QAAQR,IACN,+GAKEq2B,GAAUA,EAAO/1B,UACnB+1B,EAAO/1B,SAASm2B,KAMlBj2B,QAAQR,IAAI,sCAGRq2B,GAAUA,EAAOU,WACnBV,EAAOU,UAAUN,WAO5Btf,OAAM,SAAC7V,GACNd,QAAQc,MAAM,4CAA6CA,MCxFjE01B,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,GAAD,MAEJ9hB,SAAS+hB,eAAe,SDUrB,SAAkBd,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI92B,IAAI43B,IAAwB33B,OAAOC,SAASC,MACpD03B,SAAW53B,OAAOC,SAAS23B,OAIvC,OAGF53B,OAAO63B,iBAAiB,QAAQ,WAC9B,IAAMlB,EAAK,UAAMgB,IAAN,sBAEPrB,KAgEV,SAAiCK,EAAOC,GAEtCkB,MAAMnB,EAAO,CACXoB,QAAS,CAAE,iBAAkB,YAE5Bx5B,MAAK,SAACsrB,GAEL,IAAMmO,EAAcnO,EAASkO,QAAQ33B,IAAI,gBAEnB,MAApBypB,EAASvV,QACO,MAAf0jB,IAA8D,IAAvCA,EAAY/oB,QAAQ,cAG5C4nB,UAAUC,cAAcmB,MAAM15B,MAAK,SAACy4B,GAClCA,EAAakB,aAAa35B,MAAK,WAC7ByB,OAAOC,SAASqqB,eAKpBoM,GAAgBC,EAAOC,MAG1Blf,OAAM,WACL3W,QAAQR,IAAI,oEAtFV43B,CAAwBxB,EAAOC,GAI/BC,UAAUC,cAAcmB,MAAM15B,MAAK,WACjCwC,QAAQR,IACN,+GAMJm2B,GAAgBC,EAAOC,OChC/BwB,M","file":"static/js/main.6f4cd06e.chunk.js","sourcesContent":["var map = {\n\t\"./be.json\": [\n\t\t110,\n\t\t3\n\t],\n\t\"./ca.json\": [\n\t\t111,\n\t\t4\n\t],\n\t\"./de.json\": [\n\t\t112,\n\t\t5\n\t],\n\t\"./en.json\": [\n\t\t24\n\t],\n\t\"./es.json\": [\n\t\t113,\n\t\t6\n\t],\n\t\"./fr.json\": [\n\t\t114,\n\t\t7\n\t],\n\t\"./it.json\": [\n\t\t115,\n\t\t8\n\t],\n\t\"./ko.json\": [\n\t\t116,\n\t\t9\n\t],\n\t\"./ms.json\": [\n\t\t117,\n\t\t10\n\t],\n\t\"./nl.json\": [\n\t\t118,\n\t\t11\n\t],\n\t\"./pl.json\": [\n\t\t119,\n\t\t12\n\t],\n\t\"./pt-br.json\": [\n\t\t120,\n\t\t13\n\t],\n\t\"./ru.json\": [\n\t\t121,\n\t\t14\n\t],\n\t\"./tr.json\": [\n\t\t122,\n\t\t15\n\t],\n\t\"./uk.json\": [\n\t\t123,\n\t\t16\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__.t(id, 3);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 94;\nmodule.exports = webpackAsyncContext;","// https://love2dev.com/blog/javascript-remove-from-array/#remove-from-array-splice\n/**\n * Removes an item from an array\n * @param {*} item The item to remove\n */\nexport default function removeItemFromArray(item) {\n    for( var i = 0; i < this.length; i++){ \n        if ( this[i] === item) { \n            this.splice(i, 1); \n        }\n    }\n}\n\nArray.prototype.remove= removeItemFromArray;","/* eslint-disable */\nimport { createTdClient } from './tdweb';\nimport {getConfig} from './config';\nimport TdApi from './td_api';\nimport removeItemFromArray from '../../remove-item-from-array';\nexport function getUseTestDc() {\n    var urlPar=new URL(window.location.href).searchParams.get('test');\n    if(urlPar){\n        return urlPar==='1' || urlPar==='true';\n    }\n    return false;\n}\n\nexport function getCurrentSessionId() {\n    return new URL(window.location.href).searchParams.get('account') || '1';\n}\n\n/**\n * Provides options to communicate with the Tdweb library\n */\nexport default class TdLib {\n    static #tdClient: any;\n    /** @type {[string: Array<Function>]} */\n    static #updateHandlers: {[key: string]: ((update: any) => void)[]}={};\n\n    /**\n     * Creates the instance of Tdweb\n     */\n    static initializeTdLib() {\n        const {log}= getConfig();\n        TdLib.#tdClient= createTdClient({\n            useDatabase: true,\n            instanceName: ( getCurrentSessionId() ) + (getUseTestDc() ? 'test' : 'production'), // e.g. ?account=1&test=1 = '1test' or ?account=1&test=0 = '1production'\n            onUpdate: function (update: TdApi.td_Update) {\n                if(log.log_updates) {\n                    console.log('Update: ',update);\n                }\n                if(TdLib.#updateHandlers[update['@type']]){\n                    TdLib.#updateHandlers[update['@type']].forEach(h => h(update));\n                }\n            }\n        });\n        return TdLib.sendQuery({'@type': 'getAuthorizationState'}); // It both starts TDLib and returns the authorization state\n    }\n\n    /**\n     * Listen for updates from TdLib\n     * @param type The type of the update to listen to. Look for TdLib API docs for types\n     * @param handler The function that gets called with the update object when the update is received\n     */\n    static registerUpdateHandler<T extends TdApi.td_Update>(type: TdApi.TdUpdateType<T>, handler: (update: T) => void): void {\n        if(TdLib.#updateHandlers[type]===undefined){\n            TdLib.#updateHandlers[type]= [];\n        }\n        TdLib.#updateHandlers[type].push(handler);\n    }\n\n    /**\n     * Remove an existing update handler\n     * @param {string} type The type of the update to remove handler from. Look for TdLib API docs for types\n     * @param {Function} handler The handler to remove\n     */\n    static unRegisterUpdateHandler<T extends TdApi.td_Update>(type: TdApi.TdUpdateType<T>, handler: (update: T) => void): void {\n        if(TdLib.#updateHandlers[type]===undefined){\n            return;\n        }\n        removeItemFromArray.call(TdLib.#updateHandlers[type], handler);\n    }\n\n    /**\n     * Send a request to the TdLib instance\n     * If the query contains an `@extra` field, the same field will be added to the result\n     * @param query The request to send. Consult TdLib & JSON interface API for help.\n     * @returns The result of the request\n     */\n    static sendQuery<T extends TdApi.TdFunction>(query: T): Promise<TdApi.TdFunctionReturn<T> | TdApi.td_Error> {\n        const {log}= getConfig();\n        if(log.log_queries && query['@type']!=='setTdlibParameters') {\n            console.log('Query: ',query);\n        }\n        return new Promise((resolve, reject) => {\n            TdLib.#tdClient.send(query).then((result: TdApi.TdFunctionReturn<T>)=> {\n                if(log.log_queries) {\n                    console.log('Query result: ', result);\n                }\n                resolve(result);\n            }, (error: TdApi.td_Error)=> {\n                if(log.log_queries) {\n                    console.warn('Query failed: ', error);\n                }\n                reject(error);\n            }\n            );\n        });\n    }\n}","import TdClient from '@dibgram/tdweb';\n\nexport function createTdClient(op) {\n    return new TdClient(op);\n}","export function getCredentials() {return {api_id: 3022678,api_hash: 'd7b7676a82906a6182f4a5e5e9555673'};}export function getConfig() {return {use_test_dc: false,log: {log_updates: true,log_queries: true}};}\n","// All icons are from Telegram Desktop, converted to SVG using https://pngtosvg.com/\n\nimport raw from 'raw.macro';\n\nvar chatFilerIcons = {\n    All     : [raw('./all.svg'     ), raw('./all_active.svg'     )],\n    Bots    : [raw('./bots.svg'    ), raw('./bots_active.svg'    )],\n    Channels: [raw('./channels.svg'), raw('./channels_active.svg')],\n    Custom  : [raw('./custom.svg'  ), raw('./custom_active.svg'  )],\n    Groups  : [raw('./groups.svg'  ), raw('./groups_active.svg'  )],\n    Private : [raw('./private.svg' ), raw('./private_active.svg' )],\n    Setup   : [raw('./setup.svg'   )                              ],\n    Unread  : [raw('./unread.svg'  ), raw('./unread_active.svg'  )],\n\n    Cat     : [raw('./cat.svg'     ), raw('./cat_active.svg'     )],\n    Crown   : [raw('./crown.svg'   ), raw('./crown_active.svg'   )],\n    Favorite: [raw('./favorite.svg'), raw('./favorite_active.svg')],\n    Flower  : [raw('./flower.svg'  ), raw('./flower_active.svg'  )],\n    Game    : [raw('./game.svg'    ), raw('./game_active.svg'    )],\n    Home    : [raw('./home.svg'    ), raw('./home_active.svg'    )],\n    Love    : [raw('./love.svg'    ), raw('./love_active.svg'    )],\n    Mask    : [raw('./mask.svg'    ), raw('./mask_active.svg'    )],\n    Party   : [raw('./party.svg'   ), raw('./party_active.svg'   )],\n    Sport   : [raw('./sport.svg'   ), raw('./sport_active.svg'   )],\n    Study   : [raw('./study.svg'   ), raw('./study_active.svg'   )],\n    Trade   : [raw('./trade.svg'   ),                             ],\n    Travel  : [raw('./travel.svg'  ), raw('./travel_active.svg'  )],\n    Work    : [raw('./work.svg'    ), raw('./work_active.svg'    )],\n};\nexport default chatFilerIcons;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Adds a ripple effect to a button.\n * \n * Insert at the beginning of the button.\n * \n * **Note:** The button needs `position: relative;` and `overflow: hidden;`\n */\nexport default class RippleEffect extends React.Component {\n    static propTypes= {\n        /** \n         * - Change to `pressed` on `mouseDown`\n         * - Change to `released` on `mouseUp`\n         * - Change to `off` 1000ms after `mouseUp`\n         */\n        state: PropTypes.oneOf(['off', 'pressed', 'released']).isRequired,\n        X: PropTypes.number,\n        Y: PropTypes.number,\n        width: PropTypes.number,\n        height: PropTypes.number,\n        /** The color to show in the ripple (same as `:active` if you used CSS) */\n        color: PropTypes.string.isRequired,\n        /** Pass true if the button is small to make animation faster */\n        small: PropTypes.bool\n    }\n\n    /** Gets the smallest radius that a circle, centered at click location, needs to fill the button */\n    getMaxRadius() {\n        if(!this.props.small){\n        //  It's a bit hard to understand. Let me explain:\n        //  \n        //  1. It calculates the coordinates relative to the 4 edges of the button ────╮\n        //  2. The diagonal distance to the edges are calculated using the             │\n        //      pythagoras rule, from the results of step 1            │               │\n        //  3. The biggest distance is selected and then returned.     │               │\n        //          │                                                  │               │\n        //  ╭───────┴──────╮  ╭────────────────────────────────────────╯               │        \n        //  │           ╭──┼──┴───╮                                                    │                  \n            return Math.max(//    │╭───────────────────────────────────────────────────┴──────────────╮\n                /* ┏ */ Math.hypot(this.props.X                     , this.props.Y),//                │ \n                /* ┓ */ Math.hypot(this.props.width - this.props.X  , this.props.Y),//                │\n                /* ┗ */ Math.hypot(this.props.X                     , this.props.height - this.props.Y), \n                /* ┛ */ Math.hypot(this.props.width - this.props.X  , this.props.height - this.props.Y), \n            );\n        } else {\n            const {X, Y, width, height} = this.props;\n            const [rX, rY] = [X - width / 2, Y - height / 2]; // Click position relative to center of circle.\n            const distanceToCenter= Math.hypot(Math.abs(rX), Math.abs(rY)); // Get distance from click position to the center of circle.\n            return distanceToCenter + (width / 2); // Add circle radius to result\n        }\n    }\n    render() {\n        if(this.props.state=='off') return null;\n        return (\n            <div\n                className={'ripple '+this.props.state+ (this.props.small? ' small':'')}\n                style={{\n                    '--top': (this.props.Y || 0)+'px',\n                    '--left': (this.props.X || 0)+'px',\n                    '--radius': this.getMaxRadius()+'px',\n                    backgroundColor: this.props.color\n                }}/>\n        );\n    }\n}\n\nfunction getRelativeCoordinates(event) {\n    const rect = event.target.getBoundingClientRect();\n    return {\n        X: event.clientX - rect.left,\n        Y: event.clientY - rect.top\n    };\n}\n\n// Assign your `mouseDown`, `mouseUp` and `mouseLeave` to the returned functions.\nexport function handleMyMouseEvents(This) {\n    return [\n        // mouseDown\n        (function(e) {\n            // Reset the ripple effect if it's not off\n            if(this.state.ripple.state!='off'){\n                this.setState({\n                    ripple: { state: 'off' }\n                });\n                setTimeout(() => {\n                    this.setState({\n                        ripple: {\n                            state: 'pressed',\n                            ...getRelativeCoordinates(e),\n                            width: e.target.clientWidth,\n                            height: e.target.clientHeight\n                        }\n                    });\n                }, 50);\n                return;\n            }\n            this.setState({\n                ripple: {\n                    state: 'pressed',\n                    ...getRelativeCoordinates(e),\n                    width: e.target.clientWidth,\n                    height: e.target.clientHeight\n                }\n            });\n        }).bind(This),\n        // mouseUp\n        (function(e) {\n            this.setState({\n                ripple: { \n                    state: 'released',\n                    ...getRelativeCoordinates(e),\n                    width: e.target.clientWidth,\n                    height: e.target.clientHeight \n                }\n            });\n        }).bind(This),\n        // mouseLeave\n        (function(e) {\n            if(this.state.ripple.state=='pressed') {\n                this.mouseUp(e);\n            }\n        }).bind(This)\n    ];\n}\n// Assign your `mouseDown`, `mouseUp` and `mouseLeave` to the returned functions.\nexport function handleMyMouseEventsFunction([ripple, setRipple]) {\n    function down(e) {\n        // Reset the ripple effect if it's not off\n        if(ripple.state!='off'){\n            setRipple({ state: 'off' });\n            setTimeout(() => {\n                setRipple ({\n                    state: 'pressed',\n                    ...getRelativeCoordinates(e),\n                    width: e.target.clientWidth,\n                    height: e.target.clientHeight\n                });\n            }, 50);\n            return;\n        }\n        setRipple ({\n            state: 'pressed',\n            ...getRelativeCoordinates(e),\n            width: e.target.clientWidth,\n            height: e.target.clientHeight\n        });\n    }\n\n    function up(e) {\n        setRipple ({\n            state: 'released',\n            X: e.nativeEvent.offsetX,\n            Y: e.nativeEvent.offsetY,\n            width: e.target.clientWidth,\n            height: e.target.clientHeight \n        });\n    }\n\n    function leave(e) {\n        if(ripple.state=='pressed') {\n            up(e);\n        }\n    }\n    \n    return [down, up, leave];\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport RippleEffect, {handleMyMouseEventsFunction} from '../../ui/elements/ripple-effect';\nimport './icon-button.scss';\n\n/**\n * Renders a round button with an icon in it, and a special ripple effect.\n */\nexport default function IconButton({icon, ...rest}) {\n    const ripple= React.useState({state: 'off'});\n    const [onMouseDown, onMouseUp, onMouseLeave]= handleMyMouseEventsFunction(ripple);\n    return (\n        <button className=\"icon-button\" {...rest} {...{onMouseDown, onMouseUp, onMouseLeave}}>\n            <span dangerouslySetInnerHTML={{__html: icon}} />\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-windowBgOver)\" small={true}/>\n        </button>\n    );\n}\nIconButton.propTypes = {\n    icon: PropTypes.string.isRequired\n};\n","// All icons are from Telegram Desktop, converted to SVG using https://pngtosvg.com/\n\nimport raw from 'raw.macro';\n\nexport const archive_userpic = raw('./archive_userpic.svg');\nexport const bubble_tail = raw('./bubble_tail.svg');\nexport const dialogs_bot = raw('./dialogs_bot.svg');\nexport const dialogs_channel = raw('./dialogs_channel.svg');\nexport const dialogs_chat = raw('./dialogs_chat.svg');\nexport const dialogs_menu = raw('./dialogs_menu.svg');\nexport const dialogs_pinned = raw('./dialogs_pinned.svg');\nexport const dialogs_received = raw('./dialogs_received.svg');\n//export const dialogs_search_cancel = raw('./dialogs_search_cancel.svg');\nexport const dialogs_sending = raw('./dialogs_sending.svg');\nexport const dialogs_sent = raw('./dialogs_sent.svg');\nexport const dialogs_verified_check = raw('./dialogs_verified_check.svg');\nexport const dialogs_verified_star = raw('./dialogs_verified_star.svg');\nexport const history_received = raw('./history_received.svg');\nexport const history_sent = raw('./history_sent.svg');\nexport const history_to_down = raw('./history_to_down.svg');\nexport const info_back = raw('./info_back.svg');\nexport const info_close = raw('./info_close.svg');\nexport const intro_country_dropdown = raw('./intro_country_dropdown.svg');\nexport const menu_new_channel = raw('./menu_new_channel.svg');\nexport const menu_new_group = raw('./menu_new_group.svg');\nexport const menu_night_mode = raw('./menu_night_mode.svg');\nexport const menu_settings = raw('./menu_settings.svg');\nexport const new_chat_photo = raw('./new_chat_photo.svg');\nexport const replies_userpic = raw('./replies_userpic.svg');\nexport const saved_messages = raw('./saved_messages.svg');\nexport const settings_name = raw('./settings_name.svg');\nexport const settings_phone_number = raw('./settings_phone_number.svg');\nexport const settings_info = raw('./settings/info.svg');\nexport const settings_privacy_security = raw('./settings/privacy_security.svg');\nexport const settings_notifications = raw('./settings/notifications.svg');\nexport const settings_chat = raw('./settings/chat.svg');\nexport const settings_folders = raw('./settings/folders.svg');\nexport const settings_advanced = raw('./settings/advanced.svg');\nexport const settings_language = raw('./settings/language.svg');\nexport const settings_faq = raw('./settings/faq.svg');\nexport const three_dots = raw('./three_dots.svg');\nexport const title_search = raw('./title_search.svg');\nexport const top_bar_call = raw('./top_bar/call.svg');\nexport const top_bar_group_call = raw('./top_bar/group_call.svg');\nexport const top_bar_profile = raw('./top_bar/profile.svg');\nexport const top_bar_search = raw('./top_bar/search.svg');\n\nexport const filters_edit = raw('./chat_filters/edit.svg');\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from '../../../../ui/elements/icon-button';\nimport RippleEffect, {handleMyMouseEvents} from '../../../../ui/elements/ripple-effect';\nimport { dialogs_menu } from '../../../../ui/icon/icons';\nimport './menu-button.scss';\n\nvar HamburgerMenuButton= {}; // Store component classes here\n\n/**\n * Renders the button which opens the hamburger menu (when there are folders)\n */\nHamburgerMenuButton.WithFolders= class WithFolders extends React.PureComponent {\n    static propTypes= {\n        onClick: PropTypes.func,\n    };\n    state= {\n        ripple: {\n            state: 'off'\n        }\n    }\n    constructor() {\n        super();\n        [this.mouseDown, this.mouseUp, this.mouseLeave]= handleMyMouseEvents(this); // Ripple effect events\n    }\n    render() {\n        return (\n            <button id=\"hamburger-menu-button\" className=\"uses-folders\"\n                onMouseDown={this.mouseDown}\n                onMouseUp={this.mouseUp}\n                onMouseLeave={this.mouseLeave}\n                onClick={this.props.onClick}>\n                <div id=\"bars\"><span></span><span></span><span></span></div>\n                <RippleEffect {...this.state.ripple} color=\"var(--theme-color-sideBarBgRipple)\"/>\n            </button>\n        );\n    }\n};\n\n/**\n * Renders the button which opens the hamburger menu (when there are no folders)\n */\nHamburgerMenuButton.WithoutFolders= function WithoutFolders (props) {\n    return (\n        <IconButton \n            icon={dialogs_menu}\n            id=\"hamburger-menu-button\"\n            className=\"icon-button no-folders\"\n            {...props}/>\n    );\n};\n\nexport default HamburgerMenuButton;","import { Store } from 'redux';\nimport TdApi from '../TdWeb/td_api';\n\ntype MessageStoreState= {\n    messages: {[id: number]: TdApi.td_message};\n    isLoaded: number;\n}\ntype MessageStoreAction_AddMessages= { // Add a list of messages, which is returned from getChatHistory\n    type: 'ADD_MESSAGES';\n    messages: TdApi.td_message[];\n}\ntype MessageStoreAction_AddMessage= { // Add a single message\n    type: 'ADD_MESSAGE';\n    message: TdApi.td_message;\n}\ntype MessageStoreAction_RemoveMessages= { // Removes the messages with the given ids\n    type: 'REMOVE_MESSAGES';\n    messageIds: number[];\n}\ntype MessageStoreAction_ReduceMessage= { // Replaces the message with the given id with the result of the reduce function\n    type: 'REDUCE_MESSAGE';\n    messageId: number;\n    reduce: (message: TdApi.td_message) => TdApi.td_message;\n}\ntype MessageStoreAction = MessageStoreAction_AddMessages | MessageStoreAction_AddMessage | MessageStoreAction_RemoveMessages | MessageStoreAction_ReduceMessage;\n\nexport function reducer(state: MessageStoreState= {\n    messages: {},\n    isLoaded: 0,\n} , action: MessageStoreAction): MessageStoreState {\n    switch (action.type) {\n        case 'ADD_MESSAGES': {\n            const result: {[key: number]: TdApi.td_message} = {};\n            for (const message of action.messages) {\n                result[message.id] = message;\n            }\n            return {\n                ...state,\n                messages: {\n                    ...state.messages,\n                    ...result\n                },\n                isLoaded: state.isLoaded+1\n            };\n        }\n        case 'ADD_MESSAGE': {\n            return {\n                ...state,\n                messages: {\n                    ...state.messages,\n                    [action.message.id]: action.message\n                }\n            };\n        }\n        case 'REMOVE_MESSAGES': {\n            const result: {[key: number]: TdApi.td_message} = {};\n            for (const messageId in state.messages) {\n                if (!action.messageIds.includes(Number(messageId))) {\n                    result[messageId] = state.messages[messageId];\n                }\n            }\n            return {\n                ...state,\n                messages: result\n            };  \n        }\n        case 'REDUCE_MESSAGE': {\n            return {\n                ...state,\n                messages: {\n                    ...state.messages,\n                    [action.messageId]: action.reduce(state.messages[action.messageId])\n                }\n            };\n        }\n        default:\n            return state;\n    }\n}\n\nexport const messageStores: {[key: number]: Store<MessageStoreState, MessageStoreAction>} = {};","import { createStore } from 'redux';\nimport TdLib from '../../TdWeb/tdlib';\nimport TdApi from '../../TdWeb/td_api';\nimport { messageStores, reducer } from '../message-stores';\n\nexport function initChatHistory(chatId: number): void {\n    messageStores[chatId] = createStore(reducer);\n}\nexport function loadChatHistory(chatId: number, fromMessageId = 0, limit= 100): Promise<number> {\n    return new Promise<number>((resolve, reject) => {\n        TdLib.sendQuery({\n            '@type': 'getChatHistory',\n            chat_id: chatId,\n            from_message_id: fromMessageId,\n            limit: limit\n        }).then((result) => {\n            result= result as TdApi.td_messages;\n            if(result.messages) {\n                messageStores[chatId].dispatch({\n                    type: 'ADD_MESSAGES',\n                    messages: result.messages\n                });\n            }\n            resolve(result.total_count);\n        }, reject);\n    });\n}\n\nTdLib.registerUpdateHandler<TdApi.td_updateNewMessage>('updateNewMessage', (update) => {\n    messageStores[update.message.chat_id].dispatch({\n        type: 'ADD_MESSAGE',\n        message: update.message,\n    });\n});\nTdLib.registerUpdateHandler<TdApi.td_updateMessageSendSucceeded>('updateMessageSendSucceeded', (update) => {\n    messageStores[update.message.chat_id].dispatch({\n        type: 'REMOVE_MESSAGES',\n        messageIds: [update.old_message_id],\n    });\n    messageStores[update.message.chat_id].dispatch({\n        type: 'ADD_MESSAGE',\n        message: update.message,\n    });\n});\nTdLib.registerUpdateHandler<TdApi.td_updateDeleteMessages>('updateDeleteMessages', (update) => {\n    messageStores[update.chat_id].dispatch({\n        type: 'REMOVE_MESSAGES',\n        messageIds: update.message_ids,\n    });\n});\nTdLib.registerUpdateHandler<TdApi.td_updateMessageContent>('updateMessageContent', (update) => {\n    messageStores[update.chat_id].dispatch({\n        type: 'REDUCE_MESSAGE',\n        messageId: update.message_id,\n        reduce: (message) => {\n            return {\n                ...message,\n                content: update.new_content,\n            };\n        }\n    });\n});\nTdLib.registerUpdateHandler<TdApi.td_updateMessageEdited>('updateMessageEdited', (update) => {\n    messageStores[update.chat_id].dispatch({\n        type: 'REDUCE_MESSAGE',\n        messageId: update.message_id,\n        reduce: (message) => {\n            return {\n                ...message,\n                edit_date: update.edit_date,\n                reply_markup: update.reply_markup,\n            };\n        }\n    });\n});\nTdLib.registerUpdateHandler<TdApi.td_updateMessageIsPinned>('updateMessageIsPinned', (update) => {\n    messageStores[update.chat_id].dispatch({\n        type: 'REDUCE_MESSAGE',\n        messageId: update.message_id,\n        reduce: (message) => {\n            return {\n                ...message,\n                is_pinned: update.is_pinned,\n            };\n        }\n    });\n});\nTdLib.registerUpdateHandler<TdApi.td_updateMessageInteractionInfo>('updateMessageInteractionInfo', (update) => {\n    messageStores[update.chat_id].dispatch({\n        type: 'REDUCE_MESSAGE',\n        messageId: update.message_id,\n        reduce: (message) => {\n            return {\n                ...message,\n                interaction_info: update.interaction_info,\n            };\n        }\n    });\n});","import { createStore } from 'redux';\nimport TdLib from '../TdWeb/tdlib';\nimport { initChatHistory } from './message/chat-history';\n\n/**\n * It is recommended to use the outline view or find tool to navigate this file.\n */\n\nconst chatStore= createStore(reducer, \n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n    \nfunction reducer(state= {\n    currentChatList: {'@type': 'chatListMain'},\n    archiveState: 'closed',\n    archiveButtonState: localStorage.getItem('dibgram-archived-chats-button-mode'),\n    chats: [],\n    filters: [],\n    selectedChat: -1,\n    unread: {\n        main: {},\n        archive: {},\n        filters: {}\n    }\n}, action) {\n    switch (action.type) {\n        case 'SET_CURRENT_CHAT_LIST':\n            return {\n                ...state,\n                currentChatList: action.chatList\n            };\n        case 'SET_ARCHIVE_STATE':\n            return {\n                ...state,\n                archiveState: action.archiveState\n            };\n        case 'UPDATE_UNREAD_MESSAGE_COUNT':\n            if(action.chat_list['@type'] === 'chatListMain') {\n                return {\n                    ...state,\n                    unread: {\n                        ...state.unread,\n                        main: {\n                            ...state.unread.main,\n                            unread_messages_count: action.unread_count,\n                            unread_unmuted_messages_count: action.unread_unmuted_count\n                        }\n                    }\n                };\n            } else if(action.chat_list['@type'] === 'chatListArchive') {\n                return {\n                    ...state,\n                    unread: {\n                        ...state.unread,\n                        archive: {\n                            ...state.unread.archive,\n                            unread_messages_count: action.unread_count,\n                            unread_unmuted_messages_count: action.unread_unmuted_count\n                        }\n                    }\n                };\n            } else if(action.chat_list['@type'] === 'chatListFilter') {\n                return {\n                    ...state,\n                    unread: {\n                        ...state.unread,\n                        filters: {\n                            ...state.unread.filters,\n                            [action.chat_list.chat_filter_id]: {\n                                ...state.unread.filters[action.chat_list.chat_filter_id],\n                                unread_messages_count: action.unread_count,\n                                unread_unmuted_messages_count: action.unread_unmuted_count\n                            }\n                        }\n                    }\n                };\n            }\n            return state;\n        case 'UPDATE_UNREAD_CHAT_COUNT':\n            if(action.chat_list['@type'] === 'chatListMain') {\n                return {\n                    ...state,\n                    unread: {\n                        ...state.unread,\n                        main: {\n                            ...state.unread.main,\n                            total_chats_count: action.total_count,\n                            unread_chats_count: action.unread_count,\n                            unread_unmuted_chats_count: action.unread_unmuted_count,\n                            marked_as_unread_chats_count: action.marked_as_unread_count,\n                            marked_as_unread_unmuted_chats_count: action.marked_as_unread_unmuted_count\n                        }\n                    }\n                };\n            } else if(action.chat_list['@type'] === 'chatListArchive') {\n                return {\n                    ...state,\n                    unread: {\n                        ...state.unread,\n                        archive: {\n                            ...state.unread.archive,\n                            total_chats_count: action.total_count,\n                            unread_chats_count: action.unread_count,\n                            unread_unmuted_chats_count: action.unread_unmuted_count,\n                            marked_as_unread_chats_count: action.marked_as_unread_count,\n                            marked_as_unread_unmuted_chats_count: action.marked_as_unread_unmuted_count\n                        }\n                    }\n                };\n            } else if(action.chat_list['@type'] === 'chatListFilter') {\n                return {\n                    ...state,\n                    unread: {\n                        ...state.unread,\n                        filters: {\n                            ...state.unread.filters,\n                            [action.chat_list.chat_filter_id]: {\n                                ...state.unread.filters[action.chat_list.chat_filter_id],\n                                total_chats_count: action.total_count,\n                                unread_chats_count: action.unread_count,\n                                unread_unmuted_chats_count: action.unread_unmuted_count,\n                                marked_as_unread_chats_count: action.marked_as_unread_count,\n                                marked_as_unread_unmuted_chats_count: action.marked_as_unread_unmuted_count\n                            }\n                        }\n                    }\n                };\n            }\n            return state;\n\n        case 'SET_ARCHIVE_BUTTON_STATE':\n            return {\n                ...state,\n                archiveButtonState: action.archiveButtonState\n            };\n        case 'ADD_CHAT':\n            return {\n                ...state,\n                chats: [\n                    ...state.chats,\n                    action.chat\n                ]\n            };\n        case 'UPDATE_CHAT_POSITION': // Replace the position property of a chat\n            return {\n                ...state,\n                chats: state.chats.map((chat) => {\n                    if (chat.id === action.chat_id) {\n                        let changed=false;\n                        let newChat = {\n                            ...chat,\n                            positions: chat.positions.map((position) => {\n                                if (compareChatList(position.list, action.position.list)) {\n                                    changed=true;\n                                    return action.position;\n                                }\n                                return position;\n                            })\n                        };\n                        if(!changed) {\n                            return {\n                                ...chat,\n                                positions: [\n                                    ...chat.positions,\n                                    action.position\n                                ]\n                            };\n                        }\n                        return newChat;\n                    }\n                    return chat;\n                })\n            };\n        case 'REPLACE_CHAT_FILTERS':\n            return {\n                ...state,\n                filters: action.payload\n            };\n        case 'UPDATE_CHAT_PROPERTY':\n            return {\n                ...state,\n                chats: state.chats.map((chat) => {\n                    if (chat.id === action.chat_id) {\n                        return {\n                            ...chat,\n                            [action.property]: action.value\n                        };\n                    }\n                    return chat;\n                })\n            };\n        case 'SELECT_CHAT':\n            return {\n                ...state,\n                selectedChat: action.chat_id\n            };\n        default:\n            return state;\n    }\n}\n\nTdLib.registerUpdateHandler('updateUnreadChatCount', (update) => {\n    chatStore.dispatch({\n        type: 'UPDATE_UNREAD_CHAT_COUNT',\n        ...update\n    });\n});\n\nTdLib.registerUpdateHandler('updateUnreadMessageCount', (update) => {\n    chatStore.dispatch({\n        type: 'UPDATE_UNREAD_MESSAGE_COUNT',\n        ...update\n    });\n});\n\nTdLib.registerUpdateHandler('updateNewChat', update => {\n    chatStore.dispatch({\n        type: 'ADD_CHAT',\n        chat: update.chat\n    });\n    initChatHistory(update.chat.id);\n});\n\nTdLib.registerUpdateHandler('updateChatActionBar', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'action_bar',\n        chat_id: update.chat_id,\n        value: update.action_bar\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatDefaultDisableNotification', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'default_disable_notification',\n        chat_id: update.chat_id,\n        value: update.default_disable_notification\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatDraftMessage', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'draft_message',\n        chat_id: update.chat_id,\n        value: update.draft_message\n    });\n    for (let position of update.positions) {\n        chatStore.dispatch({\n            type: 'UPDATE_CHAT_POSITION',\n            chat_id: update.chat_id,\n            position: position\n        });\n    }\n});\n\nTdLib.registerUpdateHandler('updateChatFilters', update=> {\n    if(update.chat_filters) {\n        chatStore.dispatch({\n            type: 'REPLACE_CHAT_FILTERS',\n            payload: update.chat_filters\n        });\n    }\n});\n\nTdLib.registerUpdateHandler('updateChatHasScheduledMessages', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'has_scheduled_messages',\n        chat_id: update.chat_id,\n        value: update.has_scheduled_messages\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatIsBlocked', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'is_blocked',\n        chat_id: update.chat_id,\n        value: update.is_blocked\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatIsMarkedAsUnread', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'is_marked_as_unread',\n        chat_id: update.chat_id,\n        value: update.is_marked_as_unread\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatLastMessage', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'last_message',\n        chat_id: update.chat_id,\n        value: update.last_message\n    });\n    for (let position of update.positions) {\n        chatStore.dispatch({\n            type: 'UPDATE_CHAT_POSITION',\n            chat_id: update.chat_id,\n            position: position\n        });\n    }\n});\n\nTdLib.registerUpdateHandler('updateChatMessageTtlSetting', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'message_ttl_setting',\n        chat_id: update.chat_id,\n        value: update.message_ttl_setting\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatNotificationSettings', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'notification_settings',\n        chat_id: update.chat_id,\n        value: update.notification_settings\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatOnlineMemberCount', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'online_member_count',\n        chat_id: update.chat_id,\n        value: update.online_member_count\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatPermissions', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'permissions',\n        chat_id: update.chat_id,\n        value: update.permissions\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatPhoto', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'photo',\n        chat_id: update.chat_id,\n        value: update.photo\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatPosition', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_POSITION',\n        chat_id: update.chat_id,\n        position: update.position\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatReadInbox', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'unread_count',\n        chat_id: update.chat_id,\n        value: update.unread_count\n    });\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'last_read_inbox_message_id',\n        chat_id: update.chat_id,\n        value: update.last_read_inbox_message_id\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatReadOutbox', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'last_read_outbox_message_id',\n        chat_id: update.chat_id,\n        value: update.last_read_outbox_message_id\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatReplyMarkup', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'reply_markup_message_id',\n        chat_id: update.chat_id,\n        value: update.reply_markup_message_id\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatTheme', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'theme_name',\n        chat_id: update.chat_id,\n        value: update.theme_name\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatTitle', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'title',\n        chat_id: update.chat_id,\n        value: update.title\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatUnreadMentionCount', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'unread_mention_count',\n        chat_id: update.chat_id,\n        value: update.unread_mention_count\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatPendingJoinRequests', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'pending_join_requests',\n        chat_id: update.chat_id,\n        value: update.pending_join_requests\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatVideoChat', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'video_chat',\n        chat_id: update.chat_id,\n        value: update.video_chat\n    });\n});\n\nTdLib.registerUpdateHandler('updateMessageMentionRead', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'unread_mention_count',\n        chat_id: update.chat_id,\n        value: update.unread_mention_count\n    });\n});\n\nexport default chatStore;\n\n/**\n * Check if two chat lists are equal\n * @param {import('tdweb').TdObject} list1 \n * @param {import('tdweb').TdObject} list2 \n * @returns True if the provided objects refer to the same list. Otherwise false\n */\nexport function compareChatList(list1, list2) {\n    if (list1['@type'] != list2['@type']) { // First compare type\n        return false;\n    }\n    if (list1['@type'] == 'chatListFilter') { // Then Compare folder ID\n        return list1.chat_filter_id == list2.chat_filter_id;\n    }\n    return true;\n}\n\n/**\n * Gets a chat from a chat ID. Supports caching.\n */\nexport function getChat(id) {\n    let res;\n    for(let chat of chatStore.getState()?.chats) {\n        if(chat.id==id) res = Promise.resolve(chat);\n    }\n    if(!res){\n        res = TdLib.sendQuery({\n            '@type': 'getChat',\n            'chat_id': id\n        });\n    }\n    return res;\n}\n\n/**\n * Gets a chat from a chat ID. Does not support caching to prevent promises complexity.\n */\nexport function getChatNoCache(id) {\n    for(let chat of chatStore.getState()?.chats) {\n        if(chat.id==id) return chat;\n    }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Scrollbars } from 'react-custom-scrollbars-2';\nimport './scrollbar.scss';\n\n/**\n * A scrollable container. Sizing might need to be tweaked by CSS.\n */\nexport default function ScrollView({scrollBarWidth, scrollRef, scrollAlwaysVisible, ...propsRest}) {\n    const [mouseEntered, setMouseEntered] = React.useState(false);\n    const [timeoutId, setTimeoutId] = React.useState(null);\n    return (\n        <Scrollbars\n            className=\"scrollbar\"\n            style= {{ '--bar-width': (scrollBarWidth || 4)+'px' }}\n            data-mouse-entered={mouseEntered}\n            renderTrackHorizontal={props => <div {...props} className=\"track-horizontal\" />}\n            renderTrackVertical={props => <div {...props} className=\"track-vertical\" />}\n            renderThumbHorizontal={props => <div {...props} className=\"thumb-horizontal\" />}\n            renderThumbVertical={props => <div {...props} className=\"thumb-vertical\" />}\n            onMouseEnter={() => {\n                setMouseEntered(true);\n                setTimeoutId(setTimeout(() => {\n                    setMouseEntered(false);\n                }, 1000));\n            }}\n            onMouseLeave={() => {\n                setMouseEntered(false);\n                clearTimeout(timeoutId);\n            }}\n            autoHide={!scrollAlwaysVisible}\n            data-auto-hide={scrollAlwaysVisible? 'false' : 'true'}\n            autoHideTimeout={1000}\n            hideTracksWhenNotNeeded={true}\n            ref={scrollRef}\n            {...propsRest}\n        />\n    );\n}\nScrollView.propTypes = {\n    /** Scroll-bar thickness, in pixels (default: 4) */\n    scrollBarWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    /** A React ref that is passed down to the scrollbars component */\n    scrollRef: PropTypes.object,\n    /** Whether to always show the scrollbars (default: false) */\n    scrollAlwaysVisible: PropTypes.bool,\n};\n","import React from 'react';\n\nexport const applyKeys= (item, index) => (<React.Fragment key={index}>{item}</React.Fragment>);\n\nexport function getFormattedText(text){\n    const formatted= applyFormatting(text);\n    if(formatted.length === 1) return formatted[0];\n    return formatted.map(applyKeys);\n}\n\nexport function applyFormatting(format) {\n    var res= [];\n    /* eslint-disable-next-line no-constant-condition */\n    while(true) {\n        if(format.includes('\\n')){ // New line\n            const index= format.indexOf('\\n');\n            applyFormatting(format.substr(0, index)).forEach(e=>res.push(e));\n            res.push(<br/>);\n            format= format.substr(index + 1);\n        } \n        else if(format.includes('**')){ // Bold\n            const execed= /\\*\\*(.+)\\*\\*/.exec(format);\n            applyFormatting(format.substr(0, execed.index)).forEach(e=>res.push(e));\n            res.push(<strong>{execed[1]}</strong>);\n            format= format.substr(execed.index + execed[1].length+4);\n        }\n        else break;\n    }\n    res.push(format);\n    return res;\n}\n\nexport function formatString(format, params= {}) {\n    var res= [];\n    while(format.includes('{')){\n        const execed= /{(\\w+)}/.exec(format);\n        applyFormatting(format.substr(0, execed.index)).forEach(e=>res.push(e));\n        res.push(params[execed[1]]);\n        format= format.substr(execed.index + execed[1].length+2);\n    }\n    return [...res, ...applyFormatting(format)];\n}\n\n// Returns 'zero', 'one', 'two', 'few', 'many' or 'other' depending on the number\nexport function getCountMode(count) {\n    if(count === 0) return 'zero';\n    if(count === 1) return 'one';\n    if(count === 2) return 'two';\n    if(count > 2 && count < 10) return 'few';\n    if(count >= 10) return 'many';\n    return 'other';\n}\n\nexport function getPluralString(mode, callback) {\n    switch(mode) {\n        case 'zero': return callback('zero') || callback('few') || callback('many') || callback('other');\n        case 'one': return callback('one') || callback('other');\n        case 'two': return callback('two') || callback('few') || callback('many') || callback('other');\n        case 'few': return callback('few') || callback('many') || callback('other');\n        case 'many': return callback('many') || callback('other');\n        case 'other': return callback('other');\n    }\n}\n","import { authStore } from '../auth/auth-screen';\nimport TdLib from '../TdWeb/tdlib';\nimport englishLanguagePack from './english.json';\nimport { applyKeys, formatString, getCountMode, getFormattedText, getPluralString } from './string-format';\nimport specialStringsEnglish from './special-strings/en.json';\n\nvar currentLanguagePack= null;\nvar specialStrings= specialStringsEnglish;\n\nexport function initLanguagePack(){\n    const languageInfo= getCurrentLanguagePack();\n\n    const specialStringsCache= localStorage.getItem('dibgram-special-language-strings-cache');\n    if(specialStringsCache){\n        specialStrings= JSON.parse(specialStringsCache)[languageInfo.id] || specialStringsEnglish;\n    }\n    console.log('initLanguagePack');\n    TdLib.sendQuery({\n        '@type': 'setOption', \n        'name': 'localization_target', \n        'value': {\n            '@type': 'optionValueString', \n            value: 'tdesktop'\n        }\n    }).then(()=>{\n        TdLib.sendQuery({\n            '@type': 'getLanguagePackStrings',\n            language_pack_id: languageInfo.id || 'en'\n        }).then(result=>{\n            currentLanguagePack = {};\n            result.strings.forEach(string=>{\n                currentLanguagePack[string.key] = string;\n            });\n\n            authStore.dispatch({ // Force re-render\n                type: 'SET_STATE',\n                state: authStore.getState().state\n            });\n        });\n    });\n}\n\n/**\n * Gets the language pack info for the selected language\n * @param {boolean} englishIsDefault If true, returns english if the user didn't set a language\n * @returns {import('../TdWeb/td_api').TdApi.td_LanguagePackInfo|null} Language pack object\n */\nexport function getCurrentLanguagePack(englishIsDefault= true) {\n    let languageInfo= localStorage.getItem('dibgram-active-language');\n    if(languageInfo) languageInfo= JSON.parse(languageInfo);\n    if((!languageInfo) && englishIsDefault) languageInfo= {\n        '@type': 'languagePackInfo',\n        base_language_pack_id: '',\n        id: 'en',\n        is_beta: false,\n        is_installed: false,\n        is_official: true,\n        is_rtl: false,\n        local_string_count: 2784,\n        name: 'English',\n        native_name: 'English',\n        plural_code: 'en',\n        total_string_count: 2784,\n        translated_string_count: 2784,\n        translation_url: 'https://translations.telegram.org/en/'\n    };\n    return languageInfo;\n}\n\nexport function getRtlMode() {\n    return (localStorage.getItem('dibgram-allow-rtl-layout') == 'true') && (getCurrentLanguagePack(false)?.is_rtl || false);\n}\n\n/**\n * Returns the localized string for the given language pack string.  \n * Use `__fmt` for formatted strings, or `__pl` for pluralized strings.\n * @example ```js\n * __('lng_menu_settings') // 'Settings'\n * __('lng_error_phone_flood') // 'Sorry, you have deleted and re-created your account too many times recently. Please wait for a few days before signing up again.'\n * ```\n * @param {string} key Language pack string name\n * @returns {string | React.ReactNode[]} Localized version of the string\n */\nexport default function __(key) {\n    if(currentLanguagePack) {\n        const languagePackString= currentLanguagePack[key].value;\n        if(languagePackString['@type'] === 'languagePackStringValueOrdinary') {\n            return getFormattedText(languagePackString.value);\n        }\n    }\n\n    const languagePack = englishLanguagePack;\n    return getFormattedText(languagePack[key]);\n}\n\n/**\n * Returns the localized string for the given language pack string, formatted with the given parameters.\n * @example \n * ```js\n * __fmt('lng_menu_settings', {name: 'John'}) // 'John'\n * ```\n * @param {string} name Language pack string name\n * @param {{[key: string]: string}} params An object containing formatting parameters\n * @returns Localized version of the string, with formattings applied\n */\nexport function __fmt(name, params, useFragments= true) {\n    return  formatString(__(name), params).map(useFragments? applyKeys : e=>e);\n}\n\nexport function __pl(key, count, params={}) {\n    var callback= null;\n    if(currentLanguagePack) {\n        if(currentLanguagePack[key].value['@type'] === 'languagePackStringValuePluralized') {\n            const pluralized= currentLanguagePack[key].value;\n            callback= (mode) => pluralized[mode+'_value'];\n        }\n    }\n    else callback=  (mode) => englishLanguagePack[key+'#'+mode];\n\n    const pluralizedString= getPluralString(getCountMode(count), callback);\n    const formatted= formatString(pluralizedString, {count, ...params});\n    if(formatted.length === 1) return formatted[0];\n    return formatted.map(applyKeys);\n}\n\n/**\n * Formats an array of objects in the format `A, B, C and D`\n * Uses the format strings given as the parameters to do the formatting.\n * The default values for the strings are `{accumulated}, {user}` and `{accumulated} and {user}`\n * \n * @param {boolean} isInvite If true, the value of the strings `lng_action_invite_users_and_one` and `lng_action_invite_users_and_last` will be used. Otherwise, `lng_action_add_users_and_one` and `lng_action_add_users_and_last` will be used.\n * @param {React.ReactNode[]} users An array of objects to format\n * @param {boolean} usesReact If true, the result will be returned as an array of objects, each wrapped in a React Fragment. If false, the result will be returned as a string.\n */\nexport function __collection(isInvite, users, usesReact= false, getLPString= __) {\n    if(users.length == 1) return users[0];\n\n    const format= getLPString(isInvite? 'lng_action_invite_users_and_one' : 'lng_action_add_users_and_one');\n    const formatLast= getLPString(isInvite? 'lng_action_invite_users_and_last' : 'lng_action_add_users_and_last');\n\n    var result= [users[0]];\n    for(let i= 1; i < users.length - 1; i++) {\n        const user= users[i];\n        result= formatString(format, {accumulated: result, user}).flat();\n    }\n    result= formatString(formatLast, {accumulated: result, user: users[users.length - 1]}).flat();\n    return usesReact? result.map(applyKeys) : result.join('');\n}\n\nexport function _s__(key) {\n    return specialStrings[key];\n}\n\nexport function _s__fmt(key, params, useFragments= true) {\n    return formatString(_s__(key), params).map(useFragments? applyKeys : e=>e);\n}\n\n// export function _s__pl(key, count, params={}) {\n// }\n\nexport function _s__collection(isInvite, users, usesReact) {\n    return __collection(isInvite, users, usesReact, _s__);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport filters from '../../../ui/icon/chat_filters/chat-filters';\nimport RippleEffect, {handleMyMouseEventsFunction} from '../../../ui/elements/ripple-effect';\nimport HamburgerMenuButton from './hamburger-menu/menu-button';\nimport { compareChatList } from '../../chat-store';\nimport TdLib from '../../../TdWeb/tdlib';\nimport ScrollView from '../../../ui/scroll/scrollbar';\nimport './chat-folders.scss';\nimport __ from '../../../language-pack/language-pack';\n\nexport var chatListScrollToTopEvent = [function(){}];\n\n/**\n * Renders a chat folder button\n */\nexport function ChatFolder({folder, active, onClick, unread}) {\n    // Ripple effect\n    const ripple= React.useState({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave]= handleMyMouseEventsFunction(ripple);\n\n    const [iconName, setIconName]= React.useState(folder.icon_name);\n\n    React.useEffect(()=> { // Get folder chats, TDLib won't show them if this request isn't sent\n        TdLib.sendQuery({\n            '@type': 'loadChats',\n            'chat_list': {\n                '@type': 'chatListFilter',\n                'chat_filter_id': folder.id,\n            },\n            'limit': 50 // Only get 50 chats //TODO: Implement loading more chats\n        });\n    }, []);\n\n    React.useEffect(()=> {\n        if(!folder.icon_name) {\n            // Default icon is used and we don't know what it is.\n            TdLib.sendQuery({ // Get chat filter info so we can get an idea what it is\n                '@type': 'getChatFilter',\n                'chat_filter_id': folder.id\n            }).then(folder=> {\n                TdLib.sendQuery({ // Ask TDLib what the icon should be\n                    '@type': 'getChatFilterDefaultIconName',\n                    'filter': folder\n                }).then(result=> setIconName(result.text));\n            });\n        }\n    }, [folder]);\n\n    function handleClick(e){\n        onClick(e);\n        chatListScrollToTopEvent[0]?.();\n    }\n\n    var icon= (filters[iconName] || filters['Custom']); // If the icon was empty, show a generic icon instead.\n    icon= icon[active+0] || icon[0]; // Some icons dont have active variant\n    return (\n        <div className={active ? 'item active' : 'item'}>\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-sideBarBgRipple)\"/>\n            <button\n                onMouseDown={mouseDown}\n                onMouseUp={mouseUp}\n                onMouseLeave={mouseLeave}\n                onClick={handleClick}>\n\n                <div className=\"icon\" dangerouslySetInnerHTML={{__html: icon}}></div>\n                <div className=\"title\">{folder.title}</div>\n                {unread?.unread_chats_count? (\n                    <div className=\"unread-badge\" \n                        data-muted={(unread?.unread_unmuted_chats_count==0) ? 'true' : 'false'}>\n                        <span>{unread?.unread_chats_count}</span>\n                    </div>\n                ): null}\n            </button>\n        </div>\n    );\n}\n\nChatFolder.propTypes= {\n    /** The folder object provided by TdLib */\n    folder: PropTypes.object.isRequired,\n    /** A boolean indicating if the folder is currently selected */\n    active: PropTypes.bool.isRequired,\n    /** A function to call when the folder is clicked */\n    onClick: PropTypes.func.isRequired,\n    /** An object containing unread messages and chats count, from `chatStore` */\n    unread: PropTypes.object\n};\n\n/**\n * Renders the chat folders list\n */\nfunction ChatFolderList({folders, currentFolder, unread, dispatch, onHamburgerMenuOpened}) {\n    if(!folders || folders.length==0) return null;\n\n    return (\n        <div id=\"chat-folders-list\">\n            <HamburgerMenuButton.WithFolders onClick={onHamburgerMenuOpened}/>\n\n            <ScrollView scrollBarWidth=\"4\" className=\"list scrollbar full-size\">\n                <ChatFolder \n                    active={compareChatList(currentFolder, {'@type': 'chatListMain'})} \n                    folder={{ title: __('lng_filters_all'), icon_name: 'All' }}\n                    unread={unread.main}\n                    onClick={()=> dispatch({\n                        type: 'SET_CURRENT_CHAT_LIST',\n                        chatList: { '@type': 'chatListMain' }\n                    })}/>\n                \n                {folders.map(folder=> (\n                    <ChatFolder folder={folder} key={folder.id}\n                        unread={unread.filters[folder.id]}\n                        active={compareChatList(currentFolder, \n                            {'@type': 'chatListFilter', 'chat_filter_id': folder.id})}\n                        onClick={()=> dispatch({\n                            type: 'SET_CURRENT_CHAT_LIST',\n                            chatList: { \n                                '@type': 'chatListFilter',\n                                chat_filter_id: folder.id\n                            }\n                        })}/>\n                ))}\n            </ScrollView>\n        </div>\n    );\n}\nChatFolderList.propTypes={\n    /** An array of chat filters */\n    folders: PropTypes.arrayOf(PropTypes.object),\n    /** Current chat list */\n    currentFolder: PropTypes.object,\n    /** A list of unread messages info for each chat list */\n    unread: PropTypes.object,\n    \n    dispatch: PropTypes.func,\n    /** Fires when main menu is triggered */\n    onHamburgerMenuOpened: PropTypes.func\n};\nexport default connect(state=>({\n    folders:state.filters, \n    currentFolder: state.currentChatList,\n    unread: state.unread\n}))(ChatFolderList);","import { ProgressRing } from 'progress-ring';\nimport 'progress-ring/src/styles.css';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Renders a spinner which in addition to spinning, also changes size.\n */\nexport default class LoadingSpinner extends React.Component {\n    static props= {\n        /** Spinner circle size */\n        size: PropTypes.number.isRequired,\n        /** Spinner thickness */\n        lineWidth: PropTypes.number.isRequired,\n        /** Spinner color */\n        progressColor: PropTypes.string.isRequired\n    }\n    state= {\n        percentage: 10 // From 10 to 90, this specifies how much the spinner grows and shrinks while spinning (reversed)\n    }\n    render () {\n        return (\n            <div className=\"loading-spinner\">\n                <ProgressRing\n                    percent={this.state.percentage}\n                    caps='round'\n                    trackColor=\"transparent\"\n                    spin=\"true\"\n                    {...this.props}\n                    transitionDuration=\"2000\"/>\n            </div>\n        );\n    }\n\n    componentDidMount () {\n        this.intervalNum= setInterval(() => { // Spinner grows and shrinks while spinning\n            this.setState({\n                percentage: (90 - this.state.percentage)\n            });\n        }, 2000);\n    }\n\n    componentWillUnmount () {\n        clearInterval(this.intervalNum);\n    }\n}","import React from 'react';\nimport LoadingSpinner from '../elements/loading-spinner';\nimport { connect } from 'react-redux';\n\n/**\n * Renders the connecting spinner at the bottom left corner, which is hidden when connected\n */\nexport default connect(state=> ({state: state})) (function ConnectionState({state}) {\n    return (\n        <div className={'connectionState'+(([\n            'connectionStateConnecting',\n            'connectionStateConnectingToProxy',\n            'connectionStateWaitingForNetwork'\n        ].includes(state))? '' : ' connected')}>\n            <LoadingSpinner\n                progressColor=\"var(--theme-color-menuIconFg)\"\n                size=\"20\"\n                lineWidth=\"2\"/>\n        </div>\n    );\n});\n","import { createStore } from 'redux';\nimport TdLib from '../TdWeb/tdlib';\n\nconst usersStore = createStore((state = {}, action) => {\n    switch (action.type) {\n        case 'UPD_USER':\n            return {\n                ...state,\n                [action.user.id]: action.user\n            };\n        case 'UPD_USER_STATUS':\n            return {\n                ...state,\n                [action.userId]: {\n                    ...state[action.userId],\n                    status: action.status\n                }\n            };\n        default:\n            return state;\n    }\n}, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nTdLib.registerUpdateHandler('updateUser', (update) => {\n    usersStore.dispatch({\n        type: 'UPD_USER',\n        user: update.user\n    });\n});\n\nTdLib.registerUpdateHandler('updateUserStatus', (update) => {\n    usersStore.dispatch({\n        type: 'UPD_USER_STATUS',\n        userId: update.user_id,\n        status: update.status\n    });\n});\n\nexport default usersStore;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './link-button.scss';\n\n/**\n * Renders a button looking like a link.\n */\nexport default function LinkButton({href, children, onClick, ...rest}) {\n    const click= href ? ()=> window.open(href) : onClick;\n    return (\n        <button className=\"link-button\" onClick={click} {...rest}>{children}</button>\n    );\n}\nLinkButton.propTypes = {\n    /** Link content */\n    children: PropTypes.node.isRequired,\n    /** Function to be called when link is clicked. */\n    onClick: PropTypes.func,\n    /** If provided, the URL will be opened in a new tab on click. */\n    href: PropTypes.string\n};\n","import {createStore} from 'redux';\nimport TdLib from '../TdWeb/tdlib';\n\nfunction reducer(state, action) {\n    switch (action.type) {\n        case 'UPD_SUPERGROUP':\n            return {\n                ...state,\n                [action.supergroup.id]: action.supergroup\n            };\n        default:\n            return state;\n    }\n}\n\nconst supergroupStore= createStore(reducer);\nexport default supergroupStore;\n\nTdLib.registerUpdateHandler('updateSupergroup', (update) => {\n    supergroupStore.dispatch({\n        type: 'UPD_SUPERGROUP',\n        supergroup: update.supergroup\n    });\n});","import __ from '../language-pack/language-pack';\nimport supergroupStore from './supergroup-store';\nimport usersStore from './users-store';\n\n/**\n * Check if the chat is with a deleted user\n * @param {import('tdweb').TdObject} chat The chat to check\n * @param {{[key: number]: import('tdweb').TdObject}} users A dictionary of all users (e.g. usersStore state)\n * @returns True if the chat is private and the other party's account is deleted\n */\nexport function isChatWithDeletedAccount(chat, users) {\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup': // Groups are not applicable\n        case 'chatTypeSupergroup':\n            return false;\n        \n        case 'chatTypeSecret':\n        case 'chatTypePrivate': \n            var user= (users || usersStore.getState())?.[chat.type.user_id];\n            return user && user.type['@type'] === 'userTypeDeleted';\n    }\n    return false;\n}\n\n/**\n * Returns the chat's title and handles deleted account\n * @param {object} chat The chat to get the name of\n * @param {{[key: number]: object}} users A list of all users (e.g. usersStore state). If not provided, usersStore will be used\n * @returns Chat title, or 'Deleted Account'\n */\nexport function chatTitleOrDeletedAccount(chat, users) {\n    if(isChatWithDeletedAccount(chat, users))\n        return __('lng_deleted');\n    return chat.title;\n}\n\n/**\n * Checks if a user, bot or channel is verified\n * @param {import('tdweb').TdObject} chat The chat to be checked\n * @returns {boolean} True if the chat is verified, false if not\n */\nexport function isChatVerified(chat){\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup':\n            return false;\n\n        case 'chatTypeSupergroup':\n            var supergroup= supergroupStore.getState()?.[chat.type.supergroup_id];\n            return supergroup.is_verified;\n            \n        case 'chatTypeSecret':\n        case 'chatTypePrivate': \n            var user= usersStore.getState()?.[chat.type.user_id];\n            return user.is_verified;\n    }\n    return false;\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { createStore } from 'redux';\nimport { connect } from 'react-redux';\nimport './context-menu.scss';\n\n/**\n * A context menu (right click menu)\n */\nexport function ContextMenu({x, y, children}) {\n    const [direction, setDirection] = React.useState('br');\n    const [hide, setHide] = React.useState(false);\n    const ref = React.useRef();\n    React.useEffect(() => {\n        setTimeout(() => {\n            const rect = ref.current.children[0].getBoundingClientRect();\n            const {width, height} = rect;\n            const {clientWidth, clientHeight} = document.documentElement;\n            var X = 'r', Y = 'b';\n            if (x + width > clientWidth) {\n                X = 'l';\n            }\n            if (y + height > clientHeight) {\n                Y = 't';\n            }\n            setDirection(Y + X);\n        }, 0);\n    }, []);\n\n    function handleMouseDown() {\n        setHide(true);\n        setTimeout(() => {\n            contextMenusStore.dispatch({\n                type: 'REMOVE_CONTEXT_MENUS'\n            });\n        }, 500);\n    }\n\n    return (\n        <div className={'context-menu' + (hide? ' hidden' : '')} \n            style={{'--x': x+'px', '--y': y+'px'}} \n            onMouseDown={e=> (!e.target.classList.contains('menu-item') && handleMouseDown())}\n            onMouseUp={e=> ((e.target.classList.contains('menu-item')) && handleMouseDown())}>\n\n            <div className={'menu ' + direction} ref={ref}>\n                {children}\n            </div>\n        </div>\n    );\n}\nContextMenu.propTypes = {\n    /** Position relative to viewport */\n    x: PropTypes.number.isRequired,\n    /** Position relative to viewport */\n    y: PropTypes.number.isRequired,\n    children: PropTypes.node.isRequired\n};\n\nexport const contextMenusStore = createStore(function (state = null, action) {\n    if (action.type === 'ADD_CONTEXT_MENU') {\n        return action.menu;\n    }\n    else if (action.type === 'REMOVE_CONTEXT_MENUS') {\n        return null;\n    }\n    return state;\n});\n\nexport const ContextMenus= connect(state=>({menus:state}))(({menus}) => menus);\n\n/**\n * Create a context menu\n * @param {React.SyntheticEvent} e Pass down `e` from the event handler\n * @param {React.ReactNode} menu Context menu contents\n */\nexport function createContextMenu(e, menu) {\n    e.preventDefault();\n    setTimeout(() => { // This is to fix ripple effect glitch\n        contextMenusStore.dispatch({\n            type: 'ADD_CONTEXT_MENU',\n            menu: <ContextMenu x={e.nativeEvent.pageX} y={e.nativeEvent.pageY}>{menu}</ContextMenu>\n        });\n    }, 50); // Human brain cannot notice 50ms delay\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './menu.scss';\nimport RippleEffect, { handleMyMouseEventsFunction } from '../elements/ripple-effect';\n\n/**\n * A dropdown menu (not to be confused with `<select>`).\n */\nexport default function Menu(props) {\n    return (\n        <div className=\"menu\" {...props}/>\n    );\n}\n\n/**\n * Dropdown menu contents (created as a separate component so that it can be wrapped by other components).\n */\nMenu.MenuContents= function MenuContents(props) {\n    return (\n        <div className=\"menu-contents\" {...props}/>\n    );\n};\n\n/**\n * A menu item.\n */\nMenu.MenuItem= function MenuItem({children, ...rest}) {\n    const ripple= React.useState({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave] = handleMyMouseEventsFunction(ripple);\n    return (\n        <div className=\"menu-item\" {...rest} onMouseDown={mouseDown} onMouseUp={mouseUp} onMouseLeave={mouseLeave}>\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-windowBgRipple)\"/>\n            <div className=\"content\">\n                {children}\n            </div>\n        </div>\n    );\n};\nMenu.MenuItem.propTypes = {\n    children: PropTypes.node\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './toast.scss';\nimport { createStore } from 'redux';\nimport { connect } from 'react-redux';\n\n/**\n * Renders a toast (a small text which is temporarily shown in the middle of the screen)\n */\nexport default function Toast({children}) {\n    const [closed, setClosed] = React.useState(false);\n    React.useEffect(() => {\n        setTimeout(() => { // Automatically close after 6 seconds\n            setClosed(true); // When an element has a closing dialog, a CSS class should be added to trigger the animation\n            setTimeout(() => { // Then we wait until the animation is finished\n                addToast(null); // And we can safely remove the element\n            }, 2000);\n        }, 6000);\n    }, []);\n    return (\n        <div className={'toast' + (closed? ' closed':'')}>\n            <div className=\"toast-content\">\n                {children}\n            </div>\n        </div>\n    );\n}\nToast.propTypes = {\n    children: PropTypes.node.isRequired,\n};\n\nexport const toastStore= createStore((state=null, action) => {\n    if(action.type=='SET_TOAST') return action.toast;\n    return state;\n});\n\nexport const Toasts= connect(state=>({toast: state}))(function Toasts({toast}){\n    return toast;\n});\n\nexport function addToast(toast) {\n    toastStore.dispatch({\n        type: 'SET_TOAST',\n        toast\n    });\n}\n","import TdLib from './tdlib';\n\n/**\n * Contains all options received from TdLib `updateOption`s\n */\nvar options={};\n\nTdLib.registerUpdateHandler('updateOption', function (update) {\n    options[update.name]=update.value.value;\n});\n\nexport default options;\n","/**\n * Gets message sending status. Can return 3 values:\n * - `\"sending\"`: the message is outgoing and is being sent.\n * - `\"sent\"`: the message is outgoing and was sent.\n * - `\"seen\"`: the message is outgoing and was seen by the other party.\n * - `\"unread\"`: the message is incoming and was not seen by this party.\n * - `\"read\"`: the message is incoming and was seen by this party.\n * @param {import(\"tdweb\").TdObject} chat The chat in which the message was sent.\n * @param {import(\"tdweb\").TdObject} message The message to check.\n */\nexport function getMessageStatus(chat, message) {\n    if(!chat || !message) return undefined;\n    if(message.is_outgoing) {\n        if(message.sending_state) {\n            return 'sending';\n        }\n        if(chat.last_read_outbox_message_id >= message.id) {\n            return 'seen';\n        }\n        return 'sent';\n    }\n    if(chat.last_read_inbox_message_id >= message.id) {\n        return 'read';\n    }\n    return 'unread';\n}","import TdLib from './tdlib';\n\n/**\n * Downloads a file. Promise is resolved when the file is downloaded.\n * @param {number} file_id ID of file to be downloaded\n * @param {number} priority From 1 to 32, higher number results in earlier download\n * @returns {import('tdweb').TdObject} File object\n */\nexport function downloadFile (file_id, priority) {\n    let onReject;\n    TdLib.sendQuery({\n        '@type': 'downloadFile',\n        'file_id': file_id,\n        'priority': priority,\n        'offset': 0,\n        'limit': 0,\n        'synchronous': false\n    }).catch(onReject);\n\n    return new Promise((resolve, reject) => {\n        downloadCallbacks[file_id]=result=> {\n            resolve(result);\n            delete downloadCallbacks[file_id];\n        };\n        onReject=reject;\n    });\n}\nvar downloadCallbacks = {};\n\nTdLib.registerUpdateHandler('updateFile', function (update) {\n    if(update.file.local.is_downloading_completed){\n        downloadCallbacks[update.file.id]?.(update.file);\n    }\n});\n\nconst cachedFiles= {};\n\n/**\n * Gets file content (downloads if necessary). Promise is resolved with a `filePart` object when file content is ready\n * @param {import('tdweb').TdObject} file File object\n * @param {number} priority Download priority from 1 to 32. Higher value = earlier download\n * @param {boolean} enableCache If true, file content will be stored in a cache in the RAM. Files larger than 500KiB will not be cached whatsoever.\n * @returns {import('tdweb').TdObject} A `filePart` object\n * \n */\nexport function getFileContent(file, priority, enableCache=true) {\n    if(file.id in cachedFiles){ // If we have it in cache, we can use that\n        return Promise.resolve({data: cachedFiles[file.id]});\n    }\n\n    function resolveFilePart(filePart){\n        if(enableCache && file.size<=500*1024){\n            cachedFiles[file.id]=filePart.data;\n        }\n        return filePart;\n    }\n\n    if(file.local.is_downloading_completed){ // File is already downloaded - only read file\n        return new Promise((resolve, reject) => {\n            TdLib.sendQuery({\n                '@type': 'readFilePart',\n                'file_id': file.id,\n                'offset': 0,\n                'count': 0\n            }).then((f)=>resolve(resolveFilePart(f))).catch(reject);\n        });\n    } \n    else if(file.local.is_downloading_active){ // File is already being downloaded - gets quite complex here.\n        return new Promise((resolve, reject) => {\n            const callback = downloadCallbacks[file.id];\n            downloadCallbacks[file.id] = (result) => { // Replace old callback with a new callback that calls the old one and also does its own stuff\n                callback(result); // Call the old callback\n                TdLib.sendQuery({ // Read the file\n                    '@type': 'readFilePart',\n                    'file_id': file.id,\n                    'offset': 0,\n                    'count': 0\n                }).then((f)=>resolve(resolveFilePart(f))).catch(reject);\n            };\n        });\n    } else {\n        return new Promise((resolve, reject) => { // File is not downloaded.\n            downloadFile(file.id, priority).then(()=> { // Download it...\n                TdLib.sendQuery({ // ...then read it\n                    '@type': 'readFilePart',\n                    'file_id': file.id,\n                    'offset': 0,\n                    'count': 0\n                }).then((f)=>resolve(resolveFilePart(f))).catch(reject);\n            }).catch(reject);\n        });\n    }\n}\n\n/**\n * Converts a blob to a URL\n * @param {Blob} blob Blob to convert\n * @returns {string} Created URL\n */\nexport function blobToUrl (blob) {\n    return (window.URL || window.webkitURL).createObjectURL(blob);\n}\n","export default __webpack_public_path__ + \"static/media/TgLogo.d1ff1195.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { blobToUrl, getFileContent } from '../../TdWeb/file';\nimport options from '../../TdWeb/options';\nimport './profile-photo.scss';\nimport tgLogo from '../../ui/img/TgLogo.png';\nimport { saved_messages, replies_userpic } from '../icon/icons';\n\n/**\n * Converts a name to initials.\n * @param {string} name Input name\n * @returns {string} One or two uppercase letters\n */\nexport function profileNameToInitials(name) {\n    const words=name.replace(/[\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007F]/g,'') // Remove non-word characters\n        .toUpperCase().split(' ');\n    if(words[0].length==0){\n        return '';\n    } else if(words.length===1) {\n        return words[0][0];\n    } else {\n        return words[0][0] + words[words.length-1][0];\n    }\n}\n\n/**\n * Renders a chat / profile photo.\n */\nexport default function ProfilePhoto (props) {\n    const [photo, setPhoto] = React.useState(null);\n    const [photoObj, setPhotoObj] = React.useState(null);\n    const [loaded, setLoaded] = React.useState(false);\n    const isServiceMessages= props.id==options['telegram_service_notifications_chat_id'];\n    const isSavedMessages= props.id==options['my_id'];\n    const isReplies= props.id==options['replies_bot_chat_id'];\n    \n    React.useEffect(() => { // Fetch image data\n        var mounted=true;\n        if(props.photo){\n            if(photoObj!=props.photo){ // No need for any fetch if the same photo is already loaded\n                getFileContent(props.photo, 8).then(file=> {\n                    if(!mounted) return;\n                    setPhoto(blobToUrl(file.data));\n                    setPhotoObj(props.photo);\n                });\n            }\n        } else { // No photo\n            if(photo && photoObj){\n                setPhoto(null);\n                setPhotoObj(null);\n            }\n        }\n        return ()=> mounted=false;\n    }, [props.photo]);\n\n    var customIcon; \n    if(isSavedMessages && (!props?.disableSavedMessages)){ // Use saved messages icon instead of user pic (if not disabled)\n        customIcon= [0, saved_messages];\n    }\n    if(isReplies){ // Replies chat has no icons and we supply one ourselves\n        customIcon= [0, replies_userpic];\n    }\n    if((!props.photo) && isServiceMessages) { // Service messages may have no photo (e.g. on test DC)\n        customIcon = [1, tgLogo];\n    }\n    return (\n        <div className=\"profile-photo\">\n            {(!loaded || !(props.photo && photo)) && <Initials id={props.id} name={props.name}/>}\n            {\n                customIcon? (\n                    customIcon[0]?\n                        <React.Fragment>\n                            {(!loaded) && <Initials id={props.id} name={props.name}/>}\n                            <img onLoad={()=> setLoaded(true)} src={customIcon[1]}/>\n                        </React.Fragment>\n                        :\n                        <div className=\"svg\" dangerouslySetInnerHTML={{__html: customIcon[1]}}/>\n                ) : (\n                    (props.photo && photo) && <img onLoad={()=> setLoaded(true)} src={photo}/> \n                )\n            }\n        </div>\n    );\n}\nProfilePhoto.propTypes = {\n    /** Chat/user name, used for initials */\n    name: PropTypes.string.isRequired,\n    /** Chat type id (supergroup id, user id, etc.), used for initials background */\n    id: PropTypes.number.isRequired,\n    /** Chat / user photo (e.g. `chat.photo?.small`) */\n    photo: PropTypes.object,\n    /** If false, saved messages icon will be used when user_id = my_id */\n    disableSavedMessages: PropTypes.bool\n};\n\n/** Renders photo initials fallback */\nfunction Initials({id, name}) {\n    return (\n        <span className={'initials color_'+ getIdColorCode(id)}>\n            {profileNameToInitials(name)}\n        </span>\n    );\n}\nInitials.propTypes = {\n    /** Chat/user name, used to generate initials */\n    name: PropTypes.string.isRequired,\n    /** Chat type ID, used to generate background color */\n    id: PropTypes.number.isRequired\n};\n\nexport function getIdColorCode(id) {\n    const map = [1, 8, 5, 2, 4, 4, 6];\n    return map[Math.abs(id || 0) % 7];\n}\n\n/**\n * Returns a chat's type ID. (supergroup Id / basic group ID / user ID)\n * @param {import('tdweb').TdObject} chat Input chat\n * @returns Chat type ID\n */\nexport function getChatTypeId(chat) {\n    switch (chat?.type?.['@type']) {\n        case 'chatTypeSupergroup': {\n            return chat?.type?.supergroup_id;\n        }\n        case 'chatTypeBasicGroup': {\n            return chat?.type?.basic_group_id;\n        }\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            return chat?.type?.user_id;\n        }\n    }\n    return null;\n}\n","import __, { __fmt, __pl } from './language-pack/language-pack';\n\n/**\n * Converts a date and time to a short string.\n * - If the date is in the last 20 hours, the time is displayed in the format HH:MM.\n * - If the date is in the last 7 days, the weekday is displayed.\n * - If the date is older, the date is displayed in the format DD.MM.YY.\n * @param {Date|Number} date Input date\n */\nexport function smallDateTimeToString(date) {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    const now = new Date();\n    const yesterday = new Date(now.getTime() - 20 * 60 * 60 * 1000);\n    const lastWeek = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n\n    if (date.getTime() >= yesterday.getTime()) {\n        return timeToString(date);\n    } else if (date.getTime() >= lastWeek.getTime()) {\n        return weekdayToString(date);\n    } else {\n        return dateToString(date);\n    }\n}\n\n/**\n * Formats time in 12-hour format\n * @param {Date|Number} date input date\n */\nexport function timeToString(date) {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    var hours = date.getHours();\n    var minutes = date.getMinutes();\n    const ampm = hours >= 12 ? 'PM' : 'AM';\n    hours = hours % 12;\n    hours = hours ? hours : 12; // the hour '0' should be '12'\n    minutes = minutes < 10 ? `0${minutes}` : minutes;\n    return `${hours}:${minutes} ${ampm}`;\n}\n\n/**\n * Formats weekday in WWW format\n * @param {Date|Number} date input date\n */\nexport function weekdayToString(date) {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    return weekdays[date.getDay()];\n}\n\n/**\n * Formats date in DD.MM.YY format\n * @param {Date|Number} date input date\n */\nexport function dateToString(date) {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    var day = date.getDate();\n    var month = date.getMonth() + 1;\n    const year = String(date.getFullYear()).slice(2);\n    if (day < 10) {\n        day = `0${day}`;\n    }\n    if (month < 10) {\n        month = `0${month}`;\n    }\n    return `${day}.${month}.${year}`;\n}\n\n/**\n * Converts a future day to a string.  \n * If the day is today, returns 'today'.  \n * If the day is tomorrow, returns 'tomorrow'.  \n * If the day is neither today or tomorrow, returns the monthe and day. (eg. 'February 12')\n * @param {Date|Number} date Input date\n * @returns {string} `today`, `tomorrow` or month+day\n */\nexport function futureDayToString(date) {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    const today = new Date();\n    const tomorrow = new Date(today.getTime() + 24 * 60 * 60 * 1000);\n\n    if (date.getDate() == today.getDate() && date.getMonth() == today.getMonth()) {\n        return 'today';\n    } else if (date.getDate() == tomorrow.getDate() && date.getMonth() == tomorrow.getMonth()) {\n        return 'tomorrow';\n    } else {\n        const months= ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n        return `${months[date.getMonth()]} ${date.getDate()}`;\n    }\n}\n\n/**\n * Converts a duration to string.\n * If the duration is less than 2 minutes, the string is in the format 'X seconds'.\n * If the duration is less than 2 hours, the string is in the format 'X minutes'.\n * If the duration is less than 1 day, the string is in the format 'X hours'.\n * If the duration is longer, the string is in the format 'X days'.\n * @param {Number} duration Duration in seconds\n */\nexport function durationToString(duration) {\n    if (duration < 2 * 60) {\n        return `${duration} seconds`;\n    } else if (duration < 2 * 60 * 60) {\n        return `${Math.floor(duration / 60)} minutes`;\n    } else if (duration < 24 * 60 * 60) {\n        return `${Math.floor(duration / 60 / 60)} hours`;\n    } else {\n        return `${Math.floor(duration / 24 / 60 / 60)} days`;\n    }\n}\n\nexport function lastSeenToString(status) {\n    switch (status['@type']) {\n        case 'userLastStatusMonth':\n            return __('lng_status_last_month');\n        \n        case 'userStatusLastWeek':\n            return __('lng_status_last_week');\n\n        case 'userStatusOffline': {\n            let current = Math.floor((new Date().getTime()) / 1000);\n            let lastSeen = status.was_online;\n            let diff = current - lastSeen; // Difference in seconds\n            let diffMinutes = Math.floor(diff / 60);\n            let diffHours = Math.floor(diff / 3600);\n            \n            if (diffMinutes < 1)\n            {\n                return __('lng_status_lastseen_now');\n            }\n            if (diffMinutes < 60)\n            {\n                return __pl('lng_status_lastseen_minutes', [diffMinutes]);\n            }\n            if (diffHours < 12)\n            {\n                return __pl('lng_status_lastseen_hours', [diffHours]);\n            }\n            \n            let currentDate = TdLibDateToDate(current);\n            let lastSeenDate = TdLibDateToDate(lastSeen);\n\n            if (currentDate.getHours() - diffHours >= 0)\n            {\n                return __fmt('lng_status_lastseen_today', {time: lastSeenDate.toLocaleTimeString('en-US')});\n            }\n            if (currentDate.getHours() - diffHours < 0 && currentDate.getHours() - diffHours > -24)\n            {\n                return __fmt('lng_status_lastseen_yesterday', {time: lastSeenDate.toLocaleTimeString('en-US')});\n            }\n            return __fmt('lng_status_lastseen_date', {date: lastSeenDate.toLocaleDateString('en-US')});\n        }\n\n        case 'userStatusRecently':\n            return __('lng_status_recently');\n\n        case 'userStatusOnline':\n            return __('lng_status_online');\n\n        default: // userStatusEmpty\n            return null;\n    }\n}\n\n/**\n * Converts a TDLIb unix time to a `Date` object.\n */\nexport function TdLibDateToDate(tdLibDate) {\n    return new Date(tdLibDate * 1000);\n}","import currencies from './currencies';\n\n/**\n * Converts currency to string\n * @param {string} currency Three-letter currency code\n * @param {number} total_amount The total amount\n * @returns Formatted currency string\n */\nexport default function currencyAmountToString (currency, total_amount) {\n    const {symbol, thousands_sep, decimal_sep, symbol_left, space_between, exp}= currencies[currency];\n    const calculatedAmount= total_amount / 10.0**exp;\n    const formattedAmount= calculatedAmount.toFixed(exp).replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, thousands_sep).replace(/\\./, decimal_sep);\n    var withSymbol= symbol_left ? `${symbol}${space_between ? ' ' : ''}${formattedAmount}` : `${formattedAmount}${space_between ? ' ' : ''}${symbol}`;\n    return withSymbol;\n    \n    // var formatter = new Intl.NumberFormat('en-US', {\n    //     style: 'currency',\n    //     currency: currency,\n        \n    //     minimumFractionDigits: 2,\n    //     maximumFractionDigits: 2,\n    // });\n    // return formatter.format(total_amount / 10**currencyObject.exp); // Move two last digits to the right of the decimal point\n}","import { __fmt } from '../language-pack/language-pack';\n\n/**\n * \n * @param {import(\"../TdWeb/td_api\").TdApi.td_User} user \n * @returns \n */\nexport function getUserFullName({first_name, last_name}) {\n    return last_name ? __fmt('lng_full_name', {first_name, last_name}, false).join('') : first_name;\n}","import __, { __fmt } from '../../language-pack/language-pack';\n\nexport default function MessaagePinnedMessage({message, from}) {\n    switch (message.content['@type']) {\n        case 'messageAnimation':\n            return __fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_gif'), from: from});\n\n        case 'messageAudio':\n            return __fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_audio'), from: from});\n\n        case 'messageContact':\n            return __fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_contact'), from: from});\n\n        case 'messageDice':\n            return __fmt('lng_action_pinned_message', {text: message.content.emoji, from: from});\n\n        case 'messageDocument':\n            return __fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_file'), from: from});\n\n        case 'messageGame':\n            return __fmt('lng_action_pinned_media', {media: __fmt('lng_action_pinned_media_game', {game: message.content.game.title}), from: from});\n\n        case 'messagePhoto':\n            return __fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_photo'), from: from});\n\n        case 'messagePoll':\n            return __fmt('lng_action_pinned_message', {text: message.content.poll.question, from: from});\n\n        case 'messageSticker':\n            return __fmt('lng_action_pinned_media', {media: __fmt('lng_action_pinned_media_emoji_sticker', {emoji: message.content.sticker.emoji}), from: from});\n        \n        case 'messageText':\n            var text= message.content.text.text;\n            if( text.length > 21 ) {\n                text = `${text.substr(0, 16)}...`;\n            }\n            return __fmt('lng_action_pinned_message', {text: text, from: from});\n        \n        case 'messageUnsupported':\n            return __fmt('lng_action_pinned_message', {text: __('lng_message_unsupported').substr(0, 16)+'...', from: from});\n\n        case 'messageLocation':\n        case 'messageVenue':\n            return __fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_location'), from: from});\n\n        case 'messageVideo':\n            return __fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_video'), from: from});\n\n        case 'messageVideoNote':\n            return __fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_video_message'), from: from});\n\n        case 'messageVoiceNote':\n            return __fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_voice'), from: from});\n\n        default:\n            return __fmt('lng_action_pinned_message', {text: '', from: from});\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TdLib from '../../TdWeb/tdlib';\nimport currencyAmountToString from '../sections/payments/currency-tostring';\nimport {getUserFullName} from '../user-misc';\nimport { getChatNoCache } from '../chat-store';\nimport MessagePinnedMessage from './message-pinned-message';\nimport { durationToString, futureDayToString, timeToString } from '../../time-tostring';\nimport __, { _s__, __collection, __fmt, __pl } from '../../language-pack/language-pack';\n\n/**\n * Gets a textual representation of the message without a thumbnail.\n * Usage examples: \n * - Last message in chat list\n * - Search results \n * TODO: add possibility to hide sender name (for search results)\n * @returns A span element containing a textual representation of the message. Contains span.part-1 and span.part-2\n */\nexport default function MessageSummaryWithoutIcon({message, className, users, chat}) {\n    if(!message) return null;\n\n    switch(message.content['@type']) {\n        case 'messageAnimation': // GIF\n            return (\n                <MayHaveCaptionThumbnail\n                    type=\"GIF\" //TODO: Find the localized string\n                    caption={message.content.caption?.text} \n                    className={className} \n                    message={message} \n                    chat={chat}\n                    users={users}\n                    thumbnails={[message.content?.animation?.minithumbnail?.data]}/>\n            );\n        \n        case 'messageAudio': // Audio/music file\n            var title= message.content.audio.title || message.content.audio.file_name; // If there is no title, use file name instead\n            if(message.content.audio.performer) // Prepend performer name\n                title= message.content.audio.performer+ ' ­­– ' + title;\n            return (\n                <MayHaveCaption \n                    type={title} \n                    caption={message.content.caption?.text} \n                    className={className} \n                    message={message} \n                    chat={chat}\n                    users={users}/>\n            );\n\n        case 'messageBasicGroupChatCreate': // X created the group «xxxx»\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{__fmt('lng_action_created_chat', {from: <SenderFullName chat={chat} message={message} users={users}/>, title: message.content.title})}</span>\n                </span>\n            );\n\n        case 'messageCall': // Call\n            var text='';\n            if(message.is_outgoing) { // You made the call\n                switch(message.content.discard_reason?.['@type']) {\n                    case 'callDiscardReasonMissed':\n                        text= __(message.content.is_video? 'lng_call_video_cancelled' : 'lng_call_cancelled');\n                        break;\n                    default:\n                        text= __(message.content.is_video? 'lng_call_video_outgoing' : 'lng_call_outgoing');\n                }\n            } else { // The other user called you\n                switch(message.content.discard_reason?.['@type']) {\n                    case 'callDiscardReasonDeclined':\n                        text= __(message.content.is_video? 'lng_call_video_declined' : 'lng_call_declined');\n                        break;\n                    case 'callDiscardReasonMissed':\n                        text= __(message.content.is_video? 'lng_call_video_missed' : 'lng_call_missed');\n                        break;\n                    default: \n                        text= __(message.content.is_video? 'lng_call_video_incoming' : 'lng_call_incoming');\n                }\n            } \n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">{text}</span>\n                </span>\n            );\n\n        case 'messageChatAddMembers': // X added Y\n            // If the user joined the group by themselves, it appears as 'X added X' and that is not accurate.\n            if(message.content.member_user_ids[0] == message.sender?.user_id) {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\">{__fmt('lng_action_user_joined', {from: <SenderFullName message={message} chat={chat} users={users}/>})}</span>\n                    </span>\n                );\n            }\n\n            var newMembers= message.content.member_user_ids.map(id=> // convert user IDs to names\n                getUserFullName(users[id]));\n            newMembers= __collection(false, newMembers, false);\n            \n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt(newMembers.length> 1 ? 'lng_action_add_users_many' : 'lng_action_add_user', {\n                        from: <SenderFullName message={message} chat={chat} users={users}/>,\n                        users: newMembers,\n                        user: newMembers\n                    })}\n                </span></span>\n            );\n\n        case 'messageChatChangePhoto': // Chat photo changed\n            // Telegram Desktop shows chat photo change events as 'Photo' instead of 'X changed group photo' or 'Channel photo changed'\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{__('lng_attach_photo')}</span> \n                </span>\n            );\n\n        case 'messageChatChangeTitle': // Chat was renamed\n            if(message.is_channel_post) {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\">{__fmt('lng_action_changed_title_channel', {title: message.content.title})}</span>\n                    </span>\n                );\n            } else {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\">{__fmt('lng_action_changed_title', {\n                            from: <SenderFullName message={message} chat={chat} users={users}/>,\n                            title: message.content.title\n                        })}</span>\n                    </span>\n                );\n            }\n\n        case 'messageChatDeleteMember': // X removed Y\n            var deletedMember= users[message.content.user_id];\n            if( deletedMember.id == message.sender?.user_id ) {\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_action_user_left', {\n                            from: <SenderFullName message={message} chat={chat} users={users}/>\n                        })}\n                    </span></span>\n                );\n            }\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_kick_user', {\n                        from: <SenderFullName message={message} chat={chat} users={users}/>,\n                        user: getUserFullName(deletedMember)\n                    })}\n                </span></span>\n            );\n\n        case 'messageChatDeletePhoto': // Chat photo was deleted\n            if(message.is_channel_post) {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\">{__('lng_action_removed_photo_channel')}</span>\n                    </span>\n                );\n            } else {\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_action_removed_photo', {\n                            from:  <SenderFullName message={message} chat={chat} users={users}/>\n                        })}\n                    </span></span>\n                );\n            }\n\n        case 'messageChatJoinByLink': // X joined the group via invite link\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_user_joined_by_link', {\n                        from: <SenderFullName message={message} chat={chat} users={users}/>\n                    })}\n                </span></span>\n            );\n\n        case 'messageChatJoinByRequest': // X was accepted to the group\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_user_joined_by_request', {\n                        from: <SenderFullName message={message} chat={chat} users={users}/>\n                    })}\n                </span></span>\n            );\n\n        case 'messageChatSetTheme':\n            if(message.is_channel_post) {\n                if(message.content.theme_name){\n                    return (\n                        <span className={className}><span className=\"part-1\">\n                            {__fmt('lng_action_theme_changed_channel', {\n                                emoji: message.content.theme_name\n                            })} \n                        </span></span>\n                    );\n                } else {\n                    return (\n                        <span className={className}><span className=\"part-1\">\n                            {__('lng_action_theme_disabled_channel')}\n                        </span></span>\n                    );\n                }\n            } else {\n                if(message.content.theme_name){\n                    return (\n                        <span className={className}><span className=\"part-1\">\n                            <ServiceMessageIncludingYou \n                                message={message} chat={chat} users={users}\n                                lpString=\"lng_action_theme_changed\"\n                                lpString_you=\"lng_action_you_theme_changed\"\n                                params={{emoji: message.content.theme_name}}/>\n                        </span></span>\n                    );\n                } else {\n                    return (\n                        <span className={className}><span className=\"part-1\">\n                            <ServiceMessageIncludingYou \n                                message={message} chat={chat} users={users}\n                                lpString=\"lng_action_theme_disabled\"\n                                lpString_you=\"lng_action_you_theme_disabled\"/>\n                        </span></span>\n                    );\n                }\n            }\n\n        case 'messageChatSetTtl': // Auto-delete / self-destruct timer changed\n            var ttlTimeUnit= {\n                86400: __('lng_ttl_about_duration1'), \n                604800: __('lng_ttl_about_duration2'),\n                2678400: __('lng_ttl_about_duration3'),\n            }[message.content.ttl];\n\n            if(message.is_channel_post) {\n                if(message.content.ttl) { // If TTL is disabled, it will be set to 0\n                    return (\n                        <span className={className}><span className=\"part-1\">\n                            {__fmt('lng_action_ttl_changed_channel', {\n                                duration: ttlTimeUnit\n                            })}\n                        </span></span>\n                    );\n                } else {\n                    return (\n                        <span className={className}><span className=\"part-1\">\n                            {__('lng_action_ttl_removed_channel')}\n                        </span></span>\n                    );\n                }\n            } else {\n                if(message.content.ttl) { // If TTL is disabled, it will be set to 0\n                    return (\n                        <span className={className}><span className=\"part-1\">\n                            <ServiceMessageIncludingYou \n                                message={message} chat={chat} users={users}\n                                lpString=\"lng_action_ttl_changed\"\n                                lpString_you=\"lng_action_ttl_changed_you\"\n                                params={{duration: ttlTimeUnit}}/>\n                        </span></span>\n                    );\n                } else {\n                    return (\n                        <span className={className}><span className=\"part-1\">\n                            <ServiceMessageIncludingYou \n                                message={message} chat={chat} users={users}\n                                lpString=\"lng_action_ttl_removed\"\n                                lpString_you=\"lng_action_ttl_removed_you\"/>\n                        </span></span>\n                    );\n                }\n            }\n\n        case 'messageChatUpgradeFrom': // It is too complicated to get basic group last message.\n        case 'messageChatUpgradeTo': // TODO: It's complicated, but it should be done.\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{_s__('lngd_action_upgrade_to_supergroup')}</span>\n                </span>\n            );\n\n        case 'messageContact': // Shared contact\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">{__('lng_in_dlg_contact')}</span>\n                </span>\n            );\n\n        case 'messageContactRegistered': // X joined Telegram\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_user_registered', {\n                        from: <SenderFullName message={message} chat={chat} users={users}/>\n                    })}\n                </span></span>\n            );\n\n        case 'messageCustomServiceAction': // ¯\\_(ツ)_/¯\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{message.content.text}</span>\n                </span>\n            );\n\n        case 'messageAnimatedEmoji':\n        case 'messageDice': // Dice (🎲🎯🎳⚽🏀)\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">{message.content.emoji}</span>\n                </span>\n            );\n\n        case 'messageDocument': // File/document\n            return (\n                <MayHaveCaptionThumbnail\n                    type={message.content.document.file_name} \n                    caption={message.content.caption?.text} \n                    className={className} \n                    message={message} \n                    chat={chat}\n                    users={users}\n                    thumbnails={[message.content?.document?.minithumbnail?.data]}/>\n            );\n        \n        case 'messageExpiredPhoto': \n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{__('lng_ttl_photo_expired')}</span>\n                </span>\n            );\n        \n        case 'messageExpiredVideo':\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{__('lng_ttl_video_expired')}</span>\n                </span>\n            );\n        \n        case 'messageGame': // Game\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">🎮 {message.content.game.title}</span>\n                </span>\n            );\n\n        case 'messageGameScore': // X scored {score} in {game}\n            // Text to use if game message is not available\n            var noGameTitleFallback= (\n                <span className={className}><span className=\"part-1\">\n                    <ServiceMessageIncludingYou \n                        message={message} chat={chat} users={users}\n                        lpString=\"lng_action_game_score_no_game\"\n                        lpString_you=\"lng_action_game_you_scored_no_game\"\n                        count={message.content.score}/>\n                </span></span>\n            );\n\n            // Get game message\n            var GameScoreWithTitle= React.lazy(()=>new Promise(resolve=> {\n                TdLib.sendQuery({\n                    '@type': 'getMessage',\n                    chat_id: chat.id,\n                    message_id: message.content.game_message_id\n                }).then(\n                    result=> { \n                        //eslint-disable-next-line react/display-name\n                        resolve({ default: ()=> (\n                            <span className={className}><span className=\"part-1\">\n                                <ServiceMessageIncludingYou \n                                    message={message} chat={chat} users={users}\n                                    lpString=\"lng_action_game_score\"\n                                    lpString_you=\"lng_action_game_you_scored\"\n                                    count={message.content.score}\n                                    params={{game: result.content.game.title}}/>\n                            </span></span>\n                        )});\n                    },\n                    ()=> { // Failed\n                        //eslint-disable-next-line react/display-name\n                        resolve({ default: ()=> noGameTitleFallback});\n                    }\n                );\n            }));\n\n            return (\n                <React.Suspense fallback={noGameTitleFallback}>\n                    <GameScoreWithTitle/>\n                </React.Suspense>\n            );\n\n        case 'messageInvoice': // Invoice (a buyable product)\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">{message.content.title}</span>\n                </span>\n            );\n\n        case 'messageLocation': // Location\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">{__('lng_maps_point')}</span>\n                </span>\n            );\n\n        case 'messagePassportDataSent': // You sent some Telegram passport data\n            var passportDataTypeToString= {\n                'passportElementTypeAddress':               'lng_passport_address',\n                'passportElementTypeBankStatement':         'lng_passport_address_statement',\n                'passportElementTypeDriverLicense':         'lng_passport_identity_license',\n                'passportElementTypeEmailAddress':          'lng_passport_email_title',\n                'passportElementTypeIdentityCard':          'lng_passport_identity_card',\n                'passportElementTypeInternalPassport':      'lng_passport_identity_internal',\n                'passportElementTypePassport':              'lng_passport_identity_passport',\n                'passportElementTypePassportRegistration':  'lng_passport_address_registration',\n                'passportElementTypePersonalDetails':       'lng_passport_personal_details',\n                'passportElementTypePhoneNumber':           'lng_passport_phone_title',\n                'passportElementTypeRentalAgreement':       'lng_passport_address_agreement',\n                'passportElementTypeTemporaryRegistration': 'lng_passport_address_temporary',\n                'passportElementTypeUtilityBill':           'lng_passport_address_bill',\n            };\n            var passportDataTypes= message.content.types.map(type=> __(passportDataTypeToString[type['@type']]).toLowerCase());\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_secure_values_sent', {\n                        user: chat.title,\n                        documents: passportDataTypes.join(', ')\n                    })}\n                </span></span>\n            );\n\n        case 'messagePaymentSuccessful': // You paid [real] money\n            // To be shown if invoice is not available\n            var noInvoiceTitleFallback= (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_payment_done', {\n                        amount: currencyAmountToString(message.content.currency, message.content.total_amount),\n                        user: chat.title\n                    })}\n                </span></span>\n            );\n\n            // Get invoice message\n            var PaymentInfoWithInvoiceTitle= React.lazy(()=>new Promise(resolve=> {\n                TdLib.sendQuery({\n                    '@type': 'getMessage',\n                    chat_id: message.content.invoice_chat_id,\n                    message_id: message.content.invoice_message_id\n                }).then(\n                    result=> { \n                        //eslint-disable-next-line react/display-name\n                        resolve({ default: ()=> (\n                            <span className={className}><span className=\"part-1\">\n                                {__fmt('lng_action_payment_done_for', {\n                                    amount: currencyAmountToString(message.content.currency, message.content.total_amount),\n                                    user: chat.title,\n                                    invoice: result.content.title\n                                })}\n                            </span></span>\n                        )});\n                    },\n                    ()=> { // Failed\n                        resolve({ default: ()=> noInvoiceTitleFallback});\n                    }\n                );\n            }));\n\n            return (\n                <React.Suspense fallback={noInvoiceTitleFallback}>\n                    <PaymentInfoWithInvoiceTitle/>\n                </React.Suspense>\n            );\n\n        case 'messagePhoto': // A photo\n            if(message.content.is_secret) { // Self-destructing photo, not implemented\n                if(message.is_outgoing) { // You sent it\n                    return (\n                        <span className={className}>\n                            <span className=\"part-1\">{__('lng_ttl_photo_sent')}</span>\n                        </span>\n                    );\n                } else { // You received it\n                    return (\n                        <span className={className}><span className=\"part-1\">\n                            {__fmt('lng_ttl_photo_received', {\n                                from: <SenderFullName message={message} chat={chat} users={users}/>\n                            })}\n                        </span></span>\n                    );\n                }\n            } else { // Normal photo\n                return (\n                    <MayHaveCaptionThumbnail \n                        type={__('lng_in_dlg_photo')}\n                        caption={message.content.caption?.text} \n                        className={className} \n                        message={message} \n                        chat={chat}\n                        users={users}\n                        thumbnails={[message.content?.photo?.minithumbnail?.data]}/>\n                );\n            }\n        \n        case 'messagePinMessage':\n\n            // Get pinned message message\n            var PinnedMessageMessage= React.lazy(()=>new Promise(resolve=> {\n                TdLib.sendQuery({\n                    '@type': 'getMessage',\n                    chat_id: chat.id,\n                    message_id: message.content.message_id\n                }).then(\n                    result=> { \n                        //eslint-disable-next-line react/display-name\n                        resolve({ default: ()=> (\n                            <span className={className}><span className=\"part-1\">\n                                <MessagePinnedMessage message={result} sender={<SenderFullName message={message} chat={chat} users={users}/>}/>\n                            </span></span>\n                        )});\n                    },\n                    ()=> { // Failed\n                        //eslint-disable-next-line react/display-name\n                        resolve({ default: ()=> (\n                            <span className={className}><span className=\"part-1\">\n                                {__fmt('lng_action_pinned_media', {\n                                    from: <SenderFullName message={message} chat={chat} users={users}/>,\n                                    media: __('lng_deleted_message')\n                                })}\n                            </span></span>\n                        )});\n                    }\n                );\n            }));\n\n            return (\n                <React.Suspense fallback={\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_action_pinned_media', {\n                            from: <SenderFullName message={message} chat={chat} users={users}/>,\n                            media: __('lng_contacts_loading')\n                        })}\n                    </span></span>\n                }>\n                    <PinnedMessageMessage/>\n                </React.Suspense>\n            );\n        \n        case 'messagePoll':\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{message.content.poll.question}</span>\n                </span>\n            );\n        \n        // case 'messageProximityAlertTriggered': // TODO: Reproduce this message and implement it\n        // case 'messageScreenshotTaken':\n        case 'messageSticker': // Sticker\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">\n                        {__fmt('lng_in_dlg_sticker_emoji', {\n                            emoji: message.content.sticker.emoji\n                        })}\n                    </span>\n                </span>\n            );\n\n        case 'messageSupergroupChatCreate': // Supergroup created\n            if(message.is_channel_post) {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\">{__('lng_action_created_channel')}</span>\n                    </span>\n                );\n            } else {\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_action_created_chat', {\n                            from: <SenderFullName message={message} chat={chat} users={users}/>,\n                            title: message.content.title\n                        })}\n                    </span></span>\n                );\n            }\n\n        case 'messageText':\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-2\">{message.content.text.text.replace(/(\\n|\\r|\\r\\n|\\n\\r)/g, ' ')}</span>\n                </span>\n            );\n\n        case 'messageUnsupported': // Is not supported :(\n            return ( //TODO localize\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-2\">{_s__('lngd_message_unsupported')}</span>\n                </span>\n            );\n        \n        case 'messageVenue': // Venue/location\n            return ( //TODO find the translation string\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">Location, </span>\n                    <span className=\"part-2\">{message.content.venue.title}</span>\n                </span>\n            );\n\n        case 'messageVideo': // Video\n            if(message.content.is_secret) { // Self-destructing photo, not implemented\n                if(message.is_outgoing) { // You sent it\n                    return (\n                        <span className={className}>\n                            <span className=\"part-1\">{__('lng_ttl_video_sent')}</span>\n                        </span>\n                    );\n                } else { // You received it\n                    return (\n                        <span className={className}><span className=\"part-1\">\n                            {__fmt('lng_ttl_video_received', {\n                                from: <SenderFullName message={message} chat={chat} users={users}/>\n                            })}\n                        </span></span>\n                    );\n                }\n            } else { // Normal photo\n                return (\n                    <MayHaveCaptionThumbnail\n                        type={__('lng_in_dlg_video')}\n                        caption={message.content.caption?.text} \n                        className={className} \n                        message={message} \n                        chat={chat}\n                        users={users}\n                        isVideo={true}\n                        thumbnails={[message.content?.video?.minithumbnail?.data]}/>\n                );\n            }\n\n        case 'messageVideoNote':\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">{__('lng_in_dlg_video_message')}</span>\n                </span>\n            );\n\n        case 'messageVideoChatScheduled':\n            if(message.is_channel_post) {\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_action_group_call_scheduled_channel', {\n                            date: __fmt('lng_mediaview_date_time', {\n                                date: futureDayToString(message.content.start_date),\n                                time: timeToString(message.content.start_date)\n                            })\n                        })}\n                    </span></span>\n                );\n            } else {\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_action_group_call_scheduled_group', {\n                            from: <SenderFullName message={message} chat={chat} users={users}/>,\n                            date: __fmt('lng_mediaview_date_time', {\n                                date: futureDayToString(message.content.start_date),\n                                time: timeToString(message.content.start_date)\n                            })\n                        })}\n                    </span></span>\n                );\n            }\n\n        case 'messageVideoChatStarted':\n            if(message.is_channel_post) {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\">{__('lng_action_group_call_started_channel')}</span>\n                    </span>\n                );\n            } else {\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_action_group_call_started_group', {\n                            from: <SenderFullName message={message} chat={chat} users={users}/>\n                        })}\n                    </span></span>\n                );\n            }\n\n        case 'messageVideoChatEnded':\n            if(message.is_channel_post) {\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_action_group_call_finished', {\n                            duration: durationToString(message.content.duration)\n                        })}\n                    </span></span>\n                );\n            } else {\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_action_group_call_finished_group', {\n                            from: <SenderFullName message={message} chat={chat} users={users}/>,\n                            duration: durationToString(message.content.duration)\n                        })}\n                    </span></span>\n                );\n            }\n\n        case 'messageInviteVideoChatParticipants':\n            var invitedMembers= message.content.user_ids.map(id=> // convert user IDs to names\n                getUserFullName(users[id]));\n            invitedMembers= __collection(true, invitedMembers, false); // A, B, and C\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt((invitedMembers.length==1 ? 'lng_action_invite_user' : 'lng_action_invite_users_many'), {\n                        from: <SenderFullName message={message} chat={chat} users={users}/>,\n                        user: invitedMembers,\n                        users: invitedMembers,\n                        chat: __('lng_action_invite_user_chat')\n                    })}\n                </span></span>\n            );\n\n        case 'messageVoiceNote':\n            return (\n                <MayHaveCaption \n                    type={__('lng_in_dlg_audio')}\n                    caption={message.content.caption?.text} \n                    className={className} \n                    message={message} \n                    chat={chat}\n                    users={users}/>\n            );\n\n        case 'messageWebsiteConnected':\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_bot_allowed_from_domain', {\n                        domain: message.content.domain_name\n                    })}\n                </span></span>\n            );\n\n        default:\n            return null;\n    }\n}\nMessageSummaryWithoutIcon.propTypes= {\n    /** Input message */\n    message: PropTypes.object,\n    className: PropTypes.string,\n    /** The chat in which the message was */\n    chat: PropTypes.object,\n    /** A dictionary of all users */\n    users: PropTypes.object,\n};\n\n\n/** If caption has a value, adds a comma to type and returns type */ \nfunction MayHaveCaption({type, caption, className, message, chat, users}) {\n    if(caption) type+=',';\n    return (\n        <span className={className}>\n            <MessageSummarySender message={message} chat={chat} users={users}/>\n            <span className=\"part-1\">{type}</span> <span className=\"part-2\">{caption.replace(/(\\n|\\r|\\r\\n|\\n\\r)/g, ' ')}</span>\n        </span>\n    );\n}\nMayHaveCaption.propTypes= {\n    /** Message type, e.g. 'GIF', 'Video' */\n    type: PropTypes.string.isRequired,\n    /** Message caption, can be empty */\n    caption: PropTypes.string,\n    className: PropTypes.string,\n    /** Message object */\n    message: PropTypes.object,\n    /** The chat in which the message was sent */\n    chat: PropTypes.object,\n    /** A dictionary of all users */\n    users: PropTypes.object.isRequired\n};\n\n/** If caption has a value, adds a comma to type and returns type */ \nfunction MayHaveCaptionThumbnail({thumbnails, isVideo, type, caption, className, message, chat, users}) {\n    if(!thumbnails?.length) return <MayHaveCaption type={type} caption={caption} className={className} message={message} chat={chat} users={users}/>;\n    return (\n        <span className={className}>\n            <MessageSummarySender message={message} chat={chat} users={users}/>\n            {thumbnails.map((data, i) => data && <span className={'thumbnail'+ (isVideo? ' video': '')} key={i}><img src={'data:image/jpeg;base64,'+data}/></span>)} \n            {caption? \n                <span className=\"part-2\">{caption.replace(/(\\n|\\r|\\r\\n|\\n\\r)/g, ' ')}</span>\n                :<span className=\"part-1\">{type}</span> \n            }\n        </span>\n    );\n}\nMayHaveCaptionThumbnail.propTypes= {\n    /** An array of one or more base64-encoded image data */\n    thumbnails: PropTypes.arrayOf(PropTypes.string),\n    /** If true, a tiny play icon will be shown on the image */\n    isVideo: PropTypes.bool,\n    /** Message type, e.g. 'GIF', 'Video' */\n    type: PropTypes.string.isRequired,\n    /** Message caption, can be empty */\n    caption: PropTypes.string,\n    className: PropTypes.string,\n    /** Message object */\n    message: PropTypes.object,\n    /** The chat in which the message was sent */\n    chat: PropTypes.object,\n    /** A dictionary of all users */\n    users: PropTypes.object.isRequired\n};\n\n/** Sender's first name + last name */\nfunction SenderFullName({message, chat, users, includeYou}) {\n    if(includeYou) { // Use 'You' if the message is outgoing?\n        return message.is_outgoing ? __('lng_from_you') : <SenderFullName message={message} chat={chat} users={users}/>;\n    }\n    const sender=message.sender;\n    const user=users[sender.user_id];\n    if(sender['@type']=='messageSenderUser') {\n        return getUserFullName(user); \n    } else if(sender['@type']=='messageSenderChat') { // Anonymous admin\n        return chat.title;\n    }\n}\n\n/**\n * Formats a service message which 'from' can be 'You' or a user's full name\n * @param {object} message The message object\n * @param {object} chat The chat in which the message was sent\n * @param {object} users A dictionary of all users\n * @param {string} lpString Language pack string key for the service message\n * @param {string} lpString_you Language pack string key for the service message if the service message is outgoing\n * @param {string} params Parameters for the language pack string\n * @param {number|undefined} count If provided, the language pack strings will be treated as pluralized\n */\nfunction ServiceMessageIncludingYou({message, chat, users, lpString, lpString_you, params={}, count=undefined}) {\n    var string= lpString_you;\n    var sender;\n    if(!message.is_outgoing){\n        string= lpString;\n\n        const user=users[message.sender.user_id];\n        if(message.sender['@type']=='messageSenderUser') {\n            sender= getUserFullName(user); \n        } else if(message.sender['@type']=='messageSenderChat') { // Anonymous admin\n            sender= chat.title;\n        }\n    }\n\n    if(count==undefined) {\n        return __fmt(string, {\n            from: sender,\n            ...params\n        });\n    } else {\n        return __pl(string, count, {\n            from: sender,\n            ...params\n        });\n    }\n}\n\n/** Short sender names in the beginning of message previews */\nexport const MessageSummarySender= \n    function MessageSummarySender ({message, chat, users}) {\n        if(!message) return null;\n\n        var part1;\n        if(chat && (!message.is_channel_post)) { // Channel posts dont have sender names\n            if(message.is_outgoing) {\n                part1= __('lng_from_you');\n            } else if(['chatTypeBasicGroup', 'chatTypeSupergroup'].includes(chat.type['@type'])) { // Message is sent in a group\n                if(message.sender['@type']=='messageSenderUser') {\n                    part1= users[message.sender.user_id].first_name;\n                }\n            }\n            if(message.sender['@type']=='messageSenderChat') {\n                part1= getChatNoCache(message.sender.chat_id).title;\n            }\n        }\n        return part1? <span className=\"sender\">{__fmt('lng_dialogs_text_from_wrapped', {from: part1})} </span> : null;\n    };\nMessageSummarySender.propTypes= {\n    /** Message to check the sender */\n    message: PropTypes.object.isRequired,\n    /** Chat in which the message was sent */\n    chat: PropTypes.object.isRequired,\n    /** A dictionary of all users */\n    users: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { createStore } from 'redux';\n\n/**\n * A redux store which state is an array of objects with {id: unique ID of dialog, element: react element of the dialog}\n */\nexport var dialogStore= createStore(\n    /**\n     * @param {any[]} state\n     * @param {Object} action\n     */\n    function (state= [], action) {\n        switch (action.type) {\n            case 'ADD_DIALOG':\n                return [\n                    ...state,\n                    action.dialog\n                ];\n            \n            case 'REMOVE_DIALOG':\n                return state.filter(value => value.id!=action.id);\n            \n            default:\n                break;\n        }\n    },\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\n/**\n * Opens a dialog\n * @param {string} id A unique ID for the dialog\n * @param {React.ReactElement} dialog The dialog React element\n */\nexport function addDialog(id, dialog) {\n    dialogStore.dispatch({\n        type: 'ADD_DIALOG',\n        dialog: {\n            element: dialog,\n            id: id\n        }\n    });\n}\n\n/**\n * Closes an existing dialog\n * @param {string} id The dialog unique ID\n */\nexport function removeDialog(id) {\n    dialogStore.dispatch({\n        type: 'REMOVE_DIALOG',\n        id: id\n    });\n}\n\n/**\n * Renders all dialogs.\n */\nconst Dialogs= (connect(function (state) {\n    return {dialogs: state || []};\n    // eslint-disable-next-line no-unused-vars\n})(function Dialogs({dialogs, dispatch, ...rest}) {\n    return (\n        <div data-dialog={!!dialogs.length} {...rest}>\n            {dialogs.map(el => <React.Fragment key={el.id}>{el.element}</React.Fragment>) || null}\n        </div>\n    );\n}));\n\nexport default Dialogs;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport RippleEffect, {handleMyMouseEventsFunction} from './ripple-effect';\n\n/**\n * Renders a small button with accent color\n */\nexport default function SmallButton ({children, attention, ...rest}) {\n    const ripple= React.useState({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave]= handleMyMouseEventsFunction(ripple);\n    return (\n        <button \n            className=\"small-button\" \n            data-attention={attention? 'true': 'false'}\n            onMouseDown={mouseDown}\n            onMouseUp={mouseUp}\n            onMouseLeave={mouseLeave}\n            {...rest}>\n\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-lightButtonBgRipple)\"/>\n\n            {/* Because we use absolute positioning on the actual content, we need a copy of it without absolute position to get the correct parent size. */}\n            <div className=\"invisibleText\">\n                {children}\n            </div>\n\n            <div className=\"content\">\n                {children}\n            </div>\n            \n        </button>\n    );\n}\nSmallButton.propTypes= {\n    /** The button's content */\n    children: PropTypes.node.isRequired,\n    /** Fires when the button is clicked */\n    onClick: PropTypes.func,\n    /** Setting to true causes the button to become red */\n    attention: PropTypes.bool\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { removeDialog } from './dialogs';\n/**\n * Renders a modal dialog\n * Use React ref to access the `close()` method.\n */\nexport default class Dialog extends React.Component{\n    static propTypes= {\n        children: PropTypes.node.isRequired,\n        /** Dialog width in CSS format */\n        width: PropTypes.string,\n        /** Unique ID of this dialog, used to close it. */\n        id: PropTypes.any.isRequired,\n        className: PropTypes.string\n    };\n    state= {\n        closing: false\n    }\n    ref = React.createRef();\n    /** @param {React.SyntheticEvent} e */\n    onClick= (e) => {\n        if (e.target === this.ref.current) {\n            this.close();\n        }\n    }\n    render(){\n        return (\n            <div ref={this.ref} onClick={this.onClick} id={this.props.id} className={'modal-dialog' + ((this.state.closing) ? ' closing ' : ' ') + this.props.className}>\n                <div style={{\n                    'width': this.props.width || 'auto'\n                }}>\n                    {this.props.children}\n                </div>\n            </div>\n        );\n    }\n    close= ()=>{\n        this.setState({\n            closing: true\n        });\n        setTimeout(() => {\n            removeDialog(this.props.id);\n        }, 1000);\n    }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SmallButton from '../elements/small-button';\nimport Dialog from './dialog';\nimport __ from '../../language-pack/language-pack';\n/**\n * Renders a modal dialog with a title and cancel and OK button. OK button text can be changed.\n */\nexport default class ConfirmDialog extends React.Component{\n    dialogRef = React.createRef();\n    handleOK =()=>{\n        this.dialogRef.current.close();\n        this.props.onOK && this.props.onOK();\n    }\n    handleCancel =()=>{\n        this.dialogRef.current.close();\n        this.props.onCancel && this.props.onCancel();\n    }\n    handleButton =(handler)=>{\n        this.dialogRef.current.close();\n        handler && handler();\n    }\n    render() {\n        return (\n            <Dialog className=\"confirm-dialog\" id={this.props.id} ref={this.dialogRef} width={this.props.width || '320px'}>\n                <h1>{this.props.title || ''}</h1>\n                <div className={'content' + (this.props.largeFont? ' large-font' : '')}>\n                    {this.props.children}\n                </div>\n                <div className=\"options\">\n                    {this.props.thirdButton ?  (\n                        <SmallButton \n                            className=\"small-button left\"\n                            style={{'float': 'left'}}\n                            onClick={ this.props.thirdButtonClosesDialog ?\n                                ()=>this.handleButton(this.props.onThirdButtonClick)\n                                : this.props.onThirdButtonClick}>\n                            {this.props.thirdButton}\n                        </SmallButton>\n                    ) : null}\n                    {this.props.hideCancelButton ? null : (\n                        <SmallButton onClick={()=>this.handleButton(this.props.onCancel)}>\n                            {__('lng_cancel')}\n                        </SmallButton>\n                    )}\n                    <SmallButton onClick={()=>this.handleButton(this.props.onOK)} attention={this.props.attention}>\n                        {this.props.OKButtonText || __('lng_box_ok')}\n                    </SmallButton>\n                </div>\n            </Dialog>\n        );\n    }\n}\nConfirmDialog.propTypes= {\n    children: PropTypes.node.isRequired,\n    /** Dialog width in CSS format */\n    width: PropTypes.string,\n    /** Dialog header */\n    title: PropTypes.string,\n    /** Text content of the OK button*/\n    OKButtonText: PropTypes.string,\n    /** Pass true to only show the OK button */\n    hideCancelButton: PropTypes.bool,\n    /** Unique ID of this dialog, used to close it. */\n    id: PropTypes.any.isRequired,\n    /** Called when the OK button is pressed */\n    onOK: PropTypes.func,\n    /** Called when the cancel button is pressed */\n    onCancel: PropTypes.func,\n    /** Third button text (optional) */\n    thirdButton: PropTypes.string,\n    /** Pass true if third button click closes dialog */\n    thirdButtonClosesDialog: PropTypes.bool,\n    /** Called when third button is pressed */\n    onThirdButtonClick: PropTypes.func,\n    /** If true, the OK button will become red, meaning the user should pay attention */\n    attention: PropTypes.bool,\n    /** If true, the dialog text will be larger */\n    largeFont: PropTypes.bool\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport TdLib from '../../../TdWeb/tdlib';\nimport RippleEffect, { handleMyMouseEvents } from '../../../ui/elements/ripple-effect';\nimport { dialogs_bot, dialogs_channel, dialogs_chat, dialogs_pinned, dialogs_received, dialogs_sending, dialogs_sent, dialogs_verified_check, dialogs_verified_star } from '../../../ui/icon/icons';\nimport { isChatVerified, isChatWithDeletedAccount } from '../../chat-misc';\nimport options from '../../../TdWeb/options';\nimport { getMessageStatus } from '../../message-misc';\nimport __, { __pl } from '../../../language-pack/language-pack';\nimport { createContextMenu } from '../../../ui/menu/context-menu';\nimport ProfilePhoto, { getChatTypeId } from '../../../ui/components/profile-photo';\nimport { smallDateTimeToString } from '../../../time-tostring';\nimport MessageSummaryWithoutIcon from '../../message/message-summary-noicon';\nimport Menu from '../../../ui/menu/menu';\nimport Toast, { addToast } from '../../../ui/dialog/toast';\nimport { addDialog } from '../../../ui/dialog/dialogs';\nimport ConfirmDialog from '../../../ui/dialog/confirm-dialog';\nimport chatStore from '../../chat-store';\n\n/**\n * Renders a single chat\n */\nclass ChatListItem extends React.Component {\n    constructor(props) {\n        super(props);\n        [this.mouseDown, this.mouseUp, this.mouseLeave]= handleMyMouseEvents(this);\n    }\n    state= {\n        ripple: {\n            state: 'off'\n        }\n    };\n    shouldComponentUpdate(nextProps, nextState) {\n        function getUser(props){ // Gets the user which is the other party of the chat. Used to see if the needed user has changed\n            if(props.chat.type['@type']=='chatTypePrivate') {\n                return props.users[props.chat.type.user_id];\n            }\n            return null;\n        }\n        return nextProps.chat.id !== this.props.chat.id\n            || nextProps.chat.last_message !== this.props.chat.last_message\n            || nextProps.chat.draft_message !== this.props.chat.draft_message\n            || nextProps.chat.unread_count !== this.props.chat.unread_count\n            || nextProps.chat.unread_mention_count !== this.props.chat.unread_mention_count\n            || nextProps.chat.is_marked_as_unread !== this.props.chat.is_marked_as_unread\n            || nextProps.chat.position.is_pinned !== this.props.chat.position.is_pinned\n            || nextProps.chat.photo?.small?.id !== this.props.chat.photo?.small?.id\n            || nextProps.chat.title !== this.props.chat.title\n            || nextProps.chat.last_read_outbox_message_id !== this.props.chat.last_read_outbox_message_id\n            || nextProps.selected !== this.props.selected\n            || nextState.ripple !== this.state.ripple\n            || getUser(nextProps) !== getUser(this.props);\n    }\n    openChat = () => {\n        chatStore.dispatch({\n            type: 'SELECT_CHAT',\n            chat_id: this.props.chat.id\n        });\n    }\n    render(){\n        const chat= {...this.props.chat}; // Clone chat object to avoid mutating it. Mutating it causes Saved messages and Deleted account chats to get past shouldComponentUpdate.\n        var chatType= '';\n        if (chat.type?.['@type'] == 'chatTypeBasicGroup' ||      // Groups are basic groups and non-channel supergroups\n                (chat.type?.['@type'] == 'chatTypeSupergroup' &&\n                chat.type?.is_channel == false)\n        ){\n            chatType= dialogs_chat;\n        } \n        else if (chat.type?.['@type'] == 'chatTypeSupergroup' && // Channels are supergroups with is_channel set to true\n                chat.type?.is_channel == true){\n            chatType= dialogs_channel;\n        } \n        else if ((chat.type?.['@type'] == 'chatTypePrivate') &&  // Bots are private chats with bot user type\n                (this.props.users[chat.type?.user_id]?.type?.['@type'] == 'userTypeBot')){\n            chatType= dialogs_bot;\n        }\n        if (chat.id==options['replies_bot_chat_id']) { // Replies bot does not have a type icon\n            chatType= '';\n        }\n\n        if(isChatWithDeletedAccount(chat, this.props.users)) {\n            chat.title= __('lng_deleted'); // Chat object is a copy, so there is no problem with mutating it.\n        }\n\n        const isVerified= isChatVerified(chat);\n\n        if (chat.id==options['my_id']) {\n            chat.title= __('lng_saved_messages');\n        }\n\n        var messageStatus = null;\n        switch(getMessageStatus(chat, chat.last_message)) { // Is the message sending, sent or seen?\n            case 'sending': \n                messageStatus = <span className=\"message-status-icon sending\" dangerouslySetInnerHTML={{__html: dialogs_sending}}/>;\n                break;\n            case 'sent': \n                messageStatus = <span className=\"message-status-icon sent\" dangerouslySetInnerHTML={{__html: dialogs_sent}}/>;\n                break;\n            case 'seen': \n                messageStatus = <span className=\"message-status-icon seen\" dangerouslySetInnerHTML={{__html: dialogs_received}}/>;\n                break;\n        }\n\n        var unreadBadge = null;\n        const unreadBadgeClass= chat.notification_settings.mute_for ? 'unread-badge muted' : 'unread-badge';\n        // Show the mention badge alone if there is exactly one mention and no other unread messages\n        if (chat.unread_mention_count == 1 && chat.unread_count == chat.unread_mention_count) {\n            unreadBadge = <span className=\"unread-badge mention\">@</span>;\n        } \n        // Show the mention badge with unread badge together if there are more than one unread messages and there are mentions\n        else if (chat.unread_mention_count > 0 && chat.unread_count > 1 ) {\n            unreadBadge = <React.Fragment>\n                <span className=\"unread-badge mention\">@</span>\n                <span className={unreadBadgeClass}>{chat.unread_count}</span>\n            </React.Fragment>;\n        }\n        // Show the unread badge alone if there are no mentions and there are unread messages\n        else if (chat.unread_count > 0 && chat.unread_mention_count == 0) {\n            unreadBadge = <span className={unreadBadgeClass}>{chat.unread_count}</span>;\n        }\n        // Show an empty badge if chat is manually marked as unread\n        else if (chat.is_marked_as_unread) {\n            unreadBadge = <span className={unreadBadgeClass}></span>;\n        }\n\n        var isOnline= false; // User online status\n        if((chat.type['@type']== 'chatTypePrivate') && // Only private chats (except saved messages and service notifications)\n            (chat.id!=options['my_id']) && (chat.id!=options['telegram_service_notifications_chat_id']) ){ \n            const user= this.props.users[chat.type.user_id];\n            if(user) {\n                isOnline= user.type['@type'] == 'userTypeRegular' && user.status['@type'] == 'userStatusOnline'; // Shouldn't be a bot\n            }\n        }\n\n        return(\n            <div className={'chat' + (this.props.selected? ' active' : '')} onClick={this.openChat}\n                onContextMenu={e=> createContextMenu(e, <ChatContextMenu chat={chat}/>)}\n                onMouseDown={this.mouseDown} onMouseUp={this.mouseUp} onMouseLeave={this.mouseLeave}>\n                \n                <RippleEffect {...this.state.ripple} color=\"var(--theme-color-dialogsRippleBg)\"/>\n                <div className=\"content\" data-online={isOnline ? 'true' : 'false'}>\n                    <ProfilePhoto name={chat.title} photo={chat.photo?.small} id={getChatTypeId(chat)}/>\n                    <div className=\"details\">\n                        <div className=\"top\">\n                            <div className=\"left\">\n                                <div className=\"type-icon\" dangerouslySetInnerHTML={{__html: chatType}}></div>\n                                <div className=\"title\">{chat.title}</div>\n                                {isVerified && <span className=\"verified-icon\">\n                                    <span className=\"verified-icon-star\" dangerouslySetInnerHTML={{__html: dialogs_verified_star}}></span>\n                                    <span className=\"verified-icon-check\" dangerouslySetInnerHTML={{__html: dialogs_verified_check}}></span>\n                                </span>}\n                            </div>\n                            <div className=\"right\">\n                                {messageStatus}\n                                {chat.last_message?.date && <span className=\"date\">{smallDateTimeToString(chat.last_message.date)}</span>}\n                            </div>\n                        </div>\n                        <div className=\"bottom\">\n                            <div className=\"left\">\n                                {(chat.draft_message && !unreadBadge) ?  // I don't know why, but Telegram Desktop does not show the draft message if the chat is unread.\n                                    <span className=\"last-message\">\n                                        <span className=\"draft\">{__('lng_from_draft')}:</span> <span className=\"part-2\">{chat.draft_message.input_message_text.text.text}</span>\n                                    </span> \n                                    :\n                                    <MessageSummaryWithoutIcon message={chat.last_message} users={this.props.users} chat={chat} className=\"last-message\"/>\n                                }\n                            </div>\n                            <div className=\"right\">\n                                {unreadBadge || ( // Unread badge overrides pinned icon\n                                    chat.position?.is_pinned && <span className=\"pinned_icon\" dangerouslySetInnerHTML={{__html: dialogs_pinned}}></span>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nChatListItem.propTypes = {\n    /** The chat (TdObject) */\n    chat: PropTypes.object.isRequired,\n    /** A boolean value which should be `true` if the chat is currently open */\n    selected: PropTypes.bool,\n    /** A dictionary of all users */\n    users: PropTypes.object.isRequired\n};\nexport const Chat = connect(state=> ({users: state}))(ChatListItem);\n\n/** Renders the context menu of a chat */\nfunction ChatContextMenu({chat}) {\n    const [movableChatLists, setMovableChatLists] = React.useState([]);\n\n    // Archive/unarchive chats\n    React.useEffect(() => {\n        TdLib.sendQuery({ // Only TDLib can know what lists we can add the chat to\n            '@type': 'getChatListsToAddChat',\n            chat_id: chat.id\n        }).then(result => {\n            setMovableChatLists(result.chat_lists.map(chatList=> {\n                const text= { // Only archive / unarchive\n                    'chatListMain': __('lng_archived_add'), \n                    'chatListArchive': __('lng_archived_remove')\n                }[chatList['@type']];\n                if(!text) return;\n                return (\n                    <Menu.MenuItem key={chatList.chat_filter_id || chatList['@type']} onClick={() => {\n                        TdLib.sendQuery({\n                            '@type': 'addChatToList',\n                            chat_id: chat.id,\n                            chat_list: chatList\n                        }).then(() => {\n                            if(chatList['@type'] == 'chatListMain') {\n                                addToast(<Toast>{__('lng_archived_removed')}</Toast>);\n                            } \n                            else if(chatList['@type'] == 'chatListArchive') {\n                                addToast(<Toast>{__('lng_archived_added')}</Toast>);\n                            }\n                        });\n                    }}>\n                        {text}\n                    </Menu.MenuItem>\n                );\n            }));\n        });\n    }, []);\n\n    return (\n        <Menu.MenuContents>\n            {movableChatLists /* Archive/unarchive */}\n            <Menu.MenuItem onClick={()=> { // Pin/unpin\n                TdLib.sendQuery({\n                    '@type': 'toggleChatIsPinned',\n                    chat_list: chat.position.list,\n                    chat_id: chat.id,\n                    is_pinned: !chat.position.is_pinned\n                }).catch(error=> {\n                    // Maximum pinned messages\n                    if(error.code == 400) {\n                        const max= chat.position.list['@type'] == 'chatListMain'? options['pinned_chat_count_max'] : options['pinned_archived_chat_count_max'];\n                        addDialog('maximum-pinned-chats-reached', (\n                            <ConfirmDialog id=\"maximum-pinned-chats-reached\" largeFont={true} hideCancelButton={true}>\n                                {__pl('lng_error_pinned_max', max)}\n                            </ConfirmDialog>\n                        ));\n                    }\n                });\n            }}>\n                {chat.position.is_pinned? __('lng_context_unpin_from_top') : __('lng_context_pin_to_top')}\n            </Menu.MenuItem>\n        </Menu.MenuContents>\n    );\n}\nChatContextMenu.propTypes = {\n    chat: PropTypes.object.isRequired\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect, Provider } from 'react-redux';\nimport TdLib from '../../../TdWeb/tdlib';\nimport chatStore, { compareChatList } from '../../chat-store';\nimport './chat-list.scss';\nimport { archive_userpic, history_to_down } from '../../../ui/icon/icons';\nimport usersStore from '../../users-store';\nimport ScrollView from '../../../ui/scroll/scrollbar';\nimport LinkButton from '../../../ui/elements/link-button';\nimport { chatTitleOrDeletedAccount } from '../../chat-misc';\nimport RippleEffect, { handleMyMouseEventsFunction } from '../../../ui/elements/ripple-effect';\nimport { createContextMenu } from '../../../ui/menu/context-menu';\nimport Menu from '../../../ui/menu/menu';\nimport Toast, { addToast } from '../../../ui/dialog/toast';\nimport './history-to-down.scss';\nimport IconButton from '../../../ui/elements/icon-button';\nimport { chatListScrollToTopEvent } from './chat-folders';\nimport __ from '../../../language-pack/language-pack';\nimport { Chat } from './chat-list-item';\n\n/**\n * Returns a sorted list of all chats in the given chat list\n * \n * Also for every chat, sets `chat.position` to the matching position (creates copy instead of modifying original object)\n * @param {import('tdweb').TdObject[]} chats\n * @param {import('tdweb').TdObject} list\n */\nexport function getChatsFromList(chats, list) {\n    return chats.map(chat => { // Step 1 - get the chat positions which refer to the current list\n        for( const position of chat.positions ) {\n            if (compareChatList(list, position.list)) {\n                if( position.order=='0' ) return false; // Replace a chat without a suitable position with `false`\n                return {\n                    ...chat,\n                    position: position // Store the position in chat object\n                };\n            }\n        }\n        return chat;\n    })\n        .filter(chat => !!chat.position) // Step 2 - Remove `false` values (chats outside the list)\n        .sort((a, b) => { // Step 3 - Sort it by position.order\n            let order1= a.position.order, order2= b.position.order;\n\n            if (order1 == order2) {\n                return 0;\n            }\n            if (order1 < order2) {\n                return 1;\n            }\n            return -1;\n        });\n}\n\n/**\n * Renders the chats within a chat list\n */\nconst ChatList= connect(state=> ({connectionState: state}))(\n    class ChatList extends React.Component { \n        static propTypes = {\n            chats: PropTypes.array.isRequired,\n            list: PropTypes.object.isRequired,\n            connectionState: PropTypes.string.isRequired,\n            unread: PropTypes.object.isRequired,\n            selectedChat: PropTypes.number\n        }\n        state= {\n            scrollToTopVisible: false,\n            chatListFinished: false\n        }\n        scrollRef= React.createRef();\n\n        onScroll= (e) => {\n            const visible= e.target.scrollTop > 480;\n            if (visible != this.state.scrollToTopVisible) {\n                this.setState({scrollToTopVisible: visible});\n            }\n        }\n\n        // When updating, TDLib sends updates of type updateChatLastMessage, where only the last one is needed.\n        // This greatly hurts performance.\n        // However, we can workaround it by not re-rendering until all updates have arrived.\n        shouldComponentUpdate(nextProps, nextState) {\n            return (nextProps.chats !== this.props.chats \n                || nextProps.list !== this.props.list \n                || nextProps.unread !== this.props.unread\n                || nextProps.connectionState !== this.props.connectionState\n                || nextProps.selectedChat !== this.props.selectedChat\n                || nextState.scrollToTopVisible !== this.state.scrollToTopVisible\n                || nextState.chatListFinished !== this.state.chatListFinished)\n                && nextProps.connectionState != 'connectionStateUpdating'\n                && nextState.chatListFinished; // Do not re-render if updating\n        }\n\n        render() {\n            // Get chats from the list (this needs to be repeated on every modification)\n            const array= \n                getChatsFromList(this.props.chats, this.props.list)\n                    .map(chat=>\n                        <Chat key={chat.id} chat={chat} selected={this.props.selectedChat == chat.id}/>\n                    );\n            \n            return (\n                <React.Fragment>\n                    <ScrollView scrollRef={this.scrollRef} id=\"chat-list\" scrollBarWidth=\"4\" onScroll={this.onScroll}>\n                        {this.props.list['@type']=='chatListMain' && (\n                            <Provider store={chatStore}>\n                                <ArchivedChatsItem chats={this.props.chats}/>\n                            </Provider>\n                        )}\n                        <Provider store={usersStore}>\n                            {array.length ? array :  <EmptyChatList list={this.props.list} unread={this.props.unread}/>}\n                        </Provider>\n                    </ScrollView>\n                    <IconButton icon={history_to_down} onClick={this.scrollToTop}\n                        className={'history-to-down '+(this.state.scrollToTopVisible ? 'visible' : '')}/>\n                </React.Fragment>\n            );\n        }\n\n        scrollToTop= () => {\n            this.scrollRef.current?.view.scroll({\n                top: 0,\n                behavior: 'smooth',\n            });\n        }\n\n        componentDidMount() {\n            chatListScrollToTopEvent[0]= this.scrollToTop;\n            // Request TDLib to return chats in main list and archive list\n            TdLib.sendQuery({\n                '@type': 'loadChats',\n                'chat_list': {\n                    '@type': 'chatListMain'\n                },\n                'limit': 50\n            }).then(()=> {\n                this.setState({\n                    chatListFinished: true\n                });\n            });\n            TdLib.sendQuery({\n                '@type': 'loadChats',\n                'chat_list': {\n                    '@type': 'chatListArchive'\n                },\n                'limit': 50\n            });\n        }\n    }\n);\nexport default ChatList;\n\nconst ArchivedChatsItem= connect(state=> ({\n    archiveButtonState: state.archiveButtonState,\n    unread: state.unread.archive\n})) (function ArchivedChatsItem({chats, unread, archiveButtonState}) {\n    const chatsInList = getChatsFromList(chats, {'@type': 'chatListArchive'}); // Check if there are any archved chats\n    if(!chatsInList.length) return null; // If there are no archived chats, render nothing\n\n    // Ripple\n    const ripple= React.useState({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave]= handleMyMouseEventsFunction(ripple);\n\n    function onArchiveOpen() {\n        chatStore.dispatch({\n            type: 'SET_ARCHIVE_STATE',\n            archiveState: 'open'\n        });\n    }\n\n    // Change button type to collapsed/expanded/moved to main menu\n    function setButtonState(state) {\n        chatStore.dispatch({\n            type: 'SET_ARCHIVE_BUTTON_STATE',\n            archiveButtonState: state\n        });\n    }\n\n    const moveToMainMenuToast= <Toast>{__('lng_context_archive_to_menu_info')}</Toast>;\n\n    switch(archiveButtonState) {\n        case 'expanded': // Looks like a regular chat\n        default:\n            return (\n                <div \n                    className=\"chat archived\" onClick={onArchiveOpen}\n                    onMouseDown={mouseDown} onMouseUp={mouseUp} onMouseLeave={mouseLeave}\n                    onContextMenu={e=> createContextMenu(e, (\n                        <Menu.MenuContents>\n                            <Menu.MenuItem onClick={()=>{\n                                setButtonState('collapsed');\n                                localStorage.setItem('dibgram-archived-chats-button-mode', 'collapsed');\n                            }}>\n                                {__('lng_context_archive_collapse')}\n                            </Menu.MenuItem>\n                            <Menu.MenuItem onClick={()=>{\n                                setButtonState('hidden-expanded');\n                                localStorage.setItem('dibgram-archived-chats-button-mode', 'hidden-expanded');\n                                addToast(moveToMainMenuToast);\n                            }}>\n                                {__('lng_context_archive_to_menu')}\n                            </Menu.MenuItem>\n                        </Menu.MenuContents>\n                    ))}>\n                    <RippleEffect {...ripple[0]} color=\"var(--theme-color-dialogsRippleBg)\"/>\n                    <div className=\"content\">\n                        <div className=\"profile-photo\">\n                            <div className=\"svg\" dangerouslySetInnerHTML={{__html: archive_userpic}}/>\n                        </div>\n                        <div className=\"details\">\n                            <div className=\"top\">\n                                <div className=\"left\">\n                                    <div className=\"title\">{__('lng_archived_name')}</div>\n                                </div>\n                            </div>\n                            <div className=\"bottom\">\n                                <div className=\"left\">\n                                    <div className=\"last-message\">\n                                        <span className=\"part-1\">\n                                            {chatsInList\n                                                .filter(chat=> chat.unread_count > 0)\n                                                .map(chat => chatTitleOrDeletedAccount(chat) + ', ')\n                                                .join('')}\n                                        </span>\n                                        <span className=\"part-2\">\n                                            {chatsInList\n                                                .filter(chat=> chat.unread_count == 0)\n                                                .map(chatTitleOrDeletedAccount)\n                                                .join(', ')}\n                                        </span>\n                                    </div>\n                                </div>\n                                {unread.unread_messages_count? (\n                                    <div className=\"right\">\n                                        <span className=\"unread-badge muted\">{unread.unread_messages_count}</span>\n                                    </div>\n                                ) : null}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            );\n\n        case 'collapsed': // Only title / tiny icon\n            return (\n                <div\n                    className=\"chat archived collapsed\" onClick={onArchiveOpen}\n                    onMouseDown={mouseDown} onMouseUp={mouseUp} onMouseLeave={mouseLeave}\n                    onContextMenu={e=> createContextMenu(e, (\n                        <Menu.MenuContents>\n                            <Menu.MenuItem onClick={()=>{\n                                setButtonState('expanded');\n                                localStorage.setItem('dibgram-archived-chats-button-mode', 'expanded');\n                            }}>\n                                {__('lng_context_archive_expand')}\n                            </Menu.MenuItem>\n                            <Menu.MenuItem onClick={()=>{\n                                setButtonState('hidden-collapsed');\n                                localStorage.setItem('dibgram-archived-chats-button-mode', 'hidden-collapsed');\n                                addToast(moveToMainMenuToast);\n                            }}>\n                                {__('lng_context_archive_to_menu')}\n                            </Menu.MenuItem>\n                        </Menu.MenuContents>\n                    ))}>\n                    <RippleEffect {...ripple[0]} color=\"var(--theme-color-dialogsRippleBg)\"/>\n                    <div className=\"content\">\n                        {__('lng_archived_name')}\n                        {unread.unread_messages_count? (\n                            <div className=\"details\">\n                                <span className=\"unread-badge muted\">{unread.unread_messages_count}</span>\n                            </div>\n                        ) : null}\n                    </div>\n                </div>\n            );\n        case 'hidden-expanded': // Not here, it's in main menu\n        case 'hidden-collapsed':\n            return null;\n    }\n});\nArchivedChatsItem.propTypes = {\n    /** A list of all chats (not just current list) */\n    chats: PropTypes.array.isRequired\n};\n\n/** Renders the empty chat list fallback */\nfunction EmptyChatList({list, unread}) {\n    const loadingFallBack= (\n        <div className=\"empty\">\n            <div>{__('lng_profile_loading')}</div>\n        </div>\n    );\n    if(list['@type']=='chatListFilter'){ // Empty filter / Filter not loaded\n        if(unread.filters?.[list.chat_filter_id]?.total_chats_count !== 0) return loadingFallBack;\n        return (\n            <div className=\"empty\">\n                <div>{__('lng_no_chats_filter')}</div>\n                <LinkButton>{__('lng_filters_edit')}</LinkButton>\n            </div>\n        );\n    } else { // There are no chats at all / Chats not loaded\n        if(unread.main?.total_chats_count !== 0) return loadingFallBack;\n        return (\n            <div className=\"empty\">\n                <div>{__('lng_no_chats')}</div>\n                <LinkButton>{__('lng_add_contact_button')}</LinkButton>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './search-box.scss';\nimport { info_close } from '../../../../ui/icon/icons';\nimport __ from '../../../../language-pack/language-pack';\n\n/**\n * Renders the search box.\n */\nexport default function SearchBox(props) {\n    return (\n        <div id=\"search-box\">\n            <input \n                placeholder={__('lng_dlg_filter')}\n                value={props.value}\n                onChange={props.onChange}\n                {...props}/>\n            <button \n                className=\"clear\" \n                onClick={()=> props.onChange && props.onChange({target: {value: ''}})}\n                data-visible={(props.value || '').length}\n                dangerouslySetInnerHTML={{__html: info_close}}>\n            </button>\n        </div>\n    );\n}\nSearchBox.propTypes= {\n    value: PropTypes.string,\n    onChange: PropTypes.func\n};","import { createStore } from 'redux';\nimport TdLib from './tdlib';\n\nconst connectionStore = createStore(\n    (state = 'connectionStateConnecting', action) => {\n        switch (action.type) {\n            case 'SET_CONNECTION':\n                return  action.connection;\n            default:\n                return state;\n        }\n    }\n);\n\nTdLib.registerUpdateHandler('updateConnectionState', (update) => {\n    connectionStore.dispatch({\n        type: 'SET_CONNECTION',\n        connection: update.state['@type']\n    });\n});\nexport default connectionStore;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './nav-animation.scss';\n\n/**\n * Renders two navigation sections (outer and inner) with an animation between them\n * \n * You need to set a background color to the outer section. (it has the CSS class 'nav-animation-outer')\n */\nexport default function NavAnimation({ children, innerScreen, className, innerClass, state, mode, ...props }) {\n    return (\n        <div className={'nav-animation ' + mode + ' ' + state + ' ' + className} {...props}>\n            <div className=\"outer\">\n                {children}\n            </div>\n            {state!='closed' && \n                <div className={'inner ' + innerClass}>\n                    {innerScreen}\n                </div>\n            }\n        </div>\n    );\n}\nNavAnimation.propTypes = {\n    children: PropTypes.node.isRequired,\n    /**\n     * The type of animation to use:\n     * - `slide-over`: The parent screen swipes a little to left, while the child screen slides in from the right. \n     *   A shadow is also shown over the parent screen in the animation.\n     * - `swipe-fade`: More subtle animation, the parent screen fades out while moving left, while at the same time the child screen fades in from the right.\n     */\n    mode: PropTypes.oneOf(['slide-over', 'swipe-fade']),\n    /** The child screen content, only needed when open */\n    innerScreen: PropTypes.node,\n    /** The current state of the animation. Can be `open`, `closing` or `closed` */\n    state: PropTypes.oneOf(['open', 'closing', 'closed']),\n    /** The class name to apply to the outer element */\n    className: PropTypes.string,\n    /** The class name to apply to the inner element */\n    innerClass: PropTypes.string\n};\n\nexport function closeNavAnimation(getState, setState) {\n    // First set state to closing, which triggers the closing animation. After that, we can delete the element.\n    setState('closing');\n    setTimeout(() => {\n        if(getState() == 'closing') { // This condition is to prevent glitches when archive is opened again before 2s\n            setState('closed');\n        }\n    }, 2000);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect, Provider } from 'react-redux';\nimport ConnectionState from '../../../ui/components/connecting';\nimport ChatList from './chat-list';\nimport SearchBox from './search/search-box';\nimport HamburgerMenuButton from './hamburger-menu/menu-button';\nimport connectionStore from '../../../TdWeb/connectionStore';\nimport IconButton from '../../../ui/elements/icon-button';\nimport './chat-list-bar.scss';\nimport { info_back } from '../../../ui/icon/icons';\nimport chatStore from '../../chat-store';\nimport NavAnimation, { closeNavAnimation } from '../../../ui/elements/nav-animation';\nimport __ from '../../../language-pack/language-pack';\n\n/**\n * Renders the navigation menu, containing chat list, search field and search results [and the main menu button]\n */\nconst ChatListBar = connect(function (state) {\n    return {\n        useFolders: (state.filters || []).length != 0,\n        chats: state.chats, \n        list: state.currentChatList,\n        archiveState: state.archiveState,\n        unread: state.unread,\n        selectedChat: state.selectedChat,\n    };\n})(function ChatListBar({useFolders, chats, list, archiveState, unread, selectedChat, onHamburgerMenuOpened}) {\n    var [searchText, setSearchText] = React.useState('');\n    \n    function closeArchive() {\n        closeNavAnimation(() => chatStore.getState().archiveState,\n            state => {\n                chatStore.dispatch({\n                    type: 'SET_ARCHIVE_STATE',\n                    archiveState: state\n                });\n            }\n        );\n    }\n\n    return (\n        <React.Fragment>\n            <NavAnimation \n                mode=\"slide-over\" \n                id=\"chat-list-bar\"\n                state={archiveState}\n                innerClass=\"archived-chats\"\n                innerScreen={<ArchiveScreen chats={chats} closeArchive={closeArchive} selectedChat={selectedChat} unread={unread}/>}>\n                <div className=\"chat-list-header\">\n                    {(!useFolders) && <HamburgerMenuButton.WithoutFolders onClick={onHamburgerMenuOpened}/>}\n                    <SearchBox value={searchText} onChange={e => setSearchText(e.target.value)}/>\n                </div>\n                <Provider store={connectionStore}>\n                    <ChatList chats={chats} list={list} unread={unread} selectedChat={selectedChat}/>\n                </Provider>\n            </NavAnimation>\n            <Provider store={connectionStore}>\n                <ConnectionState/>\n            </Provider>\n        </React.Fragment>\n    );\n});\nexport default ChatListBar;\n\nfunction ArchiveScreen({unread, selectedChat, chats, closeArchive}) {\n    return (\n        <Provider store={connectionStore}>\n            <div className=\"chat-list-header\">\n                <IconButton icon={info_back} onClick={closeArchive}/>\n                {unread.main.unread_unmuted_messages_count? (\n                    <div className=\"unread-badge\">\n                        <span>{unread.main.unread_unmuted_messages_count}</span>\n                    </div>\n                ): null}\n                <div className=\"title\">{__('lng_archived_name')}</div>\n            </div>\n            <ChatList chats={chats} list={{'@type': 'chatListArchive'}} unread={unread} selectedChat={selectedChat}/>\n        </Provider>\n    );\n}\nArchiveScreen.propTypes = {\n    unread: PropTypes.object,\n    selectedChat: PropTypes.number,\n    chats: PropTypes.array,\n    closeArchive: PropTypes.func\n};\n","export default '0.0.2-beta3';","import React from 'react';\nimport PropTypes from 'prop-types';\nimport RippleEffect, {handleMyMouseEventsFunction} from '../elements/ripple-effect';\nimport './button.scss';\n\n/**\n * Renders a tool strip button. Has an icon and children, if provided will align to the right.\n */\nexport default function ToolStripButton({icon, text, children, hideIcon, ...rest}) {\n    const ripple = React.useState({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave]= handleMyMouseEventsFunction(ripple);\n    return (\n        <div className=\"tool-strip-button\" {...rest}\n            onMouseDown={mouseDown} onMouseUp={mouseUp} onMouseLeave={mouseLeave}>\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-windowBgRipple)\"/>\n            <div className=\"content\">\n                {(!hideIcon) && <div className=\"icon\" dangerouslySetInnerHTML={{__html: icon}}></div>} \n                <div className=\"title\">{text}</div>\n                {children && (\n                    <div className=\"right\">\n                        {children}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\nToolStripButton.propTypes = {\n    /** Icon HTML */\n    icon: PropTypes.string,\n    /** Button text */\n    text: PropTypes.string,\n    /** Optionally, an element to show aligned to right */\n    children: PropTypes.node,\n    /** If true, does not show the icon. This removes the space allocated to the icon. */\n    hideIcon: PropTypes.bool\n};","/**\n * There are 3 ways to import the items\n * 1. import each component from the respective file\n * 2. import each component from tool-strip.js\n * 3. import the default export from tool-strip.js and access the object members\n * You can use whichever you want.\n */\n\nimport ToolStripButton from './button';\nimport ToolStripSection from './section';\nimport ToolStripSeparator from './separator';\nimport ToolStripToggleButton from './toggle-button';\n\n/**\n * A collection of different components to create a generic menu.\n * \n * Contains sections, menu-items, two kinds of separators, switches, check-boxes, etc.s\n */\nconst ToolStrip = {\n    Button: ToolStripButton,\n    Section: ToolStripSection,\n    ToggleButton: ToolStripToggleButton,\n    Separator: ToolStripSeparator\n};\nexport default ToolStrip;\nexport { ToolStripButton, ToolStripSection, ToolStripToggleButton, ToolStripSeparator };\n","import React from 'react';\nimport './section.scss';\n\n/**\n * Renders a tool strip section. Use different sections when using separators.\n */\nexport default function Section(props) {\n    return <div className=\"tool-strip-section\" {...props}/>;\n}\n// Too simple for a separate file, no?","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ToolStripButton from './button';\nimport './toggle-button.scss';\n\nexport default function ToolStripToggleButton({icon, text, onChange, isActive, ...rest}) {\n    function toggle() {\n        onChange(!isActive);\n    }\n    return (\n        <ToolStripButton icon={icon} text={text} onClick={toggle} {...rest}>\n            <input type=\"checkbox\" className=\"toggle-button\" checked={isActive} readOnly/>\n        </ToolStripButton>\n    );\n}\nToolStripToggleButton.propTypes = {\n    /** HTML of the icon to display */\n    icon: PropTypes.string,\n    /** Button text */\n    text: PropTypes.string,\n    /** Callback when the button is toggled */\n    onChange: PropTypes.func,\n    /** the on/off state of the button */\n    isActive: PropTypes.bool\n};\n","import React from 'react';\r\nimport './separator.scss';\r\n\r\n/**\r\n * Renders a tool strip button. Has an icon and children, if provided will align to the right.\r\n */\r\nexport default function ToolStripSeparator(props) {\r\n    return (\r\n        <div className=\"tool-strip-separator\" {...props}/>\r\n    );\r\n}","// DIBgram themes are converted to CSS in runtime here.\n\nexport function convertThemeToCSS(theme){ // Convert theme colors to CSS vars\n    var css={};\n    for(const name in theme){\n        var obj= theme[name];\n        if(typeof obj.value == 'string') {\n            css['--theme-color-' + name]= obj.value;\n        } else if(typeof obj.value == 'object') { // A color is equal to another color\n            css['--theme-color-' + name]= `var(--theme-color-${obj.value.equals})`;\n        }\n    }\n    return css;\n}","import React from 'react';\nimport classic from './classic.json';\nimport day from './day.json';\nimport tinted from './tinted.json';\nimport night from './night.json';\nimport { convertThemeToCSS } from './dibgram-theme-to-css';\nimport { createStore } from 'redux';\nimport { connect } from 'react-redux';\nimport { getRtlMode } from '../../language-pack/language-pack';\n\nconst themes = { day, classic, tinted, night };\n\nfunction getThemeFromStorage() {\n    let theme = localStorage.getItem('dibgram-theme');\n    if (!theme) { // if theme is not set in localStorage, use OS theme\n        theme= window.matchMedia?.('(prefers-color-scheme: dark)').matches ? 'night' : 'day';\n        localStorage.setItem('dibgram-theme', theme);\n    }\n    return theme;\n}\n\nexport const themeStore = createStore(\n    (state = { \n        theme: getThemeFromStorage(),\n        rtl: getRtlMode()\n    }, action) => {\n        switch (action.type) {\n            case 'SET_THEME':\n                return { ...state, theme: action.theme };\n            case 'SET_RTL':\n                return { ...state, rtl: action.rtl };\n            default:\n                return state;\n        }\n    }\n);\n\n/**\n * All children of this component will be rendered with the theme. Can be treated as a div.\n */\nexport const ThemeProvider= connect(state=> state) (\n    // eslint-disable-next-line no-unused-vars\n    function ThemeProvider({ theme, rtl, dispatch, ...rest}) {\n        return (\n            <div dir={rtl ? 'rtl' : 'ltr'}\n                data-theme-is-dark={themes[theme].isDark.value}\n                {...rest} \n                style={convertThemeToCSS({...classic, ...themes[theme]})}\n            />\n        );\n    });\n\nexport function setTheme(theme) {\n    localStorage.setItem('dibgram-theme', theme);\n    themeStore.dispatch({ type: 'SET_THEME', theme });\n}\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport RippleEffect, { handleMyMouseEventsFunction } from '../elements/ripple-effect';\r\nimport { three_dots } from '../icon/icons';\r\nimport './three-dots-menu.scss';\r\nimport { getRtlMode } from '../../language-pack/language-pack';\r\n\r\nexport default function ThreeDotsMenu({children, ...rest}) {\r\n    const ripple= React.useState({state: 'off'});\r\n    const [onMouseDown, onMouseUp, onMouseLeave]= handleMyMouseEventsFunction(ripple);\r\n\r\n    const [visible, setVisible]= React.useState(false);\r\n\r\n    return (\r\n        <div className={'three-dots-menu ' + (rest.className || '')} onMouseLeave={e=> {\r\n            onMouseLeave(e);\r\n            setVisible(false);\r\n        }}>\r\n            <button className=\"icon-button\" onMouseDown={e=> {\r\n                onMouseDown(e);\r\n                setVisible(true);\r\n            }}>\r\n                <span dangerouslySetInnerHTML={{__html: three_dots}} />\r\n                <RippleEffect {...ripple[0]} color=\"var(--theme-color-windowBgOver)\" small={true}/>\r\n            </button>\r\n            {visible && <div className={'menu ' + (getRtlMode() ? 'br' : 'bl')} onClick={e=> {\r\n                onMouseUp(e);\r\n                setVisible(false);\r\n            }}>\r\n                {children}\r\n            </div>}\r\n        </div>\r\n    );\r\n}\r\nThreeDotsMenu.propTypes = {\r\n    children: PropTypes.node,\r\n};\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { info_close, title_search } from '../icon/icons';\nimport './search.scss';\nimport IconButton from '../elements/icon-button';\nimport __ from '../../language-pack/language-pack';\n\nexport default function BoxSearch({value, onChange}) {\n    return (\n        <div className=\"box-search\">\n            <span className=\"icon\" dangerouslySetInnerHTML={{__html: title_search}} />\n            <input type=\"text\" placeholder={__('lng_dlg_filter')} value={value} onChange={onChange} />\n            <IconButton icon={info_close} className=\"icon-button clear\" \n                onClick={()=> onChange && onChange({target: {value: ''}})}\n                data-visible={(value || '').length}/>\n        </div>\n    );\n}\nBoxSearch.propTypes = {\n    value: PropTypes.string,\n    onChange: PropTypes.func\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Dialog from '../../../ui/dialog/dialog';\nimport SmallButton from '../../../ui/elements/small-button';\nimport ScrollView from '../../../ui/scroll/scrollbar';\nimport RippleEffect, { handleMyMouseEventsFunction } from '../../../ui/elements/ripple-effect';\nimport BoxSearch from '../../../ui/dialog/search';\nimport __, { getCurrentLanguagePack } from '../../../language-pack/language-pack';\nimport TdLib from '../../../TdWeb/tdlib';\nimport './choose-language.scss';\nimport { addDialog } from '../../../ui/dialog/dialogs';\nimport ConfirmDialog from '../../../ui/dialog/confirm-dialog';\nimport ToolStrip from '../../../ui/tool-strip/tool-strip';\n\nexport default function ChooseLanguageDialog({id}) {\n    const ref = React.useRef();\n    var [languages, setLanguages] = React.useState([]);\n    const [search, setSearch] = React.useState('');\n    if(search.length > 0) {\n        languages = languages.filter(country => country.name.toLowerCase().startsWith(search.toLowerCase()));\n    }\n\n    React.useEffect(() => {\n        TdLib.sendQuery({\n            '@type': 'getLocalizationTargetInfo',\n            'only_local': false\n        }).then(response => {\n            setLanguages(response.language_packs);\n        });\n    }, []);\n\n    const currentPack= getCurrentLanguagePack();\n\n    return (\n        <Dialog ref={ref} id={id} width=\"320px\" className=\"confirm-dialog\">\n            <h1>{__('lng_languages')}</h1>\n\n            <BoxSearch value={search} onChange={(e) => setSearch(e.target.value)} />\n\n            <ScrollView scrollAlwaysVisible>\n                <ToolStrip.Section>\n                    {languages.map(pack => (\n                        <LanguagePack \n                            key={pack.id} \n                            pack={pack} \n                            onClick={()=> selectLanguage(pack)} \n                            selected={currentPack.id == pack.id}/>\n                    ))}\n                </ToolStrip.Section>\n            </ScrollView>\n\n            <div className=\"options\">\n                <SmallButton onClick={()=> {ref.current.close();}}>{__('lng_close')}</SmallButton>\n            </div>\n        </Dialog>\n    );\n}\nChooseLanguageDialog.propTypes = {\n    id: PropTypes.string.isRequired\n};\n\nexport function LanguagePack({pack, onClick, selected}) {\n    const ripple = React.useState({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave] = handleMyMouseEventsFunction(ripple);\n    return (\n        <div className=\"language-pack-item\" onClick={onClick} onMouseDown={mouseDown} onMouseUp={mouseUp} onMouseLeave={mouseLeave}>\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-windowBgRipple)\"/>\n            <div className=\"content\">\n                <input type=\"radio\" name=\"settings-language-pack-selector\" checked={selected}/>\n                <div className=\"right\">\n                    <div className=\"name\">{pack.native_name}</div>\n                    <div className=\"english-name\">{pack.name}</div>\n                </div>\n            </div>\n        </div>\n    );\n}\nLanguagePack.propTypes = {\n    pack: PropTypes.object.isRequired,\n    onClick: PropTypes.func,\n    selected: PropTypes.bool\n};\n\nfunction selectLanguage(pack) {\n    let cache= JSON.parse(localStorage.getItem('dibgram-special-language-strings-cache') || '{}');\n    let specialStringsImport;\n    if(!cache[pack.id] && pack.id!='en'){\n        specialStringsImport= import(`../../../language-pack/special-strings/${pack.id}.json`);\n    } else {\n        specialStringsImport= Promise.resolve(null);\n    }\n\n    function apply(){\n        specialStringsImport.then(specialStrings => {\n            if(!cache[pack.id] && pack.id!='en') {\n                cache[pack.id]= specialStrings.default;\n                localStorage.setItem('dibgram-special-language-strings-cache', JSON.stringify(cache));\n            }\n\n            localStorage.setItem('dibgram-active-language', JSON.stringify(pack));\n            window.location.reload();\n        });\n    }\n\n    TdLib.sendQuery({\n        '@type': 'getLanguagePackStrings',\n        language_pack_id: pack.id,\n        keys: [ 'lng_sure_save_language' ]\n    })\n        .then(response => {\n            addDialog('settings-language-restart-confirm-dialog', (\n                <ConfirmDialog id=\"settings-language-restart-confirm-dialog\"\n                    largeFont={true} onOK={apply}>\n\n                    {__('lng_sure_save_language')}\n                    <br/><br/>\n                    {response.strings[0].value.value}\n                </ConfirmDialog>\n            ));\n\n            TdLib.sendQuery({ // Request language pack strings so it is already cached after restart\n                '@type': 'getLanguagePackStrings',\n                language_pack_id: pack.id,\n            });\n        });\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from '../../../../ui/elements/icon-button';\nimport { info_back, info_close } from '../../../../ui/icon/icons';\nimport __, { _s__ } from '../../../../language-pack/language-pack';\nimport ToolStrip from '../../../../ui/tool-strip/tool-strip';\nimport { themeStore } from '../../../../ui/themes/theme';\nimport { getRtlMode } from '../../../../language-pack/language-pack';\n\nexport default function SettingsAdvanced({onClose, onBack}) {\n    const [enableRtl, setEnableRtl] = React.useState(localStorage.getItem('dibgram-allow-rtl-layout') == 'true');\n\n    return (\n        <React.Fragment>\n            <div className=\"header\">\n                <IconButton className=\"icon-button back\" icon={info_back} onClick={onBack} />\n                <h3 className=\"title\">{__('lng_settings_advanced')}</h3>\n                <IconButton className=\"icon-button close\" icon={info_close} onClick={onClose}/>\n            </div>\n            <ToolStrip.Section>\n                <ToolStrip.ToggleButton text={_s__('lngd_settings_advanced_rtl')} hideIcon={true} isActive={enableRtl} onChange={() => {\n                    setEnableRtl(!enableRtl);\n                    localStorage.setItem('dibgram-allow-rtl-layout', !enableRtl);\n                    themeStore.dispatch({type: 'SET_RTL', rtl: getRtlMode()});\n                }} />\n            </ToolStrip.Section>\n        </React.Fragment>\n    );\n}\nSettingsAdvanced.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    onBack: PropTypes.func.isRequired\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Dialog from '../../../ui/dialog/dialog';\r\nimport ToolStrip from '../../../ui/tool-strip/tool-strip';\r\nimport ScrollView from '../../../ui/scroll/scrollbar';\r\nimport TdLib from '../../../TdWeb/tdlib';\r\nimport { addDialog } from '../../../ui/dialog/dialogs';\r\nimport ConfirmDialog from '../../../ui/dialog/confirm-dialog';\r\nimport ThreeDotsMenu from '../../../ui/menu/three-dots-menu';\r\nimport Menu from '../../../ui/menu/menu';\r\nimport './settings-dialog.scss';\r\nimport { info_close, settings_advanced, settings_chat, settings_faq, settings_folders, settings_info, settings_language, settings_notifications, settings_privacy_security } from '../../../ui/icon/icons';\r\nimport ProfilePhoto from '../../../ui/components/profile-photo';\r\nimport IconButton from '../../../ui/elements/icon-button';\r\nimport options from '../../../TdWeb/options';\r\nimport { connect } from 'react-redux';\r\nimport { getUserFullName } from '../../user-misc';\r\nimport __ from '../../../language-pack/language-pack';\r\nimport ChooseLanguageDialog from './choose-language';\r\nimport NavAnimation, { closeNavAnimation } from '../../../ui/elements/nav-animation';\r\nimport SettingsAdvanced from './advanced/advanced';\r\n\r\nfunction Settings ({id, users}) {\r\n    const dialogRef = React.useRef();\r\n    const user= users[options['my_id']];\r\n    const [navState, setNavState] = React.useState('closed');\r\n    const [section, setSection] = React.useState(null);\r\n\r\n    function openSection(Section) {\r\n        setSection(<Section onClose={dialogRef.current.close} onBack={()=> {\r\n            closeNavAnimation(()=>navState, setNavState);\r\n        }}/>);\r\n        setNavState('open');\r\n    }\r\n\r\n    return (\r\n        <Dialog className=\"settings-dialog\" id={id} ref={dialogRef} width=\"392px\">\r\n            <NavAnimation className=\"dialog-content\" innerScreen={section} mode=\"swipe-fade\" state={navState}>\r\n                <div className=\"header\">\r\n                    <h3 className=\"title\">{__('lng_menu_settings')}</h3>\r\n                    <IconButton className=\"icon-button close\" icon={info_close} onClick={() => {\r\n                        dialogRef.current.close();\r\n                    }} />\r\n                    \r\n                    <ThreeDotsMenu className=\"more-options\">\r\n                        <Menu.MenuContents>\r\n                            <Menu.MenuItem>{__('lng_menu_add_account')}</Menu.MenuItem>\r\n                            <Menu.MenuItem>{__('lng_settings_information')}</Menu.MenuItem>\r\n                            <Menu.MenuItem onClick={() => {\r\n                                addDialog('log-out-from-main-menu-confirm-dialog',\r\n                                    <ConfirmDialog largeFont={true}\r\n                                        id=\"log-out-from-main-menu-confirm-dialog\"\r\n                                        OKButtonText={__('lng_settings_logout')} onOK={()=> {\r\n                                            TdLib.sendQuery({\r\n                                                '@type': 'logOut'\r\n                                            });\r\n                                        }} attention={true}>\r\n                                        {__('lng_sure_logout')}\r\n                                    </ConfirmDialog>\r\n                                );\r\n                            }}>{__('lng_settings_logout')}</Menu.MenuItem>\r\n                        </Menu.MenuContents>\r\n                    </ThreeDotsMenu>\r\n                </div>\r\n                <ScrollView scrollBarWidth=\"4\">\r\n                    <div className=\"scroll-content\">\r\n                        <ToolStrip.Section className=\"profile-info\">\r\n                            <ProfilePhoto id={options['my_id']} name={user ? getUserFullName(user) : ''} photo={user?.profile_photo?.small} disableSavedMessages={true}/>\r\n                            <span>\r\n                                <p className=\"name\">{user && getUserFullName(user)}</p>\r\n                                <p className=\"status\">{__('lng_status_online') /*TODO: Implement real status instead of a dummy 'online' */}</p>\r\n                            </span>\r\n                        </ToolStrip.Section>\r\n                        <ToolStrip.Separator/>\r\n                        <ToolStrip.Section>\r\n                            <ToolStrip.Button icon={settings_info} text={__('lng_settings_information')}/>\r\n                            <ToolStrip.Button icon={settings_notifications} text={__('lng_settings_section_notify')}/>\r\n                            <ToolStrip.Button icon={settings_privacy_security} text={__('lng_settings_section_privacy')}/>\r\n                            <ToolStrip.Button icon={settings_chat} text={__('lng_settings_section_chat_settings')}/>\r\n                            <ToolStrip.Button icon={settings_folders} text={__('lng_settings_section_filters')}/>\r\n                            <ToolStrip.Button icon={settings_advanced} text={__('lng_settings_advanced')} onClick={()=> openSection(SettingsAdvanced)}/>\r\n                            <ToolStrip.Button icon={settings_language} text={__('lng_settings_language')}\r\n                                onClick={()=>addDialog('settings-change-language-dialog', <ChooseLanguageDialog id=\"settings-change-language-dialog\"/>)}>\r\n                                <span className=\"value\">{__('lng_language_name')}</span>\r\n                            </ToolStrip.Button>\r\n                        </ToolStrip.Section>\r\n                        <ToolStrip.Separator/>\r\n                        <ToolStrip.Section>\r\n                            <ToolStrip.Button icon={settings_faq} text={__('lng_settings_faq')} onClick={() => window.open('https://telegram.org/faq')}/>\r\n                            <ToolStrip.Button text={__('lng_settings_ask_question')}/>\r\n                        </ToolStrip.Section>\r\n                    </div>\r\n                </ScrollView>\r\n            </NavAnimation>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nSettings.propTypes= {\r\n    /** Unique ID of this dialog, used to close it. */\r\n    id: PropTypes.any.isRequired,\r\n    users: PropTypes.any.isRequired\r\n};\r\n\r\nconst SettingsDialog = connect( (users)=> ({users}) ) (Settings);\r\nexport default SettingsDialog;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './menu.scss';\nimport TdLib from '../../../../TdWeb/tdlib';\nimport ProfilePhoto from '../../../../ui/components/profile-photo';\nimport { getChatsFromList } from '../chat-list';\nimport chatStore from '../../../chat-store';\nimport { archive_userpic, menu_new_channel, menu_new_group, menu_night_mode, menu_settings, settings_name, settings_phone_number } from '../../../../ui/icon/icons';\nimport { connect, Provider } from 'react-redux';\nimport { createContextMenu } from '../../../../ui/menu/context-menu';\nimport Menu from '../../../../ui/menu/menu';\nimport ScrollView from '../../../../ui/scroll/scrollbar';\nimport LinkButton from '../../../../ui/elements/link-button';\nimport version from '../../../../../version';\nimport Dialogs, { addDialog, dialogStore } from '../../../../ui/dialog/dialogs';\nimport ConfirmDialog from '../../../../ui/dialog/confirm-dialog';\nimport ToolStrip from '../../../../ui/tool-strip/tool-strip';\nimport { setTheme, themeStore } from '../../../../ui/themes/theme';\nimport SettingsDialog from '../../settings/settings-dialog';\nimport usersStore from '../../../users-store';\nimport options from '../../../../TdWeb/options';\nimport { getUserFullName } from '../../../user-misc';\nimport __, { _s__fmt, __fmt } from '../../../../language-pack/language-pack';\n\n/**\n * Renders the main menu (always rendered but not always visible)\n */\nconst HamburgerMenu= connect(state=> ({\n    chats: state.chats,\n    archiveButtonState: state.archiveButtonState,\n})) (\n    function HamburgerMenu ({visible, onClose, chats, archiveButtonState}) {\n        const [me, setMe] = React.useState(null);\n        React.useEffect(() => {\n            TdLib.sendQuery({ // Get current user info\n                '@type': 'getMe'\n            }).then(result => {\n                // Format phone number and put it in state\n                if(result.phone_number) {\n                    TdLib.sendQuery({\n                        '@type': 'getPhoneNumberInfo',\n                        phone_number_prefix: result.phone_number\n                    }).then(info => {\n                        // Format phone number\n                        if(info.country_calling_code){\n                            result.phone_number= `+${info.country_calling_code} ${info.formatted_phone_number}`;\n                        }\n                        setMe(result);\n                    });\n                } \n                else setMe(result);\n            });\n        }, []); // equivalent to componentDidMount\n\n        const [nightMode, setNightMode] = React.useState(['tinted', 'night'].includes(themeStore.getState().theme));\n\n        /**@type React.KeyboardEventHandler<HTMLDivElement> */\n        function onKeyDown (e){\n            // `Esc` closes the menu\n            if(e.key === 'Escape') {\n                onClose();\n            }\n        }\n        // Autofocus menu\n        var ref = React.useRef(null);\n        React.useEffect(() => {\n            if(visible) {\n                ref.current.focus();\n            }\n        }, [visible]);\n\n        // Get chats from archive to see if archive button should be shown\n        const showArchivedChats = getChatsFromList(chats, {'@type': 'chatListArchive'}).length > 0;\n\n        return (\n            <div id=\"hamburger-menu\" ref={ref} className={visible ? 'visible' : ''} \n                onKeyDown={onKeyDown} tabIndex={0}>\n                <div className=\"content\">\n                    <div className=\"header\">\n                        <div className=\"row-1\">\n                            <ProfilePhoto \n                                id={me?.id || 0} \n                                name={(me?.first_name || '') + (me?.last_name? (' ' + me.last_name) : '')} \n                                photo={me?.profile_photo?.small}\n                                disableSavedMessages={true}/>\n                            <div className=\"buttons\">\n                                {(showArchivedChats && (['hidden-collapsed', 'hidden-expanded'].includes(archiveButtonState))) && (\n                                    <button \n                                        className=\"button\" \n                                        dangerouslySetInnerHTML={{__html: archive_userpic}}\n                                        onClick={() => {\n                                            chatStore.dispatch({\n                                                type: 'SET_ARCHIVE_STATE',\n                                                archiveState: 'open'\n                                            });\n                                            onClose();\n                                        }}\n                                        onContextMenu={e=> createContextMenu(e, (\n                                            <Menu.MenuContents>\n                                                <Menu.MenuItem onClick={()=> {\n                                                    const newState= {'hidden-collapsed': 'collapsed', 'hidden-expanded': 'expanded'}[archiveButtonState];\n                                                    chatStore.dispatch({\n                                                        type: 'SET_ARCHIVE_BUTTON_STATE',\n                                                        archiveButtonState: newState\n                                                    });\n                                                    localStorage.setItem('dibgram-archived-chats-button-mode', newState);\n                                                    onClose();\n                                                }}>{__('lng_context_archive_to_list')}</Menu.MenuItem>\n                                            </Menu.MenuContents>\n                                        ))}/>\n                                )}\n                            </div>\n                        </div>\n                        <div className=\"row-2\">\n                            <div className=\"name\">\n                                {me && getUserFullName(me)}\n                            </div>\n                            <div className=\"phone-number\">\n                                {me?.phone_number}\n                            </div>\n                        </div>\n                    </div>\n                    <ScrollView scrollAlwaysVisible>\n                        <div className=\"scroll-content\">\n                            <div className=\"options\">\n                                <ToolStrip.Section>\n                                    <ToolStrip.Button icon={menu_new_group} text={__('lng_create_group_title')}/>\n                                    <ToolStrip.Button icon={menu_new_channel} text={__('lng_create_channel_title')}/>\n                                    <ToolStrip.Button icon={settings_name} text={__('lng_menu_contacts')}/>\n                                    <ToolStrip.Button icon={settings_phone_number} text={__('lng_menu_calls')}/>\n                                    <ToolStrip.Button icon={menu_settings} text={__('lng_menu_settings')} onClick={()=> {\n                                        onClose();\n                                        addDialog('full-settings-dialog',\n                                            <Provider store={usersStore}>\n                                                <SettingsDialog id=\"full-settings-dialog\" />\n                                            </Provider>\n                                        );\n                                    }}/>\n                                    <ToolStrip.ToggleButton icon={menu_night_mode} text={__('lng_menu_night_mode')} isActive={nightMode} onChange={(isNight)=> {\n                                        setNightMode(isNight);\n                                        setTheme(isNight ? 'night' : 'day');\n                                    }}/>\n                                </ToolStrip.Section>\n                            </div>\n                            <div className=\"about\">\n                                <div className=\"row-1\">\n                                    <LinkButton href=\"https://github.com/DIBgram/DIBgram\">DIBgram</LinkButton>\n                                </div>\n                                <div className=\"row-2\">\n                                    <LinkButton href=\"https://github.com/DIBgram/DIBgram/releases/\">{__fmt('lng_settings_current_version', {version})}</LinkButton> ­– <LinkButton onClick={()=> {\n                                        // About DIBgram\n                                        onClose();\n                                        addDialog('main-menu-about-dibgram-dialog', (\n                                            <ConfirmDialog id=\"main-menu-about-dibgram-dialog\"\n                                                width=\"390px\" title=\"DIBgram\" OKButtonText={__('lng_close')}\n                                                hideCancelButton={true}>\n\n                                                <LinkButton className=\"version link-button\"\n                                                    style={{color: 'var(--theme-color-windowSubTextFg)'}} \n                                                    href=\"https://github.com/DIBgram/DIBgram/releases/\">\n                                                        \n                                                    {_s__fmt('lngd_about_version', {\n                                                        version,\n                                                        tdlib: options['version']\n                                                    })}\n                                                </LinkButton>\n\n                                                <p>{_s__fmt('lngd_about_text1', {\n                                                    tdlib: <LinkButton href=\"https://core.telegram.org/tdlib\">TDLib</LinkButton>\n                                                })}</p>\n\n                                                <p>{__fmt('lng_about_text2', { //TODO: find out why it doesn't work\n                                                    gpl_link: <LinkButton href=\"https://github.com/DIBgram/DIBgram/blob/main/LICENSE\">GNU GPL</LinkButton>,\n                                                    github_link: <LinkButton href=\"https://github.com/DIBgram/DIBgram\">GitHub</LinkButton>\n                                                })}</p>\n\n                                                <p>{__fmt('lng_about_text3', {\n                                                    faq_link: <LinkButton href=\"https://telegram.org/faq\">{__('lng_about_text3_faq')}</LinkButton>\n                                                })}</p>\n                                            </ConfirmDialog>\n                                        ));\n                                    }}>\n                                        {__('lng_menu_about')}\n                                    </LinkButton>\n                                </div>\n                            </div>\n                        </div>\n                    </ScrollView>\n                </div>\n                <Provider store={dialogStore}>\n                    <Dialogs className=\"shadow\" onClick={onClose}/>\n                </Provider>\n            </div>\n        );\n    });\nHamburgerMenu.propTypes = {\n    visible: PropTypes.bool.isRequired,\n    onClose: PropTypes.func\n};\nexport default HamburgerMenu;\n","import React from 'react';\nimport TdApi from '../../../TdWeb/td_api';\nimport { timeToString } from '../../../time-tostring';\nimport { getIdColorCode } from '../../../ui/components/profile-photo';\nimport { bubble_tail, dialogs_sending, history_received, history_sent } from '../../../ui/icon/icons';\nimport { getChatNoCache } from '../../chat-store';\nimport { getMessageStatus } from '../../message-misc';\nimport { getUserFullName } from '../../user-misc';\n\nimport './message-containers.scss';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function ServiceMessage(props: { [key: string]: any }): JSX.Element {\n    return (\n        <div className=\"history-service-message\" {...props}/>\n    );\n}\n\ntype MessageBubbleProps= {\n    children: React.ReactNode | React.ReactNode[],\n    showTail?: boolean,\n}\nexport function MessageBubble({ children, showTail=true, ...rest}: MessageBubbleProps): JSX.Element {\n    return (\n        <div className={`bubble ${showTail ? 'has-tail' : ''}`} {...rest}>\n            {children}\n            {showTail && <span className=\"tail\" dangerouslySetInnerHTML={{__html: bubble_tail}}/>}\n        </div>\n    );\n}\n\n\ntype BubbleMessageProps= {\n    message: TdApi.td_message,\n    chat: TdApi.td_chat,\n    users: {[key: number]: TdApi.td_user},\n    children: React.ReactNode | React.ReactNode[],\n}\nexport function BubbleMessage({message, chat, users, children}: BubbleMessageProps): JSX.Element {\n    let sender= null;\n    let senderId= 0;\n    if(chat.type['@type'] === 'chatTypeSupergroup' && chat.type.is_channel) {\n        sender= chat.title;\n    } \n    else if(chat.type['@type'] === 'chatTypeSupergroup' || chat.type['@type'] === 'chatTypeBasicGroup') {\n        switch(message.sender['@type']) {\n            case 'messageSenderUser':\n                if(!message.is_outgoing) {\n                    sender= getUserFullName(users[message.sender.user_id]);\n                    senderId= getIdColorCode(message.sender.user_id);\n                }\n                break;\n            case 'messageSenderChat': {\n                const chat: TdApi.td_chat= getChatNoCache(message.sender.chat_id);\n                sender= chat.title;\n            }\n        }\n    }\n    return (\n        <div className={'history-message' + ((message.is_outgoing && !message.is_channel_post) ? ' outgoing' : '')}>\n            <MessageBubble>\n                {sender && <div className={`message-sender color_${senderId}`}>{sender}</div>}\n                {children}\n                <div className=\"after\"/>\n            </MessageBubble>\n        </div>\n    );\n}\n\ntype MessageFooterProps= {\n    message: TdApi.td_message,\n    chat: TdApi.td_chat,\n}\nexport function MessageFooter({message, chat}: MessageFooterProps): JSX.Element {\n    let tick= null;\n    switch(getMessageStatus(chat, message)) {\n        case 'sending':\n            tick= <span className=\"tick sending\" dangerouslySetInnerHTML={{__html: dialogs_sending}}/>;\n            break;\n        case 'sent':\n            tick= <span className=\"tick sent\" dangerouslySetInnerHTML={{__html: history_sent}}/>;\n            break;\n        case 'seen':\n            tick= <span className=\"tick seen\" dangerouslySetInnerHTML={{__html: history_received}}/>;\n    }\n    return (\n        <div className=\"footer\">\n            <div className=\"time\">{timeToString(message.date)}</div>\n            {(!message.is_channel_post) && tick}\n        </div>\n    );\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './title.scss';\nimport __, { __pl } from '../../../../language-pack/language-pack';\nimport ThreeDotsMenu from '../../../../ui/menu/three-dots-menu';\nimport Menu from '../../../../ui/menu/menu';\nimport options from '../../../../TdWeb/options';\nimport IconButton from '../../../../ui/elements/icon-button';\nimport { top_bar_group_call, top_bar_profile, top_bar_search } from '../../../../ui/icon/icons';\nimport { chatTitleOrDeletedAccount } from '../../../chat-misc';\nimport { lastSeenToString } from '../../../../time-tostring';\n\nexport default function TitleHeader(props) {\n    return (\n        <div className=\"title-bar\">\n            <div className=\"title-bar-left\">\n                <div className=\"title\">\n                    {options['my_id'] == props.chat.id && (__('lng_saved_messages'))}\n                    {options['replies_bot_chat_id'] == props.chat.id && (__('lng_replies_messages'))}\n                    {options['my_id'] != props.chat.id && options['replies_bot_chat_id'] != props.chat.id && (chatTitleOrDeletedAccount(props.chat))}\n                </div>\n                <SubText {...props}/>\n            </div>\n            <div className=\"title-bar-right\">\n                {/*TODO Missing item: Call button for private chats, depends on userFullInfo */}\n                {props.chat.video_chat.group_call_id != 0 && (\n                    <IconButton icon={top_bar_group_call} className=\"icon-button voice-chat\"/>\n                )}\n                <IconButton icon={top_bar_search}/>\n                <IconButton icon={top_bar_profile}/>\n                <ThreeDotsMenu>\n                    <Menu.MenuContents>\n                        {props.chat.can_be_reported && <Menu.MenuItem>{__('lng_report_button')}</Menu.MenuItem>}\n                    </Menu.MenuContents>\n                </ThreeDotsMenu>\n            </div>\n        </div>\n    );\n}\nTitleHeader.propTypes = {\n    chat: PropTypes.object.isRequired\n};\n\nfunction SubText({chat, user, basicGroup, supergroup}) {\n    if(supergroup) {\n        return (\n            <div className=\"info\">\n                {__pl(chat.type.is_channel ? 'lng_chat_status_subscribers' : 'lng_chat_status_members', supergroup.member_count)}\n            </div>\n        );\n    } \n    else if(basicGroup) {\n        return (\n            <div className=\"info\">\n                {__pl('lng_chat_status_members', basicGroup.member_count)}\n            </div>\n        );\n    } \n    else if(user)\n    {\n        if (chat.id == options['my_id'] || chat.id == options['replies_bot_chat_id']) {\n            return null;\n        }\n        if (chat.id == options['telegram_service_notifications_chat_id']) {\n            // Service notifications\n            return (\n                <div className=\"info\">\n                    {__('lng_status_service_notifications')}\n                </div>\n            );\n        }\n        if (user.is_support) {\n            return (\n                <div className=\"info\">\n                    {__('lng_status_support')}\n                </div>\n            );\n        }\n        if (user.type['@type'] == 'userTypeBot') {\n            return (\n                <div className=\"info\">\n                    {__('lng_status_bot')}\n                </div>\n            );\n        }\n\n        // In this case, He is a normal user, So app should show status\n        let status = lastSeenToString(user.status);\n        if (status == __('lng_status_online'))\n            return (<div className=\"info active\">{status}</div>);\n\n        return (<div className=\"info\">{status}</div>);\n    }\n\n    return null;\n}\nSubText.propTypes = {\n    chat: PropTypes.object.isRequired,\n    user: PropTypes.object,\n    basicGroup: PropTypes.object,\n    supergroup: PropTypes.object\n};\n","import {createStore} from 'redux';\nimport TdLib from '../TdWeb/tdlib';\n\nfunction reducer(state, action) {\n    switch (action.type) {\n        case 'UPD_BASIC_GROUP':\n            return {\n                ...state,\n                [action.basic_group.id]: action.basic_group\n            };\n        default:\n            return state;\n    }\n}\n\nconst basicGroupStore= createStore(reducer);\nexport default basicGroupStore;\n\nTdLib.registerUpdateHandler('updateBasicGroup', (update) => {\n    basicGroupStore.dispatch({\n        type: 'UPD_BASIC_GROUP',\n        basic_group: update.basic_group\n    });\n});","import React from 'react';\nimport './footer.scss';\n\nexport function ChatFooter() {\n\n    return (\n        <div className=\"footer\">\n            {/* TODO: Render different footers based on chat. (e.g. compose area, 'mute', 'unmute', 'unblock', etc.) Compose footer must be on a separate file. */}\n        </div>\n    );\n}","import React from 'react';\nimport TdApi from '../../../../TdWeb/td_api';\nimport withUsers from '../../../users-wrapper';\nimport { MessageProps } from '../message';\nimport { BubbleMessage, MessageFooter } from '../message-containers';\n\nexport default function MessageText({message, chat}: MessageProps): JSX.Element {\n    const messageContent= (message.content as TdApi.td_messageText);\n    \n    const BubbleMsg= withUsers(BubbleMessage);\n    return (\n        <BubbleMsg message={message} chat={chat}>\n            <div className=\"content\">\n                {messageContent.text.text}\n                <MessageFooter message={message} chat={chat}/>\n            </div>\n        </BubbleMsg>\n    );\n}","import React from 'react';\nimport usersStore from './users-store';\nimport { Provider, connect } from 'react-redux';\n/**\n * A React higher order component that provides the `users` prop to the wrapped component.\n */\nexport default function withUsers(Component) {\n    const WrappedComponent= connect(users => ({users}))(Component);\n    return function WithUsers(props) {\n        return (\n            <Provider store={usersStore}>\n                <WrappedComponent {...props} />\n            </Provider>\n        );\n    };\n}","import React from 'react';\nimport { _s__ } from '../../../../language-pack/language-pack';\nimport { MessageProps } from '../message';\nimport MessageText from './messageText';\n\nexport function MessageUnsupported({message, chat}: MessageProps): JSX.Element {\n    return (\n        <MessageText chat={chat} message={{\n            ...message,\n            content: {\n                '@type': 'messageText',\n                text: {\n                    '@type': 'formattedText',\n                    text: _s__('lngd_message_unsupported'),\n                    entities: [],\n                },\n            }\n        }}/>\n    );\n}","import React from 'react';\nimport TdApi from '../../../TdWeb/td_api';\nimport MessageText from './types/messageText';\nimport { MessageUnsupported } from './types/messageUnsupported';\n\nexport type MessageProps = {\n    message: TdApi.td_message;\n    chat: TdApi.td_chat;\n};\nexport const Message= React.memo(function Message({message, chat}: MessageProps): JSX.Element {\n    switch(message.content['@type']) {\n        case 'messageText':\n            return <MessageText chat={chat} message={message} />;\n        case 'messageUnsupported':\n        default:\n            return <MessageUnsupported chat={chat} message={message} />;\n    }\n});","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './history.scss';\nimport ScrollView from '../../../../ui/scroll/scrollbar';\nimport { Message } from '../../../message/ui/message';\nimport { connect } from 'react-redux';\nimport { loadChatHistory } from '../../../message/chat-history';\n\nexport const ChatHistory= connect(({messages, isLoaded}) => ({messages, isLoaded})) (function ChatHistory({chat, messages, isLoaded}) {\n    const array= [];\n    for(const id of Object.keys(messages).sort()) {\n        array.push(messages[id]);\n    }\n    if(array.length==0) {\n        array.push(chat.last_message);\n    }\n\n    const [loaded, setLoaded] = React.useState(false);\n    React.useEffect(() => {\n        if (!isLoaded) {\n            setTimeout(() => {\n                loadChatHistory(chat.id);\n            }, 100);\n        }\n        if ((!loaded) && isLoaded && array.length < 10) {\n            loadChatHistory(chat.id, array[0].id)\n                .then(count => {\n                    if (count == 0) {\n                        setLoaded(true); // If there are no more messages, then we are done loading\n                    }\n                });\n        }\n    }, [chat.id, isLoaded]);\n    React.useEffect(() => {\n        return () => {\n            setLoaded(false);\n        };\n    }, [chat.id]);\n    return (\n        <ScrollView className=\"history scrollbar\" scrollBarWidth={6}>\n            <div className=\"history-scroll-content\">\n                {array.map(message => <Message key={message.id} message={message} chat={chat}/>)}\n            </div>\n        </ScrollView>\n    );\n});\nChatHistory.propTypes = {\n    chat: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect, Provider } from 'react-redux';\nimport __ from '../../../language-pack/language-pack';\nimport { ServiceMessage } from '../../message/ui/message-containers';\nimport TitleHeader from './headers/title';\nimport './chat-section.scss';\nimport usersStore from '../../users-store';\nimport supergroupStore from '../../supergroup-store';\nimport basicGroupStore from '../../basic-group-store';\nimport { ChatFooter } from './footer/footer';\nimport { ChatHistory } from './history/history';\nimport { messageStores } from '../../message-stores';\nimport TdLib from '../../../TdWeb/tdlib';\n\nexport const ChatSection= \nconnect(({chats, selectedChat}) => ({chats, selectedChat})) (function ChatSection({chats, selectedChat}) {\n    let chat;\n    for(let c of chats) {\n        if(c.id === selectedChat) {\n            chat = c;\n            break;\n        }\n    }\n\n    if(!chat) return (\n        <div id=\"chat-section\" className=\"no-chat\">\n            <ServiceMessage>\n                {__('lng_willbe_history')}\n            </ServiceMessage>\n        </div>\n    );\n    switch(chat.type['@type']){\n        case 'chatTypePrivate':\n            return (\n                <Provider store={usersStore}>\n                    <ChatSectionContentWrapperPrivate chat={chat}/>\n                </Provider>\n            );\n        case 'chatTypeBasicGroup': \n            return (\n                <Provider store={basicGroupStore}>\n                    <ChatSectionContentWrapperBasicGroup chat={chat}/>\n                </Provider>\n            );\n        case 'chatTypeSupergroup':\n            return (\n                <Provider store={supergroupStore}>\n                    <ChatSectionContentWrapperSupergroup chat={chat}/>\n                </Provider>\n            );\n    }\n});\n\nconst ChatSectionContentWrapperPrivate= connect(users=>({users}))(\n    function ChatSectionContentWrapperPrivate({users, chat}) {\n        return <ChatSectionContentWrapper user={users[chat.type.user_id]} chat={chat}/>;\n    }\n);\n\nconst ChatSectionContentWrapperBasicGroup= connect(basicGroups=>({basicGroups}))(\n    function ChatSectionContentWrapperBasicGroup({basicGroups, chat}) {\n        return <ChatSectionContentWrapper basicGroup={basicGroups[chat.type.basic_group_id]} chat={chat}/>;\n    }\n);\n\nconst ChatSectionContentWrapperSupergroup= connect(supergroups=>({supergroups}))(\n    function ChatSectionContentWrapperSupergroup({supergroups, chat}) {\n        return <ChatSectionContentWrapper supergroup={supergroups[chat.type.supergroup_id]} chat={chat}/>;\n    }\n);\n\nfunction ChatSectionContentWrapper(props) {\n    React.useEffect(()=>{\n        TdLib.sendQuery({\n            '@type': 'openChat',\n            chat_id: props.chat.id\n        });\n        return ()=>{\n            TdLib.sendQuery({\n                '@type': 'closeChat',\n                chat_id: props.chat.id\n            });\n        };\n    }, [props.chat.id]);\n    return (\n        <div id=\"chat-section\">\n            <div className=\"headers\">\n                <TitleHeader {...props}/>\n            </div>\n            <Provider store={messageStores[props.chat.id]}>\n                <ChatHistory {...props}/>\n            </Provider>\n            <ChatFooter {...props}/>\n        </div>\n    );\n}\nChatSectionContentWrapper.propTypes = {\n    chat: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport ChatFoldersList from './sections/navigation-menu/chat-folders';\nimport ChatListBar from './sections/navigation-menu/chat-list-bar';\nimport chatStore from './chat-store';\nimport { connect, Provider } from 'react-redux';\nimport './messengerWindow.scss';\nimport HamburgerMenu from './sections/navigation-menu/hamburger-menu/menu';\nimport {Resizable} from 're-resizable';\nimport { ChatSection } from './sections/chat/chat-section';\n\n/**\n * Renders the messenger screen\n */\nexport const MessengerWindow= connect(({rtl})=>({rtl})) (function MessengerWindow ({rtl}) {\n\n    const [isMenuOpen, setIsMenuOpen] = React.useState(false);\n\n    return (\n        <div id=\"messenger-screen\">\n            <Provider store={chatStore}>\n                <HamburgerMenu visible={isMenuOpen} onClose={()=> setIsMenuOpen(false)}/>\n                <ChatFoldersList onHamburgerMenuOpened={()=> setIsMenuOpen(true)}/>\n                <Resizable defaultSize={{width: 260}} minWidth={260}\n                    className=\"chat-list-bar-container\" handleClasses={{right: 'chat-list-bar-resize-handle', left: 'chat-list-bar-resize-handle'}}\n                    enable={{top: false, right: !rtl, bottom: false, left: rtl, topRight: false, bottomRight: false, bottomLeft: false, topLeft: false}}>\n                    <ChatListBar onHamburgerMenuOpened={()=> setIsMenuOpen(true)}/>\n                </Resizable>\n                <div id=\"chat-container\">\n                    <ChatSection/>\n                </div>\n            </Provider>\n        </div>\n    );\n});","import TdLib from './tdlib';\nimport {getCredentials} from './config';\nimport {getUseTestDc} from './tdlib';\nimport version from '../../version';\n\nTdLib.registerUpdateHandler('updateAuthorizationState',function (update) {\n    const credentials= getCredentials();\n    const auth_state= update['authorization_state'];\n    \n    if(auth_state['@type']==='authorizationStateWaitEncryptionKey'){\n        TdLib.sendQuery({'@type': 'checkDatabaseEncryptionKey', 'encryption_key': ''});\n    }\n    if(auth_state['@type']==='authorizationStateWaitTdlibParameters'){\n        TdLib.sendQuery({\n            '@type': 'setTdlibParameters',\n            'parameters': {\n                'database_directory': 'tdlib',\n                'use_message_database': true,\n                'use_secret_chats': false,\n                'api_id': credentials.api_id,\n                'api_hash': credentials.api_hash,\n                'system_language_code': 'en',\n                'device_model': 'Web',\n                'application_version': version,\n                'enable_storage_optimizer': true,\n                'use_test_dc': getUseTestDc(),\n            }\n        });\n    }\n});\n\n/**\n * Provides functions to pass required authorization data to Telegram\n */\nexport default class Auth {\n    /**\n     * Pass phone number of the account to be logged in to\n     * @param {string} number The phone number the user entered\n     * @returns TdLib query result\n     */\n    static givePhoneNumber(number) {\n        return TdLib.sendQuery({'@type': 'setAuthenticationPhoneNumber', 'phone_number': number});\n    }\n    /**\n     * Pass authorization code the user has received\n     * @param {string} code The code the user entered\n     * @returns TdLib query result\n     */\n    static checkAuthCode(code) {\n        return TdLib.sendQuery({'@type': 'checkAuthenticationCode', 'code': code});\n    }\n    /**\n     * Pass 2FA password of the account\n     * @param {string} pass The password the user entered\n     * @returns TdLib query result\n     */\n    static check2FACode(pass) {\n        return TdLib.sendQuery({'@type': 'checkAuthenticationPassword', 'password': pass});\n    }\n    /**\n     * Sign up to Telegram\n     * @param {string} first The first name to be used in the new account\n     * @param {string} last Tha last name to be used in the new account\n     * @returns TdLib query result\n     */\n    static registerNewAccount(first, last) {\n        return TdLib.sendQuery({'@type': 'registerUser', 'first_name': first, 'last_name': last});\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport RippleEffect, {handleMyMouseEvents} from './ripple-effect';\n\n/**\n * Renders a BIG button which is filled with accent color\n */\nexport default class BigHighlightedButton extends React.Component{\n    static propTypes= {\n        /** Fires when the button is clicked */\n        onClick: PropTypes.func,\n        /** The button's content */\n        children: PropTypes.node.isRequired\n    };\n    state= {\n        ripple: {\n            state: 'off'\n        }\n    }\n    constructor() {\n        super();\n        [this.mouseDown, this.mouseUp, this.mouseLeave]= handleMyMouseEvents(this);\n    }\n\n    render () {\n        return (\n            <button \n                className=\"big-highlighted-button\" \n                onClick={this.props.onClick}\n                onMouseDown={this.mouseDown}\n                onMouseUp={this.mouseUp}\n                onMouseLeave={this.mouseLeave}>\n\n                <RippleEffect {...this.state.ripple} color=\"var(--theme-color-activeButtonBgRipple)\"/>\n                <div className=\"content\">\n                    {this.props.children}\n                </div>\n            </button>\n        );\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Renders a beautiful field with a title and underline\n */\nexport default class UnderlinedInput extends React.Component {\n    constructor(args) {\n        super(args);\n\n        this.state= {\n            inactive: false,\n            mouseX: '50%',\n            titleClass: this.getTitleClass(this.props.autoFocus)\n        };\n    }\n\n    getTitleClass (focus) {\n        return (focus || (!!this.props.value)) ? 'title top' : 'title placeholder';\n    }\n\n    render () {\n        var className='underlined-input';\n        if(this.state.inactive) {\n            className+=' inactive';\n        }\n        if(this.props.autoFocus) {\n            className+=' autoFocus';\n        }\n        if(this.props.invalid) {\n            className+=' invalid';\n        }\n        return (\n            <div className={className}\n                style={{'--mouse-left': this.state.mouseX || '50%'}}>\n                { this.props.title ? (\n                    <div className={this.state.titleClass}>{this.props.title}</div>\n                ) : null }\n                <input \n                    ref={this.props.iRef}\n                    type={this.props.type} \n                    onChange={this.props.onChange} \n                    value={this.props.value}\n                    onMouseDown={this.handleMouseDown}\n                    onFocus={this.handleFocus}\n                    onBlur={this.handleBlur}\n                    autoFocus={this.props.autoFocus || false}\n                    onKeyDown={this.handleKeyDown}\n                    maxLength={this.props.maxLength}\n                    onCopy={e=> {\n                        if(this.props.disableCopy) {\n                            e.preventDefault();\n                        }\n                    }}/>\n                <div className=\"underline\"></div>\n            </div>\n        );\n    }\n\n    handleFocus =()=>{\n        this.setState({\n            inactive: false,\n            titleClass: this.getTitleClass(true)\n        });\n    }\n    handleBlur =()=>{\n        this.setState({\n            inactive: true, \n            mouseX: '50%',\n            titleClass: this.getTitleClass(false)\n        });\n    }\n    handleMouseDown =(e)=>{\n        this.setState({\n            mouseX: e.nativeEvent.offsetX+'px'\n        });\n    }\n    handleKeyDown =(e)=>{\n        this.props.onKeyDown?.(e);\n        if(e.key=='Enter') {\n            this.props.onEnterKeyPressed && this.props.onEnterKeyPressed();\n        }\n        if(this.props.preventNumberScrolling) {\n            if(e.key=='ArrowUp' || e.key=='ArrowDown') {\n                e.preventDefault();\n            }\n        }\n    }\n\n}\nUnderlinedInput.propTypes = {\n    /** Input type, can be `text`, `number`, `tel`, `password`, `email`, `url` */\n    type: PropTypes.oneOf(['text', 'number', 'tel', 'password', 'email', 'url']).isRequired,\n    /** Fired when input is modified */\n    onChange: PropTypes.func,\n    /** Input value */\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    /** The maximum number of characters the input can have */\n    maxLength: PropTypes.number,\n    active: PropTypes.bool,\n    /** If set to true, the input will gain focus when it renders */\n    autoFocus: PropTypes.bool,\n    /** Fires when the 'Enter' key is pressed */\n    onEnterKeyPressed: PropTypes.func,\n    /** Input title/placeholder */\n    title: PropTypes.string,\n    /** If true, the input will become red */\n    invalid: PropTypes.bool,\n    /** If true, text cannot be copied from the input */\n    disableCopy: PropTypes.bool,\n    /** If true, up and down buttons cannot change input value */\n    preventNumberScrolling: PropTypes.bool,\n    /** `<input>` React ref */\n    iRef: PropTypes.object,\n    /** Fires when a key is pushed down while the element is in focus. */\n    onKeyDown: PropTypes.func\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Dialog from '../../../ui/dialog/dialog';\nimport SmallButton from '../../../ui/elements/small-button';\nimport ScrollView from '../../../ui/scroll/scrollbar';\nimport './country-select.scss';\nimport RippleEffect, { handleMyMouseEventsFunction } from '../../../ui/elements/ripple-effect';\nimport BoxSearch from '../../../ui/dialog/search';\nimport __ from '../../../language-pack/language-pack';\n\nexport default function CountrySelect({onChange, id, countries}) {\n    const ref = React.useRef();\n    \n    const [search, setSearch] = React.useState('');\n    if(search.length > 0) {\n        countries = countries.filter(country => country.name.toLowerCase().startsWith(search.toLowerCase()));\n    }\n\n    return (\n        <Dialog ref={ref} id={id} width=\"320px\" className=\"confirm-dialog\">\n            <h1>{__('lng_country_select')}</h1>\n\n            <BoxSearch value={search} onChange={(e) => setSearch(e.target.value)} />\n\n            <ScrollView scrollAlwaysVisible>\n                {countries.map(country => (country.is_hidden? null: (\n                    <CountrySelectItem key={country.country_code} country={country} onClick={ ()=>{\n                        onChange?.('+' + country.calling_codes[0]);\n                        ref.current.close();\n                    }}/>\n                )))}\n            </ScrollView>\n\n            <div className=\"options\">\n                <SmallButton onClick={()=> {ref.current.close();}}>{__('lng_close')}</SmallButton>\n            </div>\n        </Dialog>\n    );\n}\nCountrySelect.propTypes = {\n    onChange: PropTypes.func,\n    id: PropTypes.string.isRequired,\n    countries: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport function CountrySelectItem({country, onClick}) {\n    const ripple = React.useState({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave] = handleMyMouseEventsFunction(ripple);\n    return (\n        <div className=\"country-select-item\" onClick={onClick} onMouseDown={mouseDown} onMouseUp={mouseUp} onMouseLeave={mouseLeave}>\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-windowBgRipple)\"/>\n            <div className=\"content\">\n                <span className=\"name\">{country.english_name}</span>\n                <span className=\"codes\">{country.calling_codes.map(c=> '+' + c).join(', ')}</span>\n            </div>\n        </div>\n    );\n}\nCountrySelectItem.propTypes = {\n    country: PropTypes.object.isRequired,\n    onClick: PropTypes.func,\n};\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport Auth from '../../../TdWeb/auth';\nimport connectionStore from '../../../TdWeb/connectionStore';\nimport ConfirmDialog from '../../../ui/dialog/confirm-dialog';\nimport { addDialog } from '../../../ui/dialog/dialogs';\nimport BigHighlightedButton from '../../../ui/elements/highlighted-button';\nimport UnderlinedInput from '../../../ui/elements/underlined-input';\nimport { manageStatusTextContent } from '../../auth-screen';\nimport ConnectionState from '../../../ui/components/connecting';\nimport callingCodes from './phone-number-calling-codes.json';\nimport './phone-number.scss';\nimport CountrySelect from './country-select';\nimport TdLib from '../../../TdWeb/tdlib';\nimport { intro_country_dropdown } from '../../../ui/icon/icons';\nimport __ from '../../../language-pack/language-pack';\n\n/**\n * Renders the phone number step of authorization screen\n */\nexport default class AuthWindowStepPhoneNumber extends React.Component {\n    constructor(args) {\n        super(args);\n        manageStatusTextContent(this);\n    }\n    state= {\n        number: '',\n        number_p: '+',\n        invalid: false,\n        statusContent: '',\n        statusVisible: false,\n        dropDownText: '',\n        countries: [],\n    };\n\n    ref1= React.createRef();\n    ref2= React.createRef();\n\n    componentDidMount() {\n        TdLib.sendQuery({\n            '@type': 'getCountries',\n        }).then(result => {\n            this.setState({\n                countries: result.countries,\n            });\n        });\n    }\n\n\n    handlePNFieldChange = (event) => {\n        const value = event.target.value.replace(/[^0-9-]/g, '');\n        this.setState({\n            number: value,\n            invalid: false // We shouldn't show the phone number as invalid, since it has changed after submission\n        });\n        this.changeStatus(''); // The same\n    }\n\n    openCountryDropdown = () => {\n        addDialog('login-phone-number-country-selector-dialog', (\n            <CountrySelect id=\"login-phone-number-country-selector-dialog\"\n                countries={this.state.countries} onChange={cc=> {\n                    this.setState({\n                        number_p: cc,\n                        dropDownText: this.getCountryDropdownText(cc),\n                    });\n                }}/>\n        ));\n    }\n\n    getCountryDropdownText(callingCode) {\n        var countryName= __('lng_bad_country_code');\n        if(callingCode == '+') {\n            countryName= __('lng_country_code');\n        }\n        for(let country of callingCodes) {\n            if( callingCode.substr(1) == country.callingCode) {\n                countryName = country.name;\n                break;\n            }\n        }\n        return countryName;\n    }\n\n    handlePNFieldChange_p = (event) => {\n        var value = '+' + event.target.value.replace(/[^0-9-]/g, '');\n\n        if(value.length > 5) {\n            let length = 1;\n            for(let country of callingCodes) {\n                if(value.startsWith(country.callingCode, 1)) {\n                    length = country.callingCode.length+1;\n                    break;\n                }\n            }\n\n            let value_new = value.substr(0, length);\n            let rest= value.substr(length);\n\n            this.setState({\n                number_p: value_new,\n                number: rest + this.state.number,\n                invalid: false,\n                dropDownText: this.getCountryDropdownText(value_new)\n            });\n            this.ref2.current.focus();\n        }\n        else {\n            this.setState({\n                number_p: value,\n                dropDownText: this.getCountryDropdownText(value)\n            });\n        }\n\n        this.changeStatus('');\n    }\n\n    /** @param {React.SyntheticEvent<HTMLInputElement>} e */\n    handleKeyDown = (e) => { // Focus the previous field when the user presses the backspace key\n        if(e.nativeEvent.key === 'Backspace') {\n            if(this.state.number.length === 0) {\n                this.ref1.current.focus();\n            }\n        }\n    }\n\n    submitNumber= async () => {\n        const number = this.state.number_p + ' ' + this.state.number;\n        Auth.givePhoneNumber(number).catch(reason=> {\n            switch(reason.message){\n                case 'PHONE_NUMBER_FLOOD':\n                    addDialog( 'phone_number_flood_error',\n                        <ConfirmDialog width=\"320px\" hideCancelButton={true} largeFont={true} id=\"phone_number_flood_error\">\n                            {__('lng_error_phone_flood')}\n                        </ConfirmDialog>\n                    );\n                    this.changeStatus('');\n                    break;\n\n                case 'PHONE_NUMBER_INVALID':\n                    this.setState({invalid: true});\n                    this.changeStatus(__('lng_bad_phone'));\n                    break;\n\n                case 'Another authorization query has started': \n                    break;\n\n                default:\n                    // We don't know what error it is, so just show it to the user, he/she might understand it.\n                    this.setState({invalid: false});\n                    this.changeStatus(reason.message);\n                    break;\n            }\n        });\n    }\n    render () {\n        const Status=this.Status;\n        return (\n            <div id=\"auth\" className=\"auth-step-phoneNumber\">\n\n                <h2>{__('lng_phone_title')}</h2>\n\n                <p className=\"description\">\n                    {__('lng_phone_desc')}\n                </p>\n\n                {//TODO: Add phone number placeholder\n                }\n\n                <div className=\"country-dropdown\" onClick={this.openCountryDropdown}>\n                    {this.state.dropDownText || __('lng_country_code')}\n                    <span dangerouslySetInnerHTML={{__html: intro_country_dropdown}}/>\n                </div>\n\n                <div className=\"phone-number-input\">\n                    <UnderlinedInput\n                        iRef={this.ref1}\n                        type=\"tel\" \n                        value={this.state.number_p} \n                        autoFocus={true}\n                        onChange={this.handlePNFieldChange_p}\n                        onEnterKeyPressed={this.submitNumber}\n                        preventNumberScrolling={false}/>\n                    \n                    <UnderlinedInput\n                        iRef={this.ref2}\n                        type=\"tel\" \n                        value={this.state.number} \n                        onChange={this.handlePNFieldChange}\n                        onEnterKeyPressed={this.submitNumber}\n                        invalid={this.state.invalid}\n                        preventNumberScrolling={false}\n                        onKeyDown={this.handleKeyDown}/>\n                </div>\n\n                <Status/>\n\n                <BigHighlightedButton\n                    onClick={this.submitNumber}>\n                    {__('lng_intro_next')}\n                </BigHighlightedButton>\n\n                <Provider store={connectionStore}>\n                    <ConnectionState/>\n                </Provider>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { manageStatusTextContent } from '../../auth-screen';\nimport Auth from '../../../TdWeb/auth';\nimport UnderlinedInput from '../../../ui/elements/underlined-input';\nimport BigHighlightedButton from '../../../ui/elements/highlighted-button';\nimport { Provider } from 'react-redux';\nimport connectionStore from '../../../TdWeb/connectionStore';\nimport ConnectionState from '../../../ui/components/connecting';\nimport './verification-code.scss';\nimport __ from '../../../language-pack/language-pack';\n\n/**\n * Renders verification code step of authorization screen\n */\nexport default class AuthWindowStepCode extends React.Component {\n    static propTypes= {\n        info: PropTypes.object\n    };\n    constructor(args) {\n        super(args);\n        manageStatusTextContent(this);\n    }\n    state= {\n        code: '',\n        invalid: false,\n        statusContent: '',\n        statusVisible: false\n    };\n\n    handleCodeFieldChange= (event) => {\n        this.setState({\n            code: event.target.value,\n            invalid: false // Verification code is changed, and we don't know if it is correct or not. Do not show it as invalid anymore\n        });\n        this.changeStatus('');\n        if(event.target.value.length==this.props.info.type.length) { // Automatically submit code if it is filled in\n            this.handleContinueButton(event.target.value);\n        }\n    }\n    handleContinueButton= (code) => {\n        // `code` might be the authorization code, or an event object. If it is not the authorization code, get it ourselves\n        if(typeof code != 'string') {\n            code= undefined;\n        }\n        code = code || this.state.code;\n\n        if(code.length!=this.props.info.type.length) return; // The code is not complete. It is definitely wrong.\n\n        Auth.checkAuthCode(code).catch(reason=> {\n            if(reason.message==='PHONE_CODE_INVALID'){\n                this.setState({invalid: true});\n                this.changeStatus(__('lng_bad_code'));\n            }\n            else {\n                // We don't know the error, all we can do is to just inform the user about it\n                this.setState({invalid: true});\n                this.changeStatus(reason.message);\n            }\n        });\n    }\n    render () {\n        const Status = this.Status;\n\n        var message= (this.props.info.type['@type']=='authenticationCodeTypeSms') ?\n            (<p className=\"description\">{__('lng_code_desc')}</p>) \n            :\n            (<p className=\"description\">{__('lng_code_from_telegram')}</p>);\n            \n        return (\n            <div id=\"auth\" className=\"auth-step-code\">\n\n                <h2>{this.props.info.phone_number}</h2>\n\n                {message}\n\n                <UnderlinedInput\n                    type=\"number\" \n                    value={this.state.code} \n                    onChange={this.handleCodeFieldChange}\n                    autoFocus={true}\n                    title={__('lng_code_ph')}\n                    maxLength={this.props.info.type.length}\n                    onEnterKeyPressed={this.handleContinueButton}\n                    invalid={this.state.invalid}\n                    preventNumberScrolling={true}/>\n\n                <Status/>\n\n                <BigHighlightedButton\n                    onClick={this.handleContinueButton}>\n                    {__('lng_intro_next')}\n                </BigHighlightedButton>\n\n                <Provider store={connectionStore}>\n                    <ConnectionState/>\n                </Provider>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { manageStatusTextContent } from '../../auth-screen';\nimport Auth from '../../../TdWeb/auth';\nimport UnderlinedInput from '../../../ui/elements/underlined-input';\nimport LinkButton from '../../../ui/elements/link-button';\nimport BigHighlightedButton from '../../../ui/elements/highlighted-button';\nimport { Provider } from 'react-redux';\nimport connectionStore from '../../../TdWeb/connectionStore';\nimport ConnectionState from '../../../ui/components/connecting';\nimport './cloud-password.scss';\nimport __, { __fmt } from '../../../language-pack/language-pack';\n\n\n/**\n * Renders 2FA password step of authorization screen\n */\nexport default class AuthWindowStepPassword extends React.Component {\n    constructor(args) {\n        super(args);\n        manageStatusTextContent(this);\n    }\n    static propTypes= {\n        info: PropTypes.object\n    };\n    state= {\n        password: '',\n        invalid: false,\n        statusContent: '',\n        statusVisible: false\n    };\n    handlePasswordFieldChange= (event) => {\n        this.setState({\n            password: event.target.value,\n            invalid: false, // Password was changed, and we don't know if it is wrong or not. We should not show it as wrong\n        });\n        this.changeStatus(''); // Same\n    }\n    handleContinueButton= async () => {\n        Auth.check2FACode(this.state.password).catch(reason=> {\n            if(reason.message=='PASSWORD_HASH_INVALID') {\n                this.setState({invalid: true});\n                this.changeStatus(__('lng_signin_bad_password'));\n            }\n            else {\n                // We don't know what the error is, so all we can do is to show it to the user\n                this.setState({invalid: true});\n                this.changeStatus(reason.message);\n            }\n        });\n    }\n    render () {\n        const Status=this.Status;\n        return (\n            <div id=\"auth\" className=\"auth-step-password\">\n                <div className=\"content\">\n\n                    <h2>{__('lng_signin_title')}</h2>\n\n                    <p className=\"description\">{__('lng_signin_desc')}</p>\n\n                    <UnderlinedInput\n                        type=\"password\"\n                        value={this.state.password} \n                        onChange={this.handlePasswordFieldChange}\n                        autoFocus={true} \n                        title={__('lng_signin_password')}\n                        onEnterKeyPressed={this.handleContinueButton}\n                        disableCopy={true}\n                        invalid={this.state.invalid}/>\n\n                    <div className=\"hint\">\n                        {this.props.info.password_hint?__fmt('lng_signin_hint', {password_hint: this.props.info.password_hint}):<span>&nbsp;</span>}\n                    </div>\n\n                    <div className=\"forgot-password\">\n                        <LinkButton>{__('lng_signin_recover')}</LinkButton>\n                    </div>\n\n                    <Status/>\n\n                    <BigHighlightedButton \n                        onClick={this.handleContinueButton}>\n                        {__('lng_intro_submit')}\n                    </BigHighlightedButton>\n\n                </div>\n                <Provider store={connectionStore}>\n                    <ConnectionState/>\n                </Provider>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types'; \nimport RippleEffect, { handleMyMouseEventsFunction } from '../../../ui/elements/ripple-effect';\nimport { new_chat_photo } from '../../../ui/icon/icons';\nimport './signup-profile-photo.scss';\nimport { blobToUrl } from '../../../TdWeb/file';\n\nexport default function SignUpProfilePic({image, onChange}) {\n    const ripple= React.useState({state: 'off'});\n    const [onMouseDown, onMouseUp, onMouseLeave]= handleMyMouseEventsFunction(ripple);\n    return (\n        <div className={'icon-button sign-up-profile-pic' + (image? ' has-image' : '')} \n            {...{onMouseDown, onMouseUp, onMouseLeave}}>\n\n            {image && <img src={blobToUrl(image)} alt=\"profile\"/>}\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-activeButtonBgRipple)\" small={true}/>\n            <span dangerouslySetInnerHTML={{__html: new_chat_photo}} />\n            <label>\n                <input type=\"file\" accept=\"image/*\" onChange={onChange} />\n            </label>\n        </div>\n    );\n}\nSignUpProfilePic.propTypes = {\n    image: PropTypes.instanceOf(Blob),\n    onChange: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Provider } from 'react-redux';\nimport Auth from '../../../TdWeb/auth';\nimport connectionStore from '../../../TdWeb/connectionStore';\nimport ConfirmDialog from '../../../ui/dialog/confirm-dialog';\nimport { addDialog } from '../../../ui/dialog/dialogs';\nimport BigHighlightedButton from '../../../ui/elements/highlighted-button';\nimport UnderlinedInput from '../../../ui/elements/underlined-input';\nimport ConnectionState from '../../../ui/components/connecting';\nimport TdLib from '../../../TdWeb/tdlib';\nimport LinkButton from '../../../ui/elements/link-button';\nimport SignUpProfilePic from './signup-profile-photo';\nimport './register.scss';\nimport __, { __fmt } from '../../../language-pack/language-pack';\n\n/**\n * Render sign up step of authorization screen\n */\nexport default class AuthWindowStepRegister extends React.Component {\n    static propTypes= {\n        tos: PropTypes.object,\n    }\n    \n    state= {\n        firstName: '',\n        lastName: '',\n        statusContent: '',\n        statusVisible: false,\n        image: null,\n    };\n    handleFirstNameFieldChange= (event) => {\n        this.setState({firstName: event.target.value});\n    }\n    handleLastNameFieldChange= (event) => {\n        this.setState({lastName: event.target.value});\n    }\n    handleContinueButton= () => {\n        Auth.registerNewAccount(this.state.firstName, this.state.lastName).catch(reason=> {\n            this.setState({textUnderField: reason.message});\n        }).then(()=> {\n            if(this.state.image) {\n                TdLib.sendQuery({\n                    '@type': 'setProfilePhoto',\n                    photo: {\n                        '@type': 'inputChatPhotoStatic',\n                        photo: {\n                            '@type': 'inputFileBlob',\n                            data: this.state.image,\n                        }\n                    }\n                });\n            }\n        });\n    }\n\n    showTos= () => {\n        addDialog('signup-tos-dialog', (\n            <ConfirmDialog id=\"signup-tos-dialog\" width=\"364px\"\n                hideCancelButton={true} title={__('lng_terms_header')}>\n                \n                {this.props.tos.text.text}\n            </ConfirmDialog>\n        ));\n    }\n\n    render () {\n        return (\n            <div className=\"auth-container\">\n                <div id=\"auth\" className=\"auth-step-signup\">\n                    <div className=\"content\">\n\n                        <h2>{__('lng_signup_title')}</h2>\n\n                        <p className=\"description\">{__('lng_signup_desc')}</p>\n\n                        <SignUpProfilePic image={this.state.image} onChange={e=> this.setState({\n                            image: e.target.files[0]\n                        })}/>\n\n                        <UnderlinedInput\n                            type=\"text\" \n                            title={__('lng_signup_firstname')}\n                            value={this.state.firstName} \n                            onChange={this.handleFirstNameFieldChange}\n                            autoFocus={true} />\n\n                        <UnderlinedInput \n                            type=\"text\" \n                            title={__('lng_signup_lastname')}\n                            value={this.state.lastName} \n                            onChange={this.handleLastNameFieldChange} />\n\n                        <div className=\"status\">\n                            {this.state.textUnderField || ''}\n                        </div>\n\n                        <BigHighlightedButton\n                            onClick={this.handleContinueButton}>\n                            {__('lng_intro_finish')}\n                        </BigHighlightedButton>\n\n                    </div>\n                    <Provider store={connectionStore}>\n                        <ConnectionState/>\n                    </Provider>\n                </div>\n                <div className=\"tos-notice\">\n                    {__fmt('lng_terms_signup', {link: <LinkButton onClick={this.showTos}>{__('lng_terms_signup_link')}</LinkButton>})} \n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TdLib from '../TdWeb/tdlib';\nimport {MessengerWindow} from '../messenger/messengerWindow';\nimport Dialogs, { dialogStore } from '../ui/dialog/dialogs';\nimport './auth.scss';\nimport { connect, Provider } from 'react-redux';\nimport AuthWindowStepPhoneNumber from './auth-step/phone-number/phone-number';\nimport AuthWindowStepCode from './auth-step/verification-code/verification-code';\nimport AuthWindowStepPassword from './auth-step/cloud-password/cloud-password';\nimport AuthWindowStepRegister from './auth-step/register/register';\nimport { createStore } from 'redux';\nimport { themeStore } from '../ui/themes/theme';\nimport { _s__ } from '../language-pack/language-pack';\nimport LoadingSpinner from '../ui/elements/loading-spinner';\n\nexport const authStore = createStore((state= { 'state': null }, action) => {\n    switch (action.type) {\n        case 'SET_STATE':\n            return {\n                ...state,\n                'state': action.state\n            };\n        default:\n            return state;\n    }\n});\n\n/**\n * Start managing a status text block with fade effects.  \n * Usage:\n * ```js\n * // constructor\n * manageStatusTextContent(this);\n * \n * // render\n * <Status/>\n * \n * // TdLib.sendQuery({...}).then\n * this.changeStatus(\"Wrong code\")\n * \n * // state\n * {\n *   statusContent: '',\n *   statusVisible: false\n * }\n * ```\n * \n * @param {React.Component} thisClass pass `this` as this argument\n * @returns Store this function and call it to change \n */\nexport function manageStatusTextContent(thisClass) {\n    thisClass.Status= function Status(){\n        return (\n            <div className={'status'+ (thisClass.state.statusVisible?'':' hidden')}>{thisClass.state.statusContent}</div>\n        );\n    };\n    thisClass.changeStatus= function(string){\n        if(string) {\n            thisClass.setState({\n                statusContent: string,\n                statusVisible: true\n            });\n        } else {\n            thisClass.setState({\n                statusVisible: false\n            });\n            setTimeout(() => {\n                if(!thisClass.state.statusVisible) { // Prevent timeout overlapping with later status changes\n                    thisClass.setState({\n                        statusContent: null\n                    });\n                }\n            }, 1000);\n        }\n    };\n}\n\n/**\n * Renders the messenger or authorization screens (layer 1). Does not include dialogs and toasts\n */\nexport const MainApp= connect(state=> ({step: state.state}))(class MainApp extends React.Component {\n    static propTypes = {\n        step: PropTypes.object\n    };\n\n    componentDidMount(){\n        // Handle authorization state updates\n        TdLib.registerUpdateHandler('updateAuthorizationState', (update) => {\n            authStore.dispatch({\n                type: 'SET_STATE',\n                state: update.authorization_state\n            });\n        });\n    }\n\n    shouldComponentUpdate(nextProps) {\n        // Some authorization states are handled without the user knowing. We don't change what's shown to the users if that happens.\n        const states= [\n            'authorizationStateWaitPhoneNumber',\n            'authorizationStateWaitCode',\n            'authorizationStateWaitPassword',\n            'authorizationStateWaitRegistration',\n            'authorizationStateReady',\n            'authorizationStateClosed',\n        ];\n        if(states.includes(nextProps.step['@type'])) {\n            return true;\n        }\n        return false;\n    }\n    \n    render () {\n        switch (this.props.step?.['@type']) {\n            case 'authorizationStateWaitPhoneNumber':\n                // Enter your phone number\n                return (\n                    <React.Fragment>\n                        <Provider store={dialogStore}>\n                            <Dialogs/>\n                        </Provider>\n                        <AuthWindowStepPhoneNumber/>\n                    </React.Fragment>\n                );\n\n            case 'authorizationStateWaitCode':\n                // Enter the verification code sent to you\n                return (\n                    <React.Fragment>\n                        <Provider store={dialogStore}>\n                            <Dialogs/>\n                        </Provider>\n                        <AuthWindowStepCode info={this.props.step.code_info}/>\n                    </React.Fragment>\n                );\n\n            case 'authorizationStateWaitPassword':\n                // Enter your 2-factor auth password\n                return (\n                    <React.Fragment>\n                        <Provider store={dialogStore}>\n                            <Dialogs/>\n                        </Provider>\n                        <AuthWindowStepPassword info={this.props.step}/>\n                    </React.Fragment>\n                );\n\n            case 'authorizationStateWaitRegistration':\n                // There isn't an account on this number, you need to sign up\n                return (\n                    <React.Fragment>\n                        <Provider store={dialogStore}>\n                            <Dialogs/>\n                        </Provider>\n                        <AuthWindowStepRegister tos={this.props.step.terms_of_service}/>\n                    </React.Fragment>\n                );\n\n            case 'authorizationStateReady':\n                // Logged in\n                return (\n                    <Provider store={themeStore}>\n                        <MessengerWindow/>\n                    </Provider>\n                );\n\n            case 'authorizationStateClosed':\n                // TDLib session is closed.\n                window.location.reload();\n                return (\n                    <p>{_s__('lngd_auth_closed_restart')}</p>\n                );\n            \n            default:\n                // TDLib is still loading\n                return (\n                    <div id=\"auth\" className=\"loading\">\n                        <LoadingSpinner size={50} lineWidth={5} progressColor=\"var(--theme-color-menuIconFg)\"/>\n                    </div>\n                );\n        }\n    }\n});\n","import TdLib from './tdlib';\n\n/**\n * Sets initial online state\n */\nexport default function setInitialOnlineStatus(){\n    TdLib.sendQuery({\n        '@type': 'setOption',\n        name: 'online',\n        value: {\n            '@type': 'optionValueBoolean',\n            value: document.hasFocus()\n        }\n    });\n}\n\nwindow.onfocus = () => { // Become online when tab/window focuses\n    TdLib.sendQuery({\n        '@type': 'setOption',\n        name: 'online',\n        value: {\n            '@type': 'optionValueBoolean',\n            value: true\n        }\n    });\n};\n\nwindow.onblur = () => { // Become offline when switching tabs/windows\n    TdLib.sendQuery({\n        '@type': 'setOption',\n        name: 'online',\n        value: {\n            '@type': 'optionValueBoolean',\n            value: false\n        }\n    });\n};","import React from 'react';\nimport { Provider } from 'react-redux';\nimport {authStore, MainApp} from './dibgram/auth/auth-screen';\nimport { initLanguagePack } from './dibgram/language-pack/language-pack';\nimport setInitialOnlineStatus from './dibgram/TdWeb/online-handler';\nimport TdLib from './dibgram/TdWeb/tdlib';\nimport ConfirmDialog from './dibgram/ui/dialog/confirm-dialog';\nimport {addDialog} from './dibgram/ui/dialog/dialogs';\nimport { toastStore, Toasts } from './dibgram/ui/dialog/toast';\nimport './dibgram/ui/main.scss';\nimport { ContextMenus, contextMenusStore } from './dibgram/ui/menu/context-menu';\nimport { ThemeProvider, themeStore } from './dibgram/ui/themes/theme';\n\nTdLib.initializeTdLib().then(function () {\n    setInitialOnlineStatus();\n    initLanguagePack();\n});\n\nif(process.env.NODE_ENV== 'development') {\n    window['sendQuery']= TdLib.sendQuery;\n}\n\n/**\n * Renders the whole React app\n */\nfunction App() {\n    React.useEffect(() => { // A fatal error occurred in TdLib\n        TdLib.registerUpdateHandler('updateFatalError', window.simulateFatalError=  function (update) {\n            console.error('Fatal error:', update.error);\n            \n            addDialog( 'tdlib_fatal_error',\n                <ConfirmDialog \n                    width=\"400px\" \n                    hideCancelButton={true} \n                    id=\"tdlib_fatal_error\" \n                    thirdButton=\"Refresh\"\n                    onThirdButtonClick={window.location.reload.bind(window.location)}\n                    thirdButtonClosesDialog={false}\n                    title=\"Fatal Error\">\n                    \n                    A fatal error occurred in TdLib.<br/> \n                    Try refreshing, clearing site data or opening \n                    DIBgram in a private window. <br/>\n                    If none of these helped, report this to the developers \n                    by <a href=\"https://github.com/DIBgram/DIBgram/issues/new/choose\" rel=\"noreferrer\" target=\"_blank\"\n                        style={{color: 'var(--theme-color-windowActiveTextFg)'}}>filing an issue.</a>\n                    <br/><br/>\n                    <pre>{update.error.toString()}</pre>\n                </ConfirmDialog>\n            );\n        });\n    }, []);\n\n    return (\n        <Provider store={themeStore}>\n            <ThemeProvider id=\"app\">\n                <Provider store={toastStore}>\n                    <Toasts/>\n                </Provider>\n                <Provider store={authStore}>\n                    <MainApp/>\n                </Provider>\n                <Provider store={contextMenusStore}>\n                    <ContextMenus/>\n                </Provider>\n            </ThemeProvider>\n        </Provider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\n/* eslint-disable indent */\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import './remove-item-from-array';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}