{"version":3,"sources":["remove-item-from-array.js","dibgram/TdWeb/tdlib.js","dibgram/TdWeb/config.js","dibgram/auth/auth.js","dibgram/ui/elements/ripple-effect.js","dibgram/ui/elements/highlighted-button.js","dibgram/ui/elements/loading-spinner.js","dibgram/ui/components/connecting.js","dibgram/messenger/chat-filters.js","dibgram/messenger/ui/navigation-menu/hamburger-menu/menu-button.js","dibgram/ui/icon/chat_filters/chat-filters.js","dibgram/messenger/ui/navigation-menu/chat-folders.js","dibgram/messenger/ui/navigation-menu/navigation-menu.js","dibgram/messenger/messengerWindow.js","dibgram/ui/elements/underlined-input.js","dibgram/ui/dialog/dialogs.js","dibgram/ui/elements/small-button.js","dibgram/ui/dialog/confirm-dialog.js","dibgram/auth/ui.js","dibgram/ui/themes/dibgram-theme-to-css.js","dibgram/ui/themes/theme.js","App.js","index.js"],"names":["Array","prototype","remove","item","i","this","length","splice","TdLib","log","use_test_dc","log_updates","log_queries","TdClient","useDatabase","onUpdate","update","console","forEach","h","sendQuery","type","handler","undefined","push","query","send","registerUpdateHandler","credentials","api_id","api_hash","auth_state","Auth","number","code","pass","first","last","RippleEffect","Math","max","hypot","props","X","Y","width","height","state","className","style","getMaxRadius","backgroundColor","color","React","Component","BigHighlightedButton","ripple","mouseDown","e","setState","nativeEvent","offsetX","offsetY","target","clientWidth","clientHeight","mouseUp","setTimeout","mouseLeave","onClick","onMouseDown","onMouseUp","onMouseLeave","children","LoadingSpinner","percentage","percent","caps","trackColor","spin","transitionDuration","intervalNum","setInterval","clearInterval","size","PropTypes","isRequired","lineWidth","progressColor","string","ConnectionState","cState","handleUpdate","includes","unRegisterUpdateHandler","chatFiltersStore","createStore","action","payload","window","__REDUX_DEVTOOLS_EXTENSION__","chat_filters","dispatch","HamburgerMenuButton","id","chatFilerIcons","all","ChatFolder","active","dangerouslySetInnerHTML","__html","filters","folder","title","connect","folders","icon","map","NavMenu","useFolders","NavigationMenu","store","MessengerWindow","UnderlinedInput","args","handleFocus","inactive","titleClass","getTitleClass","handleBlur","mouseX","handleMouseDown","handleKeyDown","key","onEnterKeyPressed","autoFocus","focus","value","invalid","onChange","onFocus","onBlur","onKeyDown","maxLength","onCopy","disableCopy","preventDefault","dialogStore","dialog","filter","removeDialog","Wrapper","Dialogs","dialogs","el","element","SmallButton","ConfirmDialog","closing","handleOK","closeDialog","onOK","handleCancel","onCancel","hideCancelButton","OKButtonText","initialAuthState","setInitialAuthState","manageStatusTextContent","thisClass","Status","statusVisible","statusContent","changeStatus","MainApp","step","handleAuthStateUpdate","info","code_info","location","reload","AuthWindowStepPhoneNumber","handlePNFieldChange","event","submitNumber","a","givePhoneNumber","catch","reason","message","AuthWindowStepCode","handleCodeFieldChange","handleContinueButton","checkAuthCode","phone_number","AuthWindowStepPassword","password","handlePasswordFieldChange","check2FACode","document","body","password_hint","href","AuthWindowStepRegister","firstName","lastName","handleFirstNameFieldChange","handleLastNameFieldChange","registerNewAccount","textUnderField","convertThemeToCSS","theme","css","name","obj","equals","CurrentThemeCSS","isThemeDark","isDark","initializeTdLib","then","res","App","data-theme-is-dark","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1cbac777.chunk.js","sourcesContent":["// https://love2dev.com/blog/javascript-remove-from-array/#remove-from-array-splice\n/**\n * Removes an item from an array\n * @param {*} item The item to remove\n */\nArray.prototype.remove = function (item) {\n    for( var i = 0; i < this.length; i++){ \n        if ( this[i] === item) { \n            this.splice(i, 1); \n        }\n    }\n};\n\nexport default Array.prototype.remove;","import TdClient from 'tdweb';\nimport {getConfig} from './config';\nimport '../../remove-item-from-array';\n\n/**\n * Provides options to communicate with the Tdweb library\n */\nexport default class TdLib {\n    /** @type TdClient */\n    static #tdClient;\n    /** @type {[string: Array<Function>]} */\n    static #updateHandlers={};\n\n    /**\n     * Creates the instance of Tdweb\n     */\n    static async initializeTdLib() {\n        const {log}= getConfig();\n        TdLib.#tdClient= new TdClient({\n            useDatabase: true,\n            onUpdate: function (update) {\n                if(log.log_updates) {\n                    console.log('Update: ',update);\n                }\n                if(TdLib.#updateHandlers[update['@type']]){\n                    TdLib.#updateHandlers[update['@type']].forEach(h => h(update));\n                }\n            }\n        });\n        return await TdLib.sendQuery({'@type': 'getAuthorizationState'});\n    }\n\n    /**\n     * Listen for updates from TdLib\n     * @param {string} type The type of the update to listen to. Look for TdLib API docs for types\n     * @param {Function} handler The function that gets called with the update object when the update is received\n     */\n    static registerUpdateHandler(type, handler) {\n        if(TdLib.#updateHandlers[type]===undefined){\n            TdLib.#updateHandlers[type]= [];\n        }\n        TdLib.#updateHandlers[type].push(handler);\n    }\n\n    /**\n     * Remove an existing update handler\n     * @param {string} type The type of the update to remove handler from. Look for TdLib API docs for types\n     * @param {Function} handler The handler to remove\n     */\n    static unRegisterUpdateHandler(type, handler) {\n        if(TdLib.#updateHandlers[type]===undefined){\n            return;\n        }\n        TdLib.#updateHandlers[type].remove(handler);\n    }\n\n    /**\n     * Send a request to the TdLib instance\n     * If the query contains an `@extra` field, the same field will be added to the result\n     * @param {import('tdweb').TdObject} query The request to send. Consult TdLib & JSON interface API for help.\n     */\n    static sendQuery(query) {\n        const {log}= getConfig();\n        if(log.log_queries) {\n            console.log('Query: ',query);\n        }\n        return TdLib.#tdClient.send(query);\n    }\n}","export function getCredentials() {return {api_id: 3022678,api_hash: 'd7b7676a82906a6182f4a5e5e9555673'};}export function getConfig() {return {use_test_dc: false,log: {log_updates: true,log_queries: true}};}\n","import TdLib from '../TdWeb/tdlib';\nimport {getCredentials, getConfig} from '../TdWeb/config';\n\nTdLib.registerUpdateHandler('updateAuthorizationState',function (update) {\n    const credentials= getCredentials();\n    const auth_state= update['authorization_state'];\n    \n    if(auth_state['@type']==='authorizationStateWaitEncryptionKey'){\n        TdLib.sendQuery({'@type': 'checkDatabaseEncryptionKey', 'encryption_key': ''});\n    }\n    if(auth_state['@type']==='authorizationStateWaitTdlibParameters'){\n        TdLib.sendQuery({\n            '@type': 'setTdlibParameters',\n            'parameters': {\n                'database_directory': 'tdlib',\n                'use_message_database': true,\n                'use_secret_chats': true,\n                'api_id': credentials.api_id,\n                'api_hash': credentials.api_hash,\n                'system_language_code': 'en',\n                'device_model': 'Web',\n                'application_version': '0.0.1',\n                'enable_storage_optimizer': true,\n                'use_test_dc': getConfig().use_test_dc,\n            }\n        });\n    }\n});\n\n/**\n * Provides functions to pass required authorization data to Telegram\n */\nexport default class Auth {\n    /**\n     * Pass phone number of the account to be logged in to\n     * @param {string} number The phone number the user entered\n     * @returns TdLib query result\n     */\n    static async givePhoneNumber(number) {\n        return await TdLib.sendQuery({'@type': 'setAuthenticationPhoneNumber', 'phone_number': number});\n    }\n    /**\n     * Pass authorization code the user has received\n     * @param {string} code The code the user entered\n     * @returns TdLib query result\n     */\n    static async checkAuthCode(code) {\n        return await TdLib.sendQuery({'@type': 'checkAuthenticationCode', 'code': code});\n    }\n    /**\n     * Pass 2FA password of the account\n     * @param {string} pass The password the user entered\n     * @returns TdLib query result\n     */\n    static async check2FACode(pass) {\n        return await TdLib.sendQuery({'@type': 'checkAuthenticationPassword', 'password': pass});\n    }\n    /**\n     * Sign up to Telegram\n     * @param {string} first The first name to be used in the new account\n     * @param {string} last Tha last name to be used in the new account\n     * @returns TdLib query result\n     */\n    static async registerNewAccount(first, last) {\n        return await TdLib.sendQuery({'@type': 'registerUser', 'first_name': first, 'last_name': last});\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Adds a ripple effect to a button.\n * \n * Insert at the beginning of the button.\n * \n * **Note:** The button needs `position: relative;` and `overflow: hidden;`\n */\nexport default class RippleEffect extends React.Component {\n    static propTypes= {\n        /** \n         * - Change to `pressed` on `mouseDown`\n         * - Change to `released` on `mouseUp`\n         * - Change to `off` 1000ms after `mouseUp`\n         */\n        state: PropTypes.oneOf(['off', 'pressed', 'released']).isRequired,\n        X: PropTypes.number,\n        Y: PropTypes.number,\n        width: PropTypes.number,\n        height: PropTypes.number,\n        color: PropTypes.string.isRequired,\n    }\n\n    /** Gets the smallest radius that a circle, centered at click location, needs to fill the button */\n    getMaxRadius() {\n    //  It's a bit hard to understand. Let me explain:\n    //  \n    //  1. It calculates the coordinates relative to the 4 edges of the button ────╮\n    //  2. The diagonal distance to the edges are calculated using the             │\n    //      pythagoras rule, from the results of step 1            │               │\n    //  3. The biggest distance is selected and then returned.     │               │\n    //          │                                                  │               │\n    //  ╭───────┴──────╮  ╭────────────────────────────────────────╯               │        \n    //  │           ╭──┼──┴───╮                                                    │                  \n        return Math.max(//    │╭───────────────────────────────────────────────────┴──────────────╮\n            /* ┏ */ Math.hypot(this.props.X                     , this.props.Y),//                │ \n            /* ┓ */ Math.hypot(this.props.width - this.props.X  , this.props.Y),//                │\n            /* ┗ */ Math.hypot(this.props.X                     , this.props.height - this.props.Y), \n            /* ┛ */ Math.hypot(this.props.width - this.props.X  , this.props.height - this.props.Y), \n        );\n    }\n    render() {\n        if(this.props.state=='off') return null;\n        return (\n            <div\n                className={'ripple '+this.props.state}\n                style={{\n                    '--top': (this.props.Y || 0)+'px',\n                    '--left': (this.props.X || 0)+'px',\n                    '--radius': this.getMaxRadius()+'px',\n                    backgroundColor: this.props.color\n                }}/>\n        );\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport RippleEffect from './ripple-effect';\n\n/**\n * Renders a BIG button which is filled with accent color\n */\nexport default class BigHighlightedButton extends React.Component{\n    static propTypes= {\n        onClick: PropTypes.func,\n        children: PropTypes.node.isRequired\n    };\n    state= {\n        ripple: {\n            state: 'off'\n        }\n    }\n    /**@param e {React.SyntheticEvent} */\n    mouseDown= (e) => {\n        this.setState({\n            ripple: {\n                state: 'pressed',\n                X: e.nativeEvent.offsetX,\n                Y: e.nativeEvent.offsetY,\n                width: e.target.clientWidth,\n                height: e.target.clientHeight\n            }\n        });\n    }\n    mouseUp= () => {\n        this.setState({\n            ripple: { state: 'released' }\n        });\n        setTimeout(() => {\n            if(this.state.ripple.state=='released'){\n                this.setState({\n                    ripple: { state: 'off' }\n                });\n            }\n        }, 1000);\n    }\n    mouseLeave= () => {\n        if(this.state.ripple.state=='pressed') {\n            this.mouseUp();\n        }\n    }\n    render () {\n        return (\n            <button \n                className=\"big-highlighted-button\" \n                onClick={this.props.onClick}\n                onMouseDown={this.mouseDown}\n                onMouseUp={this.mouseUp}\n                onMouseLeave={this.mouseLeave}>\n\n                <RippleEffect {...this.state.ripple} color=\"var(--theme-color-activeButtonBgRipple)\"/>\n                <div className=\"content\">\n                    {this.props.children}\n                </div>\n            </button>\n        );\n    }\n}","import { ProgressRing } from 'progress-ring';\nimport 'progress-ring/src/styles.css';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Renders a spinner which in addition to spinning, also changes size.\n */\nexport default class LoadingSpinner extends React.Component {\n    static props= {\n        size: PropTypes.number.isRequired,\n        lineWidth: PropTypes.number.isRequired,\n        progressColor: PropTypes.string.isRequired\n    }\n    state= {\n        percentage: 10\n    }\n    render () {\n        return (\n            <div className=\"loading-spinner\">\n                <ProgressRing\n                    percent={this.state.percentage}\n                    caps='round'\n                    trackColor=\"transparent\"\n                    spin=\"true\"\n                    {...this.props}\n                    transitionDuration=\"2000\"/>\n            </div>\n        );\n    }\n\n    componentDidMount () {\n        this.intervalNum= setInterval(() => {\n            this.setState({\n                percentage: (90 - this.state.percentage)\n            });\n        }, 2000);\n    }\n\n    componentWillUnmount () {\n        clearInterval(this.intervalNum);\n    }\n}","import React from 'react';\nimport TdLib from '../../TdWeb/tdlib';\nimport LoadingSpinner from '../elements/loading-spinner';\n\n/**\n * Renders the connecting spinner at the bottom left corner, which is hidden when connected\n */\nexport default class ConnectionState extends React.Component {\n    state= {\n        cState: 'connectionStateReady',\n    }\n    render () {\n        return (\n            <div className={'connectionState'+(([\n                'connectionStateConnecting',\n                'connectionStateConnectingToProxy',\n                'connectionStateWaitingForNetwork'\n            ].includes(this.state.cState))? '' : ' connected')}>\n                <LoadingSpinner\n                    progressColor=\"var(--theme-color-menuIconFg)\"\n                    size=\"20\"\n                    lineWidth=\"2\"/>\n            </div>\n        );\n    }\n    handleUpdate = (update) => {\n        this.setState({\n            cState: update.state['@type']\n        });\n    }\n    componentDidMount () {\n        TdLib.registerUpdateHandler('updateConnectionState', this.handleUpdate);\n    }\n    componentWillUnmount () {\n        TdLib.unRegisterUpdateHandler('updateConnectionState', this.handleUpdate);\n    }\n\n}","import { createStore } from 'redux';\nimport TdLib from '../TdWeb/tdlib';\n\n/**\n * A Redux store which state contains an array of chat filters in the form used by TdLib\n */\nconst chatFiltersStore= createStore(reducer, \n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\n// eslint-disable-next-line no-unused-vars\nfunction reducer(state= [], action) {\n    if(action.type=='REPLACE_CHAT_FILTERS') {\n        return action.payload;\n    }\n}\n\nfunction onUpdateChatFilters(update) {\n    if(update.chat_filters) {\n        chatFiltersStore.dispatch({\n            type: 'REPLACE_CHAT_FILTERS',\n            payload: update.chat_filters\n        });\n    }\n}\nTdLib.registerUpdateHandler('updateChatFilters',onUpdateChatFilters);\n\nexport default chatFiltersStore;","import React from 'react';\n/**\n * Renders the button which opens the hamburger menu\n */\nexport default function HamburgerMenuButton() {\n    return (\n        <button id=\"hamburger-menu-button\">\n            <span></span><span></span><span></span>\n        </button>\n    );\n}","// All icons are from Telegram Desktop, converted to SVG using https://pngtosvg.com/\n\nimport raw from 'raw.macro';\n\nvar chatFilerIcons = {\n    all: [raw('./all.svg'), raw('./all_active.svg')]\n};\nexport default chatFilerIcons;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport filters from '../../../ui/icon/chat_filters/chat-filters';\n\n/**\n * Renders a chat folder button\n */\nfunction ChatFolder(props) {\n    return (\n        <li className={props.active ? 'active' : ''}>\n            <div className=\"icon\" dangerouslySetInnerHTML={{__html:filters.all[props.active+0]}}></div>\n            <div className=\"title\">{props.folder.title}</div>\n        </li>\n    );\n}\nChatFolder.propTypes= {\n    /** The folder object provided by TdLib */\n    folder: PropTypes.object,\n    /** A boolean indicating if the folder is currently selected */\n    active: PropTypes.bool\n};\nexport {ChatFolder};\n\n/**\n * Renders the chat folders list\n */\nfunction ChatFolderList(props) {\n    return (\n        <ul>\n            <ChatFolder active={true} folder={{\n                title: 'All chats',\n                icon: 'all'\n            }}/>\n            {props.folders.map(folder=><ChatFolder folder={folder} active={false} key={folder.id}/>)}\n        </ul>\n    );\n}\nChatFolderList.propTypes={\n    folders: PropTypes.arrayOf(PropTypes.object)\n};\nexport default connect(state=>({folders:state}))(ChatFolderList);","import React from 'react';\nimport { connect, Provider } from 'react-redux';\nimport ConnectionState from '../../../ui/components/connecting';\nimport chatFiltersStore from '../../chat-filters';\nimport HamburgerMenuButton from './hamburger-menu/menu-button';\nimport ChatFolderList from './chat-folders';\n\n\nconst NavMenu = connect(function (state) {\n    return {useFolders: (state||[]).length!=0};\n})(function NavMenu(props) {\n    if(props.useFolders) {\n        return (\n            <div id=\"navigation-menu\" className=\"uses-folders\">\n                <div id=\"chat-folders-list\">\n                    <HamburgerMenuButton/>\n                    <ChatFolderList/>\n                </div>\n                <div id=\"chat-list-container\">\n                    <ConnectionState/>\n                </div>\n            </div>\n        );\n    } else {\n        return (\n            <div id=\"navigation-menu\">\n\n            </div>\n        );\n    }\n});\n\n/**\n * Return Renders the navigation menu, containing chat list, search field and search results, chat folders and the hamburger menu\n */\nexport default function NavigationMenu() {\n    return (\n        <Provider store={chatFiltersStore}>\n            <NavMenu/>\n        </Provider>\n    );\n}","import React from 'react';\nimport TdLib from '../TdWeb/tdlib';\nimport BigHighlightedButton from '../ui/elements/highlighted-button';\nimport NavigationMenu from './ui/navigation-menu/navigation-menu';\n\n/**\n * Renders the messenger screen\n */\nexport function MessengerWindow () {\n    function logOut() {\n        TdLib.sendQuery({\n            '@type': 'logOut'\n        });\n    }\n    return (\n        <div id=\"messenger-screen\">\n            <NavigationMenu/>\n            <div id=\"chat-container\">\n                This is messenger window. You&apos;ve authenticated successfully!\n                <BigHighlightedButton onClick={logOut}>Log out</BigHighlightedButton>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Renders a beautiful field with a title and underline\n */\nexport default class UnderlinedInput extends React.Component {\n    constructor(args) {\n        super(args);\n\n        this.state= {\n            inactive: false,\n            mouseX: '50%',\n            titleClass: this.getTitleClass(this.props.autoFocus)\n        };\n    }\n\n    getTitleClass (focus) {\n        return (focus || (!!this.props.value)) ? 'title top' : 'title placeholder';\n    }\n\n    render () {\n        var className='underlined-input';\n        if(this.state.inactive) {\n            className+=' inactive';\n        }\n        if(this.props.autoFocus) {\n            className+=' autoFocus';\n        }\n        if(this.props.invalid) {\n            className+=' invalid';\n        }\n        return (\n            <div className={className}\n                style={{'--mouse-left': this.state.mouseX || '50%'}}>\n                { this.props.title ? (\n                    <div className={this.state.titleClass}>{this.props.title}</div>\n                ) : null }\n                <input \n                    type={this.props.type} \n                    onChange={this.props.onChange} \n                    value={this.props.value}\n                    onMouseDown={this.handleMouseDown}\n                    onFocus={this.handleFocus}\n                    onBlur={this.handleBlur}\n                    autoFocus={this.props.autoFocus || false}\n                    onKeyDown={this.handleKeyDown}\n                    maxLength={this.props.maxLength}\n                    onCopy={e=> {\n                        if(this.props.disableCopy) {\n                            e.preventDefault();\n                        }\n                    }}/>\n                <div className=\"underline\"></div>\n            </div>\n        );\n    }\n\n    handleFocus =()=>{\n        this.setState({\n            inactive: false,\n            titleClass: this.getTitleClass(true)\n        });\n    }\n    handleBlur =()=>{\n        this.setState({\n            inactive: true, \n            mouseX: '50%',\n            titleClass: this.getTitleClass(false)\n        });\n    }\n    handleMouseDown =(e)=>{\n        this.setState({\n            mouseX: e.nativeEvent.offsetX+'px'\n        });\n    }\n    handleKeyDown =(e)=>{\n        if(e.key=='Enter') {\n            this.props.onEnterKeyPressed && this.props.onEnterKeyPressed();\n        }\n    }\n\n    static propTypes = {\n        type: PropTypes.oneOf(['text', 'number', 'password', 'email', 'url']).isRequired,\n        onChange: PropTypes.func,\n        value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        maxLength: PropTypes.number,\n        active: PropTypes.bool,\n        autoFocus: PropTypes.bool,\n        onEnterKeyPressed: PropTypes.func,\n        title: PropTypes.string,\n        invalid: PropTypes.bool,\n        disableCopy: PropTypes.bool,\n    }\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport { createStore } from 'redux';\n\n/**\n * A redux store which state is an array of objects with {id: unique ID of dialog, element: react element of the dialog}\n */\nexport var dialogStore= createStore(\n    /**\n     * @param {any[]} state\n     * @param {Object} action\n     */\n    function (state= [], action) {\n        switch (action.type) {\n        case 'ADD_DIALOG':\n            return [\n                ...state,\n                action.dialog\n            ];\n        \n        case 'REMOVE_DIALOG':\n            return state.filter(value => value.id!=action.id);\n        \n        default:\n            break;\n        }\n    },\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\n/**\n * Opens a dialog\n * @param {string} id A unique ID for the dialog\n * @param {React.ReactElement} dialog The dialog React element\n */\nexport function addDialog(id, dialog) {\n    dialogStore.dispatch({\n        type: 'ADD_DIALOG',\n        dialog: {\n            element: dialog,\n            id: id\n        }\n    });\n}\n\n/**\n * Closes an existing dialog\n * @param {string} id The dialog unique ID\n */\nexport function removeDialog(id) {\n    dialogStore.dispatch({\n        type: 'REMOVE_DIALOG',\n        id: id\n    });\n}\n\nfunction Wrapper(props){\n    return props.children;\n}\n\n/**\n * Renders all dialogs.\n */\nconst Dialogs= (connect(function (state) {\n    return {dialogs: state || []};\n})(function (props) {\n    return props.dialogs.map(el => <Wrapper key={el.id}>{el.element}</Wrapper>) || null;\n}));\n\nexport default Dialogs;","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Renders a small button with accent color\n */\nexport default function SmallButton(props) {\n    return (\n        <button \n            className=\"small-button\" \n            {...props}>\n\n            {props.children}\n            \n        </button>\n    );\n}\nSmallButton.propTypes= {\n    children: PropTypes.node.isRequired\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SmallButton from '../elements/small-button';\nimport { removeDialog } from './dialogs';\n/**\n * Renders a modal dialog with a title and cancel and OK button. OK button text can be changed.\n */\nexport default class ConfirmDialog extends React.Component{\n    static propTypes= {\n        children: PropTypes.node.isRequired,\n        /** Dialog width in CSS format */\n        width: PropTypes.string,\n        /** Dialog header */\n        title: PropTypes.string,\n        /** Text content of the OK button*/\n        OKButtonText: PropTypes.string,\n        /** Pass true to only show the OK button */\n        hideCancelButton: PropTypes.bool,\n        /** Unique ID of this dialog, used to close it. */\n        id: PropTypes.any.isRequired,\n        /** Called when the OK button is pressed */\n        onOK: PropTypes.func,\n        /** Called when the cancel button is pressed */\n        onCancel: PropTypes.func\n    };\n    state= {\n        closing: false\n    }\n    handleOK =()=>{\n        this.closeDialog();\n        this.props.onOK && this.props.onOK();\n    }\n    handleCancel =()=>{\n        this.closeDialog();\n        this.props.onCancel && this.props.onCancel();\n    }\n    render() {\n        return (\n            <div className={'modal-dialog confirm-dialog' + ((this.state.closing) ? ' closing' : '')}>\n                <div style={{\n                    'width': this.props.width || 'auto'\n                }}>\n                    <h1>{this.props.title || ''}</h1>\n                    <div className=\"content\">\n                        {this.props.children}\n                    </div>\n                    <div className=\"options\">\n                        {this.props.hideCancelButton ? null : (\n                            <SmallButton onClick={this.handleCancel}>\n                                Cancel\n                            </SmallButton>\n                        )}\n                        <SmallButton onClick={this.handleOK}>\n                            {this.props.OKButtonText || 'OK'}\n                        </SmallButton>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n    \n    closeDialog= ()=>{\n        this.setState({\n            closing: true\n        });\n        setTimeout(() => {\n            removeDialog(this.props.id);\n        }, 1000);\n    }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TdLib from '../TdWeb/tdlib';\nimport Auth from './auth';\nimport {MessengerWindow} from '../messenger/messengerWindow';\n\nimport BigHighlightedButton from '../ui/elements/highlighted-button';\nimport UnderlinedInput from '../ui/elements/underlined-input';\nimport ConnectionState from '../ui/components/connecting';\nimport { addDialog } from '../ui/dialog/dialogs';\nimport ConfirmDialog from '../ui/dialog/confirm-dialog';\n\nvar initialAuthState = {'@type': undefined};\nexport function setInitialAuthState(state) {\n    initialAuthState=state;\n}\n\n/**\n * Start managing a status text block with fade effects.  \n * Usage:\n * ```js\n * manageStatusTextContent(this);\n * ```\n * \n * @param {React.Component} thisClass pass `this` as this argument\n * @returns Store this function and call it to change \n */\nfunction manageStatusTextContent(thisClass) {\n    thisClass.Status= function Status(){\n        return (\n            <div className={'status'+ (thisClass.state.statusVisible?'':' hidden')}>{thisClass.state.statusContent}</div>\n        );\n    };\n    thisClass.changeStatus= function(string){\n        if(string) {\n            thisClass.setState({\n                statusContent: string,\n                statusVisible: true\n            });\n        } else {\n            thisClass.setState({\n                statusVisible: false\n            });\n            setTimeout(() => {\n                thisClass.setState({\n                    statusContent: null\n                });\n            }, 1000);\n        }\n    };\n}\n\n/**\n * Renders the messenger or authorization screens. Does not include dialogs and toasts\n */\nexport class MainApp extends React.Component {\n    state= {\n        step: initialAuthState\n    };\n\n    componentDidMount(){\n        // eslint-disable-next-line no-func-assign\n        setInitialAuthState= state=> {\n            this.setState({step: state});\n        };\n\n        TdLib.registerUpdateHandler('updateAuthorizationState', this.handleAuthStateUpdate);\n    }\n\n    handleAuthStateUpdate= update => {\n        const states= [\n            'authorizationStateWaitPhoneNumber',\n            'authorizationStateWaitCode',\n            'authorizationStateWaitPassword',\n            'authorizationStateWaitRegistration',\n            'authorizationStateReady',\n            'authorizationStateClosed',\n        ];\n        const state=update['authorization_state'];\n        if(states.includes(state['@type'])) {\n            this.setState({step: state});\n        }\n    };\n    \n    render () {\n        switch (this.state.step['@type']) {\n        case 'authorizationStateWaitPhoneNumber':\n            return (\n                <AuthWindowStepPhoneNumber/>\n            );\n\n        case 'authorizationStateWaitCode':\n            return (\n                <AuthWindowStepCode info={this.state.step.code_info}/>\n            );\n\n        case 'authorizationStateWaitPassword':\n            return (\n                <AuthWindowStepPassword info={this.state.step}/>\n            );\n\n        case 'authorizationStateWaitRegistration':\n            return (\n                <AuthWindowStepRegister/>\n            );\n\n        case 'authorizationStateReady':\n            return (\n                <MessengerWindow/>\n            );\n\n        case 'authorizationStateClosed':\n            window.location.reload();\n            return (\n                <p>This session is closed. Please wait till DIBgram reloads automatically...</p>\n            );\n        \n        default:\n            return <p>Loading...</p>;\n        }\n    }\n}\n\n/**\n * Renders the phone number step of authorization screen\n */\nclass AuthWindowStepPhoneNumber extends React.Component {\n    constructor(args) {\n        super(args);\n        manageStatusTextContent(this);\n    }\n    state= {\n        number: '',\n        invalid: false,\n        statusContent: '',\n        statusVisible: false\n    };\n    handlePNFieldChange = (event) => {\n        this.setState({\n            number: event.target.value,\n            invalid: false\n        });\n        this.changeStatus('');\n    }\n    submitNumber= async () => {\n        Auth.givePhoneNumber(this.state.number).catch(reason=> {\n            switch(reason.message){\n            case 'PHONE_NUMBER_FLOOD':\n                addDialog( 'phone_number_flood_error',\n                    <ConfirmDialog width=\"320px\" hideCancelButton={true} id=\"phone_number_flood_error\">\n                        Sorry, you have deleted and re-created your account too many times recently.<br/>\n                        Please wait for a few days before signing up again.\n                    </ConfirmDialog>\n                );\n                this.changeStatus('');\n                break;\n            case 'PHONE_NUMBER_INVALID':\n                this.setState({invalid: true});\n                this.changeStatus('Invalid phone number. Please try again.');\n                \n                break;\n            case 'Another authorization query has started': \n                break;\n            default:\n                this.setState({invalid: false});\n                this.changeStatus(reason.message);\n                break;\n            }\n        });\n    }\n    render () {\n        const Status=this.Status;\n        return (\n            <div id=\"auth\" className=\"auth-step-phoneNumber\">\n\n                <h2>Your Phone Number</h2>\n\n                <p className=\"description\">\n                    Please confirm your country code and enter your mobile phone number.\n                </p>\n\n                <UnderlinedInput \n                    type=\"text\" \n                    value={this.state.number} \n                    autoFocus={true}\n                    onChange={this.handlePNFieldChange}\n                    onEnterKeyPressed={this.submitNumber}\n                    invalid={this.state.invalid}/>\n\n                <Status/>\n\n                <BigHighlightedButton \n                    onClick={this.submitNumber}>\n                    NEXT\n                </BigHighlightedButton>\n\n                <ConnectionState/>\n            </div>\n        );\n    }\n}\n\n/**\n * Renders verification code step of authorization screen\n */\nclass AuthWindowStepCode extends React.Component {\n    static propTypes= {\n        info: PropTypes.object\n    };\n    constructor(args) {\n        super(args);\n        manageStatusTextContent(this);\n    }\n    state= {\n        code: '',\n        invalid: false,\n        statusContent: '',\n        statusVisible: false\n    };\n    handleCodeFieldChange= (event) => {\n        this.setState({\n            code: event.target.value,\n            invalid: false\n        });\n        this.changeStatus('');\n        if(event.target.value.length==this.props.info.type.length) {\n            this.handleContinueButton(event.target.value);\n        }\n    }\n    handleContinueButton= (code) => {\n        if(typeof code != 'string') {\n            code= undefined;\n        }\n        code = code || this.state.code;\n        if(code.length!=this.props.info.type.length) return;\n\n        Auth.checkAuthCode(code).catch(reason=> {\n            if(reason.message==='PHONE_CODE_INVALID'){\n                this.setState({invalid: true});\n                this.changeStatus('You have entered an invalid code.');\n            }\n            else {\n                this.setState({invalid: true});\n                this.changeStatus(reason.message);\n            }\n        });\n    }\n    render () {\n        const Status = this.Status;\n\n        var message= (this.props.info.type['@type']=='authenticationCodeTypeSms') ?\n            (<p className=\"description\">\n                A code was sent <strong>via SMS</strong> to your phone number.\n            </p>) \n            :\n            (<p className=\"description\">\n                A code was sent <strong>via Telegram</strong> to your other devices, if you have any connected.\n            </p>);\n            \n        return (\n            <div id=\"auth\" className=\"auth-step-code\">\n\n                <h2>{this.props.info.phone_number}</h2>\n\n                {message}\n\n                <UnderlinedInput \n                    type=\"text\" \n                    value={this.state.code} \n                    onChange={this.handleCodeFieldChange}\n                    autoFocus={true}\n                    title=\"Code\"\n                    maxLength={this.props.info.type.length}\n                    onEnterKeyPressed={this.handleContinueButton}\n                    invalid={this.state.invalid}/>\n\n                <Status/>\n\n                <BigHighlightedButton \n                    onClick={this.handleContinueButton}>\n                    NEXT\n                </BigHighlightedButton>\n\n                <ConnectionState/>\n            </div>\n        );\n    }\n}\n\n/**\n * Renders 2FA password step of authorization screen\n */\nclass AuthWindowStepPassword extends React.Component {\n    constructor(args) {\n        super(args);\n        manageStatusTextContent(this);\n    }\n    static propTypes= {\n        info: PropTypes.object\n    };\n    state= {\n        password: '',\n        invalid: false,\n        statusContent: '',\n        statusVisible: false\n    };\n    handlePasswordFieldChange= (event) => {\n        this.setState({\n            password: event.target.value,\n            invalid: false,\n        });\n        this.changeStatus('');\n    }\n    handleContinueButton= async () => {\n        Auth.check2FACode(this.state.password).catch(reason=> {\n            if(reason.message=='PASSWORD_HASH_INVALID') {\n                this.setState({invalid: true});\n                this.changeStatus('You have entered a wrong password.');\n            }\n            else {\n                this.setState({invalid: true});\n                this.changeStatus(reason.message);\n            }\n        });\n    }\n    render () {\n        const Status=this.Status;\n        return (\n            <div id=\"auth\" className=\"auth-step-password\">\n                <div className=\"content\">\n\n                    <h2>Cloud password check</h2>\n\n                    <p className=\"description\">\n                        Please enter your cloud password.\n                    </p>\n\n                    <UnderlinedInput \n                        type={'webkitTextSecurity' in document.body.style ? 'text' : 'password'} \n                        value={this.state.password} \n                        onChange={this.handlePasswordFieldChange}\n                        autoFocus={true} \n                        title=\"Your cloud password\"\n                        onEnterKeyPressed={this.handleContinueButton}\n                        disableCopy={true}\n                        invalid={this.state.invalid}/>\n\n                    <div className=\"hint\">\n                        {this.props.info.password_hint?'Hint: ':<span>&nbsp;</span>}{this.props.info.password_hint}\n                    </div>\n\n                    <div className=\"forgot-password\">\n                        <a href=\"#\">Forgot password?</a>\n                    </div>\n\n                    <Status/>\n\n                    <BigHighlightedButton \n                        onClick={this.handleContinueButton}>\n                        SUBMIT\n                    </BigHighlightedButton>\n\n                    <ConnectionState/>\n                </div>\n            </div>\n        );\n    }\n}\n\n/**\n * Render sign up step of authorization screen\n */\nclass AuthWindowStepRegister extends React.Component {\n    state= {\n        firstName: '',\n        lastName: '',\n        statusContent: '',\n        statusVisible: false\n    };\n    handleFirstNameFieldChange= (event) => {\n        this.setState({firstName: event.target.value});\n    }\n    handleLastNameFieldChange= (event) => {\n        this.setState({lastName: event.target.value});\n    }\n    handleContinueButton= async () => {\n        await Auth.registerNewAccount(this.state.firstName, this.state.lastName).catch(reason=> {\n            this.setState({textUnderField: reason.message});\n        });\n    }\n    render () {\n        return (\n            <div id=\"auth\" className=\"auth-step-signup\">\n                <div className=\"content\">\n\n                    <h2>Your info</h2>\n\n                    <p className=\"description\">\n                        Please enter your name and upload a photo.\n                    </p>\n\n                    <UnderlinedInput \n                        type=\"text\" \n                        value={this.state.firstName} \n                        onChange={this.handleFirstNameFieldChange}\n                        autoFocus={true} />\n\n                    <UnderlinedInput \n                        type=\"text\" \n                        value={this.state.lastName} \n                        onChange={this.handleLastNameFieldChange} />\n\n                    <div className=\"status\">\n                        {this.state.textUnderField || ''}\n                    </div>\n\n                    <BigHighlightedButton \n                        onClick={this.handleContinueButton}>\n                        SIGN UP\n                    </BigHighlightedButton>\n\n                    <ConnectionState/>\n                </div>\n            </div>\n        );\n    }\n}\n","// DIBgram themes are converted to CSS in runtime here.\n\nexport function convertThemeToCSS(theme){\n    var css=':root{';\n    for(const name in theme){\n        var obj= theme[name];\n        if(typeof obj.value == 'string') {\n            css+=`--theme-color-${name}: ${obj.value};`;\n        } else if(typeof obj.value == 'object') {\n            css+=`--theme-color-${name}: var(--theme-color-${obj.value.equals});`;\n        }\n    }\n    return css;\n}","import React from 'react';\nimport theme from './classic.json';\nimport { convertThemeToCSS } from './dibgram-theme-to-css';\n\nexport default function CurrentThemeCSS(){\n    return(\n        <style>\n            {convertThemeToCSS(theme)}\n        </style>\n    );\n}\n\nconst isThemeDark=theme.isDark;\nexport {isThemeDark};","import React from 'react';\nimport { Provider } from 'react-redux';\nimport {MainApp, setInitialAuthState} from './dibgram/auth/ui';\nimport TdLib from './dibgram/TdWeb/tdlib';\nimport Dialogs, {dialogStore} from './dibgram/ui/dialog/dialogs';\nimport './dibgram/ui/main.scss';\nimport CurrentThemeCSS, {isThemeDark} from './dibgram/ui/themes/theme';\n\nTdLib.initializeTdLib().then(function (res) {\n    setInitialAuthState(res);\n});\n\n/**\n * Renders the whole React app\n */\nfunction App() {\n    return (\n        <div data-theme-is-dark={isThemeDark? 'true': 'false'} id=\"app\">\n            <Provider store={dialogStore}>\n                <Dialogs/>\n            </Provider>\n            <MainApp/>\n            <CurrentThemeCSS/>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}