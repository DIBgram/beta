{"version":3,"sources":["dibgram/language-pack/special-strings lazy /^/.//.*/.json$/ groupOptions: {} namespace object","remove-item-from-array.js","dibgram/TdWeb/tdlib.ts","dibgram/TdWeb/tdweb.js","dibgram/TdWeb/config.js","dibgram/ui/icon/chat_filters/chat-filters.js","dibgram/ui/elements/ripple-effect.js","dibgram/ui/elements/icon-button.js","dibgram/ui/icon/icons.js","dibgram/messenger/sections/navigation-menu/hamburger-menu/menu-button.js","dibgram/messenger/chat-store.js","dibgram/ui/scroll/scrollbar.js","dibgram/language-pack/string-format.js","dibgram/language-pack/language-pack.js","dibgram/messenger/sections/navigation-menu/chat-folders.js","dibgram/ui/elements/loading-spinner.js","dibgram/ui/components/connecting.js","dibgram/messenger/users-store.js","dibgram/ui/elements/link-button.js","dibgram/messenger/supergroup-store.js","dibgram/messenger/chat-misc.js","dibgram/ui/menu/context-menu.js","dibgram/ui/menu/menu.js","dibgram/ui/dialog/toast.js","dibgram/TdWeb/options.js","dibgram/TdWeb/file.js","dibgram/ui/img/TgLogo.png","dibgram/ui/components/profile-photo.js","dibgram/time-tostring.js","dibgram/messenger/sections/payments/currency-tostring.js","dibgram/messenger/user-misc.js","dibgram/messenger/message/message-pinned-message.js","dibgram/messenger/message/message-summary-noicon.js","dibgram/ui/dialog/dialogs.js","dibgram/ui/elements/small-button.js","dibgram/ui/dialog/dialog.js","dibgram/ui/dialog/confirm-dialog.js","dibgram/messenger/sections/navigation-menu/chat-list-item.js","dibgram/messenger/message-misc.js","dibgram/messenger/sections/navigation-menu/chat-list.js","dibgram/messenger/sections/navigation-menu/search/search-box.js","dibgram/TdWeb/connectionStore.js","dibgram/ui/elements/nav-animation.js","dibgram/messenger/sections/navigation-menu/chat-list-bar.js","version.js","dibgram/ui/tool-strip/button.js","dibgram/ui/tool-strip/tool-strip.js","dibgram/ui/tool-strip/section.js","dibgram/ui/tool-strip/toggle-button.js","dibgram/ui/tool-strip/separator.js","dibgram/ui/themes/dibgram-theme-to-css.js","dibgram/ui/themes/theme.js","dibgram/ui/menu/three-dots-menu.js","dibgram/ui/dialog/search.js","dibgram/messenger/sections/settings/choose-lanugage.js","dibgram/messenger/sections/settings/advanced/advanced.js","dibgram/messenger/sections/settings/settings-dialog.js","dibgram/messenger/sections/navigation-menu/hamburger-menu/menu.js","dibgram/messenger/sections/chat/chat-section.js","dibgram/messenger/messengerWindow.js","dibgram/TdWeb/auth.js","dibgram/ui/elements/highlighted-button.js","dibgram/ui/elements/underlined-input.js","dibgram/auth/auth-step/phone-number/country-select.js","dibgram/auth/auth-step/phone-number/phone-number.js","dibgram/auth/auth-step/verification-code/verification-code.js","dibgram/auth/auth-step/cloud-password/cloud-password.js","dibgram/auth/auth-step/register/signup-profile-photo.js","dibgram/auth/auth-step/register/register.js","dibgram/auth/auth-screen.js","dibgram/TdWeb/online-handler.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","t","keys","Object","module","exports","removeItemFromArray","item","i","this","length","splice","Array","prototype","remove","getUseTestDc","urlPar","URL","window","location","href","searchParams","get","TdLib","op","log","use_test_dc","log_updates","log_queries","useDatabase","instanceName","onUpdate","update","console","forEach","h","TdClient","sendQuery","type","handler","undefined","push","call","query","reject","send","result","error","warn","chatFilerIcons","All","Bots","Channels","Custom","Groups","Private","Setup","Unread","Cat","Crown","Favorite","Flower","Game","Home","Love","Mask","Party","Sport","Study","Trade","Travel","Work","RippleEffect","props","small","X","Y","width","rX","rY","height","Math","hypot","abs","max","state","className","style","getMaxRadius","backgroundColor","color","React","Component","getRelativeCoordinates","event","rect","target","getBoundingClientRect","clientX","left","clientY","top","handleMyMouseEvents","This","ripple","setState","setTimeout","clientWidth","clientHeight","bind","mouseUp","handleMyMouseEventsFunction","setRipple","up","nativeEvent","offsetX","offsetY","IconButton","icon","rest","useState","onMouseDown","onMouseUp","onMouseLeave","dangerouslySetInnerHTML","__html","archive_userpic","info_back","info_close","HamburgerMenuButton","WithFolders","mouseDown","mouseLeave","onClick","PureComponent","WithoutFolders","chatStore","createStore","currentChatList","archiveState","archiveButtonState","localStorage","getItem","chats","filters","selectedChat","unread","main","archive","action","chatList","chat_list","unread_messages_count","unread_count","unread_unmuted_messages_count","unread_unmuted_count","chat_filter_id","total_chats_count","total_count","unread_chats_count","unread_unmuted_chats_count","marked_as_unread_chats_count","marked_as_unread_count","marked_as_unread_unmuted_chats_count","marked_as_unread_unmuted_count","chat","chat_id","changed","newChat","positions","position","compareChatList","list","payload","property","value","__REDUX_DEVTOOLS_EXTENSION__","registerUpdateHandler","dispatch","action_bar","default_disable_notification","draft_message","chat_filters","has_scheduled_messages","is_blocked","is_marked_as_unread","last_message","message_ttl_setting","notification_settings","online_member_count","permissions","photo","last_read_inbox_message_id","last_read_outbox_message_id","reply_markup_message_id","theme_name","title","unread_mention_count","voice_chat","list1","list2","ScrollView","scrollBarWidth","scrollRef","scrollAlwaysVisible","propsRest","mouseEntered","setMouseEntered","timeoutId","setTimeoutId","data-mouse-entered","renderTrackHorizontal","renderTrackVertical","renderThumbHorizontal","renderThumbVertical","onMouseEnter","clearTimeout","autoHide","data-auto-hide","autoHideTimeout","hideTracksWhenNotNeeded","ref","applyKeys","index","Fragment","getFormattedText","text","formatted","applyFormatting","format","res","includes","indexOf","substr","execed","exec","formatString","params","getCountMode","count","getPluralString","mode","callback","currentLanguagePack","specialStrings","specialStringsEnglish","getCurrentLanguagePack","englishIsDefault","languageInfo","JSON","parse","base_language_pack_id","is_beta","is_installed","is_official","is_rtl","local_string_count","name","native_name","plural_code","total_string_count","translated_string_count","translation_url","getRtlMode","__","key","languagePackString","englishLanguagePack","__fmt","useFragments","__pl","pluralized","pluralizedString","__collection","isInvite","users","usesReact","getLPString","formatLast","user","accumulated","flat","join","_s__","_s__fmt","chatListScrollToTopEvent","ChatFolder","folder","active","icon_name","iconName","setIconName","useEffect","data-muted","connect","folders","currentFolder","onHamburgerMenuOpened","LoadingSpinner","percentage","percent","caps","trackColor","spin","transitionDuration","intervalNum","setInterval","clearInterval","size","PropTypes","number","isRequired","lineWidth","progressColor","string","usersStore","userId","status","user_id","LinkButton","children","click","open","supergroupStore","supergroup","isChatWithDeletedAccount","getState","chatTitleOrDeletedAccount","ContextMenu","x","y","direction","setDirection","hide","setHide","useRef","handleMouseDown","contextMenusStore","current","document","documentElement","classList","contains","menu","ContextMenus","menus","createContextMenu","preventDefault","pageX","pageY","Menu","MenuContents","MenuItem","propTypes","node","Toast","closed","setClosed","addToast","toastStore","toast","Toasts","options","downloadFile","file_id","priority","onReject","catch","downloadCallbacks","file","local","is_downloading_completed","cachedFiles","blobToUrl","blob","webkitURL","createObjectURL","profileNameToInitials","words","replace","toUpperCase","split","ProfilePhoto","customIcon","setPhoto","photoObj","setPhotoObj","loaded","setLoaded","isServiceMessages","isSavedMessages","isReplies","mounted","enableCache","data","resolveFilePart","filePart","f","is_downloading_active","getFileContent","disableSavedMessages","tgLogo","Initials","onLoad","src","getChatTypeId","supergroup_id","basic_group_id","smallDateTimeToString","date","TdLibDateToDate","now","Date","yesterday","getTime","lastWeek","timeToString","getDay","weekdayToString","day","getDate","month","getMonth","year","String","getFullYear","dateToString","hours","getHours","minutes","getMinutes","ampm","futureDayToString","today","tomorrow","durationToString","duration","floor","tdLibDate","currencyAmountToString","currency","total_amount","currencies","symbol","thousands_sep","decimal_sep","symbol_left","space_between","exp","formattedAmount","toFixed","getUserFullName","first_name","last_name","MessaagePinnedMessage","message","from","content","media","emoji","game","poll","question","sticker","MessageSummaryWithoutIcon","MayHaveCaptionThumbnail","caption","thumbnails","animation","minithumbnail","audio","file_name","performer","MayHaveCaption","SenderFullName","is_outgoing","discard_reason","is_video","member_user_ids","sender","newMembers","is_channel_post","deletedMember","ServiceMessageIncludingYou","lpString","lpString_you","ttlTimeUnit","86400","604800","2678400","ttl","noGameTitleFallback","score","GameScoreWithTitle","lazy","message_id","game_message_id","default","Suspense","fallback","passportDataTypeToString","passportDataTypes","types","toLowerCase","documents","noInvoiceTitleFallback","amount","PaymentInfoWithInvoiceTitle","invoice_chat_id","invoice_message_id","invoice","is_secret","PinnedMessageMessage","venue","isVideo","video","start_date","time","invitedMembers","user_ids","domain","domain_name","includeYou","MessageSummarySender","part1","getChatNoCache","dialogStore","dialog","filter","addDialog","element","removeDialog","Dialogs","dialogs","data-dialog","el","SmallButton","attention","data-attention","Dialog","closing","createRef","close","ConfirmDialog","dialogRef","handleOK","onOK","handleCancel","onCancel","handleButton","largeFont","thirdButton","thirdButtonClosesDialog","onThirdButtonClick","hideCancelButton","OKButtonText","ChatListItem","openChat","nextProps","nextState","getUser","is_pinned","selected","chatType","is_channel","isVerified","is_verified","isChatVerified","messageStatus","sending_state","getMessageStatus","unreadBadge","unreadBadgeClass","mute_for","isOnline","onContextMenu","ChatContextMenu","data-online","input_message_text","Chat","movableChatLists","setMovableChatLists","chat_lists","getChatsFromList","order","sort","a","b","order1","order2","ChatList","connectionState","scrollToTopVisible","chatListFinished","onScroll","visible","scrollTop","scrollToTop","view","scroll","behavior","array","store","EmptyChatList","ArchivedChatsItem","chatsInList","onArchiveOpen","setButtonState","moveToMainMenuToast","setItem","loadingFallBack","SearchBox","placeholder","onChange","data-visible","connectionStore","connection","NavAnimation","innerScreen","innerClass","closeNavAnimation","ChatListBar","useFolders","searchText","setSearchText","ToolStripButton","hideIcon","ToolStrip","Button","Section","ToggleButton","isActive","checked","readOnly","Separator","convertThemeToCSS","theme","css","obj","equals","themes","classic","tinted","night","getThemeFromStorage","matchMedia","matches","themeStore","rtl","ThemeProvider","dir","data-theme-is-dark","isDark","ThreeDotsMenu","setVisible","BoxSearch","ChooseLanguageDialog","languages","setLanguages","search","setSearch","country","startsWith","response","language_packs","currentPack","pack","LanguagePack","specialStringsImport","cache","apply","stringify","reload","language_pack_id","strings","selectLanguage","SettingsAdvanced","onClose","onBack","enableRtl","setEnableRtl","SettingsDialog","navState","setNavState","section","setSection","profile_photo","HamburgerMenu","me","setMe","phone_number","phone_number_prefix","info","country_calling_code","formatted_phone_number","nightMode","setNightMode","focus","showArchivedChats","onKeyDown","tabIndex","newState","isNight","version","tdlib","gpl_link","github_link","faq_link","ChatSection","c","MessengerWindow","isMenuOpen","setIsMenuOpen","defaultSize","minWidth","handleClasses","right","enable","bottom","topRight","bottomRight","bottomLeft","topLeft","credentials","api_id","api_hash","auth_state","Auth","pass","first","last","BigHighlightedButton","UnderlinedInput","args","handleFocus","inactive","titleClass","getTitleClass","handleBlur","mouseX","handleKeyDown","onEnterKeyPressed","preventNumberScrolling","autoFocus","invalid","iRef","onFocus","onBlur","maxLength","onCopy","disableCopy","CountrySelect","countries","is_hidden","CountrySelectItem","calling_codes","country_code","english_name","AuthWindowStepPhoneNumber","number_p","statusContent","statusVisible","dropDownText","ref1","ref2","handlePNFieldChange","changeStatus","openCountryDropdown","cc","getCountryDropdownText","handlePNFieldChange_p","callingCodes","callingCode","value_new","submitNumber","givePhoneNumber","reason","manageStatusTextContent","countryName","Status","AuthWindowStepCode","handleCodeFieldChange","handleContinueButton","checkAuthCode","AuthWindowStepPassword","password","handlePasswordFieldChange","check2FACode","password_hint","SignUpProfilePic","image","alt","accept","AuthWindowStepRegister","firstName","lastName","handleFirstNameFieldChange","handleLastNameFieldChange","registerNewAccount","textUnderField","showTos","tos","files","link","authStore","thisClass","MainApp","step","authorization_state","code_info","terms_of_service","onfocus","onblur","initializeTdLib","hasFocus","specialStringsCache","initLanguagePack","App","simulateFatalError","rel","toString","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onSuccess","ReactDOM","render","StrictMode","getElementById","process","origin","addEventListener","fetch","headers","contentType","ready","unregister","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.0d13cf20.chunk.js","sourcesContent":["var map = {\n\t\"./be.json\": [\n\t\t106,\n\t\t3\n\t],\n\t\"./ca.json\": [\n\t\t107,\n\t\t4\n\t],\n\t\"./de.json\": [\n\t\t108,\n\t\t5\n\t],\n\t\"./en.json\": [\n\t\t24\n\t],\n\t\"./es.json\": [\n\t\t109,\n\t\t6\n\t],\n\t\"./fr.json\": [\n\t\t110,\n\t\t7\n\t],\n\t\"./it.json\": [\n\t\t111,\n\t\t8\n\t],\n\t\"./ko.json\": [\n\t\t112,\n\t\t9\n\t],\n\t\"./ms.json\": [\n\t\t113,\n\t\t10\n\t],\n\t\"./nl.json\": [\n\t\t114,\n\t\t11\n\t],\n\t\"./pl.json\": [\n\t\t115,\n\t\t12\n\t],\n\t\"./pt-br.json\": [\n\t\t116,\n\t\t13\n\t],\n\t\"./ru.json\": [\n\t\t117,\n\t\t14\n\t],\n\t\"./tr.json\": [\n\t\t118,\n\t\t15\n\t],\n\t\"./uk.json\": [\n\t\t119,\n\t\t16\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__.t(id, 3);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 94;\nmodule.exports = webpackAsyncContext;","// https://love2dev.com/blog/javascript-remove-from-array/#remove-from-array-splice\n/**\n * Removes an item from an array\n * @param {*} item The item to remove\n */\nexport default function removeItemFromArray(item) {\n    for( var i = 0; i < this.length; i++){ \n        if ( this[i] === item) { \n            this.splice(i, 1); \n        }\n    }\n}\n\nArray.prototype.remove= removeItemFromArray;","/* eslint-disable */\nimport { createTdClient } from './tdweb';\nimport {getConfig} from './config';\nimport TdApi from './td_api';\nimport removeItemFromArray from '../../remove-item-from-array';\nexport function getUseTestDc() {\n    var urlPar=new URL(window.location.href).searchParams.get('test');\n    if(urlPar){\n        return urlPar==='1' || urlPar==='true';\n    }\n    return false;\n}\n\nexport function getCurrentSessionId() {\n    return new URL(window.location.href).searchParams.get('account') || '1';\n}\n\n/**\n * Provides options to communicate with the Tdweb library\n */\nexport default class TdLib {\n    static #tdClient: any;\n    /** @type {[string: Array<Function>]} */\n    static #updateHandlers: {[key: string]: ((update: any) => void)[]}={};\n\n    /**\n     * Creates the instance of Tdweb\n     */\n    static initializeTdLib() {\n        const {log}= getConfig();\n        TdLib.#tdClient= createTdClient({\n            useDatabase: true,\n            instanceName: ( getCurrentSessionId() ) + (getUseTestDc() ? 'test' : 'production'), // e.g. ?account=1&test=1 = '1test' or ?account=1&test=0 = '1production'\n            onUpdate: function (update: TdApi.td_Update) {\n                if(log.log_updates) {\n                    console.log('Update: ',update);\n                }\n                if(TdLib.#updateHandlers[update['@type']]){\n                    TdLib.#updateHandlers[update['@type']].forEach(h => h(update));\n                }\n            }\n        });\n        return TdLib.sendQuery({'@type': 'getAuthorizationState'}); // It both starts TDLib and returns the authorization state\n    }\n\n    /**\n     * Listen for updates from TdLib\n     * @param type The type of the update to listen to. Look for TdLib API docs for types\n     * @param handler The function that gets called with the update object when the update is received\n     */\n    static registerUpdateHandler<T extends TdApi.td_Update>(type: TdApi.TdUpdateType<T>, handler: (update: T) => void): void {\n        if(TdLib.#updateHandlers[type]===undefined){\n            TdLib.#updateHandlers[type]= [];\n        }\n        TdLib.#updateHandlers[type].push(handler);\n    }\n\n    /**\n     * Remove an existing update handler\n     * @param {string} type The type of the update to remove handler from. Look for TdLib API docs for types\n     * @param {Function} handler The handler to remove\n     */\n    static unRegisterUpdateHandler<T extends TdApi.td_Update>(type: TdApi.TdUpdateType<T>, handler: (update: T) => void): void {\n        if(TdLib.#updateHandlers[type]===undefined){\n            return;\n        }\n        removeItemFromArray.call(TdLib.#updateHandlers[type], handler);\n    }\n\n    /**\n     * Send a request to the TdLib instance\n     * If the query contains an `@extra` field, the same field will be added to the result\n     * @param query The request to send. Consult TdLib & JSON interface API for help.\n     * @returns The result of the request\n     */\n    static sendQuery<T extends TdApi.TdFunction>(query: T): Promise<TdApi.TdFunctionReturn<T> | TdApi.td_Error> {\n        const {log}= getConfig();\n        if(log.log_queries && query['@type']!=='setTdlibParameters') {\n            console.log('Query: ',query);\n        }\n        return new Promise((resolve, reject) => {\n            TdLib.#tdClient.send(query).then((result: TdApi.TdFunctionReturn<T>)=> {\n                if(log.log_queries) {\n                    console.log('Query result: ', result);\n                }\n                resolve(result);\n            }, (error: TdApi.td_Error)=> {\n                if(log.log_queries) {\n                    console.warn('Query failed: ', error);\n                }\n                reject(error);\n            }\n            );\n        });\n    }\n}","import TdClient from '@dibgram/tdweb';\n\nexport function createTdClient(op) {\n    return new TdClient(op);\n}","export function getCredentials() {return {api_id: 3022678,api_hash: 'd7b7676a82906a6182f4a5e5e9555673'};}export function getConfig() {return {use_test_dc: false,log: {log_updates: true,log_queries: true}};}\n","// All icons are from Telegram Desktop, converted to SVG using https://pngtosvg.com/\n\nimport raw from 'raw.macro';\n\nvar chatFilerIcons = {\n    All     : [raw('./all.svg'     ), raw('./all_active.svg'     )],\n    Bots    : [raw('./bots.svg'    ), raw('./bots_active.svg'    )],\n    Channels: [raw('./channels.svg'), raw('./channels_active.svg')],\n    Custom  : [raw('./custom.svg'  ), raw('./custom_active.svg'  )],\n    Groups  : [raw('./groups.svg'  ), raw('./groups_active.svg'  )],\n    Private : [raw('./private.svg' ), raw('./private_active.svg' )],\n    Setup   : [raw('./setup.svg'   )                              ],\n    Unread  : [raw('./unread.svg'  ), raw('./unread_active.svg'  )],\n\n    Cat     : [raw('./cat.svg'     ), raw('./cat_active.svg'     )],\n    Crown   : [raw('./crown.svg'   ), raw('./crown_active.svg'   )],\n    Favorite: [raw('./favorite.svg'), raw('./favorite_active.svg')],\n    Flower  : [raw('./flower.svg'  ), raw('./flower_active.svg'  )],\n    Game    : [raw('./game.svg'    ), raw('./game_active.svg'    )],\n    Home    : [raw('./home.svg'    ), raw('./home_active.svg'    )],\n    Love    : [raw('./love.svg'    ), raw('./love_active.svg'    )],\n    Mask    : [raw('./mask.svg'    ), raw('./mask_active.svg'    )],\n    Party   : [raw('./party.svg'   ), raw('./party_active.svg'   )],\n    Sport   : [raw('./sport.svg'   ), raw('./sport_active.svg'   )],\n    Study   : [raw('./study.svg'   ), raw('./study_active.svg'   )],\n    Trade   : [raw('./trade.svg'   ),                             ],\n    Travel  : [raw('./travel.svg'  ), raw('./travel_active.svg'  )],\n    Work    : [raw('./work.svg'    ), raw('./work_active.svg'    )],\n};\nexport default chatFilerIcons;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Adds a ripple effect to a button.\n * \n * Insert at the beginning of the button.\n * \n * **Note:** The button needs `position: relative;` and `overflow: hidden;`\n */\nexport default class RippleEffect extends React.Component {\n    static propTypes= {\n        /** \n         * - Change to `pressed` on `mouseDown`\n         * - Change to `released` on `mouseUp`\n         * - Change to `off` 1000ms after `mouseUp`\n         */\n        state: PropTypes.oneOf(['off', 'pressed', 'released']).isRequired,\n        X: PropTypes.number,\n        Y: PropTypes.number,\n        width: PropTypes.number,\n        height: PropTypes.number,\n        /** The color to show in the ripple (same as `:active` if you used CSS) */\n        color: PropTypes.string.isRequired,\n        /** Pass true if the button is small to make animation faster */\n        small: PropTypes.bool\n    }\n\n    /** Gets the smallest radius that a circle, centered at click location, needs to fill the button */\n    getMaxRadius() {\n        if(!this.props.small){\n        //  It's a bit hard to understand. Let me explain:\n        //  \n        //  1. It calculates the coordinates relative to the 4 edges of the button ────╮\n        //  2. The diagonal distance to the edges are calculated using the             │\n        //      pythagoras rule, from the results of step 1            │               │\n        //  3. The biggest distance is selected and then returned.     │               │\n        //          │                                                  │               │\n        //  ╭───────┴──────╮  ╭────────────────────────────────────────╯               │        \n        //  │           ╭──┼──┴───╮                                                    │                  \n            return Math.max(//    │╭───────────────────────────────────────────────────┴──────────────╮\n                /* ┏ */ Math.hypot(this.props.X                     , this.props.Y),//                │ \n                /* ┓ */ Math.hypot(this.props.width - this.props.X  , this.props.Y),//                │\n                /* ┗ */ Math.hypot(this.props.X                     , this.props.height - this.props.Y), \n                /* ┛ */ Math.hypot(this.props.width - this.props.X  , this.props.height - this.props.Y), \n            );\n        } else {\n            const {X, Y, width, height} = this.props;\n            const [rX, rY] = [X - width / 2, Y - height / 2]; // Click position relative to center of circle.\n            const distanceToCenter= Math.hypot(Math.abs(rX), Math.abs(rY)); // Get distance from click position to the center of circle.\n            return distanceToCenter + (width / 2); // Add circle radius to result\n        }\n    }\n    render() {\n        if(this.props.state=='off') return null;\n        return (\n            <div\n                className={'ripple '+this.props.state+ (this.props.small? ' small':'')}\n                style={{\n                    '--top': (this.props.Y || 0)+'px',\n                    '--left': (this.props.X || 0)+'px',\n                    '--radius': this.getMaxRadius()+'px',\n                    backgroundColor: this.props.color\n                }}/>\n        );\n    }\n}\n\nfunction getRelativeCoordinates(event) {\n    const rect = event.target.getBoundingClientRect();\n    return {\n        X: event.clientX - rect.left,\n        Y: event.clientY - rect.top\n    };\n}\n\n// Assign your `mouseDown`, `mouseUp` and `mouseLeave` to the returned functions.\nexport function handleMyMouseEvents(This) {\n    return [\n        // mouseDown\n        (function(e) {\n            // Reset the ripple effect if it's not off\n            if(this.state.ripple.state!='off'){\n                this.setState({\n                    ripple: { state: 'off' }\n                });\n                setTimeout(() => {\n                    this.setState({\n                        ripple: {\n                            state: 'pressed',\n                            ...getRelativeCoordinates(e),\n                            width: e.target.clientWidth,\n                            height: e.target.clientHeight\n                        }\n                    });\n                }, 50);\n                return;\n            }\n            this.setState({\n                ripple: {\n                    state: 'pressed',\n                    ...getRelativeCoordinates(e),\n                    width: e.target.clientWidth,\n                    height: e.target.clientHeight\n                }\n            });\n        }).bind(This),\n        // mouseUp\n        (function(e) {\n            this.setState({\n                ripple: { \n                    state: 'released',\n                    ...getRelativeCoordinates(e),\n                    width: e.target.clientWidth,\n                    height: e.target.clientHeight \n                }\n            });\n        }).bind(This),\n        // mouseLeave\n        (function(e) {\n            if(this.state.ripple.state=='pressed') {\n                this.mouseUp(e);\n            }\n        }).bind(This)\n    ];\n}\n// Assign your `mouseDown`, `mouseUp` and `mouseLeave` to the returned functions.\nexport function handleMyMouseEventsFunction([ripple, setRipple]) {\n    function down(e) {\n        // Reset the ripple effect if it's not off\n        if(ripple.state!='off'){\n            setRipple({ state: 'off' });\n            setTimeout(() => {\n                setRipple ({\n                    state: 'pressed',\n                    ...getRelativeCoordinates(e),\n                    width: e.target.clientWidth,\n                    height: e.target.clientHeight\n                });\n            }, 50);\n            return;\n        }\n        setRipple ({\n            state: 'pressed',\n            ...getRelativeCoordinates(e),\n            width: e.target.clientWidth,\n            height: e.target.clientHeight\n        });\n    }\n\n    function up(e) {\n        setRipple ({\n            state: 'released',\n            X: e.nativeEvent.offsetX,\n            Y: e.nativeEvent.offsetY,\n            width: e.target.clientWidth,\n            height: e.target.clientHeight \n        });\n    }\n\n    function leave(e) {\n        if(ripple.state=='pressed') {\n            up(e);\n        }\n    }\n    \n    return [down, up, leave];\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport RippleEffect, {handleMyMouseEventsFunction} from '../../ui/elements/ripple-effect';\nimport './icon-button.scss';\n\n/**\n * Renders a round button with an icon in it, and a special ripple effect.\n */\nexport default function IconButton({icon, ...rest}) {\n    const ripple= React.useState({state: 'off'});\n    const [onMouseDown, onMouseUp, onMouseLeave]= handleMyMouseEventsFunction(ripple);\n    return (\n        <button className=\"icon-button\" {...rest} {...{onMouseDown, onMouseUp, onMouseLeave}}>\n            <span dangerouslySetInnerHTML={{__html: icon}} />\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-windowBgOver)\" small={true}/>\n        </button>\n    );\n}\nIconButton.propTypes = {\n    icon: PropTypes.string.isRequired\n};\n","// All icons are from Telegram Desktop, converted to SVG using https://pngtosvg.com/\n\nimport raw from 'raw.macro';\n\nexport const archive_userpic = raw('./archive_userpic.svg');\nexport const dialogs_bot = raw('./dialogs_bot.svg');\nexport const dialogs_channel = raw('./dialogs_channel.svg');\nexport const dialogs_chat = raw('./dialogs_chat.svg');\nexport const dialogs_menu = raw('./dialogs_menu.svg');\nexport const dialogs_pinned = raw('./dialogs_pinned.svg');\nexport const dialogs_received = raw('./dialogs_received.svg');\n//export const dialogs_search_cancel = raw('./dialogs_search_cancel.svg');\nexport const dialogs_sending = raw('./dialogs_sending.svg');\nexport const dialogs_sent = raw('./dialogs_sent.svg');\nexport const dialogs_verified_check = raw('./dialogs_verified_check.svg');\nexport const dialogs_verified_star = raw('./dialogs_verified_star.svg');\nexport const history_to_down = raw('./history_to_down.svg');\nexport const info_back = raw('./info_back.svg');\nexport const info_close = raw('./info_close.svg');\nexport const intro_country_dropdown = raw('./intro_country_dropdown.svg');\nexport const menu_new_channel = raw('./menu_new_channel.svg');\nexport const menu_new_group = raw('./menu_new_group.svg');\nexport const menu_night_mode = raw('./menu_night_mode.svg');\nexport const menu_settings = raw('./menu_settings.svg');\nexport const new_chat_photo = raw('./new_chat_photo.svg');\nexport const replies_userpic = raw('./replies_userpic.svg');\nexport const saved_messages = raw('./saved_messages.svg');\nexport const settings_name = raw('./settings_name.svg');\nexport const settings_phone_number = raw('./settings_phone_number.svg');\nexport const three_dots = raw('./three_dots.svg');\nexport const settings_info = raw('./settings/info.svg');\nexport const settings_privacy_security = raw('./settings/privacy_security.svg');\nexport const settings_notifications = raw('./settings/notifications.svg');\nexport const settings_chat = raw('./settings/chat.svg');\nexport const settings_folders = raw('./settings/folders.svg');\nexport const settings_advenced = raw('./settings/advanced.svg');\nexport const settings_language = raw('./settings/language.svg');\nexport const settings_faq = raw('./settings/faq.svg');\nexport const title_search = raw('./title_search.svg');\n\nexport const filters_edit = raw('./chat_filters/edit.svg');\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from '../../../../ui/elements/icon-button';\nimport RippleEffect, {handleMyMouseEvents} from '../../../../ui/elements/ripple-effect';\nimport { dialogs_menu } from '../../../../ui/icon/icons';\nimport './menu-button.scss';\n\nvar HamburgerMenuButton= {}; // Store component classes here\n\n/**\n * Renders the button which opens the hamburger menu (when there are folders)\n */\nHamburgerMenuButton.WithFolders= class WithFolders extends React.PureComponent {\n    static propTypes= {\n        onClick: PropTypes.func,\n    };\n    state= {\n        ripple: {\n            state: 'off'\n        }\n    }\n    constructor() {\n        super();\n        [this.mouseDown, this.mouseUp, this.mouseLeave]= handleMyMouseEvents(this); // Ripple effect events\n    }\n    render() {\n        return (\n            <button id=\"hamburger-menu-button\" className=\"uses-folders\"\n                onMouseDown={this.mouseDown}\n                onMouseUp={this.mouseUp}\n                onMouseLeave={this.mouseLeave}\n                onClick={this.props.onClick}>\n                <div id=\"bars\"><span></span><span></span><span></span></div>\n                <RippleEffect {...this.state.ripple} color=\"var(--theme-color-sideBarBgRipple)\"/>\n            </button>\n        );\n    }\n};\n\n/**\n * Renders the button which opens the hamburger menu (when there are no folders)\n */\nHamburgerMenuButton.WithoutFolders= function WithoutFolders (props) {\n    return (\n        <IconButton \n            icon={dialogs_menu}\n            id=\"hamburger-menu-button\"\n            className=\"icon-button no-folders\"\n            {...props}/>\n    );\n};\n\nexport default HamburgerMenuButton;","import { createStore } from 'redux';\nimport TdLib from '../TdWeb/tdlib';\n\n/**\n * It is recommended to use the outline view or find tool to navigate this file.\n */\n\nconst chatStore= createStore(reducer, \n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n    \nfunction reducer(state= {\n    currentChatList: {'@type': 'chatListMain'},\n    archiveState: 'closed',\n    archiveButtonState: localStorage.getItem('dibgram-archived-chats-button-mode'),\n    chats: [],\n    filters: [],\n    selectedChat: -1,\n    unread: {\n        main: {},\n        archive: {},\n        filters: {}\n    }\n}, action) {\n    switch (action.type) {\n    case 'SET_CURRENT_CHAT_LIST':\n        return {\n            ...state,\n            currentChatList: action.chatList\n        };\n    case 'SET_ARCHIVE_STATE':\n        return {\n            ...state,\n            archiveState: action.archiveState\n        };\n    case 'UPDATE_UNREAD_MESSAGE_COUNT':\n        if(action.chat_list['@type'] === 'chatListMain') {\n            return {\n                ...state,\n                unread: {\n                    ...state.unread,\n                    main: {\n                        ...state.unread.main,\n                        unread_messages_count: action.unread_count,\n                        unread_unmuted_messages_count: action.unread_unmuted_count\n                    }\n                }\n            };\n        } else if(action.chat_list['@type'] === 'chatListArchive') {\n            return {\n                ...state,\n                unread: {\n                    ...state.unread,\n                    archive: {\n                        ...state.unread.archive,\n                        unread_messages_count: action.unread_count,\n                        unread_unmuted_messages_count: action.unread_unmuted_count\n                    }\n                }\n            };\n        } else if(action.chat_list['@type'] === 'chatListFilter') {\n            return {\n                ...state,\n                unread: {\n                    ...state.unread,\n                    filters: {\n                        ...state.unread.filters,\n                        [action.chat_list.chat_filter_id]: {\n                            ...state.unread.filters[action.chat_list.chat_filter_id],\n                            unread_messages_count: action.unread_count,\n                            unread_unmuted_messages_count: action.unread_unmuted_count\n                        }\n                    }\n                }\n            };\n        }\n        return state;\n    case 'UPDATE_UNREAD_CHAT_COUNT':\n        if(action.chat_list['@type'] === 'chatListMain') {\n            return {\n                ...state,\n                unread: {\n                    ...state.unread,\n                    main: {\n                        ...state.unread.main,\n                        total_chats_count: action.total_count,\n                        unread_chats_count: action.unread_count,\n                        unread_unmuted_chats_count: action.unread_unmuted_count,\n                        marked_as_unread_chats_count: action.marked_as_unread_count,\n                        marked_as_unread_unmuted_chats_count: action.marked_as_unread_unmuted_count\n                    }\n                }\n            };\n        } else if(action.chat_list['@type'] === 'chatListArchive') {\n            return {\n                ...state,\n                unread: {\n                    ...state.unread,\n                    archive: {\n                        ...state.unread.archive,\n                        total_chats_count: action.total_count,\n                        unread_chats_count: action.unread_count,\n                        unread_unmuted_chats_count: action.unread_unmuted_count,\n                        marked_as_unread_chats_count: action.marked_as_unread_count,\n                        marked_as_unread_unmuted_chats_count: action.marked_as_unread_unmuted_count\n                    }\n                }\n            };\n        } else if(action.chat_list['@type'] === 'chatListFilter') {\n            return {\n                ...state,\n                unread: {\n                    ...state.unread,\n                    filters: {\n                        ...state.unread.filters,\n                        [action.chat_list.chat_filter_id]: {\n                            ...state.unread.filters[action.chat_list.chat_filter_id],\n                            total_chats_count: action.total_count,\n                            unread_chats_count: action.unread_count,\n                            unread_unmuted_chats_count: action.unread_unmuted_count,\n                            marked_as_unread_chats_count: action.marked_as_unread_count,\n                            marked_as_unread_unmuted_chats_count: action.marked_as_unread_unmuted_count\n                        }\n                    }\n                }\n            };\n        }\n        return state;\n\n    case 'SET_ARCHIVE_BUTTON_STATE':\n        return {\n            ...state,\n            archiveButtonState: action.archiveButtonState\n        };\n    case 'ADD_CHAT':\n        return {\n            ...state,\n            chats: [\n                ...state.chats,\n                action.chat\n            ]\n        };\n    case 'UPDATE_CHAT_POSITION': // Replace the position property of a chat\n        return {\n            ...state,\n            chats: state.chats.map((chat) => {\n                if (chat.id === action.chat_id) {\n                    let changed=false;\n                    let newChat = {\n                        ...chat,\n                        positions: chat.positions.map((position) => {\n                            if (compareChatList(position.list, action.position.list)) {\n                                changed=true;\n                                return action.position;\n                            }\n                            return position;\n                        })\n                    };\n                    if(!changed) {\n                        return {\n                            ...chat,\n                            positions: [\n                                ...chat.positions,\n                                action.position\n                            ]\n                        };\n                    }\n                    return newChat;\n                }\n                return chat;\n            })\n        };\n    case 'REPLACE_CHAT_FILTERS':\n        return {\n            ...state,\n            filters: action.payload\n        };\n    case 'UPDATE_CHAT_PROPERTY':\n        return {\n            ...state,\n            chats: state.chats.map((chat) => {\n                if (chat.id === action.chat_id) {\n                    return {\n                        ...chat,\n                        [action.property]: action.value\n                    };\n                }\n                return chat;\n            })\n        };\n    case 'SELECT_CHAT':\n        return {\n            ...state,\n            selectedChat: action.chat_id\n        };\n    default:\n        return state;\n    }\n}\n\nTdLib.registerUpdateHandler('updateUnreadChatCount', (update) => {\n    chatStore.dispatch({\n        type: 'UPDATE_UNREAD_CHAT_COUNT',\n        ...update\n    });\n});\n\nTdLib.registerUpdateHandler('updateUnreadMessageCount', (update) => {\n    chatStore.dispatch({\n        type: 'UPDATE_UNREAD_MESSAGE_COUNT',\n        ...update\n    });\n});\n\nTdLib.registerUpdateHandler('updateNewChat', update => {\n    chatStore.dispatch({\n        type: 'ADD_CHAT',\n        chat: update.chat\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatActionBar', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'action_bar',\n        chat_id: update.chat_id,\n        value: update.action_bar\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatDefaultDisableNotification', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'default_disable_notification',\n        chat_id: update.chat_id,\n        value: update.default_disable_notification\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatDraftMessage', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'draft_message',\n        chat_id: update.chat_id,\n        value: update.draft_message\n    });\n    for (let position of update.positions) {\n        chatStore.dispatch({\n            type: 'UPDATE_CHAT_POSITION',\n            chat_id: update.chat_id,\n            position: position\n        });\n    }\n});\n\nTdLib.registerUpdateHandler('updateChatFilters', update=> {\n    if(update.chat_filters) {\n        chatStore.dispatch({\n            type: 'REPLACE_CHAT_FILTERS',\n            payload: update.chat_filters\n        });\n    }\n});\n\nTdLib.registerUpdateHandler('updateChatHasScheduledMessages', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'has_scheduled_messages',\n        chat_id: update.chat_id,\n        value: update.has_scheduled_messages\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatIsBlocked', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'is_blocked',\n        chat_id: update.chat_id,\n        value: update.is_blocked\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatIsMarkedAsUnread', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'is_marked_as_unread',\n        chat_id: update.chat_id,\n        value: update.is_marked_as_unread\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatLastMessage', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'last_message',\n        chat_id: update.chat_id,\n        value: update.last_message\n    });\n    for (let position of update.positions) {\n        chatStore.dispatch({\n            type: 'UPDATE_CHAT_POSITION',\n            chat_id: update.chat_id,\n            position: position\n        });\n    }\n});\n\nTdLib.registerUpdateHandler('updateChatMessageTtlSetting', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'message_ttl_setting',\n        chat_id: update.chat_id,\n        value: update.message_ttl_setting\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatNotificationSettings', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'notification_settings',\n        chat_id: update.chat_id,\n        value: update.notification_settings\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatOnlineMemberCount', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'online_member_count',\n        chat_id: update.chat_id,\n        value: update.online_member_count\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatPermissions', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'permissions',\n        chat_id: update.chat_id,\n        value: update.permissions\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatPhoto', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'photo',\n        chat_id: update.chat_id,\n        value: update.photo\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatPosition', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_POSITION',\n        chat_id: update.chat_id,\n        position: update.position\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatReadInbox', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'unread_count',\n        chat_id: update.chat_id,\n        value: update.unread_count\n    });\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'last_read_inbox_message_id',\n        chat_id: update.chat_id,\n        value: update.last_read_inbox_message_id\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatReadOutbox', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'last_read_outbox_message_id',\n        chat_id: update.chat_id,\n        value: update.last_read_outbox_message_id\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatReplyMarkup', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'reply_markup_message_id',\n        chat_id: update.chat_id,\n        value: update.reply_markup_message_id\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatTheme', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'theme_name',\n        chat_id: update.chat_id,\n        value: update.theme_name\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatTitle', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'title',\n        chat_id: update.chat_id,\n        value: update.title\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatUnreadMentionCount', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'unread_mention_count',\n        chat_id: update.chat_id,\n        value: update.unread_mention_count\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatVoiceChat', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'voice_chat',\n        chat_id: update.chat_id,\n        value: update.voice_chat\n    });\n});\n\nTdLib.registerUpdateHandler('updateMessageMentionRead', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'unread_mention_count',\n        chat_id: update.chat_id,\n        value: update.unread_mention_count\n    });\n});\n\nexport default chatStore;\n\n/**\n * Check if two chat lists are equal\n * @param {import('tdweb').TdObject} list1 \n * @param {import('tdweb').TdObject} list2 \n * @returns True if the provided objects refer to the same list. Otherwise false\n */\nexport function compareChatList(list1, list2) {\n    if (list1['@type'] != list2['@type']) { // First compare type\n        return false;\n    }\n    if (list1['@type'] == 'chatListFilter') { // Then Compare folder ID\n        return list1.chat_filter_id == list2.chat_filter_id;\n    }\n    return true;\n}\n\n/**\n * Gets a chat from a chat ID. Supports caching.\n */\nexport function getChat(id) {\n    let res;\n    for(let chat of chatStore.getState()?.chats) {\n        if(chat.id==id) res = Promise.resolve(chat);\n    }\n    if(!res){\n        res = TdLib.sendQuery({\n            '@type': 'getChat',\n            'chat_id': id\n        });\n    }\n    return res;\n}\n\n/**\n * Gets a chat from a chat ID. Does not support caching to prevent promises complexity.\n */\nexport function getChatNoCache(id) {\n    for(let chat of chatStore.getState()?.chats) {\n        if(chat.id==id) return chat;\n    }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport './scrollbar.scss';\n\n/**\n * A scrollable container. Sizing might need to be tweaked by CSS.\n */\nexport default function ScrollView({scrollBarWidth, scrollRef, scrollAlwaysVisible, ...propsRest}) {\n    const [mouseEntered, setMouseEntered] = React.useState(false);\n    const [timeoutId, setTimeoutId] = React.useState(null);\n    return (\n        <Scrollbars\n            className=\"scrollbar\"\n            style= {{ '--bar-width': (scrollBarWidth || 4)+'px' }}\n            data-mouse-entered={mouseEntered}\n            renderTrackHorizontal={props => <div {...props} className=\"track-horizontal\" />}\n            renderTrackVertical={props => <div {...props} className=\"track-vertical\" />}\n            renderThumbHorizontal={props => <div {...props} className=\"thumb-horizontal\" />}\n            renderThumbVertical={props => <div {...props} className=\"thumb-vertical\" />}\n            onMouseEnter={() => {\n                setMouseEntered(true);\n                setTimeoutId(setTimeout(() => {\n                    setMouseEntered(false);\n                }, 1000));\n            }}\n            onMouseLeave={() => {\n                setMouseEntered(false);\n                clearTimeout(timeoutId);\n            }}\n            autoHide={!scrollAlwaysVisible}\n            data-auto-hide={scrollAlwaysVisible? 'false' : 'true'}\n            autoHideTimeout={1000}\n            hideTracksWhenNotNeeded={true}\n            ref={scrollRef}\n            {...propsRest}\n        />\n    );\n}\nScrollView.propTypes = {\n    /** Scroll-bar thickness, in pixels (default: 4) */\n    scrollBarWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    /** A React ref that is passed down to the scrollbars component */\n    scrollRef: PropTypes.object,\n    /** Whether to always show the scrollbars (default: false) */\n    scrollAlwaysVisible: PropTypes.bool,\n};\n","import React from 'react';\n\nexport const applyKeys= (item, index) => (<React.Fragment key={index}>{item}</React.Fragment>);\n\nexport function getFormattedText(text){\n    const formatted= applyFormatting(text);\n    if(formatted.length === 1) return formatted[0];\n    return formatted.map(applyKeys);\n}\n\nexport function applyFormatting(format) {\n    var res= [];\n    /* eslint-disable-next-line no-constant-condition */\n    while(true) {\n        if(format.includes('\\n')){ // New line\n            const index= format.indexOf('\\n');\n            applyFormatting(format.substr(0, index)).forEach(e=>res.push(e));\n            res.push(<br/>);\n            format= format.substr(index + 1);\n        } \n        else if(format.includes('**')){ // Bold\n            const execed= /\\*\\*(.+)\\*\\*/.exec(format);\n            applyFormatting(format.substr(0, execed.index)).forEach(e=>res.push(e));\n            res.push(<strong>{execed[1]}</strong>);\n            format= format.substr(execed.index + execed[1].length+4);\n        }\n        else break;\n    }\n    res.push(format);\n    return res;\n}\n\nexport function formatString(format, params= {}) {\n    var res= [];\n    while(format.includes('{')){\n        const execed= /{(\\w+)}/.exec(format);\n        applyFormatting(format.substr(0, execed.index)).forEach(e=>res.push(e));\n        res.push(params[execed[1]]);\n        format= format.substr(execed.index + execed[1].length+2);\n    }\n    return [...res, ...applyFormatting(format)];\n}\n\n// Returns 'zero', 'one', 'two', 'few', 'many' or 'other' depending on the number\nexport function getCountMode(count) {\n    if(count === 0) return 'zero';\n    if(count === 1) return 'one';\n    if(count === 2) return 'two';\n    if(count > 2 && count < 10) return 'few';\n    if(count >= 10) return 'many';\n    return 'other';\n}\n\nexport function getPluralString(mode, callback) {\n    switch(mode) {\n    case 'zero': return callback('zero') || callback('few') || callback('many') || callback('other');\n    case 'one': return callback('one') || callback('other');\n    case 'two': return callback('two') || callback('few') || callback('many') || callback('other');\n    case 'few': return callback('few') || callback('many') || callback('other');\n    case 'many': return callback('many') || callback('other');\n    case 'other': return callback('other');\n    }\n}\n","import { authStore } from '../auth/auth-screen';\nimport TdLib from '../TdWeb/tdlib';\nimport englishLanguagePack from './english.json';\nimport { applyKeys, formatString, getCountMode, getFormattedText, getPluralString } from './string-format';\nimport specialStringsEnglish from './special-strings/en.json';\n\nvar currentLanguagePack= null;\nvar specialStrings= specialStringsEnglish;\n\nexport function initLanguagePack(){\n    const languageInfo= getCurrentLanguagePack();\n\n    const specialStringsCache= localStorage.getItem('dibgram-special-language-strings-cache');\n    if(specialStringsCache){\n        specialStrings= JSON.parse(specialStringsCache)[languageInfo.id] || specialStringsEnglish;\n    }\n    console.log('initLanguagePack');\n    TdLib.sendQuery({\n        '@type': 'setOption', \n        'name': 'localization_target', \n        'value': {\n            '@type': 'optionValueString', \n            value: 'tdesktop'\n        }\n    }).then(()=>{\n        TdLib.sendQuery({\n            '@type': 'getLanguagePackStrings',\n            language_pack_id: languageInfo.id || 'en'\n        }).then(result=>{\n            currentLanguagePack = {};\n            result.strings.forEach(string=>{\n                currentLanguagePack[string.key] = string;\n            });\n\n            authStore.dispatch({ // Force re-render\n                type: 'SET_STATE',\n                state: authStore.getState().state\n            });\n        });\n    });\n}\n\n/**\n * Gets the language pack info for the selected language\n * @param {boolean} englishIsDefault If true, returns english if the user didn't set a language\n * @returns {import('../TdWeb/td_api').TdApi.td_LanguagePackInfo|null} Language pack object\n */\nexport function getCurrentLanguagePack(englishIsDefault= true) {\n    let languageInfo= localStorage.getItem('dibgram-active-language');\n    if(languageInfo) languageInfo= JSON.parse(languageInfo);\n    if((!languageInfo) && englishIsDefault) languageInfo= {\n        '@type': 'languagePackInfo',\n        base_language_pack_id: '',\n        id: 'en',\n        is_beta: false,\n        is_installed: false,\n        is_official: true,\n        is_rtl: false,\n        local_string_count: 2784,\n        name: 'English',\n        native_name: 'English',\n        plural_code: 'en',\n        total_string_count: 2784,\n        translated_string_count: 2784,\n        translation_url: 'https://translations.telegram.org/en/'\n    };\n    return languageInfo;\n}\n\nexport function getRtlMode() {\n    return (localStorage.getItem('dibgram-allow-rtl-layout') == 'true') && (getCurrentLanguagePack(false)?.is_rtl || false);\n}\n\n/**\n * Returns the localized string for the given language pack string.  \n * Use `__fmt` for formatted strings, or `__pl` for pluralized strings.\n * @example ```js\n * __('lng_menu_settings') // 'Settings'\n * __('lng_error_phone_flood') // 'Sorry, you have deleted and re-created your account too many times recently. Please wait for a few days before signing up again.'\n * ```\n * @param {string} key Language pack string name\n * @returns {string | React.ReactNode[]} Localized version of the string\n */\nexport default function __(key) {\n    if(currentLanguagePack) {\n        const languagePackString= currentLanguagePack[key].value;\n        if(languagePackString['@type'] === 'languagePackStringValueOrdinary') {\n            return getFormattedText(languagePackString.value);\n        }\n    }\n\n    const languagePack = englishLanguagePack;\n    return getFormattedText(languagePack[key]);\n}\n\n/**\n * Returns the localized string for the given language pack string, formatted with the given parameters.\n * @example \n * ```js\n * __fmt('lng_menu_settings', {name: 'John'}) // 'John'\n * ```\n * @param {string} name Language pack string name\n * @param {{[key: string]: string}} params An object containing formatting parameters\n * @returns Localized version of the string, with formattings applied\n */\nexport function __fmt(name, params, useFragments= true) {\n    return  formatString(__(name), params).map(useFragments? applyKeys : e=>e);\n}\n\nexport function __pl(key, count, params={}) {\n    var callback= null;\n    if(currentLanguagePack) {\n        if(currentLanguagePack[key].value['@type'] === 'languagePackStringValuePluralized') {\n            const pluralized= currentLanguagePack[key].value;\n            callback= (mode) => pluralized[mode+'_value'];\n        }\n    }\n    else callback=  (mode) => englishLanguagePack[key+'#'+mode];\n\n    const pluralizedString= getPluralString(getCountMode(count), callback);\n    const formatted= formatString(pluralizedString, {count, ...params});\n    if(formatted.length === 1) return formatted[0];\n    return formatted.map(applyKeys);\n}\n\n/**\n * Formats an array of objects in the format `A, B, C and D`\n * Uses the format strings given as the parameters to do the formatting.\n * The default values for the strings are `{accumulated}, {user}` and `{accumulated} and {user}`\n * \n * @param {boolean} isInvite If true, the value of the strings `lng_action_invite_users_and_one` and `lng_action_invite_users_and_last` will be used. Otherwise, `lng_action_add_users_and_one` and `lng_action_add_users_and_last` will be used.\n * @param {React.ReactNode[]} users An array of objects to format\n * @param {boolean} usesReact If true, the result will be returned as an array of objects, each wrapped in a React Fragment. If false, the result will be returned as a string.\n */\nexport function __collection(isInvite, users, usesReact= false, getLPString= __) {\n    if(users.length == 1) return users[0];\n\n    const format= getLPString(isInvite? 'lng_action_invite_users_and_one' : 'lng_action_add_users_and_one');\n    const formatLast= getLPString(isInvite? 'lng_action_invite_users_and_last' : 'lng_action_add_users_and_last');\n\n    var result= [users[0]];\n    for(let i= 1; i < users.length - 1; i++) {\n        const user= users[i];\n        result= formatString(format, {accumulated: result, user}).flat();\n    }\n    result= formatString(formatLast, {accumulated: result, user: users[users.length - 1]}).flat();\n    return usesReact? result.map(applyKeys) : result.join('');\n}\n\nexport function _s__(key) {\n    return specialStrings[key];\n}\n\nexport function _s__fmt(key, params, useFragments= true) {\n    return formatString(_s__(key), params).map(useFragments? applyKeys : e=>e);\n}\n\n// export function _s__pl(key, count, params={}) {\n// }\n\nexport function _s__collection(isInvite, users, usesReact) {\n    return __collection(isInvite, users, usesReact, _s__);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport filters from '../../../ui/icon/chat_filters/chat-filters';\nimport RippleEffect, {handleMyMouseEventsFunction} from '../../../ui/elements/ripple-effect';\nimport HamburgerMenuButton from './hamburger-menu/menu-button';\nimport { compareChatList } from '../../chat-store';\nimport TdLib from '../../../TdWeb/tdlib';\nimport ScrollView from '../../../ui/scroll/scrollbar';\nimport './chat-folders.scss';\nimport __ from '../../../language-pack/language-pack';\n\nexport var chatListScrollToTopEvent = [function(){}];\n\n/**\n * Renders a chat folder button\n */\nexport function ChatFolder({folder, active, onClick, unread}) {\n    // Ripple effect\n    const ripple= React.useState({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave]= handleMyMouseEventsFunction(ripple);\n\n    const [iconName, setIconName]= React.useState(folder.icon_name);\n\n    React.useEffect(()=> { // Get folder chats, TDLib won't show them if this request isn't sent\n        TdLib.sendQuery({\n            '@type': 'loadChats',\n            'chat_list': {\n                '@type': 'chatListFilter',\n                'chat_filter_id': folder.id,\n            },\n            'limit': 50 // Only get 50 chats //TODO: Implement loading more chats\n        });\n    }, []);\n\n    React.useEffect(()=> {\n        if(!folder.icon_name) {\n            // Default icon is used and we don't know what it is.\n            TdLib.sendQuery({ // Get chat filter info so we can get an idea what it is\n                '@type': 'getChatFilter',\n                'chat_filter_id': folder.id\n            }).then(folder=> {\n                TdLib.sendQuery({ // Ask TDLib what the icon should be\n                    '@type': 'getChatFilterDefaultIconName',\n                    'filter': folder\n                }).then(result=> setIconName(result.text));\n            });\n        }\n    }, [folder]);\n\n    function handleClick(e){\n        onClick(e);\n        chatListScrollToTopEvent[0]?.();\n    }\n\n    var icon= (filters[iconName] || filters['Custom']); // If the icon was empty, show a generic icon instead.\n    icon= icon[active+0] || icon[0]; // Some icons dont have active variant\n    return (\n        <div className={active ? 'item active' : 'item'}>\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-sideBarBgRipple)\"/>\n            <button\n                onMouseDown={mouseDown}\n                onMouseUp={mouseUp}\n                onMouseLeave={mouseLeave}\n                onClick={handleClick}>\n\n                <div className=\"icon\" dangerouslySetInnerHTML={{__html: icon}}></div>\n                <div className=\"title\">{folder.title}</div>\n                {unread?.unread_chats_count? (\n                    <div className=\"unread-badge\" \n                        data-muted={(unread?.unread_unmuted_chats_count==0) ? 'true' : 'false'}>\n                        <span>{unread?.unread_chats_count}</span>\n                    </div>\n                ): null}\n            </button>\n        </div>\n    );\n}\n\nChatFolder.propTypes= {\n    /** The folder object provided by TdLib */\n    folder: PropTypes.object.isRequired,\n    /** A boolean indicating if the folder is currently selected */\n    active: PropTypes.bool.isRequired,\n    /** A function to call when the folder is clicked */\n    onClick: PropTypes.func.isRequired,\n    /** An object containing unread messages and chats count, from `chatStore` */\n    unread: PropTypes.object\n};\n\n/**\n * Renders the chat folders list\n */\nfunction ChatFolderList({folders, currentFolder, unread, dispatch, onHamburgerMenuOpened}) {\n    if(!folders || folders.length==0) return null;\n\n    return (\n        <div id=\"chat-folders-list\">\n            <HamburgerMenuButton.WithFolders onClick={onHamburgerMenuOpened}/>\n\n            <ScrollView scrollBarWidth=\"4\" className=\"list scrollbar full-size\">\n                <ChatFolder \n                    active={compareChatList(currentFolder, {'@type': 'chatListMain'})} \n                    folder={{ title: __('lng_filters_all'), icon_name: 'All' }}\n                    unread={unread.main}\n                    onClick={()=> dispatch({\n                        type: 'SET_CURRENT_CHAT_LIST',\n                        chatList: { '@type': 'chatListMain' }\n                    })}/>\n                \n                {folders.map(folder=> (\n                    <ChatFolder folder={folder} key={folder.id}\n                        unread={unread.filters[folder.id]}\n                        active={compareChatList(currentFolder, \n                            {'@type': 'chatListFilter', 'chat_filter_id': folder.id})}\n                        onClick={()=> dispatch({\n                            type: 'SET_CURRENT_CHAT_LIST',\n                            chatList: { \n                                '@type': 'chatListFilter',\n                                chat_filter_id: folder.id\n                            }\n                        })}/>\n                ))}\n            </ScrollView>\n        </div>\n    );\n}\nChatFolderList.propTypes={\n    /** An array of chat filters */\n    folders: PropTypes.arrayOf(PropTypes.object),\n    /** Current chat list */\n    currentFolder: PropTypes.object,\n    /** A list of unread messages info for each chat list */\n    unread: PropTypes.object,\n    \n    dispatch: PropTypes.func,\n    /** Fires when main menu is triggered */\n    onHamburgerMenuOpened: PropTypes.func\n};\nexport default connect(state=>({\n    folders:state.filters, \n    currentFolder: state.currentChatList,\n    unread: state.unread\n}))(ChatFolderList);","import { ProgressRing } from 'progress-ring';\nimport 'progress-ring/src/styles.css';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Renders a spinner which in addition to spinning, also changes size.\n */\nexport default class LoadingSpinner extends React.Component {\n    static props= {\n        /** Spinner circle size */\n        size: PropTypes.number.isRequired,\n        /** Spinner thickness */\n        lineWidth: PropTypes.number.isRequired,\n        /** Spinner color */\n        progressColor: PropTypes.string.isRequired\n    }\n    state= {\n        percentage: 10 // From 10 to 90, this specifies how much the spinner grows and shrinks while spinning (reversed)\n    }\n    render () {\n        return (\n            <div className=\"loading-spinner\">\n                <ProgressRing\n                    percent={this.state.percentage}\n                    caps='round'\n                    trackColor=\"transparent\"\n                    spin=\"true\"\n                    {...this.props}\n                    transitionDuration=\"2000\"/>\n            </div>\n        );\n    }\n\n    componentDidMount () {\n        this.intervalNum= setInterval(() => { // Spinner grows and shrinks while spinning\n            this.setState({\n                percentage: (90 - this.state.percentage)\n            });\n        }, 2000);\n    }\n\n    componentWillUnmount () {\n        clearInterval(this.intervalNum);\n    }\n}","import React from 'react';\nimport LoadingSpinner from '../elements/loading-spinner';\nimport { connect } from 'react-redux';\n\n/**\n * Renders the connecting spinner at the bottom left corner, which is hidden when connected\n */\nexport default connect(state=> ({state: state})) (function ConnectionState({state}) {\n    return (\n        <div className={'connectionState'+(([\n            'connectionStateConnecting',\n            'connectionStateConnectingToProxy',\n            'connectionStateWaitingForNetwork'\n        ].includes(state))? '' : ' connected')}>\n            <LoadingSpinner\n                progressColor=\"var(--theme-color-menuIconFg)\"\n                size=\"20\"\n                lineWidth=\"2\"/>\n        </div>\n    );\n});\n","import { createStore } from 'redux';\nimport TdLib from '../TdWeb/tdlib';\n\nconst usersStore = createStore((state = {}, action) => {\n    switch (action.type) {\n    case 'UPD_USER':\n        return {\n            ...state,\n            [action.user.id]: action.user\n        };\n    case 'UPD_USER_STATUS':\n        return {\n            ...state,\n            [action.userId]: {\n                ...state[action.userId],\n                status: action.status\n            }\n        };\n    default:\n        return state;\n    }\n}, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nTdLib.registerUpdateHandler('updateUser', (update) => {\n    usersStore.dispatch({\n        type: 'UPD_USER',\n        user: update.user\n    });\n});\n\nTdLib.registerUpdateHandler('updateUserStatus', (update) => {\n    usersStore.dispatch({\n        type: 'UPD_USER_STATUS',\n        userId: update.user_id,\n        status: update.status\n    });\n});\n\nexport default usersStore;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './link-button.scss';\n\n/**\n * Renders a button looking like a link.\n */\nexport default function LinkButton({href, children, onClick, ...rest}) {\n    const click= href ? ()=> window.open(href) : onClick;\n    return (\n        <button className=\"link-button\" onClick={click} {...rest}>{children}</button>\n    );\n}\nLinkButton.propTypes = {\n    /** Link content */\n    children: PropTypes.node.isRequired,\n    /** Function to be called when link is clicked. */\n    onClick: PropTypes.func,\n    /** If provided, the URL will be opened in a new tab on click. */\n    href: PropTypes.string\n};\n","import {createStore} from 'redux';\nimport TdLib from '../TdWeb/tdlib';\n\nfunction reducer(state, action) {\n    switch (action.type) {\n    case 'UPD_SUPERGROUP':\n        return {\n            ...state,\n            [action.supergroup.id]: action.supergroup\n        };\n    default:\n        return state;\n    }\n}\n\nconst supergroupStore= createStore(reducer);\nexport default supergroupStore;\n\nTdLib.registerUpdateHandler('updateSupergroup', (update) => {\n    supergroupStore.dispatch({\n        type: 'UPD_SUPERGROUP',\n        supergroup: update.supergroup\n    });\n});","import __ from '../language-pack/language-pack';\nimport supergroupStore from './supergroup-store';\nimport usersStore from './users-store';\n\n/**\n * Check if the chat is with a deleted user\n * @param {import('tdweb').TdObject} chat The chat to check\n * @param {{[key: number]: import('tdweb').TdObject}} users A dictionary of all users (e.g. usersStore state)\n * @returns True if the chat is private and the other party's account is deleted\n */\nexport function isChatWithDeletedAccount(chat, users) {\n    switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup': // Groups are not applicable\n    case 'chatTypeSupergroup':\n        return false;\n    \n    case 'chatTypeSecret':\n    case 'chatTypePrivate': \n        var user= (users || usersStore.getState())?.[chat.type.user_id];\n        return user && user.type['@type'] === 'userTypeDeleted';\n    }\n    return false;\n}\n\n/**\n * Returns the chat's title and handles deleted account\n * @param {object} chat The chat to get the name of\n * @param {{[key: number]: object}} users A list of all users (e.g. usersStore state). If not provided, usersStore will be used\n * @returns Chat title, or 'Deleted Account'\n */\nexport function chatTitleOrDeletedAccount(chat, users) {\n    if(isChatWithDeletedAccount(chat, users))\n        return __('lng_deleted');\n    return chat.title;\n}\n\n/**\n * Checks if a user, bot or channel is verified\n * @param {import('tdweb').TdObject} chat The chat to be checked\n * @returns {boolean} True if the chat is verified, false if not\n */\nexport function isChatVerified(chat){\n    switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n        return false;\n\n    case 'chatTypeSupergroup':\n        var supergroup= supergroupStore.getState()?.[chat.type.supergroup_id];\n        return supergroup.is_verified;\n        \n    case 'chatTypeSecret':\n    case 'chatTypePrivate': \n        var user= usersStore.getState()?.[chat.type.user_id];\n        return user.is_verified;\n    }\n    return false;\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { createStore } from 'redux';\nimport { connect } from 'react-redux';\nimport './context-menu.scss';\n\n/**\n * A context menu (right click menu)\n */\nexport function ContextMenu({x, y, children}) {\n    const [direction, setDirection] = React.useState('br');\n    const [hide, setHide] = React.useState(false);\n    const ref = React.useRef();\n    React.useEffect(() => {\n        setTimeout(() => {\n            const rect = ref.current.children[0].getBoundingClientRect();\n            const {width, height} = rect;\n            const {clientWidth, clientHeight} = document.documentElement;\n            var X = 'r', Y = 'b';\n            if (x + width > clientWidth) {\n                X = 'l';\n            }\n            if (y + height > clientHeight) {\n                Y = 't';\n            }\n            setDirection(Y + X);\n        }, 0);\n    }, []);\n\n    function handleMouseDown() {\n        setHide(true);\n        setTimeout(() => {\n            contextMenusStore.dispatch({\n                type: 'REMOVE_CONTEXT_MENUS'\n            });\n        }, 500);\n    }\n\n    return (\n        <div className={'context-menu' + (hide? ' hidden' : '')} \n            style={{'--x': x+'px', '--y': y+'px'}} \n            onMouseDown={e=> (!e.target.classList.contains('menu-item') && handleMouseDown())}\n            onMouseUp={e=> ((e.target.classList.contains('menu-item')) && handleMouseDown())}>\n\n            <div className={'menu ' + direction} ref={ref}>\n                {children}\n            </div>\n        </div>\n    );\n}\nContextMenu.propTypes = {\n    /** Position relative to viewport */\n    x: PropTypes.number.isRequired,\n    /** Position relative to viewport */\n    y: PropTypes.number.isRequired,\n    children: PropTypes.node.isRequired\n};\n\nexport const contextMenusStore = createStore(function (state = null, action) {\n    if (action.type === 'ADD_CONTEXT_MENU') {\n        return action.menu;\n    }\n    else if (action.type === 'REMOVE_CONTEXT_MENUS') {\n        return null;\n    }\n    return state;\n});\n\nexport const ContextMenus= connect(state=>({menus:state}))(({menus}) => menus);\n\n/**\n * Create a context menu\n * @param {React.SyntheticEvent} e Pass down `e` from the event handler\n * @param {React.ReactNode} menu Context menu contents\n */\nexport function createContextMenu(e, menu) {\n    e.preventDefault();\n    setTimeout(() => { // This is to fix ripple effect glitch\n        contextMenusStore.dispatch({\n            type: 'ADD_CONTEXT_MENU',\n            menu: <ContextMenu x={e.nativeEvent.pageX} y={e.nativeEvent.pageY}>{menu}</ContextMenu>\n        });\n    }, 50); // Human brain cannot notice 50ms delay\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './menu.scss';\nimport RippleEffect, { handleMyMouseEventsFunction } from '../elements/ripple-effect';\n\n/**\n * A dropdown menu (not to be confused with `<select>`).\n */\nexport default function Menu(props) {\n    return (\n        <div className=\"menu\" {...props}/>\n    );\n}\n\n/**\n * Dropdown menu contents (created as a separate component so that it can be wrapped by other components).\n */\nMenu.MenuContents= function MenuContents(props) {\n    return (\n        <div className=\"menu-contents\" {...props}/>\n    );\n};\n\n/**\n * A menu item.\n */\nMenu.MenuItem= function MenuItem({children, ...rest}) {\n    const ripple= React.useState({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave] = handleMyMouseEventsFunction(ripple);\n    return (\n        <div className=\"menu-item\" {...rest} onMouseDown={mouseDown} onMouseUp={mouseUp} onMouseLeave={mouseLeave}>\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-windowBgRipple)\"/>\n            <div className=\"content\">\n                {children}\n            </div>\n        </div>\n    );\n};\nMenu.MenuItem.propTypes = {\n    children: PropTypes.node\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './toast.scss';\nimport { createStore } from 'redux';\nimport { connect } from 'react-redux';\n\n/**\n * Renders a toast (a small text which is temporarily shown in the middle of the screen)\n */\nexport default function Toast({children}) {\n    const [closed, setClosed] = React.useState(false);\n    React.useEffect(() => {\n        setTimeout(() => { // Automatically close after 6 seconds\n            setClosed(true); // When an element has a closing dialog, a CSS class should be added to trigger the animation\n            setTimeout(() => { // Then we wait until the animation is finished\n                addToast(null); // And we can safely remove the element\n            }, 2000);\n        }, 6000);\n    }, []);\n    return (\n        <div className={'toast' + (closed? ' closed':'')}>\n            <div className=\"toast-content\">\n                {children}\n            </div>\n        </div>\n    );\n}\nToast.propTypes = {\n    children: PropTypes.node.isRequired,\n};\n\nexport const toastStore= createStore((state=null, action) => {\n    if(action.type=='SET_TOAST') return action.toast;\n    return state;\n});\n\nexport const Toasts= connect(state=>({toast: state}))(function Toasts({toast}){\n    return toast;\n});\n\nexport function addToast(toast) {\n    toastStore.dispatch({\n        type: 'SET_TOAST',\n        toast\n    });\n}\n","import TdLib from './tdlib';\n\n/**\n * Contains all options received from TdLib `updateOption`s\n */\nvar options={};\n\nTdLib.registerUpdateHandler('updateOption', function (update) {\n    options[update.name]=update.value.value;\n});\n\nexport default options;\n","import TdLib from './tdlib';\n\n/**\n * Downloads a file. Promise is resolved when the file is downloaded.\n * @param {number} file_id ID of file to be downloaded\n * @param {number} priority From 1 to 32, higher number results in earlier download\n * @returns {import('tdweb').TdObject} File object\n */\nexport function downloadFile (file_id, priority) {\n    let onReject;\n    TdLib.sendQuery({\n        '@type': 'downloadFile',\n        'file_id': file_id,\n        'priority': priority,\n        'offset': 0,\n        'limit': 0,\n        'synchronous': false\n    }).catch(onReject);\n\n    return new Promise((resolve, reject) => {\n        downloadCallbacks[file_id]=result=> {\n            resolve(result);\n            delete downloadCallbacks[file_id];\n        };\n        onReject=reject;\n    });\n}\nvar downloadCallbacks = {};\n\nTdLib.registerUpdateHandler('updateFile', function (update) {\n    if(update.file.local.is_downloading_completed){\n        downloadCallbacks[update.file.id]?.(update.file);\n    }\n});\n\nconst cachedFiles= {};\n\n/**\n * Gets file content (downloads if necessary). Promise is resolved with a `filePart` object when file content is ready\n * @param {import('tdweb').TdObject} file File object\n * @param {number} priority Download priority from 1 to 32. Higher value = earlier download\n * @param {boolean} enableCache If true, file content will be stored in a cache in the RAM. Files larger than 500KiB will not be cached whatsoever.\n * @returns {import('tdweb').TdObject} A `filePart` object\n * \n */\nexport function getFileContent(file, priority, enableCache=true) {\n    if(file.id in cachedFiles){ // If we have it in cache, we can use that\n        return Promise.resolve({data: cachedFiles[file.id]});\n    }\n\n    function resolveFilePart(filePart){\n        if(enableCache && file.size<=500*1024){\n            cachedFiles[file.id]=filePart.data;\n        }\n        return filePart;\n    }\n\n    if(file.local.is_downloading_completed){ // File is already downloaded - only read file\n        return new Promise((resolve, reject) => {\n            TdLib.sendQuery({\n                '@type': 'readFilePart',\n                'file_id': file.id,\n                'offset': 0,\n                'count': 0\n            }).then((f)=>resolve(resolveFilePart(f))).catch(reject);\n        });\n    } \n    else if(file.local.is_downloading_active){ // File is already being downloaded - gets quite complex here.\n        return new Promise((resolve, reject) => {\n            const callback = downloadCallbacks[file.id];\n            downloadCallbacks[file.id] = (result) => { // Replace old callback with a new callback that calls the old one and also does its own stuff\n                callback(result); // Call the old callback\n                TdLib.sendQuery({ // Read the file\n                    '@type': 'readFilePart',\n                    'file_id': file.id,\n                    'offset': 0,\n                    'count': 0\n                }).then((f)=>resolve(resolveFilePart(f))).catch(reject);\n            };\n        });\n    } else {\n        return new Promise((resolve, reject) => { // File is not downloaded.\n            downloadFile(file.id, priority).then(()=> { // Download it...\n                TdLib.sendQuery({ // ...then read it\n                    '@type': 'readFilePart',\n                    'file_id': file.id,\n                    'offset': 0,\n                    'count': 0\n                }).then((f)=>resolve(resolveFilePart(f))).catch(reject);\n            }).catch(reject);\n        });\n    }\n}\n\n/**\n * Converts a blob to a URL\n * @param {Blob} blob Blob to convert\n * @returns {string} Created URL\n */\nexport function blobToUrl (blob) {\n    return (window.URL || window.webkitURL).createObjectURL(blob);\n}\n","export default __webpack_public_path__ + \"static/media/TgLogo.d1ff1195.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { blobToUrl, getFileContent } from '../../TdWeb/file';\nimport options from '../../TdWeb/options';\nimport './profile-photo.scss';\nimport tgLogo from '../../ui/img/TgLogo.png';\nimport { saved_messages, replies_userpic } from '../icon/icons';\n\n/**\n * Converts a name to initials.\n * @param {string} name Input name\n * @returns {string} One or two uppercase letters\n */\nexport function profileNameToInitials(name) {\n    const words=name.replace(/[\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007F]/g,'') // Remove non-word characters\n        .toUpperCase().split(' ');\n    if(words[0].length==0){\n        return '';\n    } else if(words.length===1) {\n        return words[0][0];\n    } else {\n        return words[0][0] + words[words.length-1][0];\n    }\n}\n\n/**\n * Renders a chat / profile photo.\n */\nexport default function ProfilePhoto (props) {\n    const [photo, setPhoto] = React.useState(null);\n    const [photoObj, setPhotoObj] = React.useState(null);\n    const [loaded, setLoaded] = React.useState(false);\n    const isServiceMessages= props.id==options['telegram_service_notifications_chat_id'];\n    const isSavedMessages= props.id==options['my_id'];\n    const isReplies= props.id==options['replies_bot_chat_id'];\n    \n    React.useEffect(() => { // Fetch image data\n        var mounted=true;\n        if(props.photo){\n            if(photoObj!=props.photo){ // No need for any fetch if the same photo is already loaded\n                getFileContent(props.photo, 8).then(file=> {\n                    if(!mounted) return;\n                    setPhoto(blobToUrl(file.data));\n                    setPhotoObj(props.photo);\n                });\n            }\n        } else { // No photo\n            if(photo && photoObj){\n                setPhoto(null);\n                setPhotoObj(null);\n            }\n        }\n        return ()=> mounted=false;\n    }, [props.photo]);\n\n    var customIcon; \n    if(isSavedMessages && (!props?.disableSavedMessages)){ // Use saved messages icon instead of user pic (if not disabled)\n        customIcon= [0, saved_messages];\n    }\n    if(isReplies){ // Replies chat has no icons and we supply one ourselves\n        customIcon= [0, replies_userpic];\n    }\n    if((!props.photo) && isServiceMessages) { // Service messages may have no photo (e.g. on test DC)\n        customIcon = [1, tgLogo];\n    }\n    return (\n        <div className=\"profile-photo\">\n            {(!loaded || !(props.photo && photo)) && <Initials id={props.id} name={props.name}/>}\n            {\n                customIcon? (\n                    customIcon[0]?\n                        <React.Fragment>\n                            {(!loaded) && <Initials id={props.id} name={props.name}/>}\n                            <img onLoad={()=> setLoaded(true)} src={customIcon[1]}/>\n                        </React.Fragment>\n                        :\n                        <div className=\"svg\" dangerouslySetInnerHTML={{__html: customIcon[1]}}/>\n                ) : (\n                    (props.photo && photo) && <img onLoad={()=> setLoaded(true)} src={photo}/> \n                )\n            }\n        </div>\n    );\n}\nProfilePhoto.propTypes = {\n    /** Chat/user name, used for initials */\n    name: PropTypes.string.isRequired,\n    /** Chat type id (supergroup id, user id, etc.), used for initials background */\n    id: PropTypes.number.isRequired,\n    /** Chat / user photo (e.g. `chat.photo?.small`) */\n    photo: PropTypes.object,\n    /** If false, saved messages icon will be used when user_id = my_id */\n    disableSavedMessages: PropTypes.bool\n};\n\n/** Renders photo initials fallback */\nfunction Initials({id, name}) {\n    return (\n        <span className={'initials color_'+ ((Math.abs(id || 0) % 7) + 1)}>\n            {profileNameToInitials(name)}\n        </span>\n    );\n}\nInitials.propTypes = {\n    /** Chat/user name, used to generate initials */\n    name: PropTypes.string.isRequired,\n    /** Chat type ID, used to generate background color */\n    id: PropTypes.number.isRequired\n};\n\n/**\n * Returns a chat's type ID. (supergroup Id / basic group ID / user ID)\n * @param {import('tdweb').TdObject} chat Input chat\n * @returns Chat type ID\n */\nexport function getChatTypeId(chat) {\n    switch (chat?.type?.['@type']) {\n    case 'chatTypeSupergroup': {\n        return chat?.type?.supergroup_id;\n    }\n    case 'chatTypeBasicGroup': {\n        return chat?.type?.basic_group_id;\n    }\n    case 'chatTypePrivate':\n    case 'chatTypeSecret': {\n        return chat?.type?.user_id;\n    }\n    }\n    return null;\n}\n","\n/**\n * Converts a date and time to a short string.\n * - If the date is in the last 20 hours, the time is displayed in the format HH:MM.\n * - If the date is in the last 7 days, the weekday is displayed.\n * - If the date is older, the date is displayed in the format DD.MM.YY.\n * @param {Date|Number} date Input date\n */\nexport function smallDateTimeToString(date) {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    const now = new Date();\n    const yesterday = new Date(now.getTime() - 20 * 60 * 60 * 1000);\n    const lastWeek = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n\n    if (date.getTime() >= yesterday.getTime()) {\n        return timeToString(date);\n    } else if (date.getTime() >= lastWeek.getTime()) {\n        return weekdayToString(date);\n    } else {\n        return dateToString(date);\n    }\n}\n\n/**\n * Formats time in 12-hour format\n * @param {Date|Number} date input date\n */\nexport function timeToString(date) {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    var hours = date.getHours();\n    var minutes = date.getMinutes();\n    const ampm = hours >= 12 ? 'PM' : 'AM';\n    hours = hours % 12;\n    hours = hours ? hours : 12; // the hour '0' should be '12'\n    minutes = minutes < 10 ? `0${minutes}` : minutes;\n    return `${hours}:${minutes} ${ampm}`;\n}\n\n/**\n * Formats weekday in WWW format\n * @param {Date|Number} date input date\n */\nexport function weekdayToString(date) {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    return weekdays[date.getDay()];\n}\n\n/**\n * Formats date in DD.MM.YY format\n * @param {Date|Number} date input date\n */\nexport function dateToString(date) {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    var day = date.getDate();\n    var month = date.getMonth() + 1;\n    const year = String(date.getFullYear()).slice(2);\n    if (day < 10) {\n        day = `0${day}`;\n    }\n    if (month < 10) {\n        month = `0${month}`;\n    }\n    return `${day}.${month}.${year}`;\n}\n\n/**\n * Converts a future day to a string.  \n * If the day is today, returns 'today'.  \n * If the day is tomorrow, returns 'tomorrow'.  \n * If the day is neither today or tomorrow, returns the monthe and day. (eg. 'February 12')\n * @param {Date|Number} date Input date\n * @returns {string} `today`, `tomorrow` or month+day\n */\nexport function futureDayToString(date) {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    const today = new Date();\n    const tomorrow = new Date(today.getTime() + 24 * 60 * 60 * 1000);\n\n    if (date.getDate() == today.getDate() && date.getMonth() == today.getMonth()) {\n        return 'today';\n    } else if (date.getDate() == tomorrow.getDate() && date.getMonth() == tomorrow.getMonth()) {\n        return 'tomorrow';\n    } else {\n        const months= ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n        return `${months[date.getMonth()]} ${date.getDate()}`;\n    }\n}\n\n/**\n * Converts a duration to string.\n * If the duration is less than 2 minutes, the string is in the format 'X seconds'.\n * If the duration is less than 2 hours, the string is in the format 'X minutes'.\n * If the duration is less than 1 day, the string is in the format 'X hours'.\n * If the duration is longer, the string is in the format 'X days'.\n * @param {Number} duration Duration in seconds\n */\nexport function durationToString(duration) {\n    if (duration < 2 * 60) {\n        return `${duration} seconds`;\n    } else if (duration < 2 * 60 * 60) {\n        return `${Math.floor(duration / 60)} minutes`;\n    } else if (duration < 24 * 60 * 60) {\n        return `${Math.floor(duration / 60 / 60)} hours`;\n    } else {\n        return `${Math.floor(duration / 24 / 60 / 60)} days`;\n    }\n}\n\n/**\n * Converts a TDLIb unix time to a `Date` object.\n */\nexport function TdLibDateToDate(tdLibDate) {\n    return new Date(tdLibDate * 1000);\n}\n","import currencies from './currencies';\n\n/**\n * Converts currency to string\n * @param {string} currency Three-letter currency code\n * @param {number} total_amount The total amount\n * @returns Formatted currency string\n */\nexport default function currencyAmountToString (currency, total_amount) {\n    const {symbol, thousands_sep, decimal_sep, symbol_left, space_between, exp}= currencies[currency];\n    const calculatedAmount= total_amount / 10.0**exp;\n    const formattedAmount= calculatedAmount.toFixed(exp).replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, thousands_sep).replace(/\\./, decimal_sep);\n    var withSymbol= symbol_left ? `${symbol}${space_between ? ' ' : ''}${formattedAmount}` : `${formattedAmount}${space_between ? ' ' : ''}${symbol}`;\n    return withSymbol;\n    \n    // var formatter = new Intl.NumberFormat('en-US', {\n    //     style: 'currency',\n    //     currency: currency,\n        \n    //     minimumFractionDigits: 2,\n    //     maximumFractionDigits: 2,\n    // });\n    // return formatter.format(total_amount / 10**currencyObject.exp); // Move two last digits to the right of the decimal point\n}","import { __fmt } from '../language-pack/language-pack';\n\n/**\n * \n * @param {import(\"../TdWeb/td_api\").TdApi.td_User} user \n * @returns \n */\nexport function getUserFullName({first_name, last_name}) {\n    return last_name ? __fmt('lng_full_name', {first_name, last_name}, false).join('') : first_name;\n}","import __, { __fmt } from '../../language-pack/language-pack';\n\nexport default function MessaagePinnedMessage({message, from}) {\n    switch (message.content['@type']) {\n    case 'messageAnimation':\n        return __fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_gif'), from: from});\n\n    case 'messageAudio':\n        return __fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_audio'), from: from});\n\n    case 'messageContact':\n        return __fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_contact'), from: from});\n\n    case 'messageDice':\n        return __fmt('lng_action_pinned_message', {text: message.content.emoji, from: from});\n\n    case 'messageDocument':\n        return __fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_file'), from: from});\n\n    case 'messageGame':\n        return __fmt('lng_action_pinned_media', {media: __fmt('lng_action_pinned_media_game', {game: message.content.game.title}), from: from});\n\n    case 'messagePhoto':\n        return __fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_photo'), from: from});\n\n    case 'messagePoll':\n        return __fmt('lng_action_pinned_message', {text: message.content.poll.question, from: from});\n\n    case 'messageSticker':\n        return __fmt('lng_action_pinned_media', {media: __fmt('lng_action_pinned_media_emoji_sticker', {emoji: message.content.sticker.emoji}), from: from});\n    \n    case 'messageText':\n        var text= message.content.text.text;\n        if( text.length > 21 ) {\n            text = `${text.substr(0, 16)}...`;\n        }\n        return __fmt('lng_action_pinned_message', {text: text, from: from});\n    \n    case 'messageUnsupported':\n        return __fmt('lng_action_pinned_message', {text: __('lng_message_unsupported').substr(0, 16)+'...', from: from});\n\n    case 'messageLocation':\n    case 'messageVenue':\n        return __fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_location'), from: from});\n\n    case 'messageVideo':\n        return __fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_video'), from: from});\n\n    case 'messageVideoNote':\n        return __fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_video_message'), from: from});\n\n    case 'messageVoiceNote':\n        return __fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_voice'), from: from});\n\n    default:\n        return __fmt('lng_action_pinned_message', {text: '', from: from});\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TdLib from '../../TdWeb/tdlib';\nimport currencyAmountToString from '../sections/payments/currency-tostring';\nimport {getUserFullName} from '../user-misc';\nimport { getChatNoCache } from '../chat-store';\nimport MessagePinnedMessage from './message-pinned-message';\nimport { durationToString, futureDayToString, timeToString } from '../../time-tostring';\nimport __, { _s__, __collection, __fmt, __pl } from '../../language-pack/language-pack';\n\n/**\n * Gets a textual representation of the message without a thumbnail.\n * Usage examples: \n * - Last message in chat list\n * - Search results \n * TODO: add possibility to hide sender name (for search results)\n * @returns A span element containing a textual representation of the message. Contains span.part-1 and span.part-2\n */\nexport default function MessageSummaryWithoutIcon({message, className, users, chat}) {\n    if(!message) return null;\n\n    switch(message.content['@type']) {\n    case 'messageAnimation': // GIF\n        return (\n            <MayHaveCaptionThumbnail\n                type=\"GIF\" //TODO: Find the localized string\n                caption={message.content.caption?.text} \n                className={className} \n                message={message} \n                chat={chat}\n                users={users}\n                thumbnails={[message.content?.animation?.minithumbnail?.data]}/>\n        );\n    \n    case 'messageAudio': // Audio/music file\n        var title= message.content.audio.title || message.content.audio.file_name; // If there is no title, use file name instead\n        if(message.content.audio.performer) // Prepend performer name\n            title= message.content.audio.performer+ ' ­­– ' + title;\n        return (\n            <MayHaveCaption \n                type={title} \n                caption={message.content.caption?.text} \n                className={className} \n                message={message} \n                chat={chat}\n                users={users}/>\n        );\n\n    case 'messageBasicGroupChatCreate': // X created the group «xxxx»\n        return (\n            <span className={className}>\n                <span className=\"part-1\">{__fmt('lng_action_created_chat', {from: <SenderFullName chat={chat} message={message} users={users}/>, title: message.content.title})}</span>\n            </span>\n        );\n\n    case 'messageCall': // Call\n        var text='';\n        if(message.is_outgoing) { // You made the call\n            switch(message.content.discard_reason?.['@type']) {\n            case 'callDiscardReasonMissed':\n                text= __(message.content.is_video? 'lng_call_video_cancelled' : 'lng_call_cancelled');\n                break;\n            default:\n                text= __(message.content.is_video? 'lng_call_video_outgoing' : 'lng_call_outgoing');\n            }\n        } else { // The other user called you\n            switch(message.content.discard_reason?.['@type']) {\n            case 'callDiscardReasonDeclined':\n                text= __(message.content.is_video? 'lng_call_video_declined' : 'lng_call_declined');\n                break;\n            case 'callDiscardReasonMissed':\n                text= __(message.content.is_video? 'lng_call_video_missed' : 'lng_call_missed');\n                break;\n            default: \n                text= __(message.content.is_video? 'lng_call_video_incoming' : 'lng_call_incoming');\n            }\n        } \n        return (\n            <span className={className}>\n                <MessageSummarySender message={message} chat={chat} users={users}/>\n                <span className=\"part-1\">{text}</span>\n            </span>\n        );\n\n    case 'messageChatAddMembers': // X added Y\n        // If the user joined the group by themselves, it appears as 'X added X' and that is not accurate.\n        if(message.content.member_user_ids[0] == message.sender?.user_id) {\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{__fmt('lng_action_user_joined', {from: <SenderFullName message={message} chat={chat} users={users}/>})}</span>\n                </span>\n            );\n        }\n\n        var newMembers= message.content.member_user_ids.map(id=> // convert user IDs to names\n            getUserFullName(users[id]));\n        newMembers= __collection(false, newMembers, false);\n        \n        return (\n            <span className={className}><span className=\"part-1\">\n                {__fmt(newMembers.length> 1 ? 'lng_action_add_users_many' : 'lng_action_add_user', {\n                    from: <SenderFullName message={message} chat={chat} users={users}/>,\n                    users: newMembers,\n                    user: newMembers\n                })}\n            </span></span>\n        );\n\n    case 'messageChatChangePhoto': // Chat photo changed\n        // Telegram Desktop shows chat photo change events as 'Photo' instead of 'X changed group photo' or 'Channel photo changed'\n        return (\n            <span className={className}>\n                <span className=\"part-1\">{__('lng_attach_photo')}</span> \n            </span>\n        );\n\n    case 'messageChatChangeTitle': // Chat was renamed\n        if(message.is_channel_post) {\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{__fmt('lng_action_changed_title_channel', {title: message.content.title})}</span>\n                </span>\n            );\n        } else {\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{__fmt('lng_action_changed_title', {\n                        from: <SenderFullName message={message} chat={chat} users={users}/>,\n                        title: message.content.title\n                    })}</span>\n                </span>\n            );\n        }\n\n    case 'messageChatDeleteMember': // X removed Y\n        var deletedMember= users[message.content.user_id];\n        if( deletedMember.id == message.sender?.user_id ) {\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_user_left', {\n                        from: <SenderFullName message={message} chat={chat} users={users}/>\n                    })}\n                </span></span>\n            );\n        }\n        return (\n            <span className={className}><span className=\"part-1\">\n                {__fmt('lng_action_kick_user', {\n                    from: <SenderFullName message={message} chat={chat} users={users}/>,\n                    user: getUserFullName(deletedMember)\n                })}\n            </span></span>\n        );\n\n    case 'messageChatDeletePhoto': // Chat photo was deleted\n        if(message.is_channel_post) {\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{__('lng_action_removed_photo_channel')}</span>\n                </span>\n            );\n        } else {\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_removed_photo', {\n                        from:  <SenderFullName message={message} chat={chat} users={users}/>\n                    })}\n                </span></span>\n            );\n        }\n\n    case 'messageChatJoinByLink': // X joined the group via invite link\n        return (\n            <span className={className}><span className=\"part-1\">\n                {__fmt('lng_action_user_joined_by_link', {\n                    from: <SenderFullName message={message} chat={chat} users={users}/>\n                })}\n            </span></span>\n        );\n\n    case 'messageChatSetTheme':\n        if(message.is_channel_post) {\n            if(message.content.theme_name){\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_action_theme_changed_channel', {\n                            emoji: message.content.theme_name\n                        })} \n                    </span></span>\n                );\n            } else {\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__('lng_action_theme_disabled_channel')}\n                    </span></span>\n                );\n            }\n        } else {\n            if(message.content.theme_name){\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        <ServiceMessageIncludingYou \n                            message={message} chat={chat} users={users}\n                            lpString=\"lng_action_theme_changed\"\n                            lpString_you=\"lng_action_you_theme_changed\"\n                            params={{emoji: message.content.theme_name}}/>\n                    </span></span>\n                );\n            } else {\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        <ServiceMessageIncludingYou \n                            message={message} chat={chat} users={users}\n                            lpString=\"lng_action_theme_disabled\"\n                            lpString_you=\"lng_action_you_theme_disabled\"/>\n                    </span></span>\n                );\n            }\n        }\n\n    case 'messageChatSetTtl': // Auto-delete / self-destruct timer changed\n        var ttlTimeUnit= {\n            86400: __('lng_ttl_about_duration1'), \n            604800: __('lng_ttl_about_duration2'),\n            2678400: __('lng_ttl_about_duration3'),\n        }[message.content.ttl];\n\n        if(message.is_channel_post) {\n            if(message.content.ttl) { // If TTL is disabled, it will be set to 0\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_action_ttl_changed_channel', {\n                            duration: ttlTimeUnit\n                        })}\n                    </span></span>\n                );\n            } else {\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__('lng_action_ttl_removed_channel')}\n                    </span></span>\n                );\n            }\n        } else {\n            if(message.content.ttl) { // If TTL is disabled, it will be set to 0\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        <ServiceMessageIncludingYou \n                            message={message} chat={chat} users={users}\n                            lpString=\"lng_action_ttl_changed\"\n                            lpString_you=\"lng_action_ttl_changed_you\"\n                            params={{duration: ttlTimeUnit}}/>\n                    </span></span>\n                );\n            } else {\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        <ServiceMessageIncludingYou \n                            message={message} chat={chat} users={users}\n                            lpString=\"lng_action_ttl_removed\"\n                            lpString_you=\"lng_action_ttl_removed_you\"/>\n                    </span></span>\n                );\n            }\n        }\n\n    case 'messageChatUpgradeFrom': // It is too complicated to get basic group last message.\n    case 'messageChatUpgradeTo': // TODO: It's complicated, but it should be done.\n        return (\n            <span className={className}>\n                <span className=\"part-1\">{_s__('lngd_action_upgrade_to_supergroup')}</span>\n            </span>\n        );\n\n    case 'messageContact': // Shared contact\n        return (\n            <span className={className}>\n                <MessageSummarySender message={message} chat={chat} users={users}/>\n                <span className=\"part-1\">{__('lng_in_dlg_contact')}</span>\n            </span>\n        );\n\n    case 'messageContactRegistered': // X joined Telegram\n        return (\n            <span className={className}><span className=\"part-1\">\n                {__fmt('lng_action_user_registered', {\n                    from: <SenderFullName message={message} chat={chat} users={users}/>\n                })}\n            </span></span>\n        );\n\n    case 'messageCustomServiceAction': // ¯\\_(ツ)_/¯\n        return (\n            <span className={className}>\n                <span className=\"part-1\">{message.content.text}</span>\n            </span>\n        );\n\n    case 'messageDice': // Dice (🎲🎯🎳⚽🏀)\n        return (\n            <span className={className}>\n                <MessageSummarySender message={message} chat={chat} users={users}/>\n                <span className=\"part-1\">{message.content.emoji}</span>\n            </span>\n        );\n\n    case 'messageDocument': // File/document\n        return (\n            <MayHaveCaptionThumbnail\n                type={message.content.document.file_name} \n                caption={message.content.caption?.text} \n                className={className} \n                message={message} \n                chat={chat}\n                users={users}\n                thumbnails={[message.content?.document?.minithumbnail?.data]}/>\n        );\n    \n    case 'messageExpiredPhoto': \n        return (\n            <span className={className}>\n                <span className=\"part-1\">{__('lng_ttl_photo_expired')}</span>\n            </span>\n        );\n    \n    case 'messageExpiredVideo':\n        return (\n            <span className={className}>\n                <span className=\"part-1\">{__('lng_ttl_video_expired')}</span>\n            </span>\n        );\n    \n    case 'messageGame': // Game\n        return (\n            <span className={className}>\n                <MessageSummarySender message={message} chat={chat} users={users}/>\n                <span className=\"part-1\">🎮 {message.content.game.title}</span>\n            </span>\n        );\n\n    case 'messageGameScore': // X scored {score} in {game}\n        // Text to use if game message is not available\n        var noGameTitleFallback= (\n            <span className={className}><span className=\"part-1\">\n                <ServiceMessageIncludingYou \n                    message={message} chat={chat} users={users}\n                    lpString=\"lng_action_game_score_no_game\"\n                    lpString_you=\"lng_action_game_you_scored_no_game\"\n                    count={message.content.score}/>\n            </span></span>\n        );\n\n        // Get game message\n        var GameScoreWithTitle= React.lazy(()=>new Promise(resolve=> {\n            TdLib.sendQuery({\n                '@type': 'getMessage',\n                chat_id: chat.id,\n                message_id: message.content.game_message_id\n            }).then(\n                result=> { \n                    //eslint-disable-next-line react/display-name\n                    resolve({ default: ()=> (\n                        <span className={className}><span className=\"part-1\">\n                            <ServiceMessageIncludingYou \n                                message={message} chat={chat} users={users}\n                                lpString=\"lng_action_game_score\"\n                                lpString_you=\"lng_action_game_you_scored\"\n                                count={message.content.score}\n                                params={{game: result.content.game.title}}/>\n                        </span></span>\n                    )});\n                },\n                ()=> { // Failed\n                    //eslint-disable-next-line react/display-name\n                    resolve({ default: ()=> noGameTitleFallback});\n                }\n            );\n        }));\n\n        return (\n            <React.Suspense fallback={noGameTitleFallback}>\n                <GameScoreWithTitle/>\n            </React.Suspense>\n        );\n\n    case 'messageInvoice': // Invoice (a buyable product)\n        return (\n            <span className={className}>\n                <MessageSummarySender message={message} chat={chat} users={users}/>\n                <span className=\"part-1\">{message.content.title}</span>\n            </span>\n        );\n\n    case 'messageLocation': // Location\n        return (\n            <span className={className}>\n                <MessageSummarySender message={message} chat={chat} users={users}/>\n                <span className=\"part-1\">{__('lng_maps_point')}</span>\n            </span>\n        );\n\n    case 'messagePassportDataSent': // You sent some Telegram passport data\n        var passportDataTypeToString= {\n            'passportElementTypeAddress':               'lng_passport_address',\n            'passportElementTypeBankStatement':         'lng_passport_address_statement',\n            'passportElementTypeDriverLicense':         'lng_passport_identity_license',\n            'passportElementTypeEmailAddress':          'lng_passport_email_title',\n            'passportElementTypeIdentityCard':          'lng_passport_identity_card',\n            'passportElementTypeInternalPassport':      'lng_passport_identity_internal',\n            'passportElementTypePassport':              'lng_passport_identity_passport',\n            'passportElementTypePassportRegistration':  'lng_passport_address_registration',\n            'passportElementTypePersonalDetails':       'lng_passport_personal_details',\n            'passportElementTypePhoneNumber':           'lng_passport_phone_title',\n            'passportElementTypeRentalAgreement':       'lng_passport_address_agreement',\n            'passportElementTypeTemporaryRegistration': 'lng_passport_address_temporary',\n            'passportElementTypeUtilityBill':           'lng_passport_address_bill',\n        };\n        var passportDataTypes= message.content.types.map(type=> __(passportDataTypeToString[type['@type']]).toLowerCase());\n        return (\n            <span className={className}><span className=\"part-1\">\n                {__fmt('lng_action_secure_values_sent', {\n                    user: chat.title,\n                    documents: passportDataTypes.join(', ')\n                })}\n            </span></span>\n        );\n\n    case 'messagePaymentSuccessful': // You paid [real] money\n        // To be shown if invoice is not available\n        var noInvoiceTitleFallback= (\n            <span className={className}><span className=\"part-1\">\n                {__fmt('lng_action_payment_done', {\n                    amount: currencyAmountToString(message.content.currency, message.content.total_amount),\n                    user: chat.title\n                })}\n            </span></span>\n        );\n\n        // Get invoice message\n        var PaymentInfoWithInvoiceTitle= React.lazy(()=>new Promise(resolve=> {\n            TdLib.sendQuery({\n                '@type': 'getMessage',\n                chat_id: message.content.invoice_chat_id,\n                message_id: message.content.invoice_message_id\n            }).then(\n                result=> { \n                    //eslint-disable-next-line react/display-name\n                    resolve({ default: ()=> (\n                        <span className={className}><span className=\"part-1\">\n                            {__fmt('lng_action_payment_done_for', {\n                                amount: currencyAmountToString(message.content.currency, message.content.total_amount),\n                                user: chat.title,\n                                invoice: result.content.title\n                            })}\n                        </span></span>\n                    )});\n                },\n                ()=> { // Failed\n                    resolve({ default: ()=> noInvoiceTitleFallback});\n                }\n            );\n        }));\n\n        return (\n            <React.Suspense fallback={noInvoiceTitleFallback}>\n                <PaymentInfoWithInvoiceTitle/>\n            </React.Suspense>\n        );\n\n    case 'messagePhoto': // A photo\n        if(message.content.is_secret) { // Self-destructing photo, not implemented\n            if(message.is_outgoing) { // You sent it\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\">{__('lng_ttl_photo_sent')}</span>\n                    </span>\n                );\n            } else { // You received it\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_ttl_photo_received', {\n                            from: <SenderFullName message={message} chat={chat} users={users}/>\n                        })}\n                    </span></span>\n                );\n            }\n        } else { // Normal photo\n            return (\n                <MayHaveCaptionThumbnail \n                    type={__('lng_in_dlg_photo')}\n                    caption={message.content.caption?.text} \n                    className={className} \n                    message={message} \n                    chat={chat}\n                    users={users}\n                    thumbnails={[message.content?.photo?.minithumbnail?.data]}/>\n            );\n        }\n    \n    case 'messagePinMessage':\n\n        // Get pinned message message\n        var PinnedMessageMessage= React.lazy(()=>new Promise(resolve=> {\n            TdLib.sendQuery({\n                '@type': 'getMessage',\n                chat_id: chat.id,\n                message_id: message.content.message_id\n            }).then(\n                result=> { \n                    //eslint-disable-next-line react/display-name\n                    resolve({ default: ()=> (\n                        <span className={className}><span className=\"part-1\">\n                            <MessagePinnedMessage message={result} sender={<SenderFullName message={message} chat={chat} users={users}/>}/>\n                        </span></span>\n                    )});\n                },\n                ()=> { // Failed\n                    //eslint-disable-next-line react/display-name\n                    resolve({ default: ()=> (\n                        <span className={className}><span className=\"part-1\">\n                            {__fmt('lng_action_pinned_media', {\n                                from: <SenderFullName message={message} chat={chat} users={users}/>,\n                                media: __('lng_deleted_message')\n                            })}\n                        </span></span>\n                    )});\n                }\n            );\n        }));\n\n        return (\n            <React.Suspense fallback={\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_pinned_media', {\n                        from: <SenderFullName message={message} chat={chat} users={users}/>,\n                        media: __('lng_contacts_loading')\n                    })}\n                </span></span>\n            }>\n                <PinnedMessageMessage/>\n            </React.Suspense>\n        );\n    \n    case 'messagePoll':\n        return (\n            <span className={className}>\n                <span className=\"part-1\">{message.content.poll.question}</span>\n            </span>\n        );\n    \n    // case 'messageProximityAlertTriggered': // TODO: Reproduce this message and implement it\n    // case 'messageScreenshotTaken':\n    case 'messageSticker': // Sticker\n        return (\n            <span className={className}>\n                <MessageSummarySender message={message} chat={chat} users={users}/>\n                <span className=\"part-1\">\n                    {__fmt('lng_in_dlg_sticker_emoji', {\n                        emoji: message.content.sticker.emoji\n                    })}\n                </span>\n            </span>\n        );\n\n    case 'messageSupergroupChatCreate': // Supergroup created\n        if(message.is_channel_post) {\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{__('lng_action_created_channel')}</span>\n                </span>\n            );\n        } else {\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_created_chat', {\n                        from: <SenderFullName message={message} chat={chat} users={users}/>,\n                        title: message.content.title\n                    })}\n                </span></span>\n            );\n        }\n\n    case 'messageText':\n        return (\n            <span className={className}>\n                <MessageSummarySender message={message} chat={chat} users={users}/>\n                <span className=\"part-2\">{message.content.text.text.replace(/(\\n|\\r|\\r\\n|\\n\\r)/g, ' ')}</span>\n            </span>\n        );\n\n    case 'messageUnsupported': // Is not supported :(\n        return ( //TODO localize\n            <span className={className}>\n                <MessageSummarySender message={message} chat={chat} users={users}/>\n                <span className=\"part-2\">{_s__('lngd_message_unsupported')}</span>\n            </span>\n        );\n    \n    case 'messageVenue': // Venue/location\n        return ( //TODO find the translation string\n            <span className={className}>\n                <MessageSummarySender message={message} chat={chat} users={users}/>\n                <span className=\"part-1\">Location, </span>\n                <span className=\"part-2\">{message.content.venue.title}</span>\n            </span>\n        );\n\n    case 'messageVideo': // Video\n        if(message.content.is_secret) { // Self-destructing photo, not implemented\n            if(message.is_outgoing) { // You sent it\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\">{__('lng_ttl_video_sent')}</span>\n                    </span>\n                );\n            } else { // You received it\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_ttl_video_received', {\n                            from: <SenderFullName message={message} chat={chat} users={users}/>\n                        })}\n                    </span></span>\n                );\n            }\n        } else { // Normal photo\n            return (\n                <MayHaveCaptionThumbnail\n                    type={__('lng_in_dlg_video')}\n                    caption={message.content.caption?.text} \n                    className={className} \n                    message={message} \n                    chat={chat}\n                    users={users}\n                    isVideo={true}\n                    thumbnails={[message.content?.video?.minithumbnail?.data]}/>\n            );\n        }\n\n    case 'messageVideoNote':\n        return (\n            <span className={className}>\n                <MessageSummarySender message={message} chat={chat} users={users}/>\n                <span className=\"part-1\">{__('lng_in_dlg_video_message')}</span>\n            </span>\n        );\n\n    case 'messageVoiceChatScheduled':\n        if(message.is_channel_post) {\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_group_call_scheduled_channel', {\n                        date: __fmt('lng_mediaview_date_time', {\n                            date: futureDayToString(message.content.start_date),\n                            time: timeToString(message.content.start_date)\n                        })\n                    })}\n                </span></span>\n            );\n        } else {\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_group_call_scheduled_group', {\n                        from: <SenderFullName message={message} chat={chat} users={users}/>,\n                        date: __fmt('lng_mediaview_date_time', {\n                            date: futureDayToString(message.content.start_date),\n                            time: timeToString(message.content.start_date)\n                        })\n                    })}\n                </span></span>\n            );\n        }\n\n    case 'messageVoiceChatStarted':\n        if(message.is_channel_post) {\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{__('lng_action_group_call_started_channel')}</span>\n                </span>\n            );\n        } else {\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_group_call_started_group', {\n                        from: <SenderFullName message={message} chat={chat} users={users}/>\n                    })}\n                </span></span>\n            );\n        }\n\n    case 'messageVoiceChatEnded':\n        if(message.is_channel_post) {\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_group_call_finished', {\n                        duration: durationToString(message.content.duration)\n                    })}\n                </span></span>\n            );\n        } else {\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_group_call_finished_group', {\n                        from: <SenderFullName message={message} chat={chat} users={users}/>,\n                        duration: durationToString(message.content.duration)\n                    })}\n                </span></span>\n            );\n        }\n\n    case 'messageInviteVoiceChatParticipants':\n        var invitedMembers= message.content.user_ids.map(id=> // convert user IDs to names\n            getUserFullName(users[id]));\n        invitedMembers= __collection(true, invitedMembers, false); // A, B, and C\n        return (\n            <span className={className}><span className=\"part-1\">\n                {__fmt((invitedMembers.length==1 ? 'lng_action_invite_user' : 'lng_action_invite_users_many'), {\n                    from: <SenderFullName message={message} chat={chat} users={users}/>,\n                    user: invitedMembers,\n                    users: invitedMembers,\n                    chat: __('lng_action_invite_user_chat')\n                })}\n            </span></span>\n        );\n\n    case 'messageVoiceNote':\n        return (\n            <MayHaveCaption \n                type={__('lng_in_dlg_audio')}\n                caption={message.content.caption?.text} \n                className={className} \n                message={message} \n                chat={chat}\n                users={users}/>\n        );\n\n    case 'messageWebsiteConnected':\n        return (\n            <span className={className}><span className=\"part-1\">\n                {__fmt('lng_action_bot_allowed_from_domain', {\n                    domain: message.content.domain_name\n                })}\n            </span></span>\n        );\n\n    default:\n        return null;\n    }\n}\nMessageSummaryWithoutIcon.propTypes= {\n    /** Input message */\n    message: PropTypes.object,\n    className: PropTypes.string,\n    /** The chat in which the message was */\n    chat: PropTypes.object,\n    /** A dictionary of all users */\n    users: PropTypes.object,\n};\n\n\n/** If caption has a value, adds a comma to type and returns type */ \nfunction MayHaveCaption({type, caption, className, message, chat, users}) {\n    if(caption) type+=',';\n    return (\n        <span className={className}>\n            <MessageSummarySender message={message} chat={chat} users={users}/>\n            <span className=\"part-1\">{type}</span> <span className=\"part-2\">{caption.replace(/(\\n|\\r|\\r\\n|\\n\\r)/g, ' ')}</span>\n        </span>\n    );\n}\nMayHaveCaption.propTypes= {\n    /** Message type, e.g. 'GIF', 'Video' */\n    type: PropTypes.string.isRequired,\n    /** Message caption, can be empty */\n    caption: PropTypes.string,\n    className: PropTypes.string,\n    /** Message object */\n    message: PropTypes.object,\n    /** The chat in which the message was sent */\n    chat: PropTypes.object,\n    /** A dictionary of all users */\n    users: PropTypes.object.isRequired\n};\n\n/** If caption has a value, adds a comma to type and returns type */ \nfunction MayHaveCaptionThumbnail({thumbnails, isVideo, type, caption, className, message, chat, users}) {\n    if(!thumbnails?.length) return <MayHaveCaption type={type} caption={caption} className={className} message={message} chat={chat} users={users}/>;\n    return (\n        <span className={className}>\n            <MessageSummarySender message={message} chat={chat} users={users}/>\n            {thumbnails.map((data, i) => data && <span className={'thumbnail'+ (isVideo? ' video': '')} key={i}><img src={'data:image/jpeg;base64,'+data}/></span>)} \n            {caption? \n                <span className=\"part-2\">{caption.replace(/(\\n|\\r|\\r\\n|\\n\\r)/g, ' ')}</span>\n                :<span className=\"part-1\">{type}</span> \n            }\n        </span>\n    );\n}\nMayHaveCaptionThumbnail.propTypes= {\n    /** An array of one or more base64-encoded image data */\n    thumbnails: PropTypes.arrayOf(PropTypes.string),\n    /** If true, a tiny play icon will be shown on the image */\n    isVideo: PropTypes.bool,\n    /** Message type, e.g. 'GIF', 'Video' */\n    type: PropTypes.string.isRequired,\n    /** Message caption, can be empty */\n    caption: PropTypes.string,\n    className: PropTypes.string,\n    /** Message object */\n    message: PropTypes.object,\n    /** The chat in which the message was sent */\n    chat: PropTypes.object,\n    /** A dictionary of all users */\n    users: PropTypes.object.isRequired\n};\n\n/** Sender's first name + last name */\nfunction SenderFullName({message, chat, users, includeYou}) {\n    if(includeYou) { // Use 'You' if the message is outgoing?\n        return message.is_outgoing ? __('lng_from_you') : <SenderFullName message={message} chat={chat} users={users}/>;\n    }\n    const sender=message.sender;\n    const user=users[sender.user_id];\n    if(sender['@type']=='messageSenderUser') {\n        return getUserFullName(user); \n    } else if(sender['@type']=='messageSenderChat') { // Anonymous admin\n        return chat.title;\n    }\n}\n\n/**\n * Formats a service message which 'from' can be 'You' or a user's full name\n * @param {object} message The message object\n * @param {object} chat The chat in which the message was sent\n * @param {object} users A dictionary of all users\n * @param {string} lpString Language pack string key for the service message\n * @param {string} lpString_you Language pack string key for the service message if the service message is outgoing\n * @param {string} params Parameters for the language pack string\n * @param {number|undefined} count If provided, the language pack strings will be treated as pluralized\n */\nfunction ServiceMessageIncludingYou({message, chat, users, lpString, lpString_you, params={}, count=undefined}) {\n    var string= lpString_you;\n    var sender;\n    if(!message.is_outgoing){\n        string= lpString;\n\n        const user=users[message.sender.user_id];\n        if(message.sender['@type']=='messageSenderUser') {\n            sender= getUserFullName(user); \n        } else if(message.sender['@type']=='messageSenderChat') { // Anonymous admin\n            sender= chat.title;\n        }\n    }\n\n    if(count==undefined) {\n        return __fmt(string, {\n            from: sender,\n            ...params\n        });\n    } else {\n        return __pl(string, count, {\n            from: sender,\n            ...params\n        });\n    }\n}\n\n/** Short sender names in the beginning of message previews */\nexport const MessageSummarySender= \n    function MessageSummarySender ({message, chat, users}) {\n        if(!message) return null;\n\n        var part1;\n        if(chat && (!message.is_channel_post)) { // Channel posts dont have sender names\n            if(message.is_outgoing) {\n                part1= __('lng_from_you');\n            } else if(['chatTypeBasicGroup', 'chatTypeSupergroup'].includes(chat.type['@type'])) { // Message is sent in a group\n                if(message.sender['@type']=='messageSenderUser') {\n                    part1= users[message.sender.user_id].first_name;\n                }\n            }\n            if(message.sender['@type']=='messageSenderChat') {\n                part1= getChatNoCache(message.sender.chat_id).title;\n            }\n        }\n        return part1? <span className=\"sender\">{__fmt('lng_dialogs_text_from_wrapped', {from: part1})} </span> : null;\n    };\nMessageSummarySender.propTypes= {\n    /** Message to check the sender */\n    message: PropTypes.object.isRequired,\n    /** Chat in which the message was sent */\n    chat: PropTypes.object.isRequired,\n    /** A dictionary of all users */\n    users: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { createStore } from 'redux';\n\n/**\n * A redux store which state is an array of objects with {id: unique ID of dialog, element: react element of the dialog}\n */\nexport var dialogStore= createStore(\n    /**\n     * @param {any[]} state\n     * @param {Object} action\n     */\n    function (state= [], action) {\n        switch (action.type) {\n        case 'ADD_DIALOG':\n            return [\n                ...state,\n                action.dialog\n            ];\n        \n        case 'REMOVE_DIALOG':\n            return state.filter(value => value.id!=action.id);\n        \n        default:\n            break;\n        }\n    },\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\n/**\n * Opens a dialog\n * @param {string} id A unique ID for the dialog\n * @param {React.ReactElement} dialog The dialog React element\n */\nexport function addDialog(id, dialog) {\n    dialogStore.dispatch({\n        type: 'ADD_DIALOG',\n        dialog: {\n            element: dialog,\n            id: id\n        }\n    });\n}\n\n/**\n * Closes an existing dialog\n * @param {string} id The dialog unique ID\n */\nexport function removeDialog(id) {\n    dialogStore.dispatch({\n        type: 'REMOVE_DIALOG',\n        id: id\n    });\n}\n\n/**\n * Renders all dialogs.\n */\nconst Dialogs= (connect(function (state) {\n    return {dialogs: state || []};\n    // eslint-disable-next-line no-unused-vars\n})(function Dialogs({dialogs, dispatch, ...rest}) {\n    return (\n        <div data-dialog={!!dialogs.length} {...rest}>\n            {dialogs.map(el => <React.Fragment key={el.id}>{el.element}</React.Fragment>) || null}\n        </div>\n    );\n}));\n\nexport default Dialogs;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport RippleEffect, {handleMyMouseEventsFunction} from './ripple-effect';\n\n/**\n * Renders a small button with accent color\n */\nexport default function SmallButton ({children, attention, ...rest}) {\n    const ripple= React.useState({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave]= handleMyMouseEventsFunction(ripple);\n    return (\n        <button \n            className=\"small-button\" \n            data-attention={attention? 'true': 'false'}\n            onMouseDown={mouseDown}\n            onMouseUp={mouseUp}\n            onMouseLeave={mouseLeave}\n            {...rest}>\n\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-lightButtonBgRipple)\"/>\n\n            {/* Because we use absolute positioning on the actual content, we need a copy of it without absolute position to get the correct parent size. */}\n            <div className=\"invisibleText\">\n                {children}\n            </div>\n\n            <div className=\"content\">\n                {children}\n            </div>\n            \n        </button>\n    );\n}\nSmallButton.propTypes= {\n    /** The button's content */\n    children: PropTypes.node.isRequired,\n    /** Fires when the button is clicked */\n    onClick: PropTypes.func,\n    /** Setting to true causes the button to become red */\n    attention: PropTypes.bool\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { removeDialog } from './dialogs';\n/**\n * Renders a modal dialog\n * Use React ref to access the `close()` method.\n */\nexport default class Dialog extends React.Component{\n    static propTypes= {\n        children: PropTypes.node.isRequired,\n        /** Dialog width in CSS format */\n        width: PropTypes.string,\n        /** Unique ID of this dialog, used to close it. */\n        id: PropTypes.any.isRequired,\n        className: PropTypes.string\n    };\n    state= {\n        closing: false\n    }\n    ref = React.createRef();\n    /** @param {React.SyntheticEvent} e */\n    onClick= (e) => {\n        if (e.target === this.ref.current) {\n            this.close();\n        }\n    }\n    render(){\n        return (\n            <div ref={this.ref} onClick={this.onClick} id={this.props.id} className={'modal-dialog' + ((this.state.closing) ? ' closing ' : ' ') + this.props.className}>\n                <div style={{\n                    'width': this.props.width || 'auto'\n                }}>\n                    {this.props.children}\n                </div>\n            </div>\n        );\n    }\n    close= ()=>{\n        this.setState({\n            closing: true\n        });\n        setTimeout(() => {\n            removeDialog(this.props.id);\n        }, 1000);\n    }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SmallButton from '../elements/small-button';\nimport Dialog from './dialog';\nimport __ from '../../language-pack/language-pack';\n/**\n * Renders a modal dialog with a title and cancel and OK button. OK button text can be changed.\n */\nexport default class ConfirmDialog extends React.Component{\n    dialogRef = React.createRef();\n    handleOK =()=>{\n        this.dialogRef.current.close();\n        this.props.onOK && this.props.onOK();\n    }\n    handleCancel =()=>{\n        this.dialogRef.current.close();\n        this.props.onCancel && this.props.onCancel();\n    }\n    handleButton =(handler)=>{\n        this.dialogRef.current.close();\n        handler && handler();\n    }\n    render() {\n        return (\n            <Dialog className=\"confirm-dialog\" id={this.props.id} ref={this.dialogRef} width={this.props.width || '320px'}>\n                <h1>{this.props.title || ''}</h1>\n                <div className={'content' + (this.props.largeFont? ' large-font' : '')}>\n                    {this.props.children}\n                </div>\n                <div className=\"options\">\n                    {this.props.thirdButton ?  (\n                        <SmallButton \n                            className=\"small-button left\"\n                            style={{'float': 'left'}}\n                            onClick={ this.props.thirdButtonClosesDialog ?\n                                ()=>this.handleButton(this.props.onThirdButtonClick)\n                                : this.props.onThirdButtonClick}>\n                            {this.props.thirdButton}\n                        </SmallButton>\n                    ) : null}\n                    {this.props.hideCancelButton ? null : (\n                        <SmallButton onClick={()=>this.handleButton(this.props.onCancel)}>\n                            {__('lng_cancel')}\n                        </SmallButton>\n                    )}\n                    <SmallButton onClick={()=>this.handleButton(this.props.onOK)} attention={this.props.attention}>\n                        {this.props.OKButtonText || __('lng_box_ok')}\n                    </SmallButton>\n                </div>\n            </Dialog>\n        );\n    }\n}\nConfirmDialog.propTypes= {\n    children: PropTypes.node.isRequired,\n    /** Dialog width in CSS format */\n    width: PropTypes.string,\n    /** Dialog header */\n    title: PropTypes.string,\n    /** Text content of the OK button*/\n    OKButtonText: PropTypes.string,\n    /** Pass true to only show the OK button */\n    hideCancelButton: PropTypes.bool,\n    /** Unique ID of this dialog, used to close it. */\n    id: PropTypes.any.isRequired,\n    /** Called when the OK button is pressed */\n    onOK: PropTypes.func,\n    /** Called when the cancel button is pressed */\n    onCancel: PropTypes.func,\n    /** Third button text (optional) */\n    thirdButton: PropTypes.string,\n    /** Pass true if third button click closes dialog */\n    thirdButtonClosesDialog: PropTypes.bool,\n    /** Called when third button is pressed */\n    onThirdButtonClick: PropTypes.func,\n    /** If true, the OK button will become red, meaning the user should pay attention */\n    attention: PropTypes.bool,\n    /** If true, the dialog text will be larger */\n    largeFont: PropTypes.bool\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport TdLib from '../../../TdWeb/tdlib';\nimport RippleEffect, { handleMyMouseEvents } from '../../../ui/elements/ripple-effect';\nimport { dialogs_bot, dialogs_channel, dialogs_chat, dialogs_pinned, dialogs_received, dialogs_sending, dialogs_sent, dialogs_verified_check, dialogs_verified_star } from '../../../ui/icon/icons';\nimport { isChatVerified, isChatWithDeletedAccount } from '../../chat-misc';\nimport options from '../../../TdWeb/options';\nimport { getMessageStatus } from '../../message-misc';\nimport __, { __pl } from '../../../language-pack/language-pack';\nimport { createContextMenu } from '../../../ui/menu/context-menu';\nimport ProfilePhoto, { getChatTypeId } from '../../../ui/components/profile-photo';\nimport { smallDateTimeToString } from '../../../time-tostring';\nimport MessageSummaryWithoutIcon from '../../message/message-summary-noicon';\nimport Menu from '../../../ui/menu/menu';\nimport Toast, { addToast } from '../../../ui/dialog/toast';\nimport { addDialog } from '../../../ui/dialog/dialogs';\nimport ConfirmDialog from '../../../ui/dialog/confirm-dialog';\nimport chatStore from '../../chat-store';\n\n/**\n * Renders a single chat\n */\nclass ChatListItem extends React.Component {\n    constructor(props) {\n        super(props);\n        [this.mouseDown, this.mouseUp, this.mouseLeave]= handleMyMouseEvents(this);\n    }\n    state= {\n        ripple: {\n            state: 'off'\n        }\n    };\n    shouldComponentUpdate(nextProps, nextState) {\n        function getUser(props){ // Gets the user which is the other party of the chat. Used to see if the needed user has changed\n            if(props.chat.type['@type']=='chatTypePrivate') {\n                return props.users[props.chat.type.user_id];\n            }\n            return null;\n        }\n        return nextProps.chat.id !== this.props.chat.id\n            || nextProps.chat.last_message !== this.props.chat.last_message\n            || nextProps.chat.draft_message !== this.props.chat.draft_message\n            || nextProps.chat.unread_count !== this.props.chat.unread_count\n            || nextProps.chat.unread_mention_count !== this.props.chat.unread_mention_count\n            || nextProps.chat.is_marked_as_unread !== this.props.chat.is_marked_as_unread\n            || nextProps.chat.position.is_pinned !== this.props.chat.position.is_pinned\n            || nextProps.chat.photo?.small?.id !== this.props.chat.photo?.small?.id\n            || nextProps.chat.title !== this.props.chat.title\n            || nextProps.chat.last_read_outbox_message_id !== this.props.chat.last_read_outbox_message_id\n            || nextProps.selected !== this.props.selected\n            || nextState.ripple !== this.state.ripple\n            || getUser(nextProps) !== getUser(this.props);\n    }\n    openChat = () => {\n        chatStore.dispatch({\n            type: 'SELECT_CHAT',\n            chat_id: this.props.chat.id\n        });\n    }\n    render(){\n        const chat= {...this.props.chat}; // Clone chat object to avoid mutating it. Mutating it causes Saved messages and Deleted account chats to get past shouldComponentUpdate.\n        var chatType= '';\n        if (chat.type?.['@type'] == 'chatTypeBasicGroup' ||      // Groups are basic groups and non-channel supergroups\n                (chat.type?.['@type'] == 'chatTypeSupergroup' &&\n                chat.type?.is_channel == false)\n        ){\n            chatType= dialogs_chat;\n        } \n        else if (chat.type?.['@type'] == 'chatTypeSupergroup' && // Channels are supergroups with is_channel set to true\n                chat.type?.is_channel == true){\n            chatType= dialogs_channel;\n        } \n        else if ((chat.type?.['@type'] == 'chatTypePrivate') &&  // Bots are private chats with bot user type\n                (this.props.users[chat.type?.user_id]?.type?.['@type'] == 'userTypeBot')){\n            chatType= dialogs_bot;\n        }\n        if (chat.id==options['replies_bot_chat_id']) { // Replies bot does not have a type icon\n            chatType= '';\n        }\n\n        if(isChatWithDeletedAccount(chat, this.props.users)) {\n            chat.title= __('lng_deleted'); // Chat object is a copy, so there is no problem with mutating it.\n        }\n\n        const isVerified= isChatVerified(chat);\n\n        if (chat.id==options['my_id']) {\n            chat.title= __('lng_saved_messages');\n        }\n\n        var messageStatus = null;\n        switch(getMessageStatus(chat, chat.last_message)) { // Is the message sending, sent or seen?\n        case 'sending': \n            messageStatus = <span className=\"message-status-icon sending\" dangerouslySetInnerHTML={{__html: dialogs_sending}}/>;\n            break;\n        case 'sent': \n            messageStatus = <span className=\"message-status-icon sent\" dangerouslySetInnerHTML={{__html: dialogs_sent}}/>;\n            break;\n        case 'seen': \n            messageStatus = <span className=\"message-status-icon seen\" dangerouslySetInnerHTML={{__html: dialogs_received}}/>;\n            break;\n        }\n\n        var unreadBadge = null;\n        const unreadBadgeClass= chat.notification_settings.mute_for ? 'unread-badge muted' : 'unread-badge';\n        // Show the mention badge alone if there is exactly one mention and no other unread messages\n        if (chat.unread_mention_count == 1 && chat.unread_count == chat.unread_mention_count) {\n            unreadBadge = <span className=\"unread-badge mention\">@</span>;\n        } \n        // Show the mention badge with unread badge together if there are more than one unread messages and there are mentions\n        else if (chat.unread_mention_count > 0 && chat.unread_count > 1 ) {\n            unreadBadge = <React.Fragment>\n                <span className=\"unread-badge mention\">@</span>\n                <span className={unreadBadgeClass}>{chat.unread_count}</span>\n            </React.Fragment>;\n        }\n        // Show the unread badge alone if there are no mentions and there are unread messages\n        else if (chat.unread_count > 0 && chat.unread_mention_count == 0) {\n            unreadBadge = <span className={unreadBadgeClass}>{chat.unread_count}</span>;\n        }\n        // Show an empty badge if chat is manually marked as unread\n        else if (chat.is_marked_as_unread) {\n            unreadBadge = <span className={unreadBadgeClass}></span>;\n        }\n\n        var isOnline= false; // User online status\n        if((chat.type['@type']== 'chatTypePrivate') && // Only private chats (except saved messages and service notifications)\n            (chat.id!=options['my_id']) && (chat.id!=options['telegram_service_notifications_chat_id']) ){ \n            const user= this.props.users[chat.type.user_id];\n            if(user) {\n                isOnline= user.type['@type'] == 'userTypeRegular' && user.status['@type'] == 'userStatusOnline'; // Shouldn't be a bot\n            }\n        }\n\n        return(\n            <div className={'chat' + (this.props.selected? ' active' : '')} onClick={this.openChat}\n                onContextMenu={e=> createContextMenu(e, <ChatContextMenu chat={chat}/>)}\n                onMouseDown={this.mouseDown} onMouseUp={this.mouseUp} onMouseLeave={this.mouseLeave}>\n                \n                <RippleEffect {...this.state.ripple} color=\"var(--theme-color-dialogsRippleBg)\"/>\n                <div className=\"content\" data-online={isOnline ? 'true' : 'false'}>\n                    <ProfilePhoto name={chat.title} photo={chat.photo?.small} id={getChatTypeId(chat)}/>\n                    <div className=\"details\">\n                        <div className=\"top\">\n                            <div className=\"left\">\n                                <div className=\"type-icon\" dangerouslySetInnerHTML={{__html: chatType}}></div>\n                                <div className=\"title\">{chat.title}</div>\n                                {isVerified && <span className=\"verified-icon\">\n                                    <span className=\"verified-icon-star\" dangerouslySetInnerHTML={{__html: dialogs_verified_star}}></span>\n                                    <span className=\"verified-icon-check\" dangerouslySetInnerHTML={{__html: dialogs_verified_check}}></span>\n                                </span>}\n                            </div>\n                            <div className=\"right\">\n                                {messageStatus}\n                                {chat.last_message?.date && <span className=\"date\">{smallDateTimeToString(chat.last_message.date)}</span>}\n                            </div>\n                        </div>\n                        <div className=\"bottom\">\n                            <div className=\"left\">\n                                {(chat.draft_message && !unreadBadge) ?  // I don't know why, but Telegram Desktop does not show the draft message if the chat is unread.\n                                    <span className=\"last-message\">\n                                        <span className=\"draft\">{__('lng_from_draft')}:</span> <span className=\"part-2\">{chat.draft_message.input_message_text.text.text}</span>\n                                    </span> \n                                    :\n                                    <MessageSummaryWithoutIcon message={chat.last_message} users={this.props.users} chat={chat} className=\"last-message\"/>\n                                }\n                            </div>\n                            <div className=\"right\">\n                                {unreadBadge || ( // Unread badge overrides pinned icon\n                                    chat.position?.is_pinned && <span className=\"pinned_icon\" dangerouslySetInnerHTML={{__html: dialogs_pinned}}></span>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nChatListItem.propTypes = {\n    /** The chat (TdObject) */\n    chat: PropTypes.object.isRequired,\n    /** A boolean value which should be `true` if the chat is currently open */\n    selected: PropTypes.bool,\n    /** A dictionary of all users */\n    users: PropTypes.object.isRequired\n};\nexport const Chat = connect(state=> ({users: state}))(ChatListItem);\n\n/** Renders the context menu of a chat */\nfunction ChatContextMenu({chat}) {\n    const [movableChatLists, setMovableChatLists] = React.useState([]);\n\n    // Archive/unarchive chats\n    React.useEffect(() => {\n        TdLib.sendQuery({ // Only TDLib can know what lists we can add the chat to\n            '@type': 'getChatListsToAddChat',\n            chat_id: chat.id\n        }).then(result => {\n            setMovableChatLists(result.chat_lists.map(chatList=> {\n                const text= { // Only archive / unarchive\n                    'chatListMain': __('lng_archived_add'), \n                    'chatListArchive': __('lng_archived_remove')\n                }[chatList['@type']];\n                if(!text) return;\n                return (\n                    <Menu.MenuItem key={chatList.chat_filter_id || chatList['@type']} onClick={() => {\n                        TdLib.sendQuery({\n                            '@type': 'addChatToList',\n                            chat_id: chat.id,\n                            chat_list: chatList\n                        }).then(() => {\n                            if(chatList['@type'] == 'chatListMain') {\n                                addToast(<Toast>{__('lng_archived_removed')}</Toast>);\n                            } \n                            else if(chatList['@type'] == 'chatListArchive') {\n                                addToast(<Toast>{__('lng_archived_added')}</Toast>);\n                            }\n                        });\n                    }}>\n                        {text}\n                    </Menu.MenuItem>\n                );\n            }));\n        });\n    }, []);\n\n    return (\n        <Menu.MenuContents>\n            {movableChatLists /* Archive/unarchive */}\n            <Menu.MenuItem onClick={()=> { // Pin/unpin\n                TdLib.sendQuery({\n                    '@type': 'toggleChatIsPinned',\n                    chat_list: chat.position.list,\n                    chat_id: chat.id,\n                    is_pinned: !chat.position.is_pinned\n                }).catch(error=> {\n                    // Maximum pinned messages\n                    if(error.code == 400) {\n                        const max= chat.position.list['@type'] == 'chatListMain'? options['pinned_chat_count_max'] : options['pinned_archived_chat_count_max'];\n                        addDialog('maximum-pinned-chats-reached', (\n                            <ConfirmDialog id=\"maximum-pinned-chats-reached\" largeFont={true} hideCancelButton={true}>\n                                {__pl('lng_error_pinned_max', max)}\n                            </ConfirmDialog>\n                        ));\n                    }\n                });\n            }}>\n                {chat.position.is_pinned? __('lng_context_unpin_from_top') : __('lng_context_pin_to_top')}\n            </Menu.MenuItem>\n        </Menu.MenuContents>\n    );\n}\nChatContextMenu.propTypes = {\n    chat: PropTypes.object.isRequired\n};","/**\n * Gets message sending status. Can return 3 values:\n * - `\"sending\"`: the message is outgoing and is being sent.\n * - `\"sent\"`: the message is outgoing and was sent.\n * - `\"seen\"`: the message is outgoing and was seen by the other party.\n * - `\"unread\"`: the message is incoming and was not seen by this party.\n * - `\"read\"`: the message is incoming and was seen by this party.\n * @param {import(\"tdweb\").TdObject} chat The chat in which the message was sent.\n * @param {import(\"tdweb\").TdObject} message The message to check.\n */\nexport function getMessageStatus(chat, message) {\n    if(!chat || !message) return undefined;\n    if(message.is_outgoing) {\n        if(message.sending_state) {\n            return 'sending';\n        }\n        if(chat.last_read_outbox_message_id >= message.id) {\n            return 'seen';\n        }\n        return 'sent';\n    }\n    if(chat.last_read_inbox_message_id >= message.id) {\n        return 'read';\n    }\n    return 'unread';\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect, Provider } from 'react-redux';\nimport TdLib from '../../../TdWeb/tdlib';\nimport chatStore, { compareChatList } from '../../chat-store';\nimport './chat-list.scss';\nimport { archive_userpic, history_to_down } from '../../../ui/icon/icons';\nimport usersStore from '../../users-store';\nimport ScrollView from '../../../ui/scroll/scrollbar';\nimport LinkButton from '../../../ui/elements/link-button';\nimport { chatTitleOrDeletedAccount } from '../../chat-misc';\nimport RippleEffect, { handleMyMouseEventsFunction } from '../../../ui/elements/ripple-effect';\nimport { createContextMenu } from '../../../ui/menu/context-menu';\nimport Menu from '../../../ui/menu/menu';\nimport Toast, { addToast } from '../../../ui/dialog/toast';\nimport './history-to-down.scss';\nimport IconButton from '../../../ui/elements/icon-button';\nimport { chatListScrollToTopEvent } from './chat-folders';\nimport __ from '../../../language-pack/language-pack';\nimport { Chat } from './chat-list-item';\n\n/**\n * Returns a sorted list of all chats in the given chat list\n * \n * Also for every chat, sets `chat.position` to the matching position (creates copy instead of modifying original object)\n * @param {import('tdweb').TdObject[]} chats\n * @param {import('tdweb').TdObject} list\n */\nexport function getChatsFromList(chats, list) {\n    return chats.map(chat => { // Step 1 - get the chat positions which refer to the current list\n        for( const position of chat.positions ) {\n            if (compareChatList(list, position.list)) {\n                if( position.order=='0' ) return false; // Replace a chat without a suitable position with `false`\n                return {\n                    ...chat,\n                    position: position // Store the position in chat object\n                };\n            }\n        }\n        return chat;\n    })\n        .filter(chat => !!chat.position) // Step 2 - Remove `false` values (chats outside the list)\n        .sort((a, b) => { // Step 3 - Sort it by position.order\n            let order1= a.position.order, order2= b.position.order;\n\n            if (order1 == order2) {\n                return 0;\n            }\n            if (order1 < order2) {\n                return 1;\n            }\n            return -1;\n        });\n}\n\n/**\n * Renders the chats within a chat list\n */\nconst ChatList= connect(state=> ({connectionState: state}))(\n    class ChatList extends React.Component { \n        static propTypes = {\n            chats: PropTypes.array.isRequired,\n            list: PropTypes.object.isRequired,\n            connectionState: PropTypes.string.isRequired,\n            unread: PropTypes.object.isRequired,\n            selectedChat: PropTypes.number\n        }\n        state= {\n            scrollToTopVisible: false,\n            chatListFinished: false\n        }\n        scrollRef= React.createRef();\n\n        onScroll= (e) => {\n            const visible= e.target.scrollTop > 480;\n            if (visible != this.state.scrollToTopVisible) {\n                this.setState({scrollToTopVisible: visible});\n            }\n        }\n\n        // When updating, TDLib sends updates of type updateChatLastMessage, where only the last one is needed.\n        // This greatly hurts performance.\n        // However, we can workaround it by not re-rendering until all updates have arrived.\n        shouldComponentUpdate(nextProps, nextState) {\n            return (nextProps.chats !== this.props.chats \n                || nextProps.list !== this.props.list \n                || nextProps.unread !== this.props.unread\n                || nextProps.connectionState !== this.props.connectionState\n                || nextProps.selectedChat !== this.props.selectedChat\n                || nextState.scrollToTopVisible !== this.state.scrollToTopVisible\n                || nextState.chatListFinished !== this.state.chatListFinished)\n                && nextProps.connectionState != 'connectionStateUpdating'\n                && nextState.chatListFinished; // Do not re-render if updating\n        }\n\n        render() {\n            // Get chats from the list (this needs to be repeated on every modification)\n            const array= \n                getChatsFromList(this.props.chats, this.props.list)\n                    .map(chat=>\n                        <Chat key={chat.id} chat={chat} selected={this.props.selectedChat == chat.id}/>\n                    );\n            \n            return (\n                <React.Fragment>\n                    <ScrollView scrollRef={this.scrollRef} id=\"chat-list\" scrollBarWidth=\"4\" onScroll={this.onScroll}>\n                        {this.props.list['@type']=='chatListMain' && (\n                            <Provider store={chatStore}>\n                                <ArchivedChatsItem chats={this.props.chats}/>\n                            </Provider>\n                        )}\n                        <Provider store={usersStore}>\n                            {array.length ? array :  <EmptyChatList list={this.props.list} unread={this.props.unread}/>}\n                        </Provider>\n                    </ScrollView>\n                    <IconButton icon={history_to_down} onClick={this.scrollToTop}\n                        className={'history-to-down '+(this.state.scrollToTopVisible ? 'visible' : '')}/>\n                </React.Fragment>\n            );\n        }\n\n        scrollToTop= () => {\n            this.scrollRef.current?.view.scroll({\n                top: 0,\n                behavior: 'smooth',\n            });\n        }\n\n        componentDidMount() {\n            chatListScrollToTopEvent[0]= this.scrollToTop;\n            // Request TDLib to return chats in main list and archive list\n            TdLib.sendQuery({\n                '@type': 'loadChats',\n                'chat_list': {\n                    '@type': 'chatListMain'\n                },\n                'limit': 50\n            }).then(()=> {\n                this.setState({\n                    chatListFinished: true\n                });\n            });\n            TdLib.sendQuery({\n                '@type': 'loadChats',\n                'chat_list': {\n                    '@type': 'chatListArchive'\n                },\n                'limit': 50\n            });\n        }\n    }\n);\nexport default ChatList;\n\nconst ArchivedChatsItem= connect(state=> ({\n    archiveButtonState: state.archiveButtonState,\n    unread: state.unread.archive\n})) (function ArchivedChatsItem({chats, unread, archiveButtonState}) {\n    const chatsInList = getChatsFromList(chats, {'@type': 'chatListArchive'}); // Check if there are any archved chats\n    if(!chatsInList.length) return null; // If there are no archived chats, render nothing\n\n    // Ripple\n    const ripple= React.useState({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave]= handleMyMouseEventsFunction(ripple);\n\n    function onArchiveOpen() {\n        chatStore.dispatch({\n            type: 'SET_ARCHIVE_STATE',\n            archiveState: 'open'\n        });\n    }\n\n    // Change button type to collapsed/expanded/moved to main menu\n    function setButtonState(state) {\n        chatStore.dispatch({\n            type: 'SET_ARCHIVE_BUTTON_STATE',\n            archiveButtonState: state\n        });\n    }\n\n    const moveToMainMenuToast= <Toast>{__('lng_context_archive_to_menu_info')}</Toast>;\n\n    switch(archiveButtonState) {\n    case 'expanded': // Looks like a regular chat\n    default:\n        return (\n            <div \n                className=\"chat archived\" onClick={onArchiveOpen}\n                onMouseDown={mouseDown} onMouseUp={mouseUp} onMouseLeave={mouseLeave}\n                onContextMenu={e=> createContextMenu(e, (\n                    <Menu.MenuContents>\n                        <Menu.MenuItem onClick={()=>{\n                            setButtonState('collapsed');\n                            localStorage.setItem('dibgram-archived-chats-button-mode', 'collapsed');\n                        }}>\n                            {__('lng_context_archive_collapse')}\n                        </Menu.MenuItem>\n                        <Menu.MenuItem onClick={()=>{\n                            setButtonState('hidden-expanded');\n                            localStorage.setItem('dibgram-archived-chats-button-mode', 'hidden-expanded');\n                            addToast(moveToMainMenuToast);\n                        }}>\n                            {__('lng_context_archive_to_menu')}\n                        </Menu.MenuItem>\n                    </Menu.MenuContents>\n                ))}>\n                <RippleEffect {...ripple[0]} color=\"var(--theme-color-dialogsRippleBg)\"/>\n                <div className=\"content\">\n                    <div className=\"profile-photo\">\n                        <div className=\"svg\" dangerouslySetInnerHTML={{__html: archive_userpic}}/>\n                    </div>\n                    <div className=\"details\">\n                        <div className=\"top\">\n                            <div className=\"left\">\n                                <div className=\"title\">{__('lng_archived_name')}</div>\n                            </div>\n                        </div>\n                        <div className=\"bottom\">\n                            <div className=\"left\">\n                                <div className=\"last-message\">\n                                    <span className=\"part-1\">\n                                        {chatsInList\n                                            .filter(chat=> chat.unread_count > 0)\n                                            .map(chat => chatTitleOrDeletedAccount(chat) + ', ')\n                                            .join('')}\n                                    </span>\n                                    <span className=\"part-2\">\n                                        {chatsInList\n                                            .filter(chat=> chat.unread_count == 0)\n                                            .map(chatTitleOrDeletedAccount)\n                                            .join(', ')}\n                                    </span>\n                                </div>\n                            </div>\n                            {unread.unread_messages_count? (\n                                <div className=\"right\">\n                                    <span className=\"unread-badge muted\">{unread.unread_messages_count}</span>\n                                </div>\n                            ) : null}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n\n    case 'collapsed': // Only title / tiny icon\n        return (\n            <div\n                className=\"chat archived collapsed\" onClick={onArchiveOpen}\n                onMouseDown={mouseDown} onMouseUp={mouseUp} onMouseLeave={mouseLeave}\n                onContextMenu={e=> createContextMenu(e, (\n                    <Menu.MenuContents>\n                        <Menu.MenuItem onClick={()=>{\n                            setButtonState('expanded');\n                            localStorage.setItem('dibgram-archived-chats-button-mode', 'expanded');\n                        }}>\n                            {__('lng_context_archive_expand')}\n                        </Menu.MenuItem>\n                        <Menu.MenuItem onClick={()=>{\n                            setButtonState('hidden-collapsed');\n                            localStorage.setItem('dibgram-archived-chats-button-mode', 'hidden-collapsed');\n                            addToast(moveToMainMenuToast);\n                        }}>\n                            {__('lng_context_archive_to_menu')}\n                        </Menu.MenuItem>\n                    </Menu.MenuContents>\n                ))}>\n                <RippleEffect {...ripple[0]} color=\"var(--theme-color-dialogsRippleBg)\"/>\n                <div className=\"content\">\n                    {__('lng_archived_name')}\n                    {unread.unread_messages_count? (\n                        <div className=\"details\">\n                            <span className=\"unread-badge muted\">{unread.unread_messages_count}</span>\n                        </div>\n                    ) : null}\n                </div>\n            </div>\n        );\n    case 'hidden-expanded': // Not here, it's in main menu\n    case 'hidden-collapsed':\n        return null;\n    }\n});\nArchivedChatsItem.propTypes = {\n    /** A list of all chats (not just current list) */\n    chats: PropTypes.array.isRequired\n};\n\n/** Renders the empty chat list fallback */\nfunction EmptyChatList({list, unread}) {\n    const loadingFallBack= (\n        <div className=\"empty\">\n            <div>{__('lng_profile_loading')}</div>\n        </div>\n    );\n    if(list['@type']=='chatListFilter'){ // Empty filter / Filter not loaded\n        if(unread.filters?.[list.chat_filter_id]?.total_chats_count !== 0) return loadingFallBack;\n        return (\n            <div className=\"empty\">\n                <div>{__('lng_no_chats_filter')}</div>\n                <LinkButton>{__('lng_filters_edit')}</LinkButton>\n            </div>\n        );\n    } else { // There are no chats at all / Chats not loaded\n        if(unread.main?.total_chats_count !== 0) return loadingFallBack;\n        return (\n            <div className=\"empty\">\n                <div>{__('lng_no_chats')}</div>\n                <LinkButton>{__('lng_add_contact_button')}</LinkButton>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './search-box.scss';\nimport { info_close } from '../../../../ui/icon/icons';\nimport __ from '../../../../language-pack/language-pack';\n\n/**\n * Renders the search box.\n */\nexport default function SearchBox(props) {\n    return (\n        <div id=\"search-box\">\n            <input \n                placeholder={__('lng_dlg_filter')}\n                value={props.value}\n                onChange={props.onChange}\n                {...props}/>\n            <button \n                className=\"clear\" \n                onClick={()=> props.onChange && props.onChange({target: {value: ''}})}\n                data-visible={(props.value || '').length}\n                dangerouslySetInnerHTML={{__html: info_close}}>\n            </button>\n        </div>\n    );\n}\nSearchBox.propTypes= {\n    value: PropTypes.string,\n    onChange: PropTypes.func\n};","import { createStore } from 'redux';\nimport TdLib from './tdlib';\n\nconst connectionStore = createStore(\n    (state = 'connectionStateConnecting', action) => {\n        switch (action.type) {\n        case 'SET_CONNECTION':\n            return  action.connection;\n        default:\n            return state;\n        }\n    }\n);\n\nTdLib.registerUpdateHandler('updateConnectionState', (update) => {\n    connectionStore.dispatch({\n        type: 'SET_CONNECTION',\n        connection: update.state['@type']\n    });\n});\nexport default connectionStore;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './nav-animation.scss';\n\n/**\n * Renders two navigation sections (outer and inner) with an animation between them\n * \n * You need to set a background color to the outer section. (it has the CSS class 'nav-animation-outer')\n */\nexport default function NavAnimation({ children, innerScreen, className, innerClass, state, mode, ...props }) {\n    return (\n        <div className={'nav-animation ' + mode + ' ' + state + ' ' + className} {...props}>\n            <div className=\"outer\">\n                {children}\n            </div>\n            {state!='closed' && \n                <div className={'inner ' + innerClass}>\n                    {innerScreen}\n                </div>\n            }\n        </div>\n    );\n}\nNavAnimation.propTypes = {\n    children: PropTypes.node.isRequired,\n    /**\n     * The type of animation to use:\n     * - `slide-over`: The parent screen swipes a little to left, while the child screen slides in from the right. \n     *   A shadow is also shown over the parent screen in the animation.\n     * - `swipe-fade`: More subtle animation, the parent screen fades out while moving left, while at the same time the child screen fades in from the right.\n     */\n    mode: PropTypes.oneOf(['slide-over', 'swipe-fade']),\n    /** The child screen content, only needed when open */\n    innerScreen: PropTypes.node,\n    /** The current state of the animation. Can be `open`, `closing` or `closed` */\n    state: PropTypes.oneOf(['open', 'closing', 'closed']),\n    /** The class name to apply to the outer element */\n    className: PropTypes.string,\n    /** The class name to apply to the inner element */\n    innerClass: PropTypes.string\n};\n\nexport function closeNavAnimation(getState, setState) {\n    // First set state to closing, which triggers the closing animation. After that, we can delete the element.\n    setState('closing');\n    setTimeout(() => {\n        if(getState() == 'closing') { // This condition is to prevent glitches when archive is opened again before 2s\n            setState('closed');\n        }\n    }, 2000);\n}\n","import React from 'react';\nimport { connect, Provider } from 'react-redux';\nimport ConnectionState from '../../../ui/components/connecting';\nimport ChatList from './chat-list';\nimport SearchBox from './search/search-box';\nimport HamburgerMenuButton from './hamburger-menu/menu-button';\nimport connectionStore from '../../../TdWeb/connectionStore';\nimport IconButton from '../../../ui/elements/icon-button';\nimport './chat-list-bar.scss';\nimport { info_back } from '../../../ui/icon/icons';\nimport chatStore from '../../chat-store';\nimport NavAnimation, { closeNavAnimation } from '../../../ui/elements/nav-animation';\nimport __ from '../../../language-pack/language-pack';\n\n/**\n * Renders the navigation menu, containing chat list, search field and search results [and the main menu button]\n */\nconst ChatListBar = connect(function (state) {\n    return {\n        useFolders: (state.filters || []).length != 0,\n        chats: state.chats, \n        list: state.currentChatList,\n        archiveState: state.archiveState,\n        unread: state.unread,\n        selectedChat: state.selectedChat,\n    };\n})(function ChatListBar({useFolders, chats, list, archiveState, unread, selectedChat, onHamburgerMenuOpened}) {\n    var [searchText, setSearchText] = React.useState('');\n    \n    function closeArchive() {\n        closeNavAnimation(() => chatStore.getState().archiveState,\n            state => {\n                chatStore.dispatch({\n                    type: 'SET_ARCHIVE_STATE',\n                    archiveState: state\n                });\n            }\n        );\n    }\n\n    return (\n        <React.Fragment>\n            <NavAnimation \n                mode=\"slide-over\" \n                id=\"chat-list-bar\"\n                state={archiveState}\n                innerClass=\"archived-chats\"\n                innerScreen={\n                    <Provider store={connectionStore}>\n                        <div className=\"chat-list-header\">\n                            <IconButton icon={info_back} onClick={closeArchive}/>\n                            {unread.main.unread_unmuted_messages_count? (\n                                <div className=\"unread-badge\">\n                                    <span>{unread.main.unread_unmuted_messages_count}</span>\n                                </div>\n                            ): null}\n                            <div className=\"title\">{__('lng_archived_name')}</div>\n                        </div>\n                        <ChatList chats={chats} list={{'@type': 'chatListArchive'}} unread={unread} selectedChat={selectedChat}/>\n                    </Provider>\n                }>\n                <div className=\"chat-list-header\">\n                    {(!useFolders) && <HamburgerMenuButton.WithoutFolders onClick={onHamburgerMenuOpened}/>}\n                    <SearchBox value={searchText} onChange={e => setSearchText(e.target.value)}/>\n                </div>\n                <Provider store={connectionStore}>\n                    <ChatList chats={chats} list={list} unread={unread} selectedChat={selectedChat}/>\n                </Provider>\n            </NavAnimation>\n            <Provider store={connectionStore}>\n                <ConnectionState/>\n            </Provider>\n        </React.Fragment>\n    );\n});\nexport default ChatListBar;\n","export default '0.0.2-beta3';","import React from 'react';\nimport PropTypes from 'prop-types';\nimport RippleEffect, {handleMyMouseEventsFunction} from '../elements/ripple-effect';\nimport './button.scss';\n\n/**\n * Renders a tool strip button. Has an icon and children, if provided will align to the right.\n */\nexport default function ToolStripButton({icon, text, children, hideIcon, ...rest}) {\n    const ripple = React.useState({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave]= handleMyMouseEventsFunction(ripple);\n    return (\n        <div className=\"tool-strip-button\" {...rest}\n            onMouseDown={mouseDown} onMouseUp={mouseUp} onMouseLeave={mouseLeave}>\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-windowBgRipple)\"/>\n            <div className=\"content\">\n                {(!hideIcon) && <div className=\"icon\" dangerouslySetInnerHTML={{__html: icon}}></div>} \n                <div className=\"title\">{text}</div>\n                {children && (\n                    <div className=\"right\">\n                        {children}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\nToolStripButton.propTypes = {\n    /** Icon HTML */\n    icon: PropTypes.string,\n    /** Button text */\n    text: PropTypes.string,\n    /** Optionally, an element to show aligned to right */\n    children: PropTypes.node,\n    /** If true, does not show the icon. This removes the space allocated to the icon. */\n    hideIcon: PropTypes.bool\n};","/**\n * There are 3 ways to import the items\n * 1. import each component from the respective file\n * 2. import each component from tool-strip.js\n * 3. import the default export from tool-strip.js and access the object members\n * You can use whichever you want.\n */\n\nimport ToolStripButton from './button';\nimport ToolStripSection from './section';\nimport ToolStripSeparator from './separator';\nimport ToolStripToggleButton from './toggle-button';\n\n/**\n * A collection of different components to create a generic menu.\n * \n * Contains sections, menu-items, two kinds of separators, switches, check-boxes, etc.s\n */\nconst ToolStrip = {\n    Button: ToolStripButton,\n    Section: ToolStripSection,\n    ToggleButton: ToolStripToggleButton,\n    Separator: ToolStripSeparator\n};\nexport default ToolStrip;\nexport { ToolStripButton, ToolStripSection, ToolStripToggleButton, ToolStripSeparator };\n","import React from 'react';\nimport './section.scss';\n\n/**\n * Renders a tool strip section. Use different sections when using separators.\n */\nexport default function Section(props) {\n    return <div className=\"tool-strip-section\" {...props}/>;\n}\n// Too simple for a separate file, no?","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ToolStripButton from './button';\nimport './toggle-button.scss';\n\nexport default function ToolStripToggleButton({icon, text, onChange, isActive, ...rest}) {\n    function toggle() {\n        onChange(!isActive);\n    }\n    return (\n        <ToolStripButton icon={icon} text={text} onClick={toggle} {...rest}>\n            <input type=\"checkbox\" className=\"toggle-button\" checked={isActive} readOnly/>\n        </ToolStripButton>\n    );\n}\nToolStripToggleButton.propTypes = {\n    /** HTML of the icon to display */\n    icon: PropTypes.string,\n    /** Button text */\n    text: PropTypes.string,\n    /** Callback when the button is toggled */\n    onChange: PropTypes.func,\n    /** the on/off state of the button */\n    isActive: PropTypes.bool\n};\n","import React from 'react';\r\nimport './separator.scss';\r\n\r\n/**\r\n * Renders a tool strip button. Has an icon and children, if provided will align to the right.\r\n */\r\nexport default function ToolStripSeparator(props) {\r\n    return (\r\n        <div className=\"tool-strip-separator\" {...props}/>\r\n    );\r\n}","// DIBgram themes are converted to CSS in runtime here.\n\nexport function convertThemeToCSS(theme){ // Convert theme colors to CSS vars\n    var css={};\n    for(const name in theme){\n        var obj= theme[name];\n        if(typeof obj.value == 'string') {\n            css['--theme-color-' + name]= obj.value;\n        } else if(typeof obj.value == 'object') { // A color is equal to another color\n            css['--theme-color-' + name]= `var(--theme-color-${obj.value.equals})`;\n        }\n    }\n    return css;\n}","import React from 'react';\nimport classic from './classic.json';\nimport day from './day.json';\nimport tinted from './tinted.json';\nimport night from './night.json';\nimport { convertThemeToCSS } from './dibgram-theme-to-css';\nimport { createStore } from 'redux';\nimport { connect } from 'react-redux';\nimport { getRtlMode } from '../../language-pack/language-pack';\n\nconst themes = { day, classic, tinted, night };\n\nfunction getThemeFromStorage() {\n    let theme = localStorage.getItem('dibgram-theme');\n    if (!theme) { // if theme is not set in localStorage, use OS theme\n        theme= window.matchMedia?.('(prefers-color-scheme: dark)').matches ? 'night' : 'day';\n        localStorage.setItem('dibgram-theme', theme);\n    }\n    return theme;\n}\n\nexport const themeStore = createStore(\n    (state = { \n        theme: getThemeFromStorage(),\n        rtl: getRtlMode()\n    }, action) => {\n        switch (action.type) {\n        case 'SET_THEME':\n            return { ...state, theme: action.theme };\n        case 'SET_RTL':\n            return { ...state, rtl: action.rtl };\n        default:\n            return state;\n        }\n    }\n);\n\n/**\n * All children of this component will be rendered with the theme. Can be treated as a div.\n */\nexport const ThemeProvider= connect(state=> state) (\n    // eslint-disable-next-line no-unused-vars\n    function ThemeProvider({ theme, rtl, dispatch, ...rest}) {\n        return (\n            <div dir={rtl ? 'rtl' : 'ltr'}\n                data-theme-is-dark={themes[theme].isDark.value}\n                {...rest} \n                style={convertThemeToCSS({...classic, ...themes[theme]})}\n            />\n        );\n    });\n\nexport function setTheme(theme) {\n    localStorage.setItem('dibgram-theme', theme);\n    themeStore.dispatch({ type: 'SET_THEME', theme });\n}\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport RippleEffect, { handleMyMouseEventsFunction } from '../elements/ripple-effect';\r\nimport { three_dots } from '../icon/icons';\r\nimport './three-dots-menu.scss';\r\nimport { getRtlMode } from '../../language-pack/language-pack';\r\n\r\nexport default function ThreeDotsMenu({children, ...rest}) {\r\n    const ripple= React.useState({state: 'off'});\r\n    const [onMouseDown, onMouseUp, onMouseLeave]= handleMyMouseEventsFunction(ripple);\r\n\r\n    const [visible, setVisible]= React.useState(false);\r\n\r\n    return (\r\n        <div className={'three-dots-menu ' + (rest.className || '')} onMouseLeave={e=> {\r\n            onMouseLeave(e);\r\n            setVisible(false);\r\n        }}>\r\n            <button className=\"icon-button\" onMouseDown={e=> {\r\n                onMouseDown(e);\r\n                setVisible(true);\r\n            }}>\r\n                <span dangerouslySetInnerHTML={{__html: three_dots}} />\r\n                <RippleEffect {...ripple[0]} color=\"var(--theme-color-windowBgOver)\" small={true}/>\r\n            </button>\r\n            {visible && <div className={'menu ' + (getRtlMode() ? 'br' : 'bl')} onClick={e=> {\r\n                onMouseUp(e);\r\n                setVisible(false);\r\n            }}>\r\n                {children}\r\n            </div>}\r\n        </div>\r\n    );\r\n}\r\nThreeDotsMenu.propTypes = {\r\n    children: PropTypes.node,\r\n};\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { info_close, title_search } from '../icon/icons';\nimport './search.scss';\nimport IconButton from '../elements/icon-button';\nimport __ from '../../language-pack/language-pack';\n\nexport default function BoxSearch({value, onChange}) {\n    return (\n        <div className=\"box-search\">\n            <span className=\"icon\" dangerouslySetInnerHTML={{__html: title_search}} />\n            <input type=\"text\" placeholder={__('lng_dlg_filter')} value={value} onChange={onChange} />\n            <IconButton icon={info_close} className=\"icon-button clear\" \n                onClick={()=> onChange && onChange({target: {value: ''}})}\n                data-visible={(value || '').length}/>\n        </div>\n    );\n}\nBoxSearch.propTypes = {\n    value: PropTypes.string,\n    onChange: PropTypes.func\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Dialog from '../../../ui/dialog/dialog';\nimport SmallButton from '../../../ui/elements/small-button';\nimport ScrollView from '../../../ui/scroll/scrollbar';\nimport RippleEffect, { handleMyMouseEventsFunction } from '../../../ui/elements/ripple-effect';\nimport BoxSearch from '../../../ui/dialog/search';\nimport __, { getCurrentLanguagePack } from '../../../language-pack/language-pack';\nimport TdLib from '../../../TdWeb/tdlib';\nimport './choose-language.scss';\nimport { addDialog } from '../../../ui/dialog/dialogs';\nimport ConfirmDialog from '../../../ui/dialog/confirm-dialog';\nimport ToolStrip from '../../../ui/tool-strip/tool-strip';\n\nexport default function ChooseLanguageDialog({id}) {\n    const ref = React.useRef();\n    var [languages, setLanguages] = React.useState([]);\n    const [search, setSearch] = React.useState('');\n    if(search.length > 0) {\n        languages = languages.filter(country => country.name.toLowerCase().startsWith(search.toLowerCase()));\n    }\n\n    React.useEffect(() => {\n        TdLib.sendQuery({\n            '@type': 'getLocalizationTargetInfo',\n            'only_local': false\n        }).then(response => {\n            setLanguages(response.language_packs);\n        });\n    }, []);\n\n    const currentPack= getCurrentLanguagePack();\n\n    return (\n        <Dialog ref={ref} id={id} width=\"320px\" className=\"confirm-dialog\">\n            <h1>{__('lng_languages')}</h1>\n\n            <BoxSearch value={search} onChange={(e) => setSearch(e.target.value)} />\n\n            <ScrollView scrollAlwaysVisible>\n                <ToolStrip.Section>\n                    {languages.map(pack => (\n                        <LanguagePack \n                            key={pack.id} \n                            pack={pack} \n                            onClick={()=> selectLanguage(pack)} \n                            selected={currentPack.id == pack.id}/>\n                    ))}\n                </ToolStrip.Section>\n            </ScrollView>\n\n            <div className=\"options\">\n                <SmallButton onClick={()=> {ref.current.close();}}>{__('lng_close')}</SmallButton>\n            </div>\n        </Dialog>\n    );\n}\nChooseLanguageDialog.propTypes = {\n    id: PropTypes.string.isRequired\n};\n\nexport function LanguagePack({pack, onClick, selected}) {\n    const ripple = React.useState({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave] = handleMyMouseEventsFunction(ripple);\n    return (\n        <div className=\"language-pack-item\" onClick={onClick} onMouseDown={mouseDown} onMouseUp={mouseUp} onMouseLeave={mouseLeave}>\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-windowBgRipple)\"/>\n            <div className=\"content\">\n                <input type=\"radio\" name=\"settings-language-pack-selector\" checked={selected}/>\n                <div className=\"right\">\n                    <div className=\"name\">{pack.native_name}</div>\n                    <div className=\"english-name\">{pack.name}</div>\n                </div>\n            </div>\n        </div>\n    );\n}\nLanguagePack.propTypes = {\n    pack: PropTypes.object.isRequired,\n    onClick: PropTypes.func,\n    selected: PropTypes.bool\n};\n\nfunction selectLanguage(pack) {\n    let cache= JSON.parse(localStorage.getItem('dibgram-special-language-strings-cache') || '{}');\n    let specialStringsImport;\n    if(!cache[pack.id] && pack.id!='en'){\n        specialStringsImport= import(`../../../language-pack/special-strings/${pack.id}.json`);\n    } else {\n        specialStringsImport= Promise.resolve(null);\n    }\n\n    function apply(){\n        specialStringsImport.then(specialStrings => {\n            if(!cache[pack.id] && pack.id!='en') {\n                cache[pack.id]= specialStrings.default;\n                localStorage.setItem('dibgram-special-language-strings-cache', JSON.stringify(cache));\n            }\n\n            localStorage.setItem('dibgram-active-language', JSON.stringify(pack));\n            window.location.reload();\n        });\n    }\n\n    TdLib.sendQuery({\n        '@type': 'getLanguagePackStrings',\n        language_pack_id: pack.id,\n        keys: [ 'lng_sure_save_language' ]\n    })\n        .then(response => {\n            addDialog('settings-language-restart-confirm-dialog', (\n                <ConfirmDialog id=\"settings-language-restart-confirm-dialog\"\n                    largeFont={true} onOK={apply}>\n\n                    {__('lng_sure_save_language')}\n                    <br/><br/>\n                    {response.strings[0].value.value}\n                </ConfirmDialog>\n            ));\n\n            TdLib.sendQuery({ // Request language pack strings so it is already cached after restart\n                '@type': 'getLanguagePackStrings',\n                language_pack_id: pack.id,\n            });\n        });\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from '../../../../ui/elements/icon-button';\nimport { info_back, info_close } from '../../../../ui/icon/icons';\nimport __, { _s__ } from '../../../../language-pack/language-pack';\nimport ToolStrip from '../../../../ui/tool-strip/tool-strip';\nimport { themeStore } from '../../../../ui/themes/theme';\nimport { getRtlMode } from '../../../../language-pack/language-pack';\n\nexport default function SettingsAdvanced({onClose, onBack}) {\n    const [enableRtl, setEnableRtl] = React.useState(localStorage.getItem('dibgram-allow-rtl-layout') == 'true');\n\n    return (\n        <React.Fragment>\n            <div className=\"header\">\n                <IconButton className=\"icon-button back\" icon={info_back} onClick={onBack} />\n                <h3 className=\"title\">{__('lng_settings_advanced')}</h3>\n                <IconButton className=\"icon-button close\" icon={info_close} onClick={onClose}/>\n            </div>\n            <ToolStrip.Section>\n                <ToolStrip.ToggleButton text={_s__('lngd_settings_advanced_rtl')} hideIcon={true} isActive={enableRtl} onChange={() => {\n                    setEnableRtl(!enableRtl);\n                    localStorage.setItem('dibgram-allow-rtl-layout', !enableRtl);\n                    themeStore.dispatch({type: 'SET_RTL', rtl: getRtlMode()});\n                }} />\n            </ToolStrip.Section>\n        </React.Fragment>\n    );\n}\nSettingsAdvanced.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    onBack: PropTypes.func.isRequired\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Dialog from '../../../ui/dialog/dialog';\r\nimport ToolStrip from '../../../ui/tool-strip/tool-strip';\r\nimport ScrollView from '../../../ui/scroll/scrollbar';\r\nimport TdLib from '../../../TdWeb/tdlib';\r\nimport { addDialog } from '../../../ui/dialog/dialogs';\r\nimport ConfirmDialog from '../../../ui/dialog/confirm-dialog';\r\nimport ThreeDotsMenu from '../../../ui/menu/three-dots-menu';\r\nimport Menu from '../../../ui/menu/menu';\r\nimport './settings-dialog.scss';\r\nimport { info_close, settings_advenced, settings_chat, settings_faq, settings_folders, settings_info, settings_language, settings_notifications, settings_privacy_security } from '../../../ui/icon/icons';\r\nimport ProfilePhoto from '../../../ui/components/profile-photo';\r\nimport IconButton from '../../../ui/elements/icon-button';\r\nimport options from '../../../TdWeb/options';\r\nimport { connect } from 'react-redux';\r\nimport { getUserFullName } from '../../user-misc';\r\nimport __ from '../../../language-pack/language-pack';\r\nimport ChooseLanguageDialog from './choose-lanugage';\r\nimport NavAnimation, { closeNavAnimation } from '../../../ui/elements/nav-animation';\r\nimport SettingsAdvanced from './advanced/advanced';\r\n\r\nfunction Settings ({id, users}) {\r\n    const dialogRef = React.useRef();\r\n    const user= users[options['my_id']];\r\n    const [navState, setNavState] = React.useState('closed');\r\n    const [section, setSection] = React.useState(null);\r\n\r\n    function openSection(Section) {\r\n        setSection(<Section onClose={dialogRef.current.close} onBack={()=> {\r\n            closeNavAnimation(()=>navState, setNavState);\r\n        }}/>);\r\n        setNavState('open');\r\n    }\r\n\r\n    return (\r\n        <Dialog className=\"settings-dialog\" id={id} ref={dialogRef} width=\"392px\">\r\n            <NavAnimation className=\"dialog-content\" innerScreen={section} mode=\"swipe-fade\" state={navState}>\r\n                <div className=\"header\">\r\n                    <h3 className=\"title\">{__('lng_menu_settings')}</h3>\r\n                    <IconButton className=\"icon-button close\" icon={info_close} onClick={() => {\r\n                        dialogRef.current.close();\r\n                    }} />\r\n                    \r\n                    <ThreeDotsMenu className=\"more-options\">\r\n                        <Menu.MenuContents>\r\n                            <Menu.MenuItem>{__('lng_menu_add_account')}</Menu.MenuItem>\r\n                            <Menu.MenuItem>{__('lng_settings_information')}</Menu.MenuItem>\r\n                            <Menu.MenuItem onClick={() => {\r\n                                addDialog('log-out-from-main-menu-confirm-dialog',\r\n                                    <ConfirmDialog largeFont={true}\r\n                                        id=\"log-out-from-main-menu-confirm-dialog\"\r\n                                        OKButtonText={__('lng_settings_logout')} onOK={()=> {\r\n                                            TdLib.sendQuery({\r\n                                                '@type': 'logOut'\r\n                                            });\r\n                                        }} attention={true}>\r\n                                        {__('lng_sure_logout')}\r\n                                    </ConfirmDialog>\r\n                                );\r\n                            }}>{__('lng_settings_logout')}</Menu.MenuItem>\r\n                        </Menu.MenuContents>\r\n                    </ThreeDotsMenu>\r\n                </div>\r\n                <ScrollView scrollBarWidth=\"4\">\r\n                    <div className=\"scroll-content\">\r\n                        <ToolStrip.Section className=\"profile-info\">\r\n                            <ProfilePhoto id={options['my_id']} name={user ? getUserFullName(user) : ''} photo={user?.profile_photo?.small} disableSavedMessages={true}/>\r\n                            <span>\r\n                                <p className=\"name\">{user && getUserFullName(user)}</p>\r\n                                <p className=\"status\">{__('lng_status_online') /*TODO: Implement real status instead of a dummy 'online' */}</p>\r\n                            </span>\r\n                        </ToolStrip.Section>\r\n                        <ToolStrip.Separator/>\r\n                        <ToolStrip.Section>\r\n                            <ToolStrip.Button icon={settings_info} text={__('lng_settings_information')}/>\r\n                            <ToolStrip.Button icon={settings_notifications} text={__('lng_settings_section_notify')}/>\r\n                            <ToolStrip.Button icon={settings_privacy_security} text={__('lng_settings_section_privacy')}/>\r\n                            <ToolStrip.Button icon={settings_chat} text={__('lng_settings_section_chat_settings')}/>\r\n                            <ToolStrip.Button icon={settings_folders} text={__('lng_settings_section_filters')}/>\r\n                            <ToolStrip.Button icon={settings_advenced} text={__('lng_settings_advanced')} onClick={()=> openSection(SettingsAdvanced)}/>\r\n                            <ToolStrip.Button icon={settings_language} text={__('lng_settings_language')}\r\n                                onClick={()=>addDialog('settings-change-language-dialog', <ChooseLanguageDialog id=\"settings-change-language-dialog\"/>)}>\r\n                                <span className=\"value\">{__('lng_language_name')}</span>\r\n                            </ToolStrip.Button>\r\n                        </ToolStrip.Section>\r\n                        <ToolStrip.Separator/>\r\n                        <ToolStrip.Section>\r\n                            <ToolStrip.Button icon={settings_faq} text={__('lng_settings_faq')} onClick={() => window.open('https://telegram.org/faq')}/>\r\n                            <ToolStrip.Button text={__('lng_settings_ask_question')}/>\r\n                        </ToolStrip.Section>\r\n                    </div>\r\n                </ScrollView>\r\n            </NavAnimation>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nSettings.propTypes= {\r\n    /** Unique ID of this dialog, used to close it. */\r\n    id: PropTypes.any.isRequired,\r\n    users: PropTypes.any.isRequired\r\n};\r\n\r\nconst SettingsDialog = connect( (users)=> ({users}) ) (Settings);\r\nexport default SettingsDialog;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './menu.scss';\nimport TdLib from '../../../../TdWeb/tdlib';\nimport ProfilePhoto from '../../../../ui/components/profile-photo';\nimport { getChatsFromList } from '../chat-list';\nimport chatStore from '../../../chat-store';\nimport { archive_userpic, menu_new_channel, menu_new_group, menu_night_mode, menu_settings, settings_name, settings_phone_number } from '../../../../ui/icon/icons';\nimport { connect, Provider } from 'react-redux';\nimport { createContextMenu } from '../../../../ui/menu/context-menu';\nimport Menu from '../../../../ui/menu/menu';\nimport ScrollView from '../../../../ui/scroll/scrollbar';\nimport LinkButton from '../../../../ui/elements/link-button';\nimport version from '../../../../../version';\nimport Dialogs, { addDialog, dialogStore } from '../../../../ui/dialog/dialogs';\nimport ConfirmDialog from '../../../../ui/dialog/confirm-dialog';\nimport ToolStrip from '../../../../ui/tool-strip/tool-strip';\nimport { setTheme, themeStore } from '../../../../ui/themes/theme';\nimport SettingsDialog from '../../settings/settings-dialog';\nimport usersStore from '../../../users-store';\nimport options from '../../../../TdWeb/options';\nimport { getUserFullName } from '../../../user-misc';\nimport __, { _s__fmt, __fmt } from '../../../../language-pack/language-pack';\n\n/**\n * Renders the main menu (always rendered but not always visible)\n */\nconst HamburgerMenu= connect(state=> ({\n    chats: state.chats,\n    archiveButtonState: state.archiveButtonState,\n})) (\n    function HamburgerMenu ({visible, onClose, chats, archiveButtonState}) {\n        const [me, setMe] = React.useState(null);\n        React.useEffect(() => {\n            TdLib.sendQuery({ // Get current user info\n                '@type': 'getMe'\n            }).then(result => {\n                // Format phone number and put it in state\n                if(result.phone_number) {\n                    TdLib.sendQuery({\n                        '@type': 'getPhoneNumberInfo',\n                        phone_number_prefix: result.phone_number\n                    }).then(info => {\n                        // Format phone number\n                        if(info.country_calling_code){\n                            result.phone_number= `+${info.country_calling_code} ${info.formatted_phone_number}`;\n                        }\n                        setMe(result);\n                    });\n                } \n                else setMe(result);\n            });\n        }, []); // equivalent to componentDidMount\n\n        const [nightMode, setNightMode] = React.useState(['tinted', 'night'].includes(themeStore.getState().theme));\n\n        /**@type React.KeyboardEventHandler<HTMLDivElement> */\n        function onKeyDown (e){\n            // `Esc` closes the menu\n            if(e.key === 'Escape') {\n                onClose();\n            }\n        }\n        // Autofocus menu\n        var ref = React.useRef(null);\n        React.useEffect(() => {\n            if(visible) {\n                ref.current.focus();\n            }\n        }, [visible]);\n\n        // Get chats from archive to see if archive button should be shown\n        const showArchivedChats = getChatsFromList(chats, {'@type': 'chatListArchive'}).length > 0;\n\n        return (\n            <div id=\"hamburger-menu\" ref={ref} className={visible ? 'visible' : ''} \n                onKeyDown={onKeyDown} tabIndex={0}>\n                <div className=\"content\">\n                    <div className=\"header\">\n                        <div className=\"row-1\">\n                            <ProfilePhoto \n                                id={me?.id || 0} \n                                name={(me?.first_name || '') + (me?.last_name? (' ' + me.last_name) : '')} \n                                photo={me?.profile_photo?.small}\n                                disableSavedMessages={true}/>\n                            <div className=\"buttons\">\n                                {(showArchivedChats && (['hidden-collapsed', 'hidden-expanded'].includes(archiveButtonState))) && (\n                                    <button \n                                        className=\"button\" \n                                        dangerouslySetInnerHTML={{__html: archive_userpic}}\n                                        onClick={() => {\n                                            chatStore.dispatch({\n                                                type: 'SET_ARCHIVE_STATE',\n                                                archiveState: 'open'\n                                            });\n                                            onClose();\n                                        }}\n                                        onContextMenu={e=> createContextMenu(e, (\n                                            <Menu.MenuContents>\n                                                <Menu.MenuItem onClick={()=> {\n                                                    const newState= {'hidden-collapsed': 'collapsed', 'hidden-expanded': 'expanded'}[archiveButtonState];\n                                                    chatStore.dispatch({\n                                                        type: 'SET_ARCHIVE_BUTTON_STATE',\n                                                        archiveButtonState: newState\n                                                    });\n                                                    localStorage.setItem('dibgram-archived-chats-button-mode', newState);\n                                                    onClose();\n                                                }}>{__('lng_context_archive_to_list')}</Menu.MenuItem>\n                                            </Menu.MenuContents>\n                                        ))}/>\n                                )}\n                            </div>\n                        </div>\n                        <div className=\"row-2\">\n                            <div className=\"name\">\n                                {me && getUserFullName(me)}\n                            </div>\n                            <div className=\"phone-number\">\n                                {me?.phone_number}\n                            </div>\n                        </div>\n                    </div>\n                    <ScrollView scrollAlwaysVisible>\n                        <div className=\"scroll-content\">\n                            <div className=\"options\">\n                                <ToolStrip.Section>\n                                    <ToolStrip.Button icon={menu_new_group} text={__('lng_create_group_title')}/>\n                                    <ToolStrip.Button icon={menu_new_channel} text={__('lng_create_channel_title')}/>\n                                    <ToolStrip.Button icon={settings_name} text={__('lng_menu_contacts')}/>\n                                    <ToolStrip.Button icon={settings_phone_number} text={__('lng_menu_calls')}/>\n                                    <ToolStrip.Button icon={menu_settings} text={__('lng_menu_settings')} onClick={()=> {\n                                        onClose();\n                                        addDialog('full-settings-dialog',\n                                            <Provider store={usersStore}>\n                                                <SettingsDialog id=\"full-settings-dialog\" />\n                                            </Provider>\n                                        );\n                                    }}/>\n                                    <ToolStrip.ToggleButton icon={menu_night_mode} text={__('lng_menu_night_mode')} isActive={nightMode} onChange={(isNight)=> {\n                                        setNightMode(isNight);\n                                        setTheme(isNight ? 'night' : 'day');\n                                    }}/>\n                                </ToolStrip.Section>\n                            </div>\n                            <div className=\"about\">\n                                <div className=\"row-1\">\n                                    <LinkButton href=\"https://github.com/DIBgram/DIBgram\">DIBgram</LinkButton>\n                                </div>\n                                <div className=\"row-2\">\n                                    <LinkButton href=\"https://github.com/DIBgram/DIBgram/releases/\">{__fmt('lng_settings_current_version', {version})}</LinkButton> ­– <LinkButton onClick={()=> {\n                                        // About DIBgram\n                                        onClose();\n                                        addDialog('main-menu-about-dibgram-dialog', (\n                                            <ConfirmDialog id=\"main-menu-about-dibgram-dialog\"\n                                                width=\"390px\" title=\"DIBgram\" OKButtonText={__('lng_close')}\n                                                hideCancelButton={true}>\n\n                                                <LinkButton className=\"version link-button\"\n                                                    style={{color: 'var(--theme-color-windowSubTextFg)'}} \n                                                    href=\"https://github.com/DIBgram/DIBgram/releases/\">\n                                                        \n                                                    {_s__fmt('lngd_about_version', {\n                                                        version,\n                                                        tdlib: options['version']\n                                                    })}\n                                                </LinkButton>\n\n                                                <p>{_s__fmt('lngd_about_text1', {\n                                                    tdlib: <LinkButton href=\"https://core.telegram.org/tdlib\">TDLib</LinkButton>\n                                                })}</p>\n\n                                                <p>{__fmt('lng_about_text2', { //TODO: find out why it doesn't work\n                                                    gpl_link: <LinkButton href=\"https://github.com/DIBgram/DIBgram/blob/main/LICENSE\">GNU GPL</LinkButton>,\n                                                    github_link: <LinkButton href=\"https://github.com/DIBgram/DIBgram\">GitHub</LinkButton>\n                                                })}</p>\n\n                                                <p>{__fmt('lng_about_text3', {\n                                                    faq_link: <LinkButton href=\"https://telegram.org/faq\">{__('lng_about_text3_faq')}</LinkButton>\n                                                })}</p>\n                                            </ConfirmDialog>\n                                        ));\n                                    }}>\n                                        {__('lng_menu_about')}\n                                    </LinkButton>\n                                </div>\n                            </div>\n                        </div>\n                    </ScrollView>\n                </div>\n                <Provider store={dialogStore}>\n                    <Dialogs className=\"shadow\" onClick={onClose}/>\n                </Provider>\n            </div>\n        );\n    });\nHamburgerMenu.propTypes = {\n    visible: PropTypes.bool.isRequired,\n    onClose: PropTypes.func\n};\nexport default HamburgerMenu;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport __ from '../../../language-pack/language-pack';\nimport './chat-section.scss';\n\nexport const ChatSection= \nconnect(({chats, selectedChat}) => ({chats, selectedChat})) (function ChatSection({chats, selectedChat}) {\n    let chat;\n    for(let c of chats) {\n        if(c.id === selectedChat) {\n            chat = c;\n            break;\n        }\n    }\n    if(!chat) return (\n        <div id=\"chat-container\">\n            {__('lng_willbe_history')}\n        </div>\n    );\n\n    return (\n        <div id=\"chat-container\">\n            {chat.title}\n        </div>\n    );\n});\n","import React from 'react';\nimport ChatFoldersList from './sections/navigation-menu/chat-folders';\nimport ChatListBar from './sections/navigation-menu/chat-list-bar';\nimport chatStore from './chat-store';\nimport { connect, Provider } from 'react-redux';\nimport './messengerWindow.scss';\nimport HamburgerMenu from './sections/navigation-menu/hamburger-menu/menu';\nimport {Resizable} from 're-resizable';\nimport { ChatSection } from './sections/chat/chat-section';\n\n/**\n * Renders the messenger screen\n */\nexport const MessengerWindow= connect(({rtl})=>({rtl})) (function MessengerWindow ({rtl}) {\n\n    const [isMenuOpen, setIsMenuOpen] = React.useState(false);\n\n    return (\n        <div id=\"messenger-screen\">\n            <Provider store={chatStore}>\n                <HamburgerMenu visible={isMenuOpen} onClose={()=> setIsMenuOpen(false)}/>\n                <ChatFoldersList onHamburgerMenuOpened={()=> setIsMenuOpen(true)}/>\n                <Resizable defaultSize={{width: 260}} minWidth={260}\n                    className=\"chat-list-bar-container\" handleClasses={{right: 'chat-list-bar-resize-handle', left: 'chat-list-bar-resize-handle'}}\n                    enable={{top: false, right: !rtl, bottom: false, left: rtl, topRight: false, bottomRight: false, bottomLeft: false, topLeft: false}}>\n                    <ChatListBar onHamburgerMenuOpened={()=> setIsMenuOpen(true)}/>\n                </Resizable>\n                <ChatSection/>\n            </Provider>\n        </div>\n    );\n});","import TdLib from './tdlib';\nimport {getCredentials} from './config';\nimport {getUseTestDc} from './tdlib';\nimport version from '../../version';\n\nTdLib.registerUpdateHandler('updateAuthorizationState',function (update) {\n    const credentials= getCredentials();\n    const auth_state= update['authorization_state'];\n    \n    if(auth_state['@type']==='authorizationStateWaitEncryptionKey'){\n        TdLib.sendQuery({'@type': 'checkDatabaseEncryptionKey', 'encryption_key': ''});\n    }\n    if(auth_state['@type']==='authorizationStateWaitTdlibParameters'){\n        TdLib.sendQuery({\n            '@type': 'setTdlibParameters',\n            'parameters': {\n                'database_directory': 'tdlib',\n                'use_message_database': true,\n                'use_secret_chats': false,\n                'api_id': credentials.api_id,\n                'api_hash': credentials.api_hash,\n                'system_language_code': 'en',\n                'device_model': 'Web',\n                'application_version': version,\n                'enable_storage_optimizer': true,\n                'use_test_dc': getUseTestDc(),\n            }\n        });\n    }\n});\n\n/**\n * Provides functions to pass required authorization data to Telegram\n */\nexport default class Auth {\n    /**\n     * Pass phone number of the account to be logged in to\n     * @param {string} number The phone number the user entered\n     * @returns TdLib query result\n     */\n    static givePhoneNumber(number) {\n        return TdLib.sendQuery({'@type': 'setAuthenticationPhoneNumber', 'phone_number': number});\n    }\n    /**\n     * Pass authorization code the user has received\n     * @param {string} code The code the user entered\n     * @returns TdLib query result\n     */\n    static checkAuthCode(code) {\n        return TdLib.sendQuery({'@type': 'checkAuthenticationCode', 'code': code});\n    }\n    /**\n     * Pass 2FA password of the account\n     * @param {string} pass The password the user entered\n     * @returns TdLib query result\n     */\n    static check2FACode(pass) {\n        return TdLib.sendQuery({'@type': 'checkAuthenticationPassword', 'password': pass});\n    }\n    /**\n     * Sign up to Telegram\n     * @param {string} first The first name to be used in the new account\n     * @param {string} last Tha last name to be used in the new account\n     * @returns TdLib query result\n     */\n    static registerNewAccount(first, last) {\n        return TdLib.sendQuery({'@type': 'registerUser', 'first_name': first, 'last_name': last});\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport RippleEffect, {handleMyMouseEvents} from './ripple-effect';\n\n/**\n * Renders a BIG button which is filled with accent color\n */\nexport default class BigHighlightedButton extends React.Component{\n    static propTypes= {\n        /** Fires when the button is clicked */\n        onClick: PropTypes.func,\n        /** The button's content */\n        children: PropTypes.node.isRequired\n    };\n    state= {\n        ripple: {\n            state: 'off'\n        }\n    }\n    constructor() {\n        super();\n        [this.mouseDown, this.mouseUp, this.mouseLeave]= handleMyMouseEvents(this);\n    }\n\n    render () {\n        return (\n            <button \n                className=\"big-highlighted-button\" \n                onClick={this.props.onClick}\n                onMouseDown={this.mouseDown}\n                onMouseUp={this.mouseUp}\n                onMouseLeave={this.mouseLeave}>\n\n                <RippleEffect {...this.state.ripple} color=\"var(--theme-color-activeButtonBgRipple)\"/>\n                <div className=\"content\">\n                    {this.props.children}\n                </div>\n            </button>\n        );\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Renders a beautiful field with a title and underline\n */\nexport default class UnderlinedInput extends React.Component {\n    constructor(args) {\n        super(args);\n\n        this.state= {\n            inactive: false,\n            mouseX: '50%',\n            titleClass: this.getTitleClass(this.props.autoFocus)\n        };\n    }\n\n    getTitleClass (focus) {\n        return (focus || (!!this.props.value)) ? 'title top' : 'title placeholder';\n    }\n\n    render () {\n        var className='underlined-input';\n        if(this.state.inactive) {\n            className+=' inactive';\n        }\n        if(this.props.autoFocus) {\n            className+=' autoFocus';\n        }\n        if(this.props.invalid) {\n            className+=' invalid';\n        }\n        return (\n            <div className={className}\n                style={{'--mouse-left': this.state.mouseX || '50%'}}>\n                { this.props.title ? (\n                    <div className={this.state.titleClass}>{this.props.title}</div>\n                ) : null }\n                <input \n                    ref={this.props.iRef}\n                    type={this.props.type} \n                    onChange={this.props.onChange} \n                    value={this.props.value}\n                    onMouseDown={this.handleMouseDown}\n                    onFocus={this.handleFocus}\n                    onBlur={this.handleBlur}\n                    autoFocus={this.props.autoFocus || false}\n                    onKeyDown={this.handleKeyDown}\n                    maxLength={this.props.maxLength}\n                    onCopy={e=> {\n                        if(this.props.disableCopy) {\n                            e.preventDefault();\n                        }\n                    }}/>\n                <div className=\"underline\"></div>\n            </div>\n        );\n    }\n\n    handleFocus =()=>{\n        this.setState({\n            inactive: false,\n            titleClass: this.getTitleClass(true)\n        });\n    }\n    handleBlur =()=>{\n        this.setState({\n            inactive: true, \n            mouseX: '50%',\n            titleClass: this.getTitleClass(false)\n        });\n    }\n    handleMouseDown =(e)=>{\n        this.setState({\n            mouseX: e.nativeEvent.offsetX+'px'\n        });\n    }\n    handleKeyDown =(e)=>{\n        this.props.onKeyDown?.(e);\n        if(e.key=='Enter') {\n            this.props.onEnterKeyPressed && this.props.onEnterKeyPressed();\n        }\n        if(this.props.preventNumberScrolling) {\n            if(e.key=='ArrowUp' || e.key=='ArrowDown') {\n                e.preventDefault();\n            }\n        }\n    }\n\n}\nUnderlinedInput.propTypes = {\n    /** Input type, can be `text`, `number`, `tel`, `password`, `email`, `url` */\n    type: PropTypes.oneOf(['text', 'number', 'tel', 'password', 'email', 'url']).isRequired,\n    /** Fired when input is modified */\n    onChange: PropTypes.func,\n    /** Input value */\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    /** The maximum number of characters the input can have */\n    maxLength: PropTypes.number,\n    active: PropTypes.bool,\n    /** If set to true, the input will gain focus when it renders */\n    autoFocus: PropTypes.bool,\n    /** Fires when the 'Enter' key is pressed */\n    onEnterKeyPressed: PropTypes.func,\n    /** Input title/placeholder */\n    title: PropTypes.string,\n    /** If true, the input will become red */\n    invalid: PropTypes.bool,\n    /** If true, text cannot be copied from the input */\n    disableCopy: PropTypes.bool,\n    /** If true, up and down buttons cannot change input value */\n    preventNumberScrolling: PropTypes.bool,\n    /** `<input>` React ref */\n    iRef: PropTypes.object,\n    /** Fires when a key is pushed down while the element is in focus. */\n    onKeyDown: PropTypes.func\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Dialog from '../../../ui/dialog/dialog';\nimport SmallButton from '../../../ui/elements/small-button';\nimport ScrollView from '../../../ui/scroll/scrollbar';\nimport './country-select.scss';\nimport RippleEffect, { handleMyMouseEventsFunction } from '../../../ui/elements/ripple-effect';\nimport BoxSearch from '../../../ui/dialog/search';\nimport __ from '../../../language-pack/language-pack';\n\nexport default function CountrySelect({onChange, id, countries}) {\n    const ref = React.useRef();\n    \n    const [search, setSearch] = React.useState('');\n    if(search.length > 0) {\n        countries = countries.filter(country => country.name.toLowerCase().startsWith(search.toLowerCase()));\n    }\n\n    return (\n        <Dialog ref={ref} id={id} width=\"320px\" className=\"confirm-dialog\">\n            <h1>{__('lng_country_select')}</h1>\n\n            <BoxSearch value={search} onChange={(e) => setSearch(e.target.value)} />\n\n            <ScrollView scrollAlwaysVisible>\n                {countries.map(country => (country.is_hidden? null: (\n                    <CountrySelectItem key={country.country_code} country={country} onClick={ ()=>{\n                        onChange?.('+' + country.calling_codes[0]);\n                        ref.current.close();\n                    }}/>\n                )))}\n            </ScrollView>\n\n            <div className=\"options\">\n                <SmallButton onClick={()=> {ref.current.close();}}>{__('lng_close')}</SmallButton>\n            </div>\n        </Dialog>\n    );\n}\nCountrySelect.propTypes = {\n    onChange: PropTypes.func,\n    id: PropTypes.string.isRequired,\n    countries: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport function CountrySelectItem({country, onClick}) {\n    const ripple = React.useState({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave] = handleMyMouseEventsFunction(ripple);\n    return (\n        <div className=\"country-select-item\" onClick={onClick} onMouseDown={mouseDown} onMouseUp={mouseUp} onMouseLeave={mouseLeave}>\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-windowBgRipple)\"/>\n            <div className=\"content\">\n                <span className=\"name\">{country.english_name}</span>\n                <span className=\"codes\">{country.calling_codes.map(c=> '+' + c).join(', ')}</span>\n            </div>\n        </div>\n    );\n}\nCountrySelectItem.propTypes = {\n    country: PropTypes.object.isRequired,\n    onClick: PropTypes.func,\n};\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport Auth from '../../../TdWeb/auth';\nimport connectionStore from '../../../TdWeb/connectionStore';\nimport ConfirmDialog from '../../../ui/dialog/confirm-dialog';\nimport { addDialog } from '../../../ui/dialog/dialogs';\nimport BigHighlightedButton from '../../../ui/elements/highlighted-button';\nimport UnderlinedInput from '../../../ui/elements/underlined-input';\nimport { manageStatusTextContent } from '../../auth-screen';\nimport ConnectionState from '../../../ui/components/connecting';\nimport callingCodes from './phone-number-calling-codes.json';\nimport './phone-number.scss';\nimport CountrySelect from './country-select';\nimport TdLib from '../../../TdWeb/tdlib';\nimport { intro_country_dropdown } from '../../../ui/icon/icons';\nimport __ from '../../../language-pack/language-pack';\n\n/**\n * Renders the phone number step of authorization screen\n */\nexport default class AuthWindowStepPhoneNumber extends React.Component {\n    constructor(args) {\n        super(args);\n        manageStatusTextContent(this);\n    }\n    state= {\n        number: '',\n        number_p: '+',\n        invalid: false,\n        statusContent: '',\n        statusVisible: false,\n        dropDownText: '',\n        countries: [],\n    };\n\n    ref1= React.createRef();\n    ref2= React.createRef();\n\n    componentDidMount() {\n        TdLib.sendQuery({\n            '@type': 'getCountries',\n        }).then(result => {\n            this.setState({\n                countries: result.countries,\n            });\n        });\n    }\n\n\n    handlePNFieldChange = (event) => {\n        const value = event.target.value.replace(/[^0-9-]/g, '');\n        this.setState({\n            number: value,\n            invalid: false // We shouldn't show the phone number as invalid, since it has changed after submission\n        });\n        this.changeStatus(''); // The same\n    }\n\n    openCountryDropdown = () => {\n        addDialog('login-phone-number-country-selector-dialog', (\n            <CountrySelect id=\"login-phone-number-country-selector-dialog\"\n                countries={this.state.countries} onChange={cc=> {\n                    this.setState({\n                        number_p: cc,\n                        dropDownText: this.getCountryDropdownText(cc),\n                    });\n                }}/>\n        ));\n    }\n\n    getCountryDropdownText(callingCode) {\n        var countryName= __('lng_bad_country_code');\n        if(callingCode == '+') {\n            countryName= __('lng_country_code');\n        }\n        for(let country of callingCodes) {\n            if( callingCode.substr(1) == country.callingCode) {\n                countryName = country.name;\n                break;\n            }\n        }\n        return countryName;\n    }\n\n    handlePNFieldChange_p = (event) => {\n        var value = '+' + event.target.value.replace(/[^0-9-]/g, '');\n\n        if(value.length > 5) {\n            let length = 1;\n            for(let country of callingCodes) {\n                if(value.startsWith(country.callingCode, 1)) {\n                    length = country.callingCode.length+1;\n                    break;\n                }\n            }\n\n            let value_new = value.substr(0, length);\n            let rest= value.substr(length);\n\n            this.setState({\n                number_p: value_new,\n                number: rest + this.state.number,\n                invalid: false,\n                dropDownText: this.getCountryDropdownText(value_new)\n            });\n            this.ref2.current.focus();\n        }\n        else {\n            this.setState({\n                number_p: value,\n                dropDownText: this.getCountryDropdownText(value)\n            });\n        }\n\n        this.changeStatus('');\n    }\n\n    /** @param {React.SyntheticEvent<HTMLInputElement>} e */\n    handleKeyDown = (e) => { // Focus the previous field when the user presses the backspace key\n        if(e.nativeEvent.key === 'Backspace') {\n            if(this.state.number.length === 0) {\n                this.ref1.current.focus();\n            }\n        }\n    }\n\n    submitNumber= async () => {\n        const number = this.state.number_p + ' ' + this.state.number;\n        Auth.givePhoneNumber(number).catch(reason=> {\n            switch(reason.message){\n            case 'PHONE_NUMBER_FLOOD':\n                addDialog( 'phone_number_flood_error',\n                    <ConfirmDialog width=\"320px\" hideCancelButton={true} largeFont={true} id=\"phone_number_flood_error\">\n                        {__('lng_error_phone_flood')}\n                    </ConfirmDialog>\n                );\n                this.changeStatus('');\n                break;\n\n            case 'PHONE_NUMBER_INVALID':\n                this.setState({invalid: true});\n                this.changeStatus(__('lng_bad_phone'));\n                break;\n\n            case 'Another authorization query has started': \n                break;\n\n            default:\n                // We don't know what error it is, so just show it to the user, he/she might understand it.\n                this.setState({invalid: false});\n                this.changeStatus(reason.message);\n                break;\n            }\n        });\n    }\n    render () {\n        const Status=this.Status;\n        return (\n            <div id=\"auth\" className=\"auth-step-phoneNumber\">\n\n                <h2>{__('lng_phone_title')}</h2>\n\n                <p className=\"description\">\n                    {__('lng_phone_desc')}\n                </p>\n\n                {//TODO: Add phone number placeholder\n                }\n\n                <div className=\"country-dropdown\" onClick={this.openCountryDropdown}>\n                    {this.state.dropDownText || __('lng_country_code')}\n                    <span dangerouslySetInnerHTML={{__html: intro_country_dropdown}}/>\n                </div>\n\n                <div className=\"phone-number-input\">\n                    <UnderlinedInput\n                        iRef={this.ref1}\n                        type=\"tel\" \n                        value={this.state.number_p} \n                        autoFocus={true}\n                        onChange={this.handlePNFieldChange_p}\n                        onEnterKeyPressed={this.submitNumber}\n                        preventNumberScrolling={false}/>\n                    \n                    <UnderlinedInput\n                        iRef={this.ref2}\n                        type=\"tel\" \n                        value={this.state.number} \n                        onChange={this.handlePNFieldChange}\n                        onEnterKeyPressed={this.submitNumber}\n                        invalid={this.state.invalid}\n                        preventNumberScrolling={false}\n                        onKeyDown={this.handleKeyDown}/>\n                </div>\n\n                <Status/>\n\n                <BigHighlightedButton\n                    onClick={this.submitNumber}>\n                    {__('lng_intro_next')}\n                </BigHighlightedButton>\n\n                <Provider store={connectionStore}>\n                    <ConnectionState/>\n                </Provider>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { manageStatusTextContent } from '../../auth-screen';\nimport Auth from '../../../TdWeb/auth';\nimport UnderlinedInput from '../../../ui/elements/underlined-input';\nimport BigHighlightedButton from '../../../ui/elements/highlighted-button';\nimport { Provider } from 'react-redux';\nimport connectionStore from '../../../TdWeb/connectionStore';\nimport ConnectionState from '../../../ui/components/connecting';\nimport './verification-code.scss';\nimport __ from '../../../language-pack/language-pack';\n\n/**\n * Renders verification code step of authorization screen\n */\nexport default class AuthWindowStepCode extends React.Component {\n    static propTypes= {\n        info: PropTypes.object\n    };\n    constructor(args) {\n        super(args);\n        manageStatusTextContent(this);\n    }\n    state= {\n        code: '',\n        invalid: false,\n        statusContent: '',\n        statusVisible: false\n    };\n\n    handleCodeFieldChange= (event) => {\n        this.setState({\n            code: event.target.value,\n            invalid: false // Verification code is changed, and we don't know if it is correct or not. Do not show it as invalid anymore\n        });\n        this.changeStatus('');\n        if(event.target.value.length==this.props.info.type.length) { // Automatically submit code if it is filled in\n            this.handleContinueButton(event.target.value);\n        }\n    }\n    handleContinueButton= (code) => {\n        // `code` might be the authorization code, or an event object. If it is not the authorization code, get it ourselves\n        if(typeof code != 'string') {\n            code= undefined;\n        }\n        code = code || this.state.code;\n\n        if(code.length!=this.props.info.type.length) return; // The code is not complete. It is definitely wrong.\n\n        Auth.checkAuthCode(code).catch(reason=> {\n            if(reason.message==='PHONE_CODE_INVALID'){\n                this.setState({invalid: true});\n                this.changeStatus(__('lng_bad_code'));\n            }\n            else {\n                // We don't know the error, all we can do is to just inform the user about it\n                this.setState({invalid: true});\n                this.changeStatus(reason.message);\n            }\n        });\n    }\n    render () {\n        const Status = this.Status;\n\n        var message= (this.props.info.type['@type']=='authenticationCodeTypeSms') ?\n            (<p className=\"description\">{__('lng_code_desc')}</p>) \n            :\n            (<p className=\"description\">{__('lng_code_from_telegram')}</p>);\n            \n        return (\n            <div id=\"auth\" className=\"auth-step-code\">\n\n                <h2>{this.props.info.phone_number}</h2>\n\n                {message}\n\n                <UnderlinedInput\n                    type=\"number\" \n                    value={this.state.code} \n                    onChange={this.handleCodeFieldChange}\n                    autoFocus={true}\n                    title={__('lng_code_ph')}\n                    maxLength={this.props.info.type.length}\n                    onEnterKeyPressed={this.handleContinueButton}\n                    invalid={this.state.invalid}\n                    preventNumberScrolling={true}/>\n\n                <Status/>\n\n                <BigHighlightedButton\n                    onClick={this.handleContinueButton}>\n                    {__('lng_intro_next')}\n                </BigHighlightedButton>\n\n                <Provider store={connectionStore}>\n                    <ConnectionState/>\n                </Provider>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { manageStatusTextContent } from '../../auth-screen';\nimport Auth from '../../../TdWeb/auth';\nimport UnderlinedInput from '../../../ui/elements/underlined-input';\nimport LinkButton from '../../../ui/elements/link-button';\nimport BigHighlightedButton from '../../../ui/elements/highlighted-button';\nimport { Provider } from 'react-redux';\nimport connectionStore from '../../../TdWeb/connectionStore';\nimport ConnectionState from '../../../ui/components/connecting';\nimport './cloud-password.scss';\nimport __, { __fmt } from '../../../language-pack/language-pack';\n\n\n/**\n * Renders 2FA password step of authorization screen\n */\nexport default class AuthWindowStepPassword extends React.Component {\n    constructor(args) {\n        super(args);\n        manageStatusTextContent(this);\n    }\n    static propTypes= {\n        info: PropTypes.object\n    };\n    state= {\n        password: '',\n        invalid: false,\n        statusContent: '',\n        statusVisible: false\n    };\n    handlePasswordFieldChange= (event) => {\n        this.setState({\n            password: event.target.value,\n            invalid: false, // Password was changed, and we don't know if it is wrong or not. We should not show it as wrong\n        });\n        this.changeStatus(''); // Same\n    }\n    handleContinueButton= async () => {\n        Auth.check2FACode(this.state.password).catch(reason=> {\n            if(reason.message=='PASSWORD_HASH_INVALID') {\n                this.setState({invalid: true});\n                this.changeStatus(__('lng_signin_bad_password'));\n            }\n            else {\n                // We don't know what the error is, so all we can do is to show it to the user\n                this.setState({invalid: true});\n                this.changeStatus(reason.message);\n            }\n        });\n    }\n    render () {\n        const Status=this.Status;\n        return (\n            <div id=\"auth\" className=\"auth-step-password\">\n                <div className=\"content\">\n\n                    <h2>{__('lng_signin_title')}</h2>\n\n                    <p className=\"description\">{__('lng_signin_desc')}</p>\n\n                    <UnderlinedInput\n                        type=\"password\"\n                        value={this.state.password} \n                        onChange={this.handlePasswordFieldChange}\n                        autoFocus={true} \n                        title={__('lng_signin_password')}\n                        onEnterKeyPressed={this.handleContinueButton}\n                        disableCopy={true}\n                        invalid={this.state.invalid}/>\n\n                    <div className=\"hint\">\n                        {this.props.info.password_hint?__fmt('lng_signin_hint', {password_hint: this.props.info.password_hint}):<span>&nbsp;</span>}\n                    </div>\n\n                    <div className=\"forgot-password\">\n                        <LinkButton>{__('lng_signin_recover')}</LinkButton>\n                    </div>\n\n                    <Status/>\n\n                    <BigHighlightedButton \n                        onClick={this.handleContinueButton}>\n                        {__('lng_intro_submit')}\n                    </BigHighlightedButton>\n\n                </div>\n                <Provider store={connectionStore}>\n                    <ConnectionState/>\n                </Provider>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types'; \nimport RippleEffect, { handleMyMouseEventsFunction } from '../../../ui/elements/ripple-effect';\nimport { new_chat_photo } from '../../../ui/icon/icons';\nimport './signup-profile-photo.scss';\nimport { blobToUrl } from '../../../TdWeb/file';\n\nexport default function SignUpProfilePic({image, onChange}) {\n    const ripple= React.useState({state: 'off'});\n    const [onMouseDown, onMouseUp, onMouseLeave]= handleMyMouseEventsFunction(ripple);\n    return (\n        <div className={'icon-button sign-up-profile-pic' + (image? ' has-image' : '')} \n            {...{onMouseDown, onMouseUp, onMouseLeave}}>\n\n            {image && <img src={blobToUrl(image)} alt=\"profile\"/>}\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-activeButtonBgRipple)\" small={true}/>\n            <span dangerouslySetInnerHTML={{__html: new_chat_photo}} />\n            <label>\n                <input type=\"file\" accept=\"image/*\" onChange={onChange} />\n            </label>\n        </div>\n    );\n}\nSignUpProfilePic.propTypes = {\n    image: PropTypes.instanceOf(Blob),\n    onChange: PropTypes.func.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Provider } from 'react-redux';\nimport Auth from '../../../TdWeb/auth';\nimport connectionStore from '../../../TdWeb/connectionStore';\nimport ConfirmDialog from '../../../ui/dialog/confirm-dialog';\nimport { addDialog } from '../../../ui/dialog/dialogs';\nimport BigHighlightedButton from '../../../ui/elements/highlighted-button';\nimport UnderlinedInput from '../../../ui/elements/underlined-input';\nimport ConnectionState from '../../../ui/components/connecting';\nimport TdLib from '../../../TdWeb/tdlib';\nimport LinkButton from '../../../ui/elements/link-button';\nimport SignUpProfilePic from './signup-profile-photo';\nimport './register.scss';\nimport __, { __fmt } from '../../../language-pack/language-pack';\n\n/**\n * Render sign up step of authorization screen\n */\nexport default class AuthWindowStepRegister extends React.Component {\n    static propTypes= {\n        tos: PropTypes.object,\n    }\n    \n    state= {\n        firstName: '',\n        lastName: '',\n        statusContent: '',\n        statusVisible: false,\n        image: null,\n    };\n    handleFirstNameFieldChange= (event) => {\n        this.setState({firstName: event.target.value});\n    }\n    handleLastNameFieldChange= (event) => {\n        this.setState({lastName: event.target.value});\n    }\n    handleContinueButton= () => {\n        Auth.registerNewAccount(this.state.firstName, this.state.lastName).catch(reason=> {\n            this.setState({textUnderField: reason.message});\n        }).then(()=> {\n            if(this.state.image) {\n                TdLib.sendQuery({\n                    '@type': 'setProfilePhoto',\n                    photo: {\n                        '@type': 'inputChatPhotoStatic',\n                        photo: {\n                            '@type': 'inputFileBlob',\n                            data: this.state.image,\n                        }\n                    }\n                });\n            }\n        });\n    }\n\n    showTos= () => {\n        addDialog('signup-tos-dialog', (\n            <ConfirmDialog id=\"signup-tos-dialog\" width=\"364px\"\n                hideCancelButton={true} title={__('lng_terms_header')}>\n                \n                {this.props.tos.text.text}\n            </ConfirmDialog>\n        ));\n    }\n\n    render () {\n        return (\n            <div className=\"auth-container\">\n                <div id=\"auth\" className=\"auth-step-signup\">\n                    <div className=\"content\">\n\n                        <h2>{__('lng_signup_title')}</h2>\n\n                        <p className=\"description\">{__('lng_signup_desc')}</p>\n\n                        <SignUpProfilePic image={this.state.image} onChange={e=> this.setState({\n                            image: e.target.files[0]\n                        })}/>\n\n                        <UnderlinedInput\n                            type=\"text\" \n                            title={__('lng_signup_firstname')}\n                            value={this.state.firstName} \n                            onChange={this.handleFirstNameFieldChange}\n                            autoFocus={true} />\n\n                        <UnderlinedInput \n                            type=\"text\" \n                            title={__('lng_signup_lastname')}\n                            value={this.state.lastName} \n                            onChange={this.handleLastNameFieldChange} />\n\n                        <div className=\"status\">\n                            {this.state.textUnderField || ''}\n                        </div>\n\n                        <BigHighlightedButton\n                            onClick={this.handleContinueButton}>\n                            {__('lng_intro_finish')}\n                        </BigHighlightedButton>\n\n                    </div>\n                    <Provider store={connectionStore}>\n                        <ConnectionState/>\n                    </Provider>\n                </div>\n                <div className=\"tos-notice\">\n                    {__fmt('lng_terms_signup', {link: <LinkButton onClick={this.showTos}>{__('lng_terms_signup_link')}</LinkButton>})} \n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TdLib from '../TdWeb/tdlib';\nimport {MessengerWindow} from '../messenger/messengerWindow';\nimport Dialogs, { dialogStore } from '../ui/dialog/dialogs';\nimport './auth.scss';\nimport { connect, Provider } from 'react-redux';\nimport AuthWindowStepPhoneNumber from './auth-step/phone-number/phone-number';\nimport AuthWindowStepCode from './auth-step/verification-code/verification-code';\nimport AuthWindowStepPassword from './auth-step/cloud-password/cloud-password';\nimport AuthWindowStepRegister from './auth-step/register/register';\nimport { createStore } from 'redux';\nimport { themeStore } from '../ui/themes/theme';\nimport { _s__ } from '../language-pack/language-pack';\n\nexport const authStore = createStore((state= { 'state': null }, action) => {\n    switch (action.type) {\n    case 'SET_STATE':\n        return {\n            ...state,\n            'state': action.state\n        };\n    default:\n        return state;\n    }\n});\n\n/**\n * Start managing a status text block with fade effects.  \n * Usage:\n * ```js\n * // constructor\n * manageStatusTextContent(this);\n * \n * // render\n * <Status/>\n * \n * // TdLib.sendQuery({...}).then\n * this.changeStatus(\"Wrong code\")\n * \n * // state\n * {\n *   statusContent: '',\n *   statusVisible: false\n * }\n * ```\n * \n * @param {React.Component} thisClass pass `this` as this argument\n * @returns Store this function and call it to change \n */\nexport function manageStatusTextContent(thisClass) {\n    thisClass.Status= function Status(){\n        return (\n            <div className={'status'+ (thisClass.state.statusVisible?'':' hidden')}>{thisClass.state.statusContent}</div>\n        );\n    };\n    thisClass.changeStatus= function(string){\n        if(string) {\n            thisClass.setState({\n                statusContent: string,\n                statusVisible: true\n            });\n        } else {\n            thisClass.setState({\n                statusVisible: false\n            });\n            setTimeout(() => {\n                if(!thisClass.state.statusVisible) { // Prevent timeout overlapping with later status changes\n                    thisClass.setState({\n                        statusContent: null\n                    });\n                }\n            }, 1000);\n        }\n    };\n}\n\n/**\n * Renders the messenger or authorization screens (layer 1). Does not include dialogs and toasts\n */\nexport const MainApp= connect(state=> ({step: state.state}))(class MainApp extends React.Component {\n    static propTypes = {\n        step: PropTypes.object\n    };\n\n    componentDidMount(){\n        // Handle authorization state updates\n        TdLib.registerUpdateHandler('updateAuthorizationState', (update) => {\n            authStore.dispatch({\n                type: 'SET_STATE',\n                state: update.authorization_state\n            });\n        });\n    }\n\n    shouldComponentUpdate(nextProps) {\n        // Some authorization states are handled without the user knowing. We don't change what's shown to the users if that happens.\n        const states= [\n            'authorizationStateWaitPhoneNumber',\n            'authorizationStateWaitCode',\n            'authorizationStateWaitPassword',\n            'authorizationStateWaitRegistration',\n            'authorizationStateReady',\n            'authorizationStateClosed',\n        ];\n        if(states.includes(nextProps.step['@type'])) {\n            return true;\n        }\n        return false;\n    }\n    \n    render () {\n        switch (this.props.step?.['@type']) {\n        case 'authorizationStateWaitPhoneNumber':\n            // Enter your phone number\n            return (\n                <React.Fragment>\n                    <Provider store={dialogStore}>\n                        <Dialogs/>\n                    </Provider>\n                    <AuthWindowStepPhoneNumber/>\n                </React.Fragment>\n            );\n\n        case 'authorizationStateWaitCode':\n            // Enter the verification code sent to you\n            return (\n                <React.Fragment>\n                    <Provider store={dialogStore}>\n                        <Dialogs/>\n                    </Provider>\n                    <AuthWindowStepCode info={this.props.step.code_info}/>\n                </React.Fragment>\n            );\n\n        case 'authorizationStateWaitPassword':\n            // Enter your 2-factor auth password\n            return (\n                <React.Fragment>\n                    <Provider store={dialogStore}>\n                        <Dialogs/>\n                    </Provider>\n                    <AuthWindowStepPassword info={this.props.step}/>\n                </React.Fragment>\n            );\n\n        case 'authorizationStateWaitRegistration':\n            // There isn't an account on this number, you need to sign up\n            return (\n                <React.Fragment>\n                    <Provider store={dialogStore}>\n                        <Dialogs/>\n                    </Provider>\n                    <AuthWindowStepRegister tos={this.props.step.terms_of_service}/>\n                </React.Fragment>\n            );\n\n        case 'authorizationStateReady':\n            // Logged in\n            return (\n                <Provider store={themeStore}>\n                    <MessengerWindow/>\n                </Provider>\n            );\n\n        case 'authorizationStateClosed':\n            // TDLib session is closed.\n            window.location.reload();\n            return (\n                <p>{_s__('lngd_auth_closed_restart')}</p>\n            );\n        \n        default:\n            // TDLib is still loading\n            return <p>Loading...</p>;\n        }\n    }\n});\n","import TdLib from './tdlib';\n\n/**\n * Sets initial online state\n */\nexport default function setInitialOnlineStatus(){\n    TdLib.sendQuery({\n        '@type': 'setOption',\n        name: 'online',\n        value: {\n            '@type': 'optionValueBoolean',\n            value: document.hasFocus()\n        }\n    });\n}\n\nwindow.onfocus = () => { // Become online when tab/window focuses\n    TdLib.sendQuery({\n        '@type': 'setOption',\n        name: 'online',\n        value: {\n            '@type': 'optionValueBoolean',\n            value: true\n        }\n    });\n};\n\nwindow.onblur = () => { // Become offline when switching tabs/windows\n    TdLib.sendQuery({\n        '@type': 'setOption',\n        name: 'online',\n        value: {\n            '@type': 'optionValueBoolean',\n            value: false\n        }\n    });\n};","import React from 'react';\nimport { Provider } from 'react-redux';\nimport {authStore, MainApp} from './dibgram/auth/auth-screen';\nimport { initLanguagePack } from './dibgram/language-pack/language-pack';\nimport setInitialOnlineStatus from './dibgram/TdWeb/online-handler';\nimport TdLib from './dibgram/TdWeb/tdlib';\nimport ConfirmDialog from './dibgram/ui/dialog/confirm-dialog';\nimport {addDialog} from './dibgram/ui/dialog/dialogs';\nimport { toastStore, Toasts } from './dibgram/ui/dialog/toast';\nimport './dibgram/ui/main.scss';\nimport { ContextMenus, contextMenusStore } from './dibgram/ui/menu/context-menu';\nimport { ThemeProvider, themeStore } from './dibgram/ui/themes/theme';\n\nTdLib.initializeTdLib().then(function () {\n    setInitialOnlineStatus();\n    initLanguagePack();\n});\n\nif(process.env.NODE_ENV== 'development') {\n    window['sendQuery']= TdLib.sendQuery;\n}\n\n/**\n * Renders the whole React app\n */\nfunction App() {\n    React.useEffect(() => { // A fatal error occurred in TdLib\n        TdLib.registerUpdateHandler('updateFatalError', window.simulateFatalError=  function (update) {\n            console.error('Fatal error:', update.error);\n            \n            addDialog( 'tdlib_fatal_error',\n                <ConfirmDialog \n                    width=\"400px\" \n                    hideCancelButton={true} \n                    id=\"tdlib_fatal_error\" \n                    thirdButton=\"Refresh\"\n                    onThirdButtonClick={window.location.reload.bind(window.location)}\n                    thirdButtonClosesDialog={false}\n                    title=\"Fatal Error\">\n                    \n                    A fatal error occurred in TdLib.<br/> \n                    Try refreshing, clearing site data or opening \n                    DIBgram in a private window. <br/>\n                    If none of these helped, report this to the developers \n                    by <a href=\"https://github.com/DIBgram/DIBgram/issues/new/choose\" rel=\"noreferrer\" target=\"_blank\"\n                        style={{color: 'var(--theme-color-windowActiveTextFg)'}}>filing an issue.</a>\n                    <br/><br/>\n                    <pre>{update.error.toString()}</pre>\n                </ConfirmDialog>\n            );\n        });\n    }, []);\n\n    return (\n        <Provider store={themeStore}>\n            <ThemeProvider id=\"app\">\n                <Provider store={toastStore}>\n                    <Toasts/>\n                </Provider>\n                <Provider store={authStore}>\n                    <MainApp/>\n                </Provider>\n                <Provider store={contextMenusStore}>\n                    <ContextMenus/>\n                </Provider>\n            </ThemeProvider>\n        </Provider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\n/* eslint-disable indent */\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import './remove-item-from-array';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}