{"version":3,"sources":["remove-item-from-array.js","dibgram/TdWeb/tdlib.js","dibgram/TdWeb/config.js","dibgram/auth/auth.js","dibgram/ui/elements/ripple-effect.js","dibgram/ui/elements/highlighted-button.js","dibgram/ui/icon/chat_filters/chat-filters.js","dibgram/ui/elements/icon-button.js","dibgram/ui/icon/icons.js","dibgram/messenger/sections/navigation-menu/hamburger-menu/menu-button.js","dibgram/messenger/chat-store.js","dibgram/ui/scroll/scrollbar.js","dibgram/messenger/sections/navigation-menu/chat-folders.js","dibgram/ui/elements/loading-spinner.js","dibgram/ui/components/connecting.js","dibgram/TdWeb/file.js","dibgram/TdWeb/options.js","dibgram/ui/img/TgLogo.png","dibgram/ui/components/profile-photo.js","dibgram/messenger/users-store.js","dibgram/messenger/payments/currency-tostring.js","dibgram/messenger/message/message-summary-noicon.js","dibgram/ui/elements/link-button.js","dibgram/messenger/supergroup-store.js","dibgram/time-tostring.js","dibgram/messenger/sections/navigation-menu/chat-list.js","dibgram/messenger/chat-misc.js","dibgram/messenger/message-misc.js","dibgram/messenger/sections/navigation-menu/search/search-box.js","dibgram/TdWeb/connectionStore.js","dibgram/messenger/sections/navigation-menu/chat-list-bar.js","dibgram/messenger/messengerWindow.js","dibgram/ui/elements/underlined-input.js","dibgram/ui/dialog/dialogs.js","dibgram/ui/elements/small-button.js","dibgram/ui/dialog/confirm-dialog.js","dibgram/auth/auth-screen.js","dibgram/ui/themes/dibgram-theme-to-css.js","dibgram/ui/themes/theme.js","App.js","index.js"],"names":["Array","prototype","remove","item","i","this","length","splice","TdLib","log","use_test_dc","log_updates","log_queries","TdClient","useDatabase","onUpdate","update","console","forEach","h","sendQuery","type","handler","undefined","push","query","Promise","resolve","reject","send","then","result","error","getUseTestDc","urlPar","URL","window","location","href","searchParams","get","registerUpdateHandler","credentials","api_id","api_hash","auth_state","Auth","number","code","pass","first","last","RippleEffect","props","small","X","Y","width","rX","rY","height","Math","hypot","abs","max","state","className","style","getMaxRadius","backgroundColor","color","React","Component","handleMyMouseEvents","This","e","ripple","setState","setTimeout","nativeEvent","offsetX","offsetY","target","clientWidth","clientHeight","bind","mouseUp","handleMyMouseEventsFunction","setRipple","up","BigHighlightedButton","mouseDown","mouseLeave","onClick","onMouseDown","onMouseUp","onMouseLeave","children","chatFilerIcons","All","Bots","Channels","Custom","Groups","Private","Setup","Unread","Cat","Crown","Favorite","Flower","Game","Home","Love","Mask","Party","Sport","Study","Trade","Travel","Work","IconButton","icon","rest","useState","dangerouslySetInnerHTML","__html","HamburgerMenuButton","WithFolders","id","PureComponent","WithoutFolders","chatStore","createStore","currentChatList","chats","filters","action","chatList","chat","map","chat_id","changed","newChat","positions","position","compareChatList","list","filter","payload","property","value","photo","title","last_message","__REDUX_DEVTOOLS_EXTENSION__","dispatch","action_bar","default_disable_notification","draft_message","chat_filters","has_scheduled_messages","is_blocked","is_marked_as_unread","notification_settings","online_member_count","permissions","unread_count","last_read_inbox_message_id","last_read_outbox_message_id","reply_markup_message_id","unread_mention_count","list1","list2","chat_filter_id","ScrollView","mouseEntered","setMouseEntered","timeoutId","setTimeoutId","scrollBarWidth","propsRest","data-mouse-entered","renderTrackHorizontal","renderTrackVertical","renderThumbHorizontal","renderThumbVertical","onMouseEnter","clearTimeout","autoHide","autoHideTimeout","hideTracksWhenNotNeeded","ChatFolder","folder","active","icon_name","iconName","setIconName","useEffect","text","connect","folders","currentFolder","LoadingSpinner","percentage","percent","caps","trackColor","spin","transitionDuration","intervalNum","setInterval","clearInterval","size","PropTypes","isRequired","lineWidth","progressColor","string","includes","downloadCallbacks","getFileContent","file","priority","local","is_downloading_completed","is_downloading_active","callback","catch","file_id","onReject","downloadFile","options","name","profileNameToInitials","words","replace","toUpperCase","split","ProfilePhoto","customIcon","setPhoto","photoObj","setPhotoObj","isServiceMessages","isSavedMessages","isReplies","mounted","blob","data","webkitURL","createObjectURL","tgLogo","Initials","Fragment","src","getChatTypeId","supergroup_id","basic_group_id","user_id","usersStore","user","currencyAmountToString","currency","total_amount","currencyObject","currencies","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","exp","MessageSummaryWithoutIcon","users","message","content","MayHaveCaption","caption","audio","file_name","performer","SenderFullName","is_outgoing","discard_reason","members","member_user_ids","last_name","first_name","slice","join","sender","is_channel_post","deletedMember","includeYou","86400","604800","2678400","ttl","emoji","document","game","noGameTitleFallback","score","GameScoreWithTitle","lazy","message_id","game_message_id","default","Suspense","fallback","passportDataTypeToString","passportDataTypes","types","noInvoiceTitleFallback","PaymentInfoWithInvoiceTitle","invoice_message_id","is_secret","poll","question","sticker","venue","domain_name","MessageSummarySender","part1","LinkButton","supergroupStore","supergroup","smallDateTimeToString","date","TdLibDateToDate","now","Date","yesterday","getTime","lastWeek","hours","getHours","minutes","getMinutes","ampm","timeToString","getDay","weekdayToString","day","getDate","month","getMonth","year","String","getFullYear","dateToString","tdLibDate","ChatList","connectionState","order","sort","a","b","order1","order2","nextProps","array","getChatsFromList","store","EmptyChatList","ChatListItem","is_pinned","chatType","is_channel","getState","isChatWithDeletedAccount","isVerified","is_verified","isChatVerified","messageStatus","sending_state","getMessageStatus","unreadBadge","unreadBadgeClass","mute_for","input_message_text","SearchBox","placeholder","onChange","data-visible","connectionStore","connection","ChatListBar","useFolders","searchText","setSearchText","MessengerWindow","UnderlinedInput","args","handleFocus","inactive","titleClass","getTitleClass","handleBlur","mouseX","handleMouseDown","handleKeyDown","key","onEnterKeyPressed","autoFocus","focus","invalid","onFocus","onBlur","onKeyDown","maxLength","onCopy","disableCopy","preventDefault","dialogStore","dialog","removeDialog","Wrapper","Dialogs","dialogs","el","element","SmallButton","ConfirmDialog","closing","handleOK","closeDialog","onOK","handleCancel","onCancel","hideCancelButton","OKButtonText","initialAuthState","setInitialAuthState","manageStatusTextContent","thisClass","Status","statusVisible","statusContent","changeStatus","MainApp","step","handleAuthStateUpdate","info","code_info","reload","AuthWindowStepPhoneNumber","handlePNFieldChange","event","submitNumber","givePhoneNumber","reason","AuthWindowStepCode","handleCodeFieldChange","handleContinueButton","checkAuthCode","phone_number","AuthWindowStepPassword","password","handlePasswordFieldChange","check2FACode","body","password_hint","AuthWindowStepRegister","firstName","lastName","handleFirstNameFieldChange","handleLastNameFieldChange","registerNewAccount","textUnderField","convertThemeToCSS","theme","css","obj","equals","CurrentThemeCSS","classic","isThemeDark","isDark","initializeTdLib","res","App","data-theme-is-dark","ReactDOM","render","toString","getElementById","StrictMode"],"mappings":"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","file":"static/js/main.74f42303.chunk.js","sourcesContent":["// https://love2dev.com/blog/javascript-remove-from-array/#remove-from-array-splice\n/**\n * Removes an item from an array\n * @param {*} item The item to remove\n */\nArray.prototype.remove = function (item) {\n    for( var i = 0; i < this.length; i++){ \n        if ( this[i] === item) { \n            this.splice(i, 1); \n        }\n    }\n};\n\nexport default Array.prototype.remove;","import TdClient from 'tdweb';\nimport {getConfig} from './config';\n\n/**\n * Provides options to communicate with the Tdweb library\n */\nexport default class TdLib {\n    /** @type TdClient */\n    static #tdClient;\n    /** @type {[string: Array<Function>]} */\n    static #updateHandlers={};\n\n    /**\n     * Creates the instance of Tdweb\n     */\n    static async initializeTdLib() {\n        const {log}= getConfig();\n        TdLib.#tdClient= new TdClient({\n            useDatabase: true,\n            onUpdate: function (update) {\n                if(log.log_updates) {\n                    console.log('Update: ',update);\n                }\n                if(TdLib.#updateHandlers[update['@type']]){\n                    TdLib.#updateHandlers[update['@type']].forEach(h => h(update));\n                }\n            }\n        });\n        return await TdLib.sendQuery({'@type': 'getAuthorizationState'});\n    }\n\n    /**\n     * Listen for updates from TdLib\n     * @param {string} type The type of the update to listen to. Look for TdLib API docs for types\n     * @param {Function} handler The function that gets called with the update object when the update is received\n     */\n    static registerUpdateHandler(type, handler) {\n        if(TdLib.#updateHandlers[type]===undefined){\n            TdLib.#updateHandlers[type]= [];\n        }\n        TdLib.#updateHandlers[type].push(handler);\n    }\n\n    /**\n     * Remove an existing update handler\n     * @param {string} type The type of the update to remove handler from. Look for TdLib API docs for types\n     * @param {Function} handler The handler to remove\n     */\n    static unRegisterUpdateHandler(type, handler) {\n        if(TdLib.#updateHandlers[type]===undefined){\n            return;\n        }\n        TdLib.#updateHandlers[type].remove(handler);\n    }\n\n    /**\n     * Send a request to the TdLib instance\n     * If the query contains an `@extra` field, the same field will be added to the result\n     * @param {import('tdweb').TdObject} query The request to send. Consult TdLib & JSON interface API for help.\n     */\n    static sendQuery(query) {\n        const {log}= getConfig();\n        if(log.log_queries) {\n            console.log('Query: ',query);\n        }\n        return new Promise((resolve, reject) => {\n            TdLib.#tdClient.send(query).then(result=> {\n                if(log.log_queries) {\n                    console.log('Query result: ', result);\n                }\n                resolve(result);\n            }, error=> {\n                if(log.log_queries) {\n                    console.error('Query failed: ', error);\n                }\n                reject(error);\n            }\n            );\n        });\n    }\n}","export function getCredentials() {return {api_id: 3022678,api_hash: 'd7b7676a82906a6182f4a5e5e9555673'};}export function getConfig() {return {use_test_dc: false,log: {log_updates: true,log_queries: true}};}\n","import TdLib from '../TdWeb/tdlib';\nimport {getCredentials, getConfig} from '../TdWeb/config';\n\nTdLib.registerUpdateHandler('updateAuthorizationState',function (update) {\n    const credentials= getCredentials();\n    const auth_state= update['authorization_state'];\n    \n    if(auth_state['@type']==='authorizationStateWaitEncryptionKey'){\n        TdLib.sendQuery({'@type': 'checkDatabaseEncryptionKey', 'encryption_key': ''});\n    }\n    if(auth_state['@type']==='authorizationStateWaitTdlibParameters'){\n        TdLib.sendQuery({\n            '@type': 'setTdlibParameters',\n            'parameters': {\n                'database_directory': 'tdlib',\n                'use_message_database': true,\n                'use_secret_chats': true,\n                'api_id': credentials.api_id,\n                'api_hash': credentials.api_hash,\n                'system_language_code': 'en',\n                'device_model': 'Web',\n                'application_version': '0.0.1',\n                'enable_storage_optimizer': true,\n                'use_test_dc': getUseTestDc(),\n            }\n        });\n    }\n});\n\nfunction getUseTestDc(){\n    var urlPar=new URL(window.location.href).searchParams.get('test');\n    if(urlPar){\n        return urlPar==='1' || urlPar==='true';\n    }\n    return getConfig().use_test_dc;\n}\n\n/**\n * Provides functions to pass required authorization data to Telegram\n */\nexport default class Auth {\n    /**\n     * Pass phone number of the account to be logged in to\n     * @param {string} number The phone number the user entered\n     * @returns TdLib query result\n     */\n    static async givePhoneNumber(number) {\n        return await TdLib.sendQuery({'@type': 'setAuthenticationPhoneNumber', 'phone_number': number});\n    }\n    /**\n     * Pass authorization code the user has received\n     * @param {string} code The code the user entered\n     * @returns TdLib query result\n     */\n    static async checkAuthCode(code) {\n        return await TdLib.sendQuery({'@type': 'checkAuthenticationCode', 'code': code});\n    }\n    /**\n     * Pass 2FA password of the account\n     * @param {string} pass The password the user entered\n     * @returns TdLib query result\n     */\n    static async check2FACode(pass) {\n        return await TdLib.sendQuery({'@type': 'checkAuthenticationPassword', 'password': pass});\n    }\n    /**\n     * Sign up to Telegram\n     * @param {string} first The first name to be used in the new account\n     * @param {string} last Tha last name to be used in the new account\n     * @returns TdLib query result\n     */\n    static async registerNewAccount(first, last) {\n        return await TdLib.sendQuery({'@type': 'registerUser', 'first_name': first, 'last_name': last});\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Adds a ripple effect to a button.\n * \n * Insert at the beginning of the button.\n * \n * **Note:** The button needs `position: relative;` and `overflow: hidden;`\n */\nexport default class RippleEffect extends React.Component {\n    static propTypes= {\n        /** \n         * - Change to `pressed` on `mouseDown`\n         * - Change to `released` on `mouseUp`\n         * - Change to `off` 1000ms after `mouseUp`\n         */\n        state: PropTypes.oneOf(['off', 'pressed', 'released']).isRequired,\n        X: PropTypes.number,\n        Y: PropTypes.number,\n        width: PropTypes.number,\n        height: PropTypes.number,\n        /** The color to show in the ripple (same as `:active` if you used CSS) */\n        color: PropTypes.string.isRequired,\n        /** Pass true if the button is small to make animation faster */\n        small: PropTypes.bool\n    }\n\n    /** Gets the smallest radius that a circle, centered at click location, needs to fill the button */\n    getMaxRadius() {\n        if(!this.props.small){\n        //  It's a bit hard to understand. Let me explain:\n        //  \n        //  1. It calculates the coordinates relative to the 4 edges of the button ────╮\n        //  2. The diagonal distance to the edges are calculated using the             │\n        //      pythagoras rule, from the results of step 1            │               │\n        //  3. The biggest distance is selected and then returned.     │               │\n        //          │                                                  │               │\n        //  ╭───────┴──────╮  ╭────────────────────────────────────────╯               │        \n        //  │           ╭──┼──┴───╮                                                    │                  \n            return Math.max(//    │╭───────────────────────────────────────────────────┴──────────────╮\n                /* ┏ */ Math.hypot(this.props.X                     , this.props.Y),//                │ \n                /* ┓ */ Math.hypot(this.props.width - this.props.X  , this.props.Y),//                │\n                /* ┗ */ Math.hypot(this.props.X                     , this.props.height - this.props.Y), \n                /* ┛ */ Math.hypot(this.props.width - this.props.X  , this.props.height - this.props.Y), \n            );\n        } else {\n            const {X, Y, width, height} = this.props;\n            const [rX, rY] = [X - width / 2, Y - height / 2]; // Click position relative to center of circle.\n            const distanceToCenter= Math.hypot(Math.abs(rX), Math.abs(rY)); // Get distance from click position to the center of circle.\n            return distanceToCenter + (width / 2); // Add circle radius to result\n        }\n    }\n    render() {\n        if(this.props.state=='off') return null;\n        return (\n            <div\n                className={'ripple '+this.props.state+ (this.props.small? ' small':'')}\n                style={{\n                    '--top': (this.props.Y || 0)+'px',\n                    '--left': (this.props.X || 0)+'px',\n                    '--radius': this.getMaxRadius()+'px',\n                    backgroundColor: this.props.color\n                }}/>\n        );\n    }\n}\n\n// Assign your `mouseDown`, `mouseUp` and `mouseLeave` to the returned functions.\nexport function handleMyMouseEvents(This) {\n    return [\n        /**@param e {React.SyntheticEvent} */\n        (function(e) {\n            // Reset the ripple effect if it's not off\n            if(this.state.ripple.state!='off'){\n                this.setState({\n                    ripple: { state: 'off' }\n                });\n                setTimeout(() => {\n                    this.setState({\n                        ripple: {\n                            state: 'pressed',\n                            X: e.nativeEvent.offsetX,\n                            Y: e.nativeEvent.offsetY,\n                            width: e.target.clientWidth,\n                            height: e.target.clientHeight\n                        }\n                    });\n                }, 10);\n                return;\n            }\n            this.setState({\n                ripple: {\n                    state: 'pressed',\n                    X: e.nativeEvent.offsetX,\n                    Y: e.nativeEvent.offsetY,\n                    width: e.target.clientWidth,\n                    height: e.target.clientHeight\n                }\n            });\n        }).bind(This),\n\n        (function(e) {\n            this.setState({\n                ripple: { \n                    state: 'released',\n                    X: e.nativeEvent.offsetX,\n                    Y: e.nativeEvent.offsetY,\n                    width: e.target.clientWidth,\n                    height: e.target.clientHeight \n                }\n            });\n        }).bind(This),\n\n        (function(e) {\n            if(this.state.ripple.state=='pressed') {\n                this.mouseUp(e);\n            }\n        }).bind(This)\n    ];\n}\n// Assign your `mouseDown`, `mouseUp` and `mouseLeave` to the returned functions.\nexport function handleMyMouseEventsFunction([ripple, setRipple]) {\n    function down(e) {\n        // Reset the ripple effect if it's not off\n        if(ripple.state!='off'){\n            setRipple({ state: 'off' });\n            setTimeout(() => {\n                setRipple ({\n                    state: 'pressed',\n                    X: e.nativeEvent.offsetX,\n                    Y: e.nativeEvent.offsetY,\n                    width: e.target.clientWidth,\n                    height: e.target.clientHeight\n                });\n            }, 10);\n            return;\n        }\n        setRipple ({\n            state: 'pressed',\n            X: e.nativeEvent.offsetX,\n            Y: e.nativeEvent.offsetY,\n            width: e.target.clientWidth,\n            height: e.target.clientHeight\n        });\n    }\n\n    function up(e) {\n        setRipple ({\n            state: 'released',\n            X: e.nativeEvent.offsetX,\n            Y: e.nativeEvent.offsetY,\n            width: e.target.clientWidth,\n            height: e.target.clientHeight \n        });\n    }\n\n    function leave(e) {\n        if(ripple.state=='pressed') {\n            up(e);\n        }\n    }\n    \n    return [down, up, leave];\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport RippleEffect, {handleMyMouseEvents} from './ripple-effect';\n\n/**\n * Renders a BIG button which is filled with accent color\n */\nexport default class BigHighlightedButton extends React.Component{\n    static propTypes= {\n        /** Fires when the button is clicked */\n        onClick: PropTypes.func,\n        /** The button's content */\n        children: PropTypes.node.isRequired\n    };\n    state= {\n        ripple: {\n            state: 'off'\n        }\n    }\n    constructor() {\n        super();\n        [this.mouseDown, this.mouseUp, this.mouseLeave]= handleMyMouseEvents(this);\n    }\n\n    render () {\n        return (\n            <button \n                className=\"big-highlighted-button\" \n                onClick={this.props.onClick}\n                onMouseDown={this.mouseDown}\n                onMouseUp={this.mouseUp}\n                onMouseLeave={this.mouseLeave}>\n\n                <RippleEffect {...this.state.ripple} color=\"var(--theme-color-activeButtonBgRipple)\"/>\n                <div className=\"content\">\n                    {this.props.children}\n                </div>\n            </button>\n        );\n    }\n}","// All icons are from Telegram Desktop, converted to SVG using https://pngtosvg.com/\n\nimport raw from 'raw.macro';\n\nvar chatFilerIcons = {\n    All     : [raw('./all.svg'     ), raw('./all_active.svg'     )],\n    Bots    : [raw('./bots.svg'    ), raw('./bots_active.svg'    )],\n    Channels: [raw('./channels.svg'), raw('./channels_active.svg')],\n    Custom  : [raw('./custom.svg'  ), raw('./custom_active.svg'  )],\n    Groups  : [raw('./groups.svg'  ), raw('./groups_active.svg'  )],\n    Private : [raw('./private.svg' ), raw('./private_active.svg' )],\n    Setup   : [raw('./setup.svg'   )                              ],\n    Unread  : [raw('./unread.svg'  ), raw('./unread_active.svg'  )],\n\n    Cat     : [raw('./cat.svg'     ), raw('./cat_active.svg'     )],\n    Crown   : [raw('./crown.svg'   ), raw('./crown_active.svg'   )],\n    Favorite: [raw('./favorite.svg'), raw('./favorite_active.svg')],\n    Flower  : [raw('./flower.svg'  ), raw('./flower_active.svg'  )],\n    Game    : [raw('./game.svg'    ), raw('./game_active.svg'    )],\n    Home    : [raw('./home.svg'    ), raw('./home_active.svg'    )],\n    Love    : [raw('./love.svg'    ), raw('./love_active.svg'    )],\n    Mask    : [raw('./mask.svg'    ), raw('./mask_active.svg'    )],\n    Party   : [raw('./party.svg'   ), raw('./party_active.svg'   )],\n    Sport   : [raw('./sport.svg'   ), raw('./sport_active.svg'   )],\n    Study   : [raw('./study.svg'   ), raw('./study_active.svg'   )],\n    Trade   : [raw('./trade.svg'   ),                             ],\n    Travel  : [raw('./travel.svg'  ), raw('./travel_active.svg'  )],\n    Work    : [raw('./work.svg'    ), raw('./work_active.svg'    )],\n};\nexport default chatFilerIcons;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport RippleEffect, {handleMyMouseEventsFunction} from '../../ui/elements/ripple-effect';\nimport './icon-button.scss';\n\nexport default function IconButton({icon, ...rest}) {\n    const ripple= React.useState({state: 'off'});\n    const [onMouseDown, onMouseUp, onMouseLeave]= handleMyMouseEventsFunction(ripple);\n    return (\n        <button className=\"icon-button\" {...rest} {...{onMouseDown, onMouseUp, onMouseLeave}}>\n            <span dangerouslySetInnerHTML={{__html: icon}} />\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-windowBgOver)\" small={true}/>\n        </button>\n    );\n}\nIconButton.propTypes = {\n    icon: PropTypes.string.isRequired\n};\n","// All icons are from Telegram Desktop, converted to SVG using https://pngtosvg.com/\n\nimport raw from 'raw.macro';\n\nexport const dialogs_bot = raw('./dialogs_bot.svg');\nexport const dialogs_channel = raw('./dialogs_channel.svg');\nexport const dialogs_chat = raw('./dialogs_chat.svg');\nexport const dialogs_pinned = raw('./dialogs_pinned.svg');\nexport const dialogs_verified_star = raw('./dialogs_verified_star.svg');\nexport const dialogs_verified_check = raw('./dialogs_verified_check.svg');\n//export const dialogs_search_cancel = raw('./dialogs_search_cancel.svg');\nexport const dialogs_sending = raw('./dialogs_sending.svg');\nexport const dialogs_sent = raw('./dialogs_sent.svg');\nexport const dialogs_received = raw('./dialogs_received.svg');\nexport const dialogs_menu = raw('./dialogs_menu.svg');\nexport const info_close = raw('./info_close.svg');\nexport const replies_userpic = raw('./replies_userpic.svg');\nexport const saved_messages = raw('./saved_messages.svg');\nexport const filters_edit = raw('./chat_filters/edit.svg');\n","import React from 'react';\nimport IconButton from '../../../../ui/elements/icon-button';\nimport RippleEffect, {handleMyMouseEvents} from '../../../../ui/elements/ripple-effect';\nimport { dialogs_menu } from '../../../../ui/icon/icons';\nimport './menu-button.scss';\n\nvar HamburgerMenuButton= {};\n\n/**\n * Renders the button which opens the hamburger menu\n */\nHamburgerMenuButton.WithFolders= class WithFolders extends React.PureComponent {\n    state= {\n        ripple: {\n            state: 'off'\n        }\n    }\n    constructor() {\n        super();\n        [this.mouseDown, this.mouseUp, this.mouseLeave]= handleMyMouseEvents(this);\n    }\n    render() {\n        return (\n            <button id=\"hamburger-menu-button\" className=\"uses-folders\"\n                onMouseDown={this.mouseDown}\n                onMouseUp={this.mouseUp}\n                onMouseLeave={this.mouseLeave}>\n                <div id=\"bars\"><span></span><span></span><span></span></div>\n                <RippleEffect {...this.state.ripple} color=\"var(--theme-color-sideBarBgRipple)\"/>\n            </button>\n        );\n    }\n};\n\n/**\n * Renders the button which opens the hamburger menu\n */\nHamburgerMenuButton.WithoutFolders= function WithoutFolders () {\n    return (\n        <IconButton \n            icon={dialogs_menu}\n            id=\"hamburger-menu-button\"\n            className=\"icon-button no-folders\"/>\n    );\n};\n\nexport default HamburgerMenuButton;","import { createStore } from 'redux';\nimport TdLib from '../TdWeb/tdlib';\n\nconst chatStore= createStore(reducer, \n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n    \nfunction reducer(state= {\n    currentChatList: {'@type': 'chatListMain'},\n    chats: [],\n    filters: []\n}, action) {\n    switch (action.type) {\n    case 'SET_CURRENT_CHAT_LIST':\n        return {\n            ...state,\n            currentChatList: action.chatList\n        };\n    case 'ADD_CHAT':\n        return {\n            ...state,\n            chats: [\n                ...state.chats,\n                action.chat\n            ]\n        };\n    case 'UPDATE_CHAT_POSITION': // Replace the position property of a chat\n        return {\n            ...state,\n            chats: state.chats.map((chat) => {\n                if (chat.id === action.chat_id) {\n                    let changed=false;\n                    let newChat = {\n                        ...chat,\n                        positions: chat.positions.map((position) => {\n                            if (compareChatList(position.list, action.position.list)) {\n                                changed=true;\n                                return action.position;\n                            }\n                            return position;\n                        })\n                    };\n                    if(!changed) {\n                        return {\n                            ...chat,\n                            positions: [\n                                ...chat.positions,\n                                action.position\n                            ]\n                        };\n                    }\n                    return newChat;\n                }\n                return chat;\n            })\n        };\n    case 'REMOVE_CHAT':\n        return {\n            ...state,\n            chats: state.chats.filter(chat => chat.id !== action.chat.id)\n        };\n    case 'REPLACE_CHAT_FILTERS':\n        return {\n            ...state,\n            filters: action.payload\n        };\n    case 'UPDATE_CHAT_PROPERTY':\n        return {\n            ...state,\n            chats: state.chats.map((chat) => {\n                if (chat.id === action.chat_id) {\n                    return {\n                        ...chat,\n                        [action.property]: action.value\n                    };\n                }\n                return chat;\n            })\n        };\n    case 'UPDATE_CHAT_PHOTO':\n        return {\n            ...state,\n            chats: state.chats.map((chat) => {\n                if (chat.id === action.chat_id) {\n                    return {\n                        ...chat,\n                        photo: action.photo\n                    };\n                }\n                return chat;\n            })\n        };\n    case 'UPDATE_CHAT_TITLE':\n        return {\n            ...state,\n            chats: state.chats.map((chat) => {\n                if (chat.id === action.chat_id) {\n                    return {\n                        ...chat,\n                        title: action.title\n                    };\n                }\n                return chat;\n            })\n        };\n    case 'UPDATE_CHAT_LAST_MESSAGE':\n        return {\n            ...state,\n            chats: state.chats.map((chat) => {\n                if (chat.id === action.chat_id) {\n                    return {\n                        ...chat,\n                        last_message: action.last_message\n                    };\n                }\n                return chat;\n            })\n        };\n    default:\n        return state;\n    }\n}\n\nTdLib.registerUpdateHandler('updateNewChat', update => {\n    chatStore.dispatch({\n        type: 'ADD_CHAT',\n        chat: update.chat\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatActionBar', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'action_bar',\n        chat_id: update.chat_id,\n        value: update.action_bar\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatDefaultDisableNotification', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'default_disable_notification',\n        chat_id: update.chat_id,\n        value: update.default_disable_notification\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatDraftMessage', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'draft_message',\n        chat_id: update.chat_id,\n        value: update.draft_message\n    });\n    for (let position of update.positions) {\n        chatStore.dispatch({\n            type: 'UPDATE_CHAT_POSITION',\n            chat_id: update.chat_id,\n            position: position\n        });\n    }\n});\n\nTdLib.registerUpdateHandler('updateChatFilters', update=> {\n    if(update.chat_filters) {\n        chatStore.dispatch({\n            type: 'REPLACE_CHAT_FILTERS',\n            payload: update.chat_filters\n        });\n    }\n});\n\nTdLib.registerUpdateHandler('updateChatHasScheduledMessages', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'has_scheduled_messages',\n        chat_id: update.chat_id,\n        value: update.has_scheduled_messages\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatIsBlocked', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'is_blocked',\n        chat_id: update.chat_id,\n        value: update.is_blocked\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatIsMarkedAsUnread', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'is_marked_as_unread',\n        chat_id: update.chat_id,\n        value: update.is_marked_as_unread\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatLastMessage', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'last_message',\n        chat_id: update.chat_id,\n        value: update.last_message\n    });\n    for (let position of update.positions) {\n        chatStore.dispatch({\n            type: 'UPDATE_CHAT_POSITION',\n            chat_id: update.chat_id,\n            position: position\n        });\n    }\n});\n\nTdLib.registerUpdateHandler('updateChatNotificationSettings', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'notification_settings',\n        chat_id: update.chat_id,\n        value: update.notification_settings\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatOnlineMemberCount', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'online_member_count',\n        chat_id: update.chat_id,\n        value: update.online_member_count\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatPermissions', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'permissions',\n        chat_id: update.chat_id,\n        value: update.permissions\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatPhoto', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'photo',\n        chat_id: update.chat_id,\n        value: update.photo\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatPosition', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_POSITION',\n        chat_id: update.chat_id,\n        position: update.position\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatReadInbox', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'unread_count',\n        chat_id: update.chat_id,\n        value: update.unread_count\n    });\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'last_read_inbox_message_id',\n        chat_id: update.chat_id,\n        value: update.last_read_inbox_message_id\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatReadOutbox', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'last_read_outbox_message_id',\n        chat_id: update.chat_id,\n        value: update.last_read_outbox_message_id\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatReplyMarkup', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'reply_markup_message_id',\n        chat_id: update.chat_id,\n        value: update.reply_markup_message_id\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatTitle', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'title',\n        chat_id: update.chat_id,\n        value: update.title\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatUnreadMentionCount', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'unread_mention_count',\n        chat_id: update.chat_id,\n        value: update.unread_mention_count\n    });\n});\n\nTdLib.registerUpdateHandler('updateMessageMentionRead', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'unread_mention_count',\n        chat_id: update.chat_id,\n        value: update.unread_mention_count\n    });\n});\n\nexport default chatStore;\n\nexport function compareChatList(list1, list2) {\n    if (list1['@type'] != list2['@type']) {\n        return false;\n    }\n    if (list1['@type'] == 'chatListFilter') {\n        return list1.chat_filter_id == list2.chat_filter_id;\n    }\n    return true;\n}\n\n/**\n * Gets a chat from a chat ID. Has caching.\n */\nexport function getChat(id) {\n    let res;\n    for(let chat of chatStore.getState()?.chats) {\n        if(chat.id==id) res = Promise.resolve(chat);\n    }\n    if(!res){\n        res = TdLib.sendQuery({\n            '@type': 'getChat',\n            'chat_id': id\n        });\n    }\n    return res;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport './scrollbar.scss';\n\nexport default function ScrollView(props) {\n    const [mouseEntered, setMouseEntered] = React.useState(false);\n    const [timeoutId, setTimeoutId] = React.useState(null);\n    const {scrollBarWidth, ...propsRest} = props;\n    return (\n        <Scrollbars\n            className=\"scrollbar\"\n            style= {{ '--bar-width': (scrollBarWidth || 4)+'px' }}\n            data-mouse-entered={mouseEntered}\n            renderTrackHorizontal={props => <div {...props} className=\"track-horizontal\" />}\n            renderTrackVertical={props => <div {...props} className=\"track-vertical\" />}\n            renderThumbHorizontal={props => <div {...props} className=\"thumb-horizontal\" />}\n            renderThumbVertical={props => <div {...props} className=\"thumb-vertical\" />}\n            onMouseEnter={() => {\n                setMouseEntered(true);\n                setTimeoutId(setTimeout(() => {\n                    setMouseEntered(false);\n                }, 1000));\n            }}\n            onMouseLeave={() => {\n                setMouseEntered(false);\n                clearTimeout(timeoutId);\n            }}\n            autoHide\n            autoHideTimeout={1000}\n            hideTracksWhenNotNeeded={true}\n            {...propsRest}\n        />\n    );\n}\nScrollView.propTypes = {\n    scrollBarWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport filters from '../../../ui/icon/chat_filters/chat-filters';\nimport RippleEffect, {handleMyMouseEventsFunction} from '../../../ui/elements/ripple-effect';\nimport HamburgerMenuButton from './hamburger-menu/menu-button';\nimport { compareChatList } from '../../chat-store';\nimport TdLib from '../../../TdWeb/tdlib';\nimport ScrollView from '../../../ui/scroll/scrollbar';\nimport './chat-folders.scss';\n\n/**\n * Renders a chat folder button\n */\nexport function ChatFolder({folder, active, onClick}) {\n    const ripple= React.useState({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave]= handleMyMouseEventsFunction(ripple);\n    const [iconName, setIconName]= React.useState(folder.icon_name);\n\n    React.useEffect(()=> {\n        TdLib.sendQuery({\n            '@type': 'getChats',\n            'chat_list': {\n                '@type': 'chatListFilter',\n                'chat_filter_id': folder.id,\n            },\n            'offset_order': '9223372036854775807',\n            'offset_chat_id': 0,\n            'limit': 50\n        });\n    }, []);\n\n    React.useEffect(()=> {\n        if(!folder.icon_name) {\n            TdLib.sendQuery({\n                '@type': 'getChatFilter',\n                'chat_filter_id': folder.id\n            }).then(folder=> {\n                TdLib.sendQuery({\n                    '@type': 'getChatFilterDefaultIconName',\n                    'filter': folder\n                }).then(result=> setIconName(result.text));\n            });\n        }\n    }, [folder]);\n\n    var icon= (filters[iconName] || filters['Custom']);\n    icon= icon[active+0] || icon[0];\n    return (\n        <div className={active ? 'item active' : 'item'}>\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-sideBarBgRipple)\"/>\n            <button\n                onMouseDown={mouseDown}\n                onMouseUp={mouseUp}\n                onMouseLeave={mouseLeave}\n                onClick={onClick}>\n\n                <div className=\"icon\" dangerouslySetInnerHTML={{__html: icon}}></div>\n                <div className=\"title\">{folder.title}</div>\n            </button>\n        </div>\n    );\n}\n\nChatFolder.propTypes= {\n    /** The folder object provided by TdLib */\n    folder: PropTypes.object.isRequired,\n    /** A boolean indicating if the folder is currently selected */\n    active: PropTypes.bool.isRequired,\n    /** A function to call when the folder is clicked */\n    onClick: PropTypes.func.isRequired\n};\n\n/**\n * Renders the chat folders list\n */\nfunction ChatFolderList({folders, currentFolder, dispatch}) {\n    if(!folders || folders.length==0) return null;\n    return (\n        <div id=\"chat-folders-list\">\n            <HamburgerMenuButton.WithFolders/>\n            <ScrollView scrollBarWidth=\"4\" className=\"list scrollbar full-size\">\n                <ChatFolder \n                    active={compareChatList(currentFolder, {'@type': 'chatListMain'})} \n                    folder={{ title: 'All chats', icon_name: 'All' }}\n                    onClick={()=> dispatch({\n                        type: 'SET_CURRENT_CHAT_LIST',\n                        chatList: { '@type': 'chatListMain' }\n                    })}/>\n                \n                {folders.map(folder=> (\n                    <ChatFolder folder={folder} key={folder.id}\n                        active={compareChatList(currentFolder, \n                            {'@type': 'chatListFilter', 'chat_filter_id': folder.id})}\n                        onClick={()=> dispatch({\n                            type: 'SET_CURRENT_CHAT_LIST',\n                            chatList: { \n                                '@type': 'chatListFilter',\n                                chat_filter_id: folder.id\n                            }\n                        })}/>\n                ))}\n            </ScrollView>\n        </div>\n    );\n}\nChatFolderList.propTypes={\n    folders: PropTypes.arrayOf(PropTypes.object),\n    currentFolder: PropTypes.object,\n    dispatch: PropTypes.func\n};\nexport default connect(state=>({\n    folders:state.filters, \n    currentFolder: state.currentChatList\n}))(ChatFolderList);","import { ProgressRing } from 'progress-ring';\nimport 'progress-ring/src/styles.css';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Renders a spinner which in addition to spinning, also changes size.\n */\nexport default class LoadingSpinner extends React.Component {\n    static props= {\n        size: PropTypes.number.isRequired,\n        lineWidth: PropTypes.number.isRequired,\n        progressColor: PropTypes.string.isRequired\n    }\n    state= {\n        percentage: 10\n    }\n    render () {\n        return (\n            <div className=\"loading-spinner\">\n                <ProgressRing\n                    percent={this.state.percentage}\n                    caps='round'\n                    trackColor=\"transparent\"\n                    spin=\"true\"\n                    {...this.props}\n                    transitionDuration=\"2000\"/>\n            </div>\n        );\n    }\n\n    componentDidMount () {\n        this.intervalNum= setInterval(() => {\n            this.setState({\n                percentage: (90 - this.state.percentage)\n            });\n        }, 2000);\n    }\n\n    componentWillUnmount () {\n        clearInterval(this.intervalNum);\n    }\n}","import React from 'react';\nimport LoadingSpinner from '../elements/loading-spinner';\nimport { connect } from 'react-redux';\n\n/**\n * Renders the connecting spinner at the bottom left corner, which is hidden when connected\n */\nexport default connect(state=> ({state: state})) (function ConnectionState({state}) {\n    return (\n        <div className={'connectionState'+(([\n            'connectionStateConnecting',\n            'connectionStateConnectingToProxy',\n            'connectionStateWaitingForNetwork'\n        ].includes(state))? '' : ' connected')}>\n            <LoadingSpinner\n                progressColor=\"var(--theme-color-menuIconFg)\"\n                size=\"20\"\n                lineWidth=\"2\"/>\n        </div>\n    );\n});\n","import TdLib from './tdlib';\n\nexport function downloadFile (file_id, priority) {\n    let onReject;\n    TdLib.sendQuery({\n        '@type': 'downloadFile',\n        'file_id': file_id,\n        'priority': priority,\n        'offset': 0,\n        'limit': 0,\n        'synchronous': false\n    }).catch(onReject);\n\n    return new Promise((resolve, reject) => {\n        downloadCallbacks[file_id]=result=> {\n            resolve(result);\n            delete downloadCallbacks[file_id];\n        };\n        onReject=reject;\n    });\n}\nvar downloadCallbacks = {};\n\nTdLib.registerUpdateHandler('updateFile', function (update) {\n    if(update.file.local.is_downloading_completed){\n        downloadCallbacks[update.file.id]?.(update.file);\n    }\n});\n\n// Downloads the file if it is not already downloaded, then reads the file and returns the file content as a blob.\nexport function getFileContent(file, priority) {\n    if(file.local.is_downloading_completed){\n        return TdLib.sendQuery({\n            '@type': 'readFilePart',\n            'file_id': file.id,\n            'offset': 0,\n            'count': 0\n        });\n    } else if(file.local.is_downloading_active){\n        return new Promise((resolve, reject) => {\n            const callback = downloadCallbacks[file.id];\n            downloadCallbacks[file.id] = (result) => {\n                callback(result);\n                TdLib.sendQuery({\n                    '@type': 'readFilePart',\n                    'file_id': file.id,\n                    'offset': 0,\n                    'count': 0\n                }).then(resolve).catch(reject);\n            };\n        });\n    } else {\n        return new Promise((resolve, reject) => {\n            downloadFile(file.id, priority).then(()=> {\n                TdLib.sendQuery({\n                    '@type': 'readFilePart',\n                    'file_id': file.id,\n                    'offset': 0,\n                    'count': 0\n                }).then(resolve).catch(reject);\n            }).catch(reject);\n        });\n    }\n}\n\nexport function blobToUrl (blob) {\n    return (window.URL || window.webkitURL).createObjectURL(blob);\n}\n","import TdLib from './tdlib';\n\n/**\n * Contains all options received from TdLib `updateOption`s\n */\nvar options={};\n\nTdLib.registerUpdateHandler('updateOption', function (update) {\n    options[update.name]=update.value.value;\n});\n\nexport default options;\n","export default __webpack_public_path__ + \"static/media/TgLogo.d1ff1195.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { blobToUrl, getFileContent } from '../../TdWeb/file';\nimport options from '../../TdWeb/options';\nimport './profile-photo.scss';\nimport tgLogo from '../../ui/img/TgLogo.png';\nimport { saved_messages, replies_userpic } from '../icon/icons';\n\nexport function profileNameToInitials(name) {\n    const words=name.replace(/[\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007F]/g,'').toUpperCase().split(' ');\n    if(words[0].length==0){\n        return '';\n    } else if(words.length===1) {\n        return words[0][0];\n    } else {\n        return words[0][0] + words[words.length-1][0];\n    }\n}\n\nexport default function ProfilePhoto (props) {\n    const [photo, setPhoto] = React.useState(null);\n    const [photoObj, setPhotoObj] = React.useState(null);\n    const isServiceMessages= props.id==options['telegram_service_notifications_chat_id'];\n    const isSavedMessages= props.id==options['my_id'];\n    const isReplies= props.id==options['replies_bot_chat_id'];\n    \n    React.useEffect(() => {\n        var mounted=true;\n        if(props.photo){\n            if(photoObj!=props.photo){\n                getFileContent(props.photo, 8).then(file=> {\n                    if(!mounted) return;\n                    setPhoto(blobToUrl(file.data));\n                    setPhotoObj(props.photo);\n                });\n            }\n        } else {\n            if(photo && photoObj){\n                setPhoto(null);\n                setPhotoObj(null);\n            }\n        }\n        return ()=> mounted=false;\n    }, [props.photo]);\n\n    var customIcon; \n    if(isSavedMessages){\n        customIcon= [0, saved_messages];\n    }\n    if(isReplies){\n        customIcon= [0, replies_userpic];\n    }\n    if((!props.photo) && isServiceMessages) {\n        customIcon = [1, tgLogo];\n    }\n    return (\n        <div className=\"profile-photo\">\n            <Initials id={props.id} name={props.name}/>\n            {\n                customIcon? (\n                    customIcon[0]?\n                        <React.Fragment>\n                            <Initials id={props.id} name={props.name}/>\n                            <img src={customIcon[1]}/>\n                        </React.Fragment>\n                        :\n                        <div className=\"svg\" dangerouslySetInnerHTML={{__html: customIcon[1]}}/>\n                ) : (\n                    (props.photo && photo) && <img src={photo}/> \n                )\n            }\n        </div>\n    );\n}\nProfilePhoto.propTypes = {\n    name: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    photo: PropTypes.object\n};\n\nfunction Initials({id, name}) {\n    return (\n        <span className={'initials color_'+ ((Math.abs(id || 0) % 7) + 1)}>\n            {profileNameToInitials(name)}\n        </span>\n    );\n}\nInitials.propTypes = {\n    name: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired\n};\n\nexport function getChatTypeId(chat) {\n    switch (chat?.type?.['@type']) {\n    case 'chatTypeSupergroup': {\n        return chat?.type?.supergroup_id;\n    }\n    case 'chatTypeBasicGroup': {\n        return chat?.type?.basic_group_id;\n    }\n    case 'chatTypePrivate':\n    case 'chatTypeSecret': {\n        return chat?.type?.user_id;\n    }\n    }\n    return null;\n}\n","import { createStore } from 'redux';\nimport TdLib from '../TdWeb/tdlib';\n\nconst usersStore = createStore((state = {}, action) => {\n    switch (action.type) {\n    case 'UPD_USER':\n        return {\n            ...state,\n            [action.user.id]: action.user\n        };\n    default:\n        return state;\n    }\n}, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nTdLib.registerUpdateHandler('updateUser', (update) => {\n    usersStore.dispatch({\n        type: 'UPD_USER',\n        user: update.user\n    });\n});\n\nexport default usersStore;\n","import currencies from './currencies';\n\nexport default function currencyAmountToString (currency, total_amount) {\n    const currencyObject= currencies[currency];\n    var formatter = new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: currency,\n        \n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2,\n    });\n    return formatter.format(total_amount / 10**currencyObject.exp);\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport TdLib from '../../TdWeb/tdlib';\nimport currencyAmountToString from '../payments/currency-tostring';\n\n/**\n * Gets a textual representation of the message without a thumbnail.\n * Usage examples: \n * - Last message in chat list\n * - Pinned message\n * - Replies\n * - Search results\n * @returns A span element containing a textual representation of the message. Contains span.part-1 and span.part-2\n */\n\nconst MessageSummaryWithoutIcon= connect(state=> ({users: state}))(\n    function MessageSummaryWithoutIcon({message, className, users, chat}) {\n        if(!message) return null;\n        switch(message.content['@type']) {\n        \n        case 'messageAnimation':\n            return (\n                <MayHaveCaption\n                    type=\"GIF\" \n                    caption={message.content.caption?.text} \n                    className={className} \n                    message={message} \n                    chat={chat}\n                    users={users}/>\n            );\n        \n        case 'messageAudio':\n            var title= message.content.audio.title || message.content.audio.file_name;\n            if(message.content.audio.performer)\n                title= message.content.audio.performer+ ' ­­– ' + title;\n            return (\n                <MayHaveCaption \n                    type={title} \n                    caption={message.content.caption?.text} \n                    className={className} \n                    message={message} \n                    chat={chat}\n                    users={users}/>\n            );\n\n        case 'messageBasicGroupChatCreate':\n            return (\n                <span className={className}>\n                    <span className=\"part-1\"><SenderFullName chat={chat} message={message} users={users}/> created the group «{message.content.title}»</span>\n                </span>\n            );\n\n        case 'messageCall':\n            var text='';\n            if(message.is_outgoing) {\n                switch(message.content.discard_reason?.['@type']) {\n                case 'callDiscardReasonMissed':\n                    text= 'Cancelled call';\n                    break;\n                default:\n                    text= 'Outgoing call';\n                }\n            } else {\n                switch(message.content.discard_reason?.['@type']) {\n                case 'callDiscardReasonDeclined':\n                    text= 'Declined call';\n                    break;\n                case 'callDiscardReasonMissed':\n                    text= 'Missed call';\n                    break;\n                default: \n                    text= 'Incoming call';\n                }\n            } \n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">{text}</span>\n                </span>\n            );\n\n        case 'messageChatAddMembers':\n            var members= message.content.member_user_ids.map(id=> \n                users[id].last_name ? (users[id].first_name+' '+ users[id].last_name) : users[id].first_name);\n            if(members.length>1){\n                members= members.slice(0, members.length - 1) .join(', ') + ' and ' + members[members.length - 1];\n            } else {\n                members= members[0];\n            }\n            if(message.content.member_user_ids[0] == message.sender?.user_id) {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\"><SenderFullName message={message} chat={chat} users={users}/> joined the group</span>\n                    </span>\n                );\n            }\n            return (\n                <span className={className}>\n                    <span className=\"part-1\"><SenderFullName message={message} chat={chat} users={users}/> added {members}</span>\n                </span>\n            );\n\n        case 'messageChatChangePhoto':\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">Photo</span>\n                </span>\n            );\n\n        case 'messageChatChangeTitle': // I can't believe copilot can fill these lines without having access to API docs\n            if(message.is_channel_post) {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\">Channel name was changed to «{message.content.title}»</span>\n                    </span>\n                );\n            } else {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\"><SenderFullName message={message} chat={chat} users={users}/>\n                        &nbsp;changed group name to «{message.content.title}»</span>\n                    </span>\n                );\n            }\n\n        case 'messageChatDeleteMember':\n            var deletedMember= users[message.content.user_id];\n            return (\n                <span className={className}>\n                    <span className=\"part-1\"><SenderFullName message={message} chat={chat} users={users}/>\n                    &nbsp;removed {deletedMember.first_name+' '+ deletedMember.last_name}</span>\n                </span>\n            );\n\n        case 'messageChatDeletePhoto':\n            if(message.is_channel_post) {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\">Channel photo removed</span>\n                    </span>\n                );\n            } else {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\"><SenderFullName message={message} chat={chat} users={users}/>\n                        &nbsp;removed group photo</span>\n                    </span>\n                );\n            }\n\n        case 'messageChatJoinByLink':\n            return (\n                <span className={className}>\n                    <span className=\"part-1\"><SenderFullName message={message} chat={chat} users={users}/>\n                    &nbsp;joined the group via invite link</span>\n                </span>\n            );\n\n        case 'messageChatSetTtl':\n            // seconds to day, week and month\n            var timeConversionTable= {86400: 'day', 604800: 'week', 2678400: 'month'};\n            return (\n                <span className={className}>\n                    <span className=\"part-1\"><SenderFullName message={message} chat={chat} users={users} includeYou={true}/> set messages to auto-delete in 1 {timeConversionTable[message.content.ttl]}</span>\n                </span>\n            );\n\n        case 'messageChatUpgradeFrom':\n        case 'messageChatUpgradeTo':\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">Group was upgraded to a super-group</span>\n                </span>\n            );\n\n        case 'messageContact':\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">Contact</span>\n                </span>\n            );\n\n        case 'messageContactRegistered':\n            return (\n                <span className={className}>\n                    <span className=\"part-1\"><SenderFullName message={message} chat={chat} users={users}/>\n                    &nbsp;joined Telegram</span>\n                </span>\n            );\n\n        case 'messageCustomServiceAction':\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{message.content.text}</span>\n                </span>\n            );\n\n        case 'messageDice':\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">{message.content.emoji}</span>\n                </span>\n            );\n\n        case 'messageDocument':\n            return (\n                <MayHaveCaption \n                    type={message.content.document.file_name} \n                    caption={message.content.caption?.text} \n                    className={className} \n                    message={message} \n                    chat={chat}\n                    users={users}/>\n            );\n        \n        // case 'messageExpiredPhoto':\n        // case 'messageExpiredVideo':\n        case 'messageGame':\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">🎮 {message.content.game.title}</span>\n                </span>\n            );\n\n        case 'messageGameScore':\n            var noGameTitleFallback= (\n                <span className={className}><span className=\"part-1\">\n                    <SenderFullName message={message} chat={chat} users={users} includeYou={true}/> scored {message.content.score}\n                </span></span>\n            );\n\n            // Get game message\n            var GameScoreWithTitle= React.lazy(()=>new Promise(resolve=> {\n                TdLib.sendQuery({\n                    '@type': 'getMessage',\n                    chat_id: chat.id,\n                    message_id: message.content.game_message_id\n                }).then(\n                    result=> { \n                        //eslint-disable-next-line react/display-name\n                        resolve({ default: ()=> (\n                            <span className={className}><span className=\"part-1\">\n                                <SenderFullName message={message} chat={chat} users={users} includeYou={true}/> scored {message.content.score} in {result.content.game.title}\n                            </span></span>\n                        )});\n                    },\n                    ()=> { \n                        //eslint-disable-next-line react/display-name\n                        resolve({ default: ()=> noGameTitleFallback});\n                    }\n                );\n            }));\n\n            return (\n                <React.Suspense fallback={noGameTitleFallback}>\n                    <GameScoreWithTitle/>\n                </React.Suspense>\n            );\n\n        case 'messageInvoice':\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">{message.content.title}</span>\n                </span>\n            );\n\n        case 'messageLocation':\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">{message.content.title}</span>\n                </span>\n            );\n\n        case 'messagePassportDataSent':\n            var passportDataTypeToString= {\n                'passportElementTypeAddress': 'address',\n                'passportElementTypeBankStatement': 'bank statement',\n                'passportElementTypeDriverLicense': 'driver license',\n                'passportElementTypeEmailAddress': 'email address',\n                'passportElementTypeIdentityCard': 'identity card',\n                'passportElementTypeInternalPassport': 'internal passport',\n                'passportElementTypePassport': 'passport',\n                'passportElementTypePassportRegistration': 'passport registration',\n                'passportElementTypePersonalDetails': 'personal details',\n                'passportElementTypePhoneNumber': 'phone number',\n                'passportElementTypeRentalAgreement': 'rental agreement',\n                'passportElementTypeTemporaryRegistration': 'temporary registration',\n                'passportElementTypeUtilityBill': 'utility bill',\n            };\n            var passportDataTypes= message.content.types.map(type=> passportDataTypeToString[type['@type']]);\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">\n                        {chat.title} received the following documents: {passportDataTypes.join(', ')}\n                    </span>\n                </span>\n            );\n\n        case 'messagePaymentSuccessful':\n            var noInvoiceTitleFallback= (\n                <span className={className}>\n                    <span className=\"part-1\">\n                        You successfully transferred \n                        {currencyAmountToString(message.content.currency, message.content.total_amount)} \n                        to {chat.title}\n                    </span>\n                </span>\n            );\n\n            // Get invoice message\n            var PaymentInfoWithInvoiceTitle= React.lazy(()=>new Promise(resolve=> {\n                TdLib.sendQuery({\n                    '@type': 'getMessage',\n                    chat_id: chat.id,\n                    message_id: message.content.invoice_message_id\n                }).then(\n                    result=> { \n                        //eslint-disable-next-line react/display-name\n                        resolve({ default: ()=> (\n                            <span className={className}>\n                                <span className=\"part-1\">\n                                    You successfully transferred \n                                    {currencyAmountToString(message.content.currency, message.content.total_amount)} \n                                    to {chat.title} for {result.content.title}\n                                </span>\n                            </span>\n                        )});\n                    },\n                    ()=> {\n                        resolve({ default: ()=> noInvoiceTitleFallback});\n                    }\n                );\n            }));\n\n            return (\n                <React.Suspense fallback={noInvoiceTitleFallback}>\n                    <PaymentInfoWithInvoiceTitle/>\n                </React.Suspense>\n            );\n\n        case 'messagePhoto':\n            if(message.content.is_secret) {\n                if(message.is_outgoing) {\n                    return (\n                        <span className={className}>\n                            <span className=\"part-1\">You sent a self-destructing photo</span>\n                        </span>\n                    );\n                } else {\n                    return (\n                        <span className={className}><span className=\"part-1\">\n                            <SenderFullName message={message} chat={chat} users={users}/> sent you a self-destructing photo. Please view it on your mobile.\n                        </span></span>\n                    );\n                }\n            } else {\n                return (\n                    <MayHaveCaption \n                        type=\"Photo\" \n                        caption={message.content.caption?.text} \n                        className={className} \n                        message={message} \n                        chat={chat}\n                        users={users}/>\n                );\n            }\n        \n        // case 'messagePinMessage':\n        case 'messagePoll':\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{message.content.poll.question}</span>\n                </span>\n            );\n        \n        // case 'messageProximityAlertTriggered':\n        // case 'messageScreenshotTaken':\n        case 'messageSticker':\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">{message.content.sticker.emoji} Sticker</span>\n                </span>\n            );\n\n        case 'messageSupergroupChatCreate':\n            if(message.is_channel_post) {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\">Channel created</span>\n                    </span>\n                );\n            } else {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\"><SenderFullName chat={chat} message={message} users={users}/> created the group «{message.content.title}»</span>\n                    </span>\n                );\n            }\n\n        case 'messageText':\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-2\">{message.content.text.text.replace(/(\\n|\\r|\\r\\n|\\n\\r)/g, ' ')}</span>\n                </span>\n            );\n\n        case 'messageUnsupported':\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-2\">This message is not supported by your version of DIBgram. Please update to the latest version.</span>\n                </span>\n            );\n        \n        case 'messageVenue':\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">Location, </span>\n                    <span className=\"part-2\">{message.content.venue.title}</span>\n                </span>\n            );\n\n        case 'messageVideo':\n            return (\n                <MayHaveCaption \n                    type=\"Video\" \n                    caption={message.content.caption?.text} \n                    className={className} \n                    message={message} \n                    chat={chat}\n                    users={users}/>\n            );\n\n        case 'messageVideoNote':\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">Video message</span>\n                </span>\n            );\n\n        case 'messageVoiceNote':\n            return (\n                <MayHaveCaption \n                    type=\"Voice message\" \n                    caption={message.content.caption?.text} \n                    className={className} \n                    message={message} \n                    chat={chat}\n                    users={users}/>\n            );\n\n        case 'messageWebsiteConnected':\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">You allowed this bot to message you when you logged in on {message.content.domain_name}</span>\n                </span>\n            );\n\n        default:\n            return null;\n        }\n    });\nexport default MessageSummaryWithoutIcon;\nMessageSummaryWithoutIcon.propTypes= {\n    message: PropTypes.object,\n    className: PropTypes.string\n};\n\n\n// If caption has a value, add a comma to type and return type\nfunction MayHaveCaption({type, caption, className, message, chat, users}) {\n    if(caption) type+=',';\n    return (\n        <span className={className}>\n            <MessageSummarySender message={message} chat={chat} users={users}/>\n            <span className=\"part-1\">{type}</span> <span className=\"part-2\">{caption.replace(/(\\n|\\r|\\r\\n|\\n\\r)/g, ' ')}</span>\n        </span>\n    );\n}\nMayHaveCaption.propTypes= {\n    type: PropTypes.string.isRequired,\n    caption: PropTypes.string,\n    className: PropTypes.string,\n    message: PropTypes.object,\n    chat: PropTypes.object,\n    users: PropTypes.object.isRequired\n};\n\nfunction SenderFullName({message, chat, users, includeYou}) {\n    if(includeYou) {\n        return message.is_outgoing ? 'You' : <SenderFullName message={message} chat={chat} users={users}/>;\n    }\n    const sender=message.sender;\n    const user=users[sender.user_id];\n    if(sender['@type']=='messageSenderUser') {\n        return user.last_name ? (user.first_name +' '+ user.last_name) : user.first_name;\n    } else if(sender['@type']=='messageSenderChat') {\n        return chat.title;\n    }\n}\n\nexport const MessageSummarySender= \n    function MessageSummarySender ({message, chat, users}) {\n        if(!message) return null;\n        var part1;\n        if(chat && (!message.is_channel_post)) {\n            if(message.is_outgoing) {\n                part1= 'You: ';\n            } else if(['chatTypeBasicGroup', 'chatTypeSupergroup'].includes(chat.type['@type'])) {\n                if(message.sender['@type']=='messageSenderUser') {\n                    part1= users[message.sender.user_id].first_name + ': ';\n                }\n            }\n            if(message.sender['@type']=='messageSenderChat') {\n                part1= chat.title+': ';\n            }\n        }\n        return part1? <span className=\"sender\">{part1}</span> : null;\n    };\nMessageSummarySender.propTypes= {\n    message: PropTypes.object.isRequired,\n    chat: PropTypes.object.isRequired,\n    users: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './link-button.scss';\n\nexport default function LinkButton({children, onClick}) {\n    return (\n        <button className=\"link-button\" onClick={onClick}>{children}</button>\n    );\n}\nLinkButton.propTypes = {\n    children: PropTypes.node.isRequired,\n    onClick: PropTypes.func\n};\n","import {createStore} from 'redux';\nimport TdLib from '../TdWeb/tdlib';\n\nfunction reducer(state, action) {\n    switch (action.type) {\n    case 'UPD_SUPERGROUP':\n        return {\n            ...state,\n            [action.supergroup.id]: action.supergroup\n        };\n    default:\n        return state;\n    }\n}\n\nconst supergroupStore= createStore(reducer);\nexport default supergroupStore;\n\nTdLib.registerUpdateHandler('updateSupergroup', (update) => {\n    supergroupStore.dispatch({\n        type: 'UPD_SUPERGROUP',\n        supergroup: update.supergroup\n    });\n});","\n/**\n * Converts a date and time to a short string.\n * - If the date is in the last 20 hours, the time is displayed in the format HH:MM.\n * - If the date is in the last 7 days, the weekday is displayed.\n * - If the date is older, the date is displayed in the format DD.MM.YY.\n * @param {Date|Number} date Input date\n */\nexport function smallDateTimeToString(date) {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    const now = new Date();\n    const yesterday = new Date(now.getTime() - 20 * 60 * 60 * 1000);\n    const lastWeek = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n\n    if (date.getTime() >= yesterday.getTime()) {\n        return timeToString(date);\n    } else if (date.getTime() >= lastWeek.getTime()) {\n        return weekdayToString(date);\n    } else {\n        return dateToString(date);\n    }\n}\n\n/**\n * Formats time in 12-hour format\n * @param {Date|Number} date input date\n */\nexport function timeToString(date) {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    var hours = date.getHours();\n    var minutes = date.getMinutes();\n    const ampm = hours >= 12 ? 'PM' : 'AM';\n    hours = hours % 12;\n    hours = hours ? hours : 12; // the hour '0' should be '12'\n    minutes = minutes < 10 ? `0${minutes}` : minutes;\n    return `${hours}:${minutes} ${ampm}`;\n}\n\n/**\n * Formats weekday in WWW format\n * @param {Date|Number} date input date\n */\nexport function weekdayToString(date) {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    return weekdays[date.getDay()];\n}\n\n/**\n * Formats date in DD.MM.YY format\n * @param {Date|Number} date input date\n */\nexport function dateToString(date) {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    var day = date.getDate();\n    var month = date.getMonth() + 1;\n    const year = String(date.getFullYear()).slice(2);\n    if (day < 10) {\n        day = `0${day}`;\n    }\n    if (month < 10) {\n        month = `0${month}`;\n    }\n    return `${day}.${month}.${year}`;\n}\n\nexport function TdLibDateToDate(tdLibDate) {\n    return new Date(tdLibDate * 1000);\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect, Provider } from 'react-redux';\nimport TdLib from '../../../TdWeb/tdlib';\nimport { compareChatList } from '../../chat-store';\nimport './chat-list.scss';\nimport ProfilePhoto, { getChatTypeId } from '../../../ui/components/profile-photo';\nimport { dialogs_chat, dialogs_channel, dialogs_bot, dialogs_pinned, dialogs_verified_star, dialogs_verified_check, dialogs_sending, dialogs_sent, dialogs_received } from '../../../ui/icon/icons';\nimport usersStore from '../../users-store';\nimport ScrollView from '../../../ui/scroll/scrollbar';\nimport MessageSummaryWithoutIcon from '../../message/message-summary-noicon';\nimport LinkButton from '../../../ui/elements/link-button';\nimport { isChatWithDeletedAccount, isChatVerified } from '../../chat-misc';\nimport { smallDateTimeToString } from '../../../time-tostring';\nimport { getMessageStatus } from '../../message-misc';\nimport options from '../../../TdWeb/options';\n\nconst ChatList= connect(state=> ({connectionState: state}))(\n    class ChatList extends React.Component { \n        static propTypes = {\n            chats: PropTypes.array.isRequired,\n            list: PropTypes.object.isRequired,\n            connectionState: PropTypes.string.isRequired\n        }\n\n\n        /**\n         * Returns a sorted list of all chats in the given chat list\n         * \n         * Also for every chat, sets `chat.position` to the matching position (creates copy instead of modifying original object)\n         * @param {import('tdweb').TdObject[]} chats\n         * @param {import('tdweb').TdObject} list\n         */\n        getChatsFromList(chats, list) {\n            return chats.map(chat => {\n                for( const position of chat.positions ) {\n                    if (compareChatList(list, position.list)) {\n                        if( position.order=='0' ) return false;\n                        return {\n                            ...chat,\n                            position: position\n                        };\n                    }\n                }\n                return chat;\n            })\n                .filter(chat => !!chat.position)\n                .sort((a, b) => {\n                    let order1= a.position.order, order2= b.position.order;\n\n                    if (order1 == order2) {\n                        return 0;\n                    }\n                    if (order1 < order2) {\n                        return 1;\n                    }\n                    return -1;\n                });\n        }\n\n        // When updating, TDLib sends updates of type\n        // updateChatLastMessage, where only the last one is needed.\n        // This greatly hurts performance.\n        // However, we can workaround it by not re-rendering \n        // until all updates have arrived.\n        shouldComponentUpdate(nextProps) {\n            return (nextProps.chats !== this.props.chats \n                || nextProps.list !== this.props.list \n                || nextProps.connectionState !== this.props.connectionState)\n                && nextProps.connectionState != 'connectionStateUpdating';\n        }\n\n        render() {\n            const array= this.getChatsFromList(this.props.chats, this.props.list).map(chat=><ChatListItem key={chat.id} chat={chat} />);\n            return (\n                <ScrollView id=\"chat-list\" scrollBarWidth=\"4\">\n                    <Provider store={usersStore}>\n                        {array.length ? array :  <EmptyChatList list={this.props.list} connectionState={this.props.connectionState}/>}\n                    </Provider>\n                </ScrollView>\n            );\n        }\n\n        componentDidMount() {\n            TdLib.sendQuery({\n                '@type': 'getChats',\n                'chat_list': {\n                    '@type': 'chatListMain'\n                },\n                'offset_order': '9223372036854775807',\n                'offset_chat_id': 0,\n                'limit': 50\n            });\n        }\n    }\n);\nexport default ChatList;\n\nexport class ChatListItem extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        return nextProps.chat.id !== this.props.chat.id\n            || nextProps.chat.last_message !== this.props.chat.last_message\n            || nextProps.chat.draft_message !== this.props.chat.draft_message\n            || nextProps.chat.unread_count !== this.props.chat.unread_count\n            || nextProps.chat.unread_mention_count !== this.props.chat.unread_mention_count\n            || nextProps.chat.position.is_pinned !== this.props.chat.position.is_pinned\n            || nextProps.chat.photo?.small?.id !== this.props.chat.photo?.small?.id\n            || nextProps.chat.title !== this.props.chat.title\n            || nextProps.chat.last_read_outbox_message_id !== this.props.chat.last_read_outbox_message_id;\n    }\n    render(){\n        const chat= {...this.props.chat}; // Clone chat object to avoid mutating it. Mutating it causes Saved messages and Deleted account chats to get past shouldComponentUpdate.\n        var chatType= '';\n        if (chat.type?.['@type'] == 'chatTypeBasicGroup' ||\n                (chat.type?.['@type'] == 'chatTypeSupergroup' &&\n                chat.type?.is_channel == false)\n        ){\n            chatType= dialogs_chat;\n        } \n        else if (chat.type?.['@type'] == 'chatTypeSupergroup' &&\n                chat.type?.is_channel == true){\n            chatType= dialogs_channel;\n        } \n        else if ((chat.type?.['@type'] == 'chatTypePrivate') &&\n                (usersStore.getState()[chat.type?.user_id]?.type?.['@type'] == 'userTypeBot')){\n            chatType= dialogs_bot;\n        }\n        if (chat.id==options['replies_bot_chat_id']) {\n            chatType= '';\n        }\n\n        if(isChatWithDeletedAccount(chat)) {\n            chat.title= 'Deleted Account'; // Chat object is a copy, so there is no problem with mutating it.\n        }\n\n        const isVerified= isChatVerified(chat);\n\n        if (chat.id==options['my_id']) {\n            chat.title= 'Saved Messages';\n        }\n\n        var messageStatus = null;\n        switch(getMessageStatus(chat, chat.last_message)) {\n        case 'sending': \n            messageStatus = <span className=\"message-status-icon sending\" dangerouslySetInnerHTML={{__html: dialogs_sending}}/>;\n            break;\n        case 'sent': \n            messageStatus = <span className=\"message-status-icon sent\" dangerouslySetInnerHTML={{__html: dialogs_sent}}/>;\n            break;\n        case 'seen': \n            messageStatus = <span className=\"message-status-icon seen\" dangerouslySetInnerHTML={{__html: dialogs_received}}/>;\n            break;\n        }\n\n        var unreadBadge = null;\n        const unreadBadgeClass= chat.notification_settings.mute_for ? 'unread-badge muted' : 'unread-badge';\n        // Show the mention badge alone if there is exactly one mention and no other unread messages\n        if (chat.unread_mention_count == 1 && chat.unread_count == chat.unread_mention_count) {\n            unreadBadge = <span className=\"unread-badge mention\">@</span>;\n        } \n        // Show the mention badge with unread badge together if there are more than one unread messages and there are mentions\n        else if (chat.unread_mention_count > 0 && chat.unread_count > 1 ) {\n            unreadBadge = <React.Fragment>\n                <span className=\"unread-badge mention\">@</span>\n                <span className={unreadBadgeClass}>{chat.unread_count}</span>\n            </React.Fragment>;\n        }\n        // Show the unread badge alone if there are no mentions and there are unread messages\n        else if (chat.unread_count > 0 && chat.unread_mention_count == 0) {\n            unreadBadge = <span className={unreadBadgeClass}>{chat.unread_count}</span>;\n        }\n        // Show an empty badge if chat is manually marked as unread\n        else if (chat.is_marked_as_unread) {\n            unreadBadge = <span className={unreadBadgeClass}></span>;\n        }\n        else {\n            unreadBadge = chat.position?.is_pinned && <span className=\"pinned_icon\" dangerouslySetInnerHTML={{__html: dialogs_pinned}}></span>;\n        }\n\n        return(\n            <div className=\"chat\">\n                <ProfilePhoto name={chat.title} photo={chat.photo?.small} id={getChatTypeId(chat)}/>\n                <div className=\"content\">\n                    <div className=\"top\">\n                        <div className=\"left\">\n                            <div className=\"type-icon\" dangerouslySetInnerHTML={{__html: chatType}}></div>\n                            <div className=\"title\">{chat.title}</div>\n                            {isVerified && <span className=\"verified-icon\">\n                                <span className=\"verified-icon-star\" dangerouslySetInnerHTML={{__html: dialogs_verified_star}}></span>\n                                <span className=\"verified-icon-check\" dangerouslySetInnerHTML={{__html: dialogs_verified_check}}></span>\n                            </span>}\n                        </div>\n                        <div className=\"right\">\n                            {messageStatus}\n                            {chat.last_message?.date && <span className=\"date\">{smallDateTimeToString(chat.last_message.date)}</span>}\n                        </div>\n                    </div>\n                    <div className=\"bottom\">\n                        <div className=\"left\">\n                            {chat.draft_message ? \n                                <span className=\"last-message\">\n                                    <span className=\"draft\">Draft:</span> <span className=\"part-2\">{chat.draft_message.input_message_text.text.text}</span>\n                                </span> \n                                : \n                                <MessageSummaryWithoutIcon message={chat.last_message} chat={chat} className=\"last-message\"/>\n                            }\n                        </div>\n                        <div className=\"right\">\n                            {unreadBadge}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nChatListItem.propTypes = {\n    chat: PropTypes.object.isRequired\n};\n\nfunction EmptyChatList({list, connectionState}) {\n    if(connectionState!='connectionStateReady') {\n        return (\n            <div className=\"empty\">\n                <div>Loading...</div>\n            </div>\n        );\n    }\n    if(list['@type']=='chatListFilter'){\n        return (\n            <div className=\"empty\">\n                <div>No chats currently belong to this folder.</div>\n                <LinkButton>Edit Folder</LinkButton>\n            </div>\n        );\n    } else {\n        return (\n            <div className=\"empty\">\n                <div>Your chats will be here</div>\n                <LinkButton>New contact</LinkButton>\n            </div>\n        );\n    }\n}\n","import supergroupStore from './supergroup-store';\nimport usersStore from './users-store';\n\nexport function isChatWithDeletedAccount(chat) {\n    switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n    case 'chatTypeSupergroup':\n        return false;\n    \n    case 'chatTypeSecret':\n    case 'chatTypePrivate': \n        var user= usersStore.getState()?.[chat.type.user_id];\n        return user && user.type['@type'] === 'userTypeDeleted';\n    }\n    return false;\n}\n\nexport function isChatVerified(chat){\n    switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n        return false;\n\n    case 'chatTypeSupergroup':\n        var supergroup= supergroupStore.getState()?.[chat.type.supergroup_id];\n        return supergroup.is_verified;\n        \n    case 'chatTypeSecret':\n    case 'chatTypePrivate': \n        var user= usersStore.getState()?.[chat.type.user_id];\n        return user.is_verified;\n    }\n    return false;\n}","/**\n * Gets message sending status. Can return 3 values:\n * - `\"sending\"`: the message is outgoing and is being sent.\n * - `\"sent\"`: the message is outgoing and was sent.\n * - `\"seen\"`: the message is outgoing and was seen by the other party.\n * - `\"unread\"`: the message is incoming and was not seen by this party.\n * - `\"read\"`: the message is incoming and was seen by this party.\n * @param {import(\"tdweb\").TdObject} chat The chat in which the message was sent.\n * @param {import(\"tdweb\").TdObject} message The message to check.\n */\nexport function getMessageStatus(chat, message) {\n    if(!chat || !message) return undefined;\n    if(message.is_outgoing) {\n        if(message.sending_state) {\n            return 'sending';\n        }\n        if(chat.last_read_outbox_message_id >= message.id) {\n            return 'seen';\n        }\n        return 'sent';\n    }\n    if(chat.last_read_inbox_message_id >= message.id) {\n        return 'read';\n    }\n    return 'unread';\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './search-box.scss';\nimport { info_close } from '../../../../ui/icon/icons';\n\n/**\n * Renders the search box.\n */\nexport default function SearchBox(props) {\n    return (\n        <div id=\"search-box\">\n            <input \n                placeholder=\"Search\"\n                value={props.value}\n                onChange={props.onChange}\n                {...props}/>\n            <button \n                className=\"clear\" \n                onClick={()=> props.onChange && props.onChange({target: {value: ''}})}\n                data-visible={(props.value || '').length}\n                dangerouslySetInnerHTML={{__html: info_close}}>\n            </button>\n        </div>\n    );\n}\nSearchBox.propTypes= {\n    value: PropTypes.string,\n    onChange: PropTypes.func\n};","import { createStore } from 'redux';\nimport TdLib from './tdlib';\n\nconst connectionStore = createStore(\n    (state = 'connectionStateConnecting', action) => {\n        switch (action.type) {\n        case 'SET_CONNECTION':\n            return  action.connection;\n        default:\n            return state;\n        }\n    }\n);\n\nTdLib.registerUpdateHandler('updateConnectionState', (update) => {\n    connectionStore.dispatch({\n        type: 'SET_CONNECTION',\n        connection: update.state['@type']\n    });\n});\nexport default connectionStore;","import React from 'react';\nimport { connect, Provider } from 'react-redux';\nimport ConnectionState from '../../../ui/components/connecting';\nimport ChatList from './chat-list';\nimport SearchBox from './search/search-box';\nimport HamburgerMenuButton from './hamburger-menu/menu-button';\nimport './chat-list-bar.scss';\nimport connectionStore from '../../../TdWeb/connectionStore';\n\n/**\n * Renders the navigation menu, containing chat list, search field and search results, chat folders and the hamburger menu\n */\nconst ChatListBar = connect(function (state) {\n    return {\n        useFolders: (state.filters || []).length != 0,\n        chats: state.chats, \n        list: state.currentChatList\n    };\n})(function ChatListBar({useFolders, chats, list}) {\n    var [searchText, setSearchText] = React.useState('');\n    return (\n        <div id=\"chat-list-bar\">\n            <div className=\"chat-list-header\">\n                {(!useFolders) && <HamburgerMenuButton.WithoutFolders/>}\n                <SearchBox value={searchText} onChange={e => setSearchText(e.target.value)}/>\n            </div>\n            <Provider store={connectionStore}>\n                <ChatList chats={chats} list={list}/>\n                <ConnectionState/>\n            </Provider>\n        </div>\n    );\n});\nexport default ChatListBar;\n","import React from 'react';\nimport TdLib from '../TdWeb/tdlib';\nimport BigHighlightedButton from '../ui/elements/highlighted-button';\nimport ChatFoldersList from './sections/navigation-menu/chat-folders';\nimport ChatListBar from './sections/navigation-menu/chat-list-bar';\nimport chatStore from './chat-store';\nimport { Provider } from 'react-redux';\nimport './messengerWindow.scss';\n\n/**\n * Renders the messenger screen\n */\nexport function MessengerWindow () {\n    function logOut() {\n        TdLib.sendQuery({\n            '@type': 'logOut'\n        });\n    }\n    return (\n        <div id=\"messenger-screen\">\n            <Provider store={chatStore}>\n                <ChatFoldersList/>\n                <ChatListBar/>\n            </Provider>\n            <div id=\"chat-container\">\n                This is messenger window. You&apos;ve authenticated successfully!\n                <BigHighlightedButton onClick={logOut}>Log out</BigHighlightedButton>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Renders a beautiful field with a title and underline\n */\nexport default class UnderlinedInput extends React.Component {\n    constructor(args) {\n        super(args);\n\n        this.state= {\n            inactive: false,\n            mouseX: '50%',\n            titleClass: this.getTitleClass(this.props.autoFocus)\n        };\n    }\n\n    getTitleClass (focus) {\n        return (focus || (!!this.props.value)) ? 'title top' : 'title placeholder';\n    }\n\n    render () {\n        var className='underlined-input';\n        if(this.state.inactive) {\n            className+=' inactive';\n        }\n        if(this.props.autoFocus) {\n            className+=' autoFocus';\n        }\n        if(this.props.invalid) {\n            className+=' invalid';\n        }\n        return (\n            <div className={className}\n                style={{'--mouse-left': this.state.mouseX || '50%'}}>\n                { this.props.title ? (\n                    <div className={this.state.titleClass}>{this.props.title}</div>\n                ) : null }\n                <input \n                    type={this.props.type} \n                    onChange={this.props.onChange} \n                    value={this.props.value}\n                    onMouseDown={this.handleMouseDown}\n                    onFocus={this.handleFocus}\n                    onBlur={this.handleBlur}\n                    autoFocus={this.props.autoFocus || false}\n                    onKeyDown={this.handleKeyDown}\n                    maxLength={this.props.maxLength}\n                    onCopy={e=> {\n                        if(this.props.disableCopy) {\n                            e.preventDefault();\n                        }\n                    }}/>\n                <div className=\"underline\"></div>\n            </div>\n        );\n    }\n\n    handleFocus =()=>{\n        this.setState({\n            inactive: false,\n            titleClass: this.getTitleClass(true)\n        });\n    }\n    handleBlur =()=>{\n        this.setState({\n            inactive: true, \n            mouseX: '50%',\n            titleClass: this.getTitleClass(false)\n        });\n    }\n    handleMouseDown =(e)=>{\n        this.setState({\n            mouseX: e.nativeEvent.offsetX+'px'\n        });\n    }\n    handleKeyDown =(e)=>{\n        if(e.key=='Enter') {\n            this.props.onEnterKeyPressed && this.props.onEnterKeyPressed();\n        }\n    }\n\n    static propTypes = {\n        type: PropTypes.oneOf(['text', 'number', 'password', 'email', 'url']).isRequired,\n        onChange: PropTypes.func,\n        value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        maxLength: PropTypes.number,\n        active: PropTypes.bool,\n        autoFocus: PropTypes.bool,\n        onEnterKeyPressed: PropTypes.func,\n        title: PropTypes.string,\n        invalid: PropTypes.bool,\n        disableCopy: PropTypes.bool,\n    }\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport { createStore } from 'redux';\n\n/**\n * A redux store which state is an array of objects with {id: unique ID of dialog, element: react element of the dialog}\n */\nexport var dialogStore= createStore(\n    /**\n     * @param {any[]} state\n     * @param {Object} action\n     */\n    function (state= [], action) {\n        switch (action.type) {\n        case 'ADD_DIALOG':\n            return [\n                ...state,\n                action.dialog\n            ];\n        \n        case 'REMOVE_DIALOG':\n            return state.filter(value => value.id!=action.id);\n        \n        default:\n            break;\n        }\n    },\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\n/**\n * Opens a dialog\n * @param {string} id A unique ID for the dialog\n * @param {React.ReactElement} dialog The dialog React element\n */\nexport function addDialog(id, dialog) {\n    dialogStore.dispatch({\n        type: 'ADD_DIALOG',\n        dialog: {\n            element: dialog,\n            id: id\n        }\n    });\n}\n\n/**\n * Closes an existing dialog\n * @param {string} id The dialog unique ID\n */\nexport function removeDialog(id) {\n    dialogStore.dispatch({\n        type: 'REMOVE_DIALOG',\n        id: id\n    });\n}\n\nfunction Wrapper(props){\n    return props.children;\n}\n\n/**\n * Renders all dialogs.\n */\nconst Dialogs= (connect(function (state) {\n    return {dialogs: state || []};\n})(function Dialogs(props) {\n    return props.dialogs.map(el => <Wrapper key={el.id}>{el.element}</Wrapper>) || null;\n}));\n\nexport default Dialogs;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport RippleEffect, {handleMyMouseEvents} from './ripple-effect';\n\n/**\n * Renders a small button with accent color\n */\nexport default class SmallButton extends React.Component {\n    static propTypes= {\n        /** The button's content */\n        children: PropTypes.node.isRequired,\n        /** Fires when the button is clicked */\n        onClick: PropTypes.func\n    };\n    state= {\n        ripple: {\n            state: 'off'\n        }\n    }\n    constructor() {\n        super();\n        [this.mouseDown, this.mouseUp, this.mouseLeave]= handleMyMouseEvents(this);\n    }\n    render() {\n        return (\n            <button \n                className=\"small-button\" \n                onClick={this.props.onClick}\n                onMouseDown={this.mouseDown}\n                onMouseUp={this.mouseUp}\n                onMouseLeave={this.mouseLeave}>\n\n                <RippleEffect {...this.state.ripple} color=\"var(--theme-color-lightButtonBgRipple)\"/>\n\n                <div className=\"invisibleText\">\n                    {this.props.children}\n                </div>\n                <div className=\"content\">\n                    {this.props.children}\n                </div>\n                \n            </button>\n        );\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SmallButton from '../elements/small-button';\nimport { removeDialog } from './dialogs';\n/**\n * Renders a modal dialog with a title and cancel and OK button. OK button text can be changed.\n */\nexport default class ConfirmDialog extends React.Component{\n    static propTypes= {\n        children: PropTypes.node.isRequired,\n        /** Dialog width in CSS format */\n        width: PropTypes.string,\n        /** Dialog header */\n        title: PropTypes.string,\n        /** Text content of the OK button*/\n        OKButtonText: PropTypes.string,\n        /** Pass true to only show the OK button */\n        hideCancelButton: PropTypes.bool,\n        /** Unique ID of this dialog, used to close it. */\n        id: PropTypes.any.isRequired,\n        /** Called when the OK button is pressed */\n        onOK: PropTypes.func,\n        /** Called when the cancel button is pressed */\n        onCancel: PropTypes.func\n    };\n    state= {\n        closing: false\n    }\n    handleOK =()=>{\n        this.closeDialog();\n        this.props.onOK && this.props.onOK();\n    }\n    handleCancel =()=>{\n        this.closeDialog();\n        this.props.onCancel && this.props.onCancel();\n    }\n    render() {\n        return (\n            <div className={'modal-dialog confirm-dialog' + ((this.state.closing) ? ' closing' : '')}>\n                <div style={{\n                    'width': this.props.width || 'auto'\n                }}>\n                    <h1>{this.props.title || ''}</h1>\n                    <div className=\"content\">\n                        {this.props.children}\n                    </div>\n                    <div className=\"options\">\n                        {this.props.hideCancelButton ? null : (\n                            <SmallButton onClick={this.handleCancel}>\n                                Cancel\n                            </SmallButton>\n                        )}\n                        <SmallButton onClick={this.handleOK}>\n                            {this.props.OKButtonText || 'OK'}\n                        </SmallButton>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n    \n    closeDialog= ()=>{\n        this.setState({\n            closing: true\n        });\n        setTimeout(() => {\n            removeDialog(this.props.id);\n        }, 1000);\n    }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TdLib from '../TdWeb/tdlib';\nimport Auth from './auth';\nimport {MessengerWindow} from '../messenger/messengerWindow';\n\nimport BigHighlightedButton from '../ui/elements/highlighted-button';\nimport UnderlinedInput from '../ui/elements/underlined-input';\nimport ConnectionState from '../ui/components/connecting';\nimport { addDialog } from '../ui/dialog/dialogs';\nimport ConfirmDialog from '../ui/dialog/confirm-dialog';\n\nimport './auth.scss';\nimport { Provider } from 'react-redux';\nimport connectionStore from '../TdWeb/connectionStore';\n\nvar initialAuthState = {'@type': undefined};\nexport function setInitialAuthState(state) {\n    initialAuthState=state;\n}\n\n/**\n * Start managing a status text block with fade effects.  \n * Usage:\n * ```js\n * manageStatusTextContent(this);\n * ```\n * \n * @param {React.Component} thisClass pass `this` as this argument\n * @returns Store this function and call it to change \n */\nfunction manageStatusTextContent(thisClass) {\n    thisClass.Status= function Status(){\n        return (\n            <div className={'status'+ (thisClass.state.statusVisible?'':' hidden')}>{thisClass.state.statusContent}</div>\n        );\n    };\n    thisClass.changeStatus= function(string){\n        if(string) {\n            thisClass.setState({\n                statusContent: string,\n                statusVisible: true\n            });\n        } else {\n            thisClass.setState({\n                statusVisible: false\n            });\n            setTimeout(() => {\n                thisClass.setState({\n                    statusContent: null\n                });\n            }, 1000);\n        }\n    };\n}\n\n/**\n * Renders the messenger or authorization screens. Does not include dialogs and toasts\n */\nexport class MainApp extends React.Component {\n    state= {\n        step: initialAuthState\n    };\n\n    componentDidMount(){\n        // eslint-disable-next-line no-func-assign\n        setInitialAuthState= state=> {\n            this.setState({step: state});\n        };\n\n        TdLib.registerUpdateHandler('updateAuthorizationState', this.handleAuthStateUpdate);\n    }\n\n    handleAuthStateUpdate= update => {\n        const states= [\n            'authorizationStateWaitPhoneNumber',\n            'authorizationStateWaitCode',\n            'authorizationStateWaitPassword',\n            'authorizationStateWaitRegistration',\n            'authorizationStateReady',\n            'authorizationStateClosed',\n        ];\n        const state=update['authorization_state'];\n        if(states.includes(state['@type'])) {\n            this.setState({step: state});\n        }\n    };\n    \n    render () {\n        switch (this.state.step['@type']) {\n        case 'authorizationStateWaitPhoneNumber':\n            return (\n                <AuthWindowStepPhoneNumber/>\n            );\n\n        case 'authorizationStateWaitCode':\n            return (\n                <AuthWindowStepCode info={this.state.step.code_info}/>\n            );\n\n        case 'authorizationStateWaitPassword':\n            return (\n                <AuthWindowStepPassword info={this.state.step}/>\n            );\n\n        case 'authorizationStateWaitRegistration':\n            return (\n                <AuthWindowStepRegister/>\n            );\n\n        case 'authorizationStateReady':\n            return (\n                <MessengerWindow/>\n            );\n\n        case 'authorizationStateClosed':\n            window.location.reload();\n            return (\n                <p>This session is closed. Please wait till DIBgram reloads automatically...</p>\n            );\n        \n        default:\n            return <p>Loading...</p>;\n        }\n    }\n}\n\n/**\n * Renders the phone number step of authorization screen\n */\nclass AuthWindowStepPhoneNumber extends React.Component {\n    constructor(args) {\n        super(args);\n        manageStatusTextContent(this);\n    }\n    state= {\n        number: '',\n        invalid: false,\n        statusContent: '',\n        statusVisible: false\n    };\n    handlePNFieldChange = (event) => {\n        this.setState({\n            number: event.target.value,\n            invalid: false\n        });\n        this.changeStatus('');\n    }\n    submitNumber= async () => {\n        Auth.givePhoneNumber(this.state.number).catch(reason=> {\n            switch(reason.message){\n            case 'PHONE_NUMBER_FLOOD':\n                addDialog( 'phone_number_flood_error',\n                    <ConfirmDialog width=\"320px\" hideCancelButton={true} id=\"phone_number_flood_error\">\n                        Sorry, you have deleted and re-created your account too many times recently.<br/>\n                        Please wait for a few days before signing up again.\n                    </ConfirmDialog>\n                );\n                this.changeStatus('');\n                break;\n            case 'PHONE_NUMBER_INVALID':\n                this.setState({invalid: true});\n                this.changeStatus('Invalid phone number. Please try again.');\n                \n                break;\n            case 'Another authorization query has started': \n                break;\n            default:\n                this.setState({invalid: false});\n                this.changeStatus(reason.message);\n                break;\n            }\n        });\n    }\n    render () {\n        const Status=this.Status;\n        return (\n            <div id=\"auth\" className=\"auth-step-phoneNumber\">\n\n                <h2>Your Phone Number</h2>\n\n                <p className=\"description\">\n                    Please confirm your country code and enter your mobile phone number.\n                </p>\n\n                <UnderlinedInput \n                    type=\"text\" \n                    value={this.state.number} \n                    autoFocus={true}\n                    onChange={this.handlePNFieldChange}\n                    onEnterKeyPressed={this.submitNumber}\n                    invalid={this.state.invalid}/>\n\n                <Status/>\n\n                <BigHighlightedButton \n                    onClick={this.submitNumber}>\n                    NEXT\n                </BigHighlightedButton>\n\n                <Provider store={connectionStore}>\n                    <ConnectionState/>\n                </Provider>\n            </div>\n        );\n    }\n}\n\n/**\n * Renders verification code step of authorization screen\n */\nclass AuthWindowStepCode extends React.Component {\n    static propTypes= {\n        info: PropTypes.object\n    };\n    constructor(args) {\n        super(args);\n        manageStatusTextContent(this);\n    }\n    state= {\n        code: '',\n        invalid: false,\n        statusContent: '',\n        statusVisible: false\n    };\n    handleCodeFieldChange= (event) => {\n        this.setState({\n            code: event.target.value,\n            invalid: false\n        });\n        this.changeStatus('');\n        if(event.target.value.length==this.props.info.type.length) {\n            this.handleContinueButton(event.target.value);\n        }\n    }\n    handleContinueButton= (code) => {\n        if(typeof code != 'string') {\n            code= undefined;\n        }\n        code = code || this.state.code;\n        if(code.length!=this.props.info.type.length) return;\n\n        Auth.checkAuthCode(code).catch(reason=> {\n            if(reason.message==='PHONE_CODE_INVALID'){\n                this.setState({invalid: true});\n                this.changeStatus('You have entered an invalid code.');\n            }\n            else {\n                this.setState({invalid: true});\n                this.changeStatus(reason.message);\n            }\n        });\n    }\n    render () {\n        const Status = this.Status;\n\n        var message= (this.props.info.type['@type']=='authenticationCodeTypeSms') ?\n            (<p className=\"description\">\n                We&apos;ve sent an activation code to your phone. <br/>\n                Please enter it below.\n            </p>) \n            :\n            (<p className=\"description\">\n                A code was sent <strong>via Telegram</strong> to your other devices, if you have any connected.\n            </p>);\n            \n        return (\n            <div id=\"auth\" className=\"auth-step-code\">\n\n                <h2>{this.props.info.phone_number}</h2>\n\n                {message}\n\n                <UnderlinedInput \n                    type=\"text\" \n                    value={this.state.code} \n                    onChange={this.handleCodeFieldChange}\n                    autoFocus={true}\n                    title=\"Code\"\n                    maxLength={this.props.info.type.length}\n                    onEnterKeyPressed={this.handleContinueButton}\n                    invalid={this.state.invalid}/>\n\n                <Status/>\n\n                <BigHighlightedButton \n                    onClick={this.handleContinueButton}>\n                    NEXT\n                </BigHighlightedButton>\n\n                <Provider store={connectionStore}>\n                    <ConnectionState/>\n                </Provider>\n            </div>\n        );\n    }\n}\n\n/**\n * Renders 2FA password step of authorization screen\n */\nclass AuthWindowStepPassword extends React.Component {\n    constructor(args) {\n        super(args);\n        manageStatusTextContent(this);\n    }\n    static propTypes= {\n        info: PropTypes.object\n    };\n    state= {\n        password: '',\n        invalid: false,\n        statusContent: '',\n        statusVisible: false\n    };\n    handlePasswordFieldChange= (event) => {\n        this.setState({\n            password: event.target.value,\n            invalid: false,\n        });\n        this.changeStatus('');\n    }\n    handleContinueButton= async () => {\n        Auth.check2FACode(this.state.password).catch(reason=> {\n            if(reason.message=='PASSWORD_HASH_INVALID') {\n                this.setState({invalid: true});\n                this.changeStatus('You have entered a wrong password.');\n            }\n            else {\n                this.setState({invalid: true});\n                this.changeStatus(reason.message);\n            }\n        });\n    }\n    render () {\n        const Status=this.Status;\n        return (\n            <div id=\"auth\" className=\"auth-step-password\">\n                <div className=\"content\">\n\n                    <h2>Cloud password check</h2>\n\n                    <p className=\"description\">\n                        Please enter your cloud password.\n                    </p>\n\n                    <UnderlinedInput \n                        type={'webkitTextSecurity' in document.body.style ? 'text' : 'password'} \n                        value={this.state.password} \n                        onChange={this.handlePasswordFieldChange}\n                        autoFocus={true} \n                        title=\"Your cloud password\"\n                        onEnterKeyPressed={this.handleContinueButton}\n                        disableCopy={true}\n                        invalid={this.state.invalid}/>\n\n                    <div className=\"hint\">\n                        {this.props.info.password_hint?'Hint: ':<span>&nbsp;</span>}{this.props.info.password_hint}\n                    </div>\n\n                    <div className=\"forgot-password\">\n                        <a href=\"#\">Forgot password?</a>\n                    </div>\n\n                    <Status/>\n\n                    <BigHighlightedButton \n                        onClick={this.handleContinueButton}>\n                        SUBMIT\n                    </BigHighlightedButton>\n\n                    <Provider store={connectionStore}>\n                        <ConnectionState/>\n                    </Provider>\n                </div>\n            </div>\n        );\n    }\n}\n\n/**\n * Render sign up step of authorization screen\n */\nclass AuthWindowStepRegister extends React.Component {\n    state= {\n        firstName: '',\n        lastName: '',\n        statusContent: '',\n        statusVisible: false\n    };\n    handleFirstNameFieldChange= (event) => {\n        this.setState({firstName: event.target.value});\n    }\n    handleLastNameFieldChange= (event) => {\n        this.setState({lastName: event.target.value});\n    }\n    handleContinueButton= async () => {\n        await Auth.registerNewAccount(this.state.firstName, this.state.lastName).catch(reason=> {\n            this.setState({textUnderField: reason.message});\n        });\n    }\n    render () {\n        return (\n            <div id=\"auth\" className=\"auth-step-signup\">\n                <div className=\"content\">\n\n                    <h2>Your info</h2>\n\n                    <p className=\"description\">\n                        Please enter your name and upload a photo.\n                    </p>\n\n                    <UnderlinedInput \n                        type=\"text\" \n                        value={this.state.firstName} \n                        onChange={this.handleFirstNameFieldChange}\n                        autoFocus={true} />\n\n                    <UnderlinedInput \n                        type=\"text\" \n                        value={this.state.lastName} \n                        onChange={this.handleLastNameFieldChange} />\n\n                    <div className=\"status\">\n                        {this.state.textUnderField || ''}\n                    </div>\n\n                    <BigHighlightedButton \n                        onClick={this.handleContinueButton}>\n                        SIGN UP\n                    </BigHighlightedButton>\n\n                    <Provider store={connectionStore}>\n                        <ConnectionState/>\n                    </Provider>\n                </div>\n            </div>\n        );\n    }\n}\n","// DIBgram themes are converted to CSS in runtime here.\n\nexport function convertThemeToCSS(theme){\n    var css=':root{';\n    for(const name in theme){\n        var obj= theme[name];\n        if(typeof obj.value == 'string') {\n            css+=`--theme-color-${name}: ${obj.value};`;\n        } else if(typeof obj.value == 'object') {\n            css+=`--theme-color-${name}: var(--theme-color-${obj.value.equals});`;\n        }\n    }\n    return css;\n}","import React from 'react';\nimport classic from './classic.json';\nimport theme from './night.json';\nimport { convertThemeToCSS } from './dibgram-theme-to-css';\n\nexport default function CurrentThemeCSS(){\n    return(\n        <style>\n            {convertThemeToCSS({...classic, ...theme})}\n        </style>\n    );\n}\n\nconst isThemeDark=theme.isDark.value;\nexport {isThemeDark};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport {MainApp, setInitialAuthState} from './dibgram/auth/auth-screen';\nimport TdLib from './dibgram/TdWeb/tdlib';\nimport Dialogs, {dialogStore} from './dibgram/ui/dialog/dialogs';\nimport './dibgram/ui/main.scss';\nimport CurrentThemeCSS, {isThemeDark} from './dibgram/ui/themes/theme';\n\nTdLib.initializeTdLib().then(function (res) {\n    setInitialAuthState(res);\n});\n\n/**\n * Renders the whole React app\n */\nfunction App() {\n    return (\n        <div data-theme-is-dark={isThemeDark} id=\"app\">\n            <Provider store={dialogStore}>\n                <Dialogs/>\n            </Provider>\n            <MainApp/>\n            <CurrentThemeCSS/>\n        </div>\n    );\n}\n\nexport default App;\n\nTdLib.registerUpdateHandler('updateFatalError', function (update) {\n    console.error('Fatal error:', update.error);\n    ReactDOM.render((\n        <div>\n            <h1>Fatal error</h1>\n            A fatal error occurred in TdLib.<br/> \n            Try <a href=\"#\" onClick={()=>location.reload()}>refreshing</a>, clearing site data or opening \n            DIBgram in a private window. <br/>\n            If none of these helped, report this to the developers by <a href=\"https://github.com/DIBgram/DIBgram/issues/new/choose\">filing an issue.</a>\n            <br/><br/>\n            <pre>{update.error.toString()}</pre>\n            <CurrentThemeCSS/>\n        </div>\n    ),document.getElementById('root'));\n});","import './remove-item-from-array';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}