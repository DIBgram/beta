{"version":3,"sources":["remove-item-from-array.js","dibgram/TdWeb/tdlib.js","dibgram/TdWeb/config.js","dibgram/TdWeb/auth.js","dibgram/ui/elements/ripple-effect.js","dibgram/ui/elements/highlighted-button.js","dibgram/ui/icon/chat_filters/chat-filters.js","dibgram/ui/elements/icon-button.js","dibgram/ui/icon/icons.js","dibgram/messenger/sections/navigation-menu/hamburger-menu/menu-button.js","dibgram/messenger/chat-store.js","dibgram/ui/scroll/scrollbar.js","dibgram/messenger/sections/navigation-menu/chat-folders.js","dibgram/ui/elements/loading-spinner.js","dibgram/ui/components/connecting.js","dibgram/TdWeb/file.js","dibgram/TdWeb/options.js","dibgram/ui/img/TgLogo.png","dibgram/ui/components/profile-photo.js","dibgram/messenger/users-store.js","dibgram/messenger/payments/currency-tostring.js","dibgram/messenger/message/message-summary-noicon.js","dibgram/ui/elements/link-button.js","dibgram/messenger/supergroup-store.js","dibgram/time-tostring.js","dibgram/ui/menu/menu.js","dibgram/ui/menu/context-menu.js","dibgram/ui/dialog/dialogs.js","dibgram/ui/dialog/toast.js","dibgram/ui/elements/small-button.js","dibgram/ui/dialog/confirm-dialog.js","dibgram/messenger/sections/navigation-menu/chat-list.js","dibgram/messenger/chat-misc.js","dibgram/messenger/message-misc.js","dibgram/messenger/sections/navigation-menu/search/search-box.js","dibgram/TdWeb/connectionStore.js","dibgram/messenger/sections/navigation-menu/chat-list-bar.js","dibgram/messenger/sections/navigation-menu/hamburger-menu/menu.js","dibgram/messenger/messengerWindow.js","dibgram/ui/elements/underlined-input.js","dibgram/auth/auth-screen.js","dibgram/ui/themes/dibgram-theme-to-css.js","dibgram/ui/themes/theme.js","App.js","index.js"],"names":["Array","prototype","remove","item","i","this","length","splice","getUseTestDc","urlPar","URL","window","location","href","searchParams","get","TdLib","log","use_test_dc","log_updates","log_queries","TdClient","useDatabase","instanceName","onUpdate","update","console","forEach","h","sendQuery","type","handler","undefined","push","query","Promise","resolve","reject","send","then","result","error","registerUpdateHandler","credentials","api_id","api_hash","auth_state","Auth","number","code","pass","first","last","RippleEffect","props","small","X","Y","width","rX","rY","height","Math","hypot","abs","max","state","className","style","getMaxRadius","backgroundColor","color","React","Component","handleMyMouseEvents","This","e","ripple","setState","setTimeout","nativeEvent","offsetX","offsetY","target","clientWidth","clientHeight","bind","mouseUp","handleMyMouseEventsFunction","setRipple","up","BigHighlightedButton","mouseDown","mouseLeave","onClick","onMouseDown","onMouseUp","onMouseLeave","children","chatFilerIcons","All","Bots","Channels","Custom","Groups","Private","Setup","Unread","Cat","Crown","Favorite","Flower","Game","Home","Love","Mask","Party","Sport","Study","Trade","Travel","Work","IconButton","icon","rest","useState","dangerouslySetInnerHTML","__html","archive_userpic","HamburgerMenuButton","WithFolders","id","PureComponent","WithoutFolders","chatStore","createStore","currentChatList","archiveState","archiveButtonState","localStorage","getItem","chats","filters","action","chatList","chat","map","chat_id","changed","newChat","positions","position","compareChatList","list","filter","payload","property","value","photo","title","last_message","__REDUX_DEVTOOLS_EXTENSION__","dispatch","action_bar","default_disable_notification","draft_message","chat_filters","has_scheduled_messages","is_blocked","is_marked_as_unread","notification_settings","online_member_count","permissions","unread_count","last_read_inbox_message_id","last_read_outbox_message_id","reply_markup_message_id","unread_mention_count","list1","list2","chat_filter_id","ScrollView","mouseEntered","setMouseEntered","timeoutId","setTimeoutId","scrollBarWidth","propsRest","data-mouse-entered","renderTrackHorizontal","renderTrackVertical","renderThumbHorizontal","renderThumbVertical","onMouseEnter","clearTimeout","autoHide","autoHideTimeout","hideTracksWhenNotNeeded","ChatFolder","folder","active","icon_name","iconName","setIconName","useEffect","text","connect","folders","currentFolder","onHamburgerMenuOpened","LoadingSpinner","percentage","percent","caps","trackColor","spin","transitionDuration","intervalNum","setInterval","clearInterval","size","PropTypes","isRequired","lineWidth","progressColor","string","includes","downloadCallbacks","getFileContent","file","priority","local","is_downloading_completed","is_downloading_active","callback","catch","file_id","onReject","downloadFile","options","name","profileNameToInitials","words","replace","toUpperCase","split","ProfilePhoto","customIcon","setPhoto","photoObj","setPhotoObj","isServiceMessages","isSavedMessages","isReplies","mounted","blob","data","webkitURL","createObjectURL","disableSavedMessages","tgLogo","Initials","Fragment","src","getChatTypeId","supergroup_id","basic_group_id","user_id","usersStore","user","currencyAmountToString","currency","total_amount","currencyObject","currencies","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","exp","MessageSummaryWithoutIcon","users","message","content","MayHaveCaption","caption","audio","file_name","performer","SenderFullName","is_outgoing","discard_reason","members","member_user_ids","last_name","first_name","slice","join","sender","is_channel_post","deletedMember","includeYou","86400","604800","2678400","ttl","emoji","document","game","noGameTitleFallback","score","GameScoreWithTitle","lazy","message_id","game_message_id","default","Suspense","fallback","passportDataTypeToString","passportDataTypes","types","noInvoiceTitleFallback","PaymentInfoWithInvoiceTitle","invoice_message_id","is_secret","poll","question","sticker","venue","domain_name","MessageSummarySender","part1","LinkButton","supergroupStore","supergroup","smallDateTimeToString","date","TdLibDateToDate","now","Date","yesterday","getTime","lastWeek","hours","getHours","minutes","getMinutes","ampm","timeToString","getDay","weekdayToString","day","getDate","month","getMonth","year","String","getFullYear","dateToString","tdLibDate","Menu","ContextMenu","x","y","MenuContents","MenuItem","propTypes","node","contextMenusStore","menu","ContextMenus","menus","createContextMenu","preventDefault","pageX","pageY","onAnywhereClicked","dialogStore","dialog","addDialog","element","removeDialog","Wrapper","Dialogs","dialogs","el","Toast","closed","setClosed","SmallButton","ConfirmDialog","closing","handleOK","closeDialog","onOK","handleCancel","onCancel","handleButton","thirdButton","thirdButtonClosesDialog","onThirdButtonClick","hideCancelButton","OKButtonText","getChatsFromList","order","sort","a","b","order1","order2","ChatList","connectionState","nextProps","array","store","EmptyChatList","ChatListItem","nextState","is_pinned","chatType","is_channel","getState","isChatWithDeletedAccount","isVerified","is_verified","isChatVerified","messageStatus","sending_state","getMessageStatus","unreadBadge","unreadBadgeClass","mute_for","onContextMenu","ChatContextMenu","input_message_text","movableChatLists","setMovableChatLists","chat_lists","chat_list","ArchivedChatsItem","chatsInList","onArchiveOpen","setButtonState","moveToMainMenuToast","setItem","SearchBox","placeholder","onChange","data-visible","connectionStore","connection","ChatListBar","useFolders","searchText","setSearchText","HamburgerMenu","visible","onClose","me","setMe","phone_number","phone_number_prefix","info","country_calling_code","formatted_phone_number","ref","useRef","current","focus","showArchivedChats","onKeyDown","key","tabIndex","profile_photo","newState","MessengerWindow","isMenuOpen","setIsMenuOpen","UnderlinedInput","args","handleFocus","inactive","titleClass","getTitleClass","handleBlur","mouseX","handleMouseDown","handleKeyDown","onEnterKeyPressed","autoFocus","invalid","onFocus","onBlur","maxLength","onCopy","disableCopy","initialAuthState","setInitialAuthState","manageStatusTextContent","thisClass","Status","statusVisible","statusContent","changeStatus","MainApp","step","handleAuthStateUpdate","code_info","reload","AuthWindowStepPhoneNumber","handlePNFieldChange","event","submitNumber","givePhoneNumber","reason","AuthWindowStepCode","handleCodeFieldChange","handleContinueButton","checkAuthCode","AuthWindowStepPassword","password","handlePasswordFieldChange","check2FACode","body","password_hint","AuthWindowStepRegister","firstName","lastName","handleFirstNameFieldChange","handleLastNameFieldChange","registerNewAccount","textUnderField","convertThemeToCSS","theme","css","obj","equals","themes","classic","tinted","night","ThemeProvider","data-theme-is-dark","isThemeDark","isDark","initializeTdLib","res","App","simulateFatalError","rel","toString","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.eaeb0111.chunk.js","sourcesContent":["// https://love2dev.com/blog/javascript-remove-from-array/#remove-from-array-splice\n/**\n * Removes an item from an array\n * @param {*} item The item to remove\n */\nArray.prototype.remove = function (item) {\n    for( var i = 0; i < this.length; i++){ \n        if ( this[i] === item) { \n            this.splice(i, 1); \n        }\n    }\n};\n\nexport default Array.prototype.remove;","import TdClient from 'tdweb';\nimport {getConfig} from './config';\n\nexport function getUseTestDc() {\n    var urlPar=new URL(window.location.href).searchParams.get('test');\n    if(urlPar){\n        return urlPar==='1' || urlPar==='true';\n    }\n    return false;\n}\n\nexport function getCurrentSessionId() {\n    return new URL(window.location.href).searchParams.get('account') || '1';\n}\n\n/**\n * Provides options to communicate with the Tdweb library\n */\nexport default class TdLib {\n    /** @type TdClient */\n    static #tdClient;\n    /** @type {[string: Array<Function>]} */\n    static #updateHandlers={};\n\n    /**\n     * Creates the instance of Tdweb\n     */\n    static async initializeTdLib() {\n        const {log}= getConfig();\n        TdLib.#tdClient= new TdClient({\n            useDatabase: true,\n            instanceName: ( getCurrentSessionId() ) + (getUseTestDc() ? 'test' : 'production'),\n            onUpdate: function (update) {\n                if(log.log_updates) {\n                    console.log('Update: ',update);\n                }\n                if(TdLib.#updateHandlers[update['@type']]){\n                    TdLib.#updateHandlers[update['@type']].forEach(h => h(update));\n                }\n            }\n        });\n        return await TdLib.sendQuery({'@type': 'getAuthorizationState'});\n    }\n\n    /**\n     * Listen for updates from TdLib\n     * @param {string} type The type of the update to listen to. Look for TdLib API docs for types\n     * @param {Function} handler The function that gets called with the update object when the update is received\n     */\n    static registerUpdateHandler(type, handler) {\n        if(TdLib.#updateHandlers[type]===undefined){\n            TdLib.#updateHandlers[type]= [];\n        }\n        TdLib.#updateHandlers[type].push(handler);\n    }\n\n    /**\n     * Remove an existing update handler\n     * @param {string} type The type of the update to remove handler from. Look for TdLib API docs for types\n     * @param {Function} handler The handler to remove\n     */\n    static unRegisterUpdateHandler(type, handler) {\n        if(TdLib.#updateHandlers[type]===undefined){\n            return;\n        }\n        TdLib.#updateHandlers[type].remove(handler);\n    }\n\n    /**\n     * Send a request to the TdLib instance\n     * If the query contains an `@extra` field, the same field will be added to the result\n     * @param {import('tdweb').TdObject} query The request to send. Consult TdLib & JSON interface API for help.\n     * @returns {Promise<import('tdweb').TdObject | import('tdweb').TdError>} The result of the request\n     */\n    static sendQuery(query) {\n        const {log}= getConfig();\n        if(log.log_queries) {\n            console.log('Query: ',query);\n        }\n        return new Promise((resolve, reject) => {\n            TdLib.#tdClient.send(query).then(result=> {\n                if(log.log_queries) {\n                    console.log('Query result: ', result);\n                }\n                resolve(result);\n            }, error=> {\n                if(log.log_queries) {\n                    console.error('Query failed: ', error);\n                }\n                reject(error);\n            }\n            );\n        });\n    }\n}","export function getCredentials() {return {api_id: 3022678,api_hash: 'd7b7676a82906a6182f4a5e5e9555673'};}export function getConfig() {return {use_test_dc: false,log: {log_updates: true,log_queries: true}};}\n","import TdLib from './tdlib';\nimport {getCredentials} from './config';\nimport {getUseTestDc} from './tdlib';\n\nTdLib.registerUpdateHandler('updateAuthorizationState',function (update) {\n    const credentials= getCredentials();\n    const auth_state= update['authorization_state'];\n    \n    if(auth_state['@type']==='authorizationStateWaitEncryptionKey'){\n        TdLib.sendQuery({'@type': 'checkDatabaseEncryptionKey', 'encryption_key': ''});\n    }\n    if(auth_state['@type']==='authorizationStateWaitTdlibParameters'){\n        TdLib.sendQuery({\n            '@type': 'setTdlibParameters',\n            'parameters': {\n                'database_directory': 'tdlib',\n                'use_message_database': true,\n                'use_secret_chats': true,\n                'api_id': credentials.api_id,\n                'api_hash': credentials.api_hash,\n                'system_language_code': 'en',\n                'device_model': 'Web',\n                'application_version': '0.0.1',\n                'enable_storage_optimizer': true,\n                'use_test_dc': getUseTestDc(),\n            }\n        });\n    }\n});\n\n/**\n * Provides functions to pass required authorization data to Telegram\n */\nexport default class Auth {\n    /**\n     * Pass phone number of the account to be logged in to\n     * @param {string} number The phone number the user entered\n     * @returns TdLib query result\n     */\n    static async givePhoneNumber(number) {\n        return await TdLib.sendQuery({'@type': 'setAuthenticationPhoneNumber', 'phone_number': number});\n    }\n    /**\n     * Pass authorization code the user has received\n     * @param {string} code The code the user entered\n     * @returns TdLib query result\n     */\n    static async checkAuthCode(code) {\n        return await TdLib.sendQuery({'@type': 'checkAuthenticationCode', 'code': code});\n    }\n    /**\n     * Pass 2FA password of the account\n     * @param {string} pass The password the user entered\n     * @returns TdLib query result\n     */\n    static async check2FACode(pass) {\n        return await TdLib.sendQuery({'@type': 'checkAuthenticationPassword', 'password': pass});\n    }\n    /**\n     * Sign up to Telegram\n     * @param {string} first The first name to be used in the new account\n     * @param {string} last Tha last name to be used in the new account\n     * @returns TdLib query result\n     */\n    static async registerNewAccount(first, last) {\n        return await TdLib.sendQuery({'@type': 'registerUser', 'first_name': first, 'last_name': last});\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Adds a ripple effect to a button.\n * \n * Insert at the beginning of the button.\n * \n * **Note:** The button needs `position: relative;` and `overflow: hidden;`\n */\nexport default class RippleEffect extends React.Component {\n    static propTypes= {\n        /** \n         * - Change to `pressed` on `mouseDown`\n         * - Change to `released` on `mouseUp`\n         * - Change to `off` 1000ms after `mouseUp`\n         */\n        state: PropTypes.oneOf(['off', 'pressed', 'released']).isRequired,\n        X: PropTypes.number,\n        Y: PropTypes.number,\n        width: PropTypes.number,\n        height: PropTypes.number,\n        /** The color to show in the ripple (same as `:active` if you used CSS) */\n        color: PropTypes.string.isRequired,\n        /** Pass true if the button is small to make animation faster */\n        small: PropTypes.bool\n    }\n\n    /** Gets the smallest radius that a circle, centered at click location, needs to fill the button */\n    getMaxRadius() {\n        if(!this.props.small){\n        //  It's a bit hard to understand. Let me explain:\n        //  \n        //  1. It calculates the coordinates relative to the 4 edges of the button ────╮\n        //  2. The diagonal distance to the edges are calculated using the             │\n        //      pythagoras rule, from the results of step 1            │               │\n        //  3. The biggest distance is selected and then returned.     │               │\n        //          │                                                  │               │\n        //  ╭───────┴──────╮  ╭────────────────────────────────────────╯               │        \n        //  │           ╭──┼──┴───╮                                                    │                  \n            return Math.max(//    │╭───────────────────────────────────────────────────┴──────────────╮\n                /* ┏ */ Math.hypot(this.props.X                     , this.props.Y),//                │ \n                /* ┓ */ Math.hypot(this.props.width - this.props.X  , this.props.Y),//                │\n                /* ┗ */ Math.hypot(this.props.X                     , this.props.height - this.props.Y), \n                /* ┛ */ Math.hypot(this.props.width - this.props.X  , this.props.height - this.props.Y), \n            );\n        } else {\n            const {X, Y, width, height} = this.props;\n            const [rX, rY] = [X - width / 2, Y - height / 2]; // Click position relative to center of circle.\n            const distanceToCenter= Math.hypot(Math.abs(rX), Math.abs(rY)); // Get distance from click position to the center of circle.\n            return distanceToCenter + (width / 2); // Add circle radius to result\n        }\n    }\n    render() {\n        if(this.props.state=='off') return null;\n        return (\n            <div\n                className={'ripple '+this.props.state+ (this.props.small? ' small':'')}\n                style={{\n                    '--top': (this.props.Y || 0)+'px',\n                    '--left': (this.props.X || 0)+'px',\n                    '--radius': this.getMaxRadius()+'px',\n                    backgroundColor: this.props.color\n                }}/>\n        );\n    }\n}\n\n// Assign your `mouseDown`, `mouseUp` and `mouseLeave` to the returned functions.\nexport function handleMyMouseEvents(This) {\n    return [\n        /**@param e {React.SyntheticEvent} */\n        (function(e) {\n            // Reset the ripple effect if it's not off\n            if(this.state.ripple.state!='off'){\n                this.setState({\n                    ripple: { state: 'off' }\n                });\n                setTimeout(() => {\n                    this.setState({\n                        ripple: {\n                            state: 'pressed',\n                            X: e.nativeEvent.offsetX,\n                            Y: e.nativeEvent.offsetY,\n                            width: e.target.clientWidth,\n                            height: e.target.clientHeight\n                        }\n                    });\n                }, 10);\n                return;\n            }\n            this.setState({\n                ripple: {\n                    state: 'pressed',\n                    X: e.nativeEvent.offsetX,\n                    Y: e.nativeEvent.offsetY,\n                    width: e.target.clientWidth,\n                    height: e.target.clientHeight\n                }\n            });\n        }).bind(This),\n\n        (function(e) {\n            this.setState({\n                ripple: { \n                    state: 'released',\n                    X: e.nativeEvent.offsetX,\n                    Y: e.nativeEvent.offsetY,\n                    width: e.target.clientWidth,\n                    height: e.target.clientHeight \n                }\n            });\n        }).bind(This),\n\n        (function(e) {\n            if(this.state.ripple.state=='pressed') {\n                this.mouseUp(e);\n            }\n        }).bind(This)\n    ];\n}\n// Assign your `mouseDown`, `mouseUp` and `mouseLeave` to the returned functions.\nexport function handleMyMouseEventsFunction([ripple, setRipple]) {\n    function down(e) {\n        // Reset the ripple effect if it's not off\n        if(ripple.state!='off'){\n            setRipple({ state: 'off' });\n            setTimeout(() => {\n                setRipple ({\n                    state: 'pressed',\n                    X: e.nativeEvent.offsetX,\n                    Y: e.nativeEvent.offsetY,\n                    width: e.target.clientWidth,\n                    height: e.target.clientHeight\n                });\n            }, 10);\n            return;\n        }\n        setRipple ({\n            state: 'pressed',\n            X: e.nativeEvent.offsetX,\n            Y: e.nativeEvent.offsetY,\n            width: e.target.clientWidth,\n            height: e.target.clientHeight\n        });\n    }\n\n    function up(e) {\n        setRipple ({\n            state: 'released',\n            X: e.nativeEvent.offsetX,\n            Y: e.nativeEvent.offsetY,\n            width: e.target.clientWidth,\n            height: e.target.clientHeight \n        });\n    }\n\n    function leave(e) {\n        if(ripple.state=='pressed') {\n            up(e);\n        }\n    }\n    \n    return [down, up, leave];\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport RippleEffect, {handleMyMouseEvents} from './ripple-effect';\n\n/**\n * Renders a BIG button which is filled with accent color\n */\nexport default class BigHighlightedButton extends React.Component{\n    static propTypes= {\n        /** Fires when the button is clicked */\n        onClick: PropTypes.func,\n        /** The button's content */\n        children: PropTypes.node.isRequired\n    };\n    state= {\n        ripple: {\n            state: 'off'\n        }\n    }\n    constructor() {\n        super();\n        [this.mouseDown, this.mouseUp, this.mouseLeave]= handleMyMouseEvents(this);\n    }\n\n    render () {\n        return (\n            <button \n                className=\"big-highlighted-button\" \n                onClick={this.props.onClick}\n                onMouseDown={this.mouseDown}\n                onMouseUp={this.mouseUp}\n                onMouseLeave={this.mouseLeave}>\n\n                <RippleEffect {...this.state.ripple} color=\"var(--theme-color-activeButtonBgRipple)\"/>\n                <div className=\"content\">\n                    {this.props.children}\n                </div>\n            </button>\n        );\n    }\n}","// All icons are from Telegram Desktop, converted to SVG using https://pngtosvg.com/\n\nimport raw from 'raw.macro';\n\nvar chatFilerIcons = {\n    All     : [raw('./all.svg'     ), raw('./all_active.svg'     )],\n    Bots    : [raw('./bots.svg'    ), raw('./bots_active.svg'    )],\n    Channels: [raw('./channels.svg'), raw('./channels_active.svg')],\n    Custom  : [raw('./custom.svg'  ), raw('./custom_active.svg'  )],\n    Groups  : [raw('./groups.svg'  ), raw('./groups_active.svg'  )],\n    Private : [raw('./private.svg' ), raw('./private_active.svg' )],\n    Setup   : [raw('./setup.svg'   )                              ],\n    Unread  : [raw('./unread.svg'  ), raw('./unread_active.svg'  )],\n\n    Cat     : [raw('./cat.svg'     ), raw('./cat_active.svg'     )],\n    Crown   : [raw('./crown.svg'   ), raw('./crown_active.svg'   )],\n    Favorite: [raw('./favorite.svg'), raw('./favorite_active.svg')],\n    Flower  : [raw('./flower.svg'  ), raw('./flower_active.svg'  )],\n    Game    : [raw('./game.svg'    ), raw('./game_active.svg'    )],\n    Home    : [raw('./home.svg'    ), raw('./home_active.svg'    )],\n    Love    : [raw('./love.svg'    ), raw('./love_active.svg'    )],\n    Mask    : [raw('./mask.svg'    ), raw('./mask_active.svg'    )],\n    Party   : [raw('./party.svg'   ), raw('./party_active.svg'   )],\n    Sport   : [raw('./sport.svg'   ), raw('./sport_active.svg'   )],\n    Study   : [raw('./study.svg'   ), raw('./study_active.svg'   )],\n    Trade   : [raw('./trade.svg'   ),                             ],\n    Travel  : [raw('./travel.svg'  ), raw('./travel_active.svg'  )],\n    Work    : [raw('./work.svg'    ), raw('./work_active.svg'    )],\n};\nexport default chatFilerIcons;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport RippleEffect, {handleMyMouseEventsFunction} from '../../ui/elements/ripple-effect';\nimport './icon-button.scss';\n\nexport default function IconButton({icon, ...rest}) {\n    const ripple= React.useState({state: 'off'});\n    const [onMouseDown, onMouseUp, onMouseLeave]= handleMyMouseEventsFunction(ripple);\n    return (\n        <button className=\"icon-button\" {...rest} {...{onMouseDown, onMouseUp, onMouseLeave}}>\n            <span dangerouslySetInnerHTML={{__html: icon}} />\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-windowBgOver)\" small={true}/>\n        </button>\n    );\n}\nIconButton.propTypes = {\n    icon: PropTypes.string.isRequired\n};\n","// All icons are from Telegram Desktop, converted to SVG using https://pngtosvg.com/\n\nimport raw from 'raw.macro';\n\nexport const archive_userpic = raw('./archive_userpic.svg');\nexport const dialogs_bot = raw('./dialogs_bot.svg');\nexport const dialogs_channel = raw('./dialogs_channel.svg');\nexport const dialogs_chat = raw('./dialogs_chat.svg');\nexport const dialogs_pinned = raw('./dialogs_pinned.svg');\nexport const dialogs_verified_star = raw('./dialogs_verified_star.svg');\nexport const dialogs_verified_check = raw('./dialogs_verified_check.svg');\n//export const dialogs_search_cancel = raw('./dialogs_search_cancel.svg');\nexport const dialogs_sending = raw('./dialogs_sending.svg');\nexport const dialogs_sent = raw('./dialogs_sent.svg');\nexport const dialogs_received = raw('./dialogs_received.svg');\nexport const dialogs_menu = raw('./dialogs_menu.svg');\nexport const info_close = raw('./info_close.svg');\nexport const replies_userpic = raw('./replies_userpic.svg');\nexport const saved_messages = raw('./saved_messages.svg');\nexport const filters_edit = raw('./chat_filters/edit.svg');\nexport const info_back = raw('./info_back.svg');\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton from '../../../../ui/elements/icon-button';\nimport RippleEffect, {handleMyMouseEvents} from '../../../../ui/elements/ripple-effect';\nimport { dialogs_menu } from '../../../../ui/icon/icons';\nimport './menu-button.scss';\n\nvar HamburgerMenuButton= {};\n\n/**\n * Renders the button which opens the hamburger menu\n */\nHamburgerMenuButton.WithFolders= class WithFolders extends React.PureComponent {\n    static propTypes= {\n        onClick: PropTypes.func,\n    };\n    state= {\n        ripple: {\n            state: 'off'\n        }\n    }\n    constructor() {\n        super();\n        [this.mouseDown, this.mouseUp, this.mouseLeave]= handleMyMouseEvents(this);\n    }\n    render() {\n        return (\n            <button id=\"hamburger-menu-button\" className=\"uses-folders\"\n                onMouseDown={this.mouseDown}\n                onMouseUp={this.mouseUp}\n                onMouseLeave={this.mouseLeave}\n                onClick={this.props.onClick}>\n                <div id=\"bars\"><span></span><span></span><span></span></div>\n                <RippleEffect {...this.state.ripple} color=\"var(--theme-color-sideBarBgRipple)\"/>\n            </button>\n        );\n    }\n};\n\n/**\n * Renders the button which opens the hamburger menu\n */\nHamburgerMenuButton.WithoutFolders= function WithoutFolders (props) {\n    return (\n        <IconButton \n            icon={dialogs_menu}\n            id=\"hamburger-menu-button\"\n            className=\"icon-button no-folders\"\n            {...props}/>\n    );\n};\n\nexport default HamburgerMenuButton;","import { createStore } from 'redux';\nimport TdLib from '../TdWeb/tdlib';\n\nconst chatStore= createStore(reducer, \n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n    \nfunction reducer(state= {\n    currentChatList: {'@type': 'chatListMain'},\n    archiveState: 'closed',\n    archiveButtonState: localStorage.getItem('dibgram-archived-chats-button-mode'),\n    chats: [],\n    filters: []\n}, action) {\n    switch (action.type) {\n    case 'SET_CURRENT_CHAT_LIST':\n        return {\n            ...state,\n            currentChatList: action.chatList\n        };\n    case 'SET_ARCHIVE_STATE':\n        return {\n            ...state,\n            archiveState: action.archiveState\n        };\n    case 'SET_ARCHIVE_BUTTON_STATE':\n        return {\n            ...state,\n            archiveButtonState: action.archiveButtonState\n        };\n    case 'ADD_CHAT':\n        return {\n            ...state,\n            chats: [\n                ...state.chats,\n                action.chat\n            ]\n        };\n    case 'UPDATE_CHAT_POSITION': // Replace the position property of a chat\n        return {\n            ...state,\n            chats: state.chats.map((chat) => {\n                if (chat.id === action.chat_id) {\n                    let changed=false;\n                    let newChat = {\n                        ...chat,\n                        positions: chat.positions.map((position) => {\n                            if (compareChatList(position.list, action.position.list)) {\n                                changed=true;\n                                return action.position;\n                            }\n                            return position;\n                        })\n                    };\n                    if(!changed) {\n                        return {\n                            ...chat,\n                            positions: [\n                                ...chat.positions,\n                                action.position\n                            ]\n                        };\n                    }\n                    return newChat;\n                }\n                return chat;\n            })\n        };\n    case 'REMOVE_CHAT':\n        return {\n            ...state,\n            chats: state.chats.filter(chat => chat.id !== action.chat.id)\n        };\n    case 'REPLACE_CHAT_FILTERS':\n        return {\n            ...state,\n            filters: action.payload\n        };\n    case 'UPDATE_CHAT_PROPERTY':\n        return {\n            ...state,\n            chats: state.chats.map((chat) => {\n                if (chat.id === action.chat_id) {\n                    return {\n                        ...chat,\n                        [action.property]: action.value\n                    };\n                }\n                return chat;\n            })\n        };\n    case 'UPDATE_CHAT_PHOTO':\n        return {\n            ...state,\n            chats: state.chats.map((chat) => {\n                if (chat.id === action.chat_id) {\n                    return {\n                        ...chat,\n                        photo: action.photo\n                    };\n                }\n                return chat;\n            })\n        };\n    case 'UPDATE_CHAT_TITLE':\n        return {\n            ...state,\n            chats: state.chats.map((chat) => {\n                if (chat.id === action.chat_id) {\n                    return {\n                        ...chat,\n                        title: action.title\n                    };\n                }\n                return chat;\n            })\n        };\n    case 'UPDATE_CHAT_LAST_MESSAGE':\n        return {\n            ...state,\n            chats: state.chats.map((chat) => {\n                if (chat.id === action.chat_id) {\n                    return {\n                        ...chat,\n                        last_message: action.last_message\n                    };\n                }\n                return chat;\n            })\n        };\n    default:\n        return state;\n    }\n}\n\nTdLib.registerUpdateHandler('updateNewChat', update => {\n    chatStore.dispatch({\n        type: 'ADD_CHAT',\n        chat: update.chat\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatActionBar', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'action_bar',\n        chat_id: update.chat_id,\n        value: update.action_bar\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatDefaultDisableNotification', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'default_disable_notification',\n        chat_id: update.chat_id,\n        value: update.default_disable_notification\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatDraftMessage', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'draft_message',\n        chat_id: update.chat_id,\n        value: update.draft_message\n    });\n    for (let position of update.positions) {\n        chatStore.dispatch({\n            type: 'UPDATE_CHAT_POSITION',\n            chat_id: update.chat_id,\n            position: position\n        });\n    }\n});\n\nTdLib.registerUpdateHandler('updateChatFilters', update=> {\n    if(update.chat_filters) {\n        chatStore.dispatch({\n            type: 'REPLACE_CHAT_FILTERS',\n            payload: update.chat_filters\n        });\n    }\n});\n\nTdLib.registerUpdateHandler('updateChatHasScheduledMessages', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'has_scheduled_messages',\n        chat_id: update.chat_id,\n        value: update.has_scheduled_messages\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatIsBlocked', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'is_blocked',\n        chat_id: update.chat_id,\n        value: update.is_blocked\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatIsMarkedAsUnread', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'is_marked_as_unread',\n        chat_id: update.chat_id,\n        value: update.is_marked_as_unread\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatLastMessage', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'last_message',\n        chat_id: update.chat_id,\n        value: update.last_message\n    });\n    for (let position of update.positions) {\n        chatStore.dispatch({\n            type: 'UPDATE_CHAT_POSITION',\n            chat_id: update.chat_id,\n            position: position\n        });\n    }\n});\n\nTdLib.registerUpdateHandler('updateChatNotificationSettings', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'notification_settings',\n        chat_id: update.chat_id,\n        value: update.notification_settings\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatOnlineMemberCount', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'online_member_count',\n        chat_id: update.chat_id,\n        value: update.online_member_count\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatPermissions', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'permissions',\n        chat_id: update.chat_id,\n        value: update.permissions\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatPhoto', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'photo',\n        chat_id: update.chat_id,\n        value: update.photo\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatPosition', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_POSITION',\n        chat_id: update.chat_id,\n        position: update.position\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatReadInbox', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'unread_count',\n        chat_id: update.chat_id,\n        value: update.unread_count\n    });\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'last_read_inbox_message_id',\n        chat_id: update.chat_id,\n        value: update.last_read_inbox_message_id\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatReadOutbox', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'last_read_outbox_message_id',\n        chat_id: update.chat_id,\n        value: update.last_read_outbox_message_id\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatReplyMarkup', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'reply_markup_message_id',\n        chat_id: update.chat_id,\n        value: update.reply_markup_message_id\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatTitle', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'title',\n        chat_id: update.chat_id,\n        value: update.title\n    });\n});\n\nTdLib.registerUpdateHandler('updateChatUnreadMentionCount', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'unread_mention_count',\n        chat_id: update.chat_id,\n        value: update.unread_mention_count\n    });\n});\n\nTdLib.registerUpdateHandler('updateMessageMentionRead', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'unread_mention_count',\n        chat_id: update.chat_id,\n        value: update.unread_mention_count\n    });\n});\n\nexport default chatStore;\n\nexport function compareChatList(list1, list2) {\n    if (list1['@type'] != list2['@type']) {\n        return false;\n    }\n    if (list1['@type'] == 'chatListFilter') {\n        return list1.chat_filter_id == list2.chat_filter_id;\n    }\n    return true;\n}\n\n/**\n * Gets a chat from a chat ID. Has caching.\n */\nexport function getChat(id) {\n    let res;\n    for(let chat of chatStore.getState()?.chats) {\n        if(chat.id==id) res = Promise.resolve(chat);\n    }\n    if(!res){\n        res = TdLib.sendQuery({\n            '@type': 'getChat',\n            'chat_id': id\n        });\n    }\n    return res;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport './scrollbar.scss';\n\nexport default function ScrollView(props) {\n    const [mouseEntered, setMouseEntered] = React.useState(false);\n    const [timeoutId, setTimeoutId] = React.useState(null);\n    const {scrollBarWidth, ...propsRest} = props;\n    return (\n        <Scrollbars\n            className=\"scrollbar\"\n            style= {{ '--bar-width': (scrollBarWidth || 4)+'px' }}\n            data-mouse-entered={mouseEntered}\n            renderTrackHorizontal={props => <div {...props} className=\"track-horizontal\" />}\n            renderTrackVertical={props => <div {...props} className=\"track-vertical\" />}\n            renderThumbHorizontal={props => <div {...props} className=\"thumb-horizontal\" />}\n            renderThumbVertical={props => <div {...props} className=\"thumb-vertical\" />}\n            onMouseEnter={() => {\n                setMouseEntered(true);\n                setTimeoutId(setTimeout(() => {\n                    setMouseEntered(false);\n                }, 1000));\n            }}\n            onMouseLeave={() => {\n                setMouseEntered(false);\n                clearTimeout(timeoutId);\n            }}\n            autoHide\n            autoHideTimeout={1000}\n            hideTracksWhenNotNeeded={true}\n            {...propsRest}\n        />\n    );\n}\nScrollView.propTypes = {\n    scrollBarWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport filters from '../../../ui/icon/chat_filters/chat-filters';\nimport RippleEffect, {handleMyMouseEventsFunction} from '../../../ui/elements/ripple-effect';\nimport HamburgerMenuButton from './hamburger-menu/menu-button';\nimport { compareChatList } from '../../chat-store';\nimport TdLib from '../../../TdWeb/tdlib';\nimport ScrollView from '../../../ui/scroll/scrollbar';\nimport './chat-folders.scss';\n\n/**\n * Renders a chat folder button\n */\nexport function ChatFolder({folder, active, onClick}) {\n    const ripple= React.useState({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave]= handleMyMouseEventsFunction(ripple);\n    const [iconName, setIconName]= React.useState(folder.icon_name);\n\n    React.useEffect(()=> {\n        TdLib.sendQuery({\n            '@type': 'getChats',\n            'chat_list': {\n                '@type': 'chatListFilter',\n                'chat_filter_id': folder.id,\n            },\n            'offset_order': '9223372036854775807',\n            'offset_chat_id': 0,\n            'limit': 50\n        });\n    }, []);\n\n    React.useEffect(()=> {\n        if(!folder.icon_name) {\n            TdLib.sendQuery({\n                '@type': 'getChatFilter',\n                'chat_filter_id': folder.id\n            }).then(folder=> {\n                TdLib.sendQuery({\n                    '@type': 'getChatFilterDefaultIconName',\n                    'filter': folder\n                }).then(result=> setIconName(result.text));\n            });\n        }\n    }, [folder]);\n\n    var icon= (filters[iconName] || filters['Custom']);\n    icon= icon[active+0] || icon[0];\n    return (\n        <div className={active ? 'item active' : 'item'}>\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-sideBarBgRipple)\"/>\n            <button\n                onMouseDown={mouseDown}\n                onMouseUp={mouseUp}\n                onMouseLeave={mouseLeave}\n                onClick={onClick}>\n\n                <div className=\"icon\" dangerouslySetInnerHTML={{__html: icon}}></div>\n                <div className=\"title\">{folder.title}</div>\n            </button>\n        </div>\n    );\n}\n\nChatFolder.propTypes= {\n    /** The folder object provided by TdLib */\n    folder: PropTypes.object.isRequired,\n    /** A boolean indicating if the folder is currently selected */\n    active: PropTypes.bool.isRequired,\n    /** A function to call when the folder is clicked */\n    onClick: PropTypes.func.isRequired\n};\n\n/**\n * Renders the chat folders list\n */\nfunction ChatFolderList({folders, currentFolder, dispatch, onHamburgerMenuOpened}) {\n    if(!folders || folders.length==0) return null;\n    return (\n        <div id=\"chat-folders-list\">\n            <HamburgerMenuButton.WithFolders onClick={onHamburgerMenuOpened}/>\n            <ScrollView scrollBarWidth=\"4\" className=\"list scrollbar full-size\">\n                <ChatFolder \n                    active={compareChatList(currentFolder, {'@type': 'chatListMain'})} \n                    folder={{ title: 'All chats', icon_name: 'All' }}\n                    onClick={()=> dispatch({\n                        type: 'SET_CURRENT_CHAT_LIST',\n                        chatList: { '@type': 'chatListMain' }\n                    })}/>\n                \n                {folders.map(folder=> (\n                    <ChatFolder folder={folder} key={folder.id}\n                        active={compareChatList(currentFolder, \n                            {'@type': 'chatListFilter', 'chat_filter_id': folder.id})}\n                        onClick={()=> dispatch({\n                            type: 'SET_CURRENT_CHAT_LIST',\n                            chatList: { \n                                '@type': 'chatListFilter',\n                                chat_filter_id: folder.id\n                            }\n                        })}/>\n                ))}\n            </ScrollView>\n        </div>\n    );\n}\nChatFolderList.propTypes={\n    folders: PropTypes.arrayOf(PropTypes.object),\n    currentFolder: PropTypes.object,\n    dispatch: PropTypes.func,\n    onHamburgerMenuOpened: PropTypes.func\n};\nexport default connect(state=>({\n    folders:state.filters, \n    currentFolder: state.currentChatList\n}))(ChatFolderList);","import { ProgressRing } from 'progress-ring';\nimport 'progress-ring/src/styles.css';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Renders a spinner which in addition to spinning, also changes size.\n */\nexport default class LoadingSpinner extends React.Component {\n    static props= {\n        size: PropTypes.number.isRequired,\n        lineWidth: PropTypes.number.isRequired,\n        progressColor: PropTypes.string.isRequired\n    }\n    state= {\n        percentage: 10\n    }\n    render () {\n        return (\n            <div className=\"loading-spinner\">\n                <ProgressRing\n                    percent={this.state.percentage}\n                    caps='round'\n                    trackColor=\"transparent\"\n                    spin=\"true\"\n                    {...this.props}\n                    transitionDuration=\"2000\"/>\n            </div>\n        );\n    }\n\n    componentDidMount () {\n        this.intervalNum= setInterval(() => {\n            this.setState({\n                percentage: (90 - this.state.percentage)\n            });\n        }, 2000);\n    }\n\n    componentWillUnmount () {\n        clearInterval(this.intervalNum);\n    }\n}","import React from 'react';\nimport LoadingSpinner from '../elements/loading-spinner';\nimport { connect } from 'react-redux';\n\n/**\n * Renders the connecting spinner at the bottom left corner, which is hidden when connected\n */\nexport default connect(state=> ({state: state})) (function ConnectionState({state}) {\n    return (\n        <div className={'connectionState'+(([\n            'connectionStateConnecting',\n            'connectionStateConnectingToProxy',\n            'connectionStateWaitingForNetwork'\n        ].includes(state))? '' : ' connected')}>\n            <LoadingSpinner\n                progressColor=\"var(--theme-color-menuIconFg)\"\n                size=\"20\"\n                lineWidth=\"2\"/>\n        </div>\n    );\n});\n","import TdLib from './tdlib';\n\nexport function downloadFile (file_id, priority) {\n    let onReject;\n    TdLib.sendQuery({\n        '@type': 'downloadFile',\n        'file_id': file_id,\n        'priority': priority,\n        'offset': 0,\n        'limit': 0,\n        'synchronous': false\n    }).catch(onReject);\n\n    return new Promise((resolve, reject) => {\n        downloadCallbacks[file_id]=result=> {\n            resolve(result);\n            delete downloadCallbacks[file_id];\n        };\n        onReject=reject;\n    });\n}\nvar downloadCallbacks = {};\n\nTdLib.registerUpdateHandler('updateFile', function (update) {\n    if(update.file.local.is_downloading_completed){\n        downloadCallbacks[update.file.id]?.(update.file);\n    }\n});\n\n// Downloads the file if it is not already downloaded, then reads the file and returns the file content as a blob.\nexport function getFileContent(file, priority) {\n    if(file.local.is_downloading_completed){\n        return TdLib.sendQuery({\n            '@type': 'readFilePart',\n            'file_id': file.id,\n            'offset': 0,\n            'count': 0\n        });\n    } else if(file.local.is_downloading_active){\n        return new Promise((resolve, reject) => {\n            const callback = downloadCallbacks[file.id];\n            downloadCallbacks[file.id] = (result) => {\n                callback(result);\n                TdLib.sendQuery({\n                    '@type': 'readFilePart',\n                    'file_id': file.id,\n                    'offset': 0,\n                    'count': 0\n                }).then(resolve).catch(reject);\n            };\n        });\n    } else {\n        return new Promise((resolve, reject) => {\n            downloadFile(file.id, priority).then(()=> {\n                TdLib.sendQuery({\n                    '@type': 'readFilePart',\n                    'file_id': file.id,\n                    'offset': 0,\n                    'count': 0\n                }).then(resolve).catch(reject);\n            }).catch(reject);\n        });\n    }\n}\n\nexport function blobToUrl (blob) {\n    return (window.URL || window.webkitURL).createObjectURL(blob);\n}\n","import TdLib from './tdlib';\n\n/**\n * Contains all options received from TdLib `updateOption`s\n */\nvar options={};\n\nTdLib.registerUpdateHandler('updateOption', function (update) {\n    options[update.name]=update.value.value;\n});\n\nexport default options;\n","export default __webpack_public_path__ + \"static/media/TgLogo.d1ff1195.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { blobToUrl, getFileContent } from '../../TdWeb/file';\nimport options from '../../TdWeb/options';\nimport './profile-photo.scss';\nimport tgLogo from '../../ui/img/TgLogo.png';\nimport { saved_messages, replies_userpic } from '../icon/icons';\n\nexport function profileNameToInitials(name) {\n    const words=name.replace(/[\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007F]/g,'').toUpperCase().split(' ');\n    if(words[0].length==0){\n        return '';\n    } else if(words.length===1) {\n        return words[0][0];\n    } else {\n        return words[0][0] + words[words.length-1][0];\n    }\n}\n\nexport default function ProfilePhoto (props) {\n    const [photo, setPhoto] = React.useState(null);\n    const [photoObj, setPhotoObj] = React.useState(null);\n    const isServiceMessages= props.id==options['telegram_service_notifications_chat_id'];\n    const isSavedMessages= props.id==options['my_id'];\n    const isReplies= props.id==options['replies_bot_chat_id'];\n    \n    React.useEffect(() => {\n        var mounted=true;\n        if(props.photo){\n            if(photoObj!=props.photo){\n                getFileContent(props.photo, 8).then(file=> {\n                    if(!mounted) return;\n                    setPhoto(blobToUrl(file.data));\n                    setPhotoObj(props.photo);\n                });\n            }\n        } else {\n            if(photo && photoObj){\n                setPhoto(null);\n                setPhotoObj(null);\n            }\n        }\n        return ()=> mounted=false;\n    }, [props.photo]);\n\n    var customIcon; \n    if(isSavedMessages && (!props?.disableSavedMessages)){\n        customIcon= [0, saved_messages];\n    }\n    if(isReplies){\n        customIcon= [0, replies_userpic];\n    }\n    if((!props.photo) && isServiceMessages) {\n        customIcon = [1, tgLogo];\n    }\n    return (\n        <div className=\"profile-photo\">\n            <Initials id={props.id} name={props.name}/>\n            {\n                customIcon? (\n                    customIcon[0]?\n                        <React.Fragment>\n                            <Initials id={props.id} name={props.name}/>\n                            <img src={customIcon[1]}/>\n                        </React.Fragment>\n                        :\n                        <div className=\"svg\" dangerouslySetInnerHTML={{__html: customIcon[1]}}/>\n                ) : (\n                    (props.photo && photo) && <img src={photo}/> \n                )\n            }\n        </div>\n    );\n}\nProfilePhoto.propTypes = {\n    name: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n    photo: PropTypes.object,\n    disableSavedMessages: PropTypes.bool\n};\n\nfunction Initials({id, name}) {\n    return (\n        <span className={'initials color_'+ ((Math.abs(id || 0) % 7) + 1)}>\n            {profileNameToInitials(name)}\n        </span>\n    );\n}\nInitials.propTypes = {\n    name: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired\n};\n\nexport function getChatTypeId(chat) {\n    switch (chat?.type?.['@type']) {\n    case 'chatTypeSupergroup': {\n        return chat?.type?.supergroup_id;\n    }\n    case 'chatTypeBasicGroup': {\n        return chat?.type?.basic_group_id;\n    }\n    case 'chatTypePrivate':\n    case 'chatTypeSecret': {\n        return chat?.type?.user_id;\n    }\n    }\n    return null;\n}\n","import { createStore } from 'redux';\nimport TdLib from '../TdWeb/tdlib';\n\nconst usersStore = createStore((state = {}, action) => {\n    switch (action.type) {\n    case 'UPD_USER':\n        return {\n            ...state,\n            [action.user.id]: action.user\n        };\n    default:\n        return state;\n    }\n}, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nTdLib.registerUpdateHandler('updateUser', (update) => {\n    usersStore.dispatch({\n        type: 'UPD_USER',\n        user: update.user\n    });\n});\n\nexport default usersStore;\n","import currencies from './currencies';\n\nexport default function currencyAmountToString (currency, total_amount) {\n    const currencyObject= currencies[currency];\n    var formatter = new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: currency,\n        \n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2,\n    });\n    return formatter.format(total_amount / 10**currencyObject.exp);\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport TdLib from '../../TdWeb/tdlib';\nimport currencyAmountToString from '../payments/currency-tostring';\n\n/**\n * Gets a textual representation of the message without a thumbnail.\n * Usage examples: \n * - Last message in chat list\n * - Pinned message\n * - Replies\n * - Search results\n * @returns A span element containing a textual representation of the message. Contains span.part-1 and span.part-2\n */\n\nconst MessageSummaryWithoutIcon= connect(state=> ({users: state}))(\n    function MessageSummaryWithoutIcon({message, className, users, chat}) {\n        if(!message) return null;\n        switch(message.content['@type']) {\n        \n        case 'messageAnimation':\n            return (\n                <MayHaveCaption\n                    type=\"GIF\" \n                    caption={message.content.caption?.text} \n                    className={className} \n                    message={message} \n                    chat={chat}\n                    users={users}/>\n            );\n        \n        case 'messageAudio':\n            var title= message.content.audio.title || message.content.audio.file_name;\n            if(message.content.audio.performer)\n                title= message.content.audio.performer+ ' ­­– ' + title;\n            return (\n                <MayHaveCaption \n                    type={title} \n                    caption={message.content.caption?.text} \n                    className={className} \n                    message={message} \n                    chat={chat}\n                    users={users}/>\n            );\n\n        case 'messageBasicGroupChatCreate':\n            return (\n                <span className={className}>\n                    <span className=\"part-1\"><SenderFullName chat={chat} message={message} users={users}/> created the group «{message.content.title}»</span>\n                </span>\n            );\n\n        case 'messageCall':\n            var text='';\n            if(message.is_outgoing) {\n                switch(message.content.discard_reason?.['@type']) {\n                case 'callDiscardReasonMissed':\n                    text= 'Cancelled call';\n                    break;\n                default:\n                    text= 'Outgoing call';\n                }\n            } else {\n                switch(message.content.discard_reason?.['@type']) {\n                case 'callDiscardReasonDeclined':\n                    text= 'Declined call';\n                    break;\n                case 'callDiscardReasonMissed':\n                    text= 'Missed call';\n                    break;\n                default: \n                    text= 'Incoming call';\n                }\n            } \n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">{text}</span>\n                </span>\n            );\n\n        case 'messageChatAddMembers':\n            var members= message.content.member_user_ids.map(id=> \n                users[id].last_name ? (users[id].first_name+' '+ users[id].last_name) : users[id].first_name);\n            if(members.length>1){\n                members= members.slice(0, members.length - 1) .join(', ') + ' and ' + members[members.length - 1];\n            } else {\n                members= members[0];\n            }\n            if(message.content.member_user_ids[0] == message.sender?.user_id) {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\"><SenderFullName message={message} chat={chat} users={users}/> joined the group</span>\n                    </span>\n                );\n            }\n            return (\n                <span className={className}>\n                    <span className=\"part-1\"><SenderFullName message={message} chat={chat} users={users}/> added {members}</span>\n                </span>\n            );\n\n        case 'messageChatChangePhoto':\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">Photo</span>\n                </span>\n            );\n\n        case 'messageChatChangeTitle': // I can't believe copilot can fill these lines without having access to API docs\n            if(message.is_channel_post) {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\">Channel name was changed to «{message.content.title}»</span>\n                    </span>\n                );\n            } else {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\"><SenderFullName message={message} chat={chat} users={users}/>\n                        &nbsp;changed group name to «{message.content.title}»</span>\n                    </span>\n                );\n            }\n\n        case 'messageChatDeleteMember':\n            var deletedMember= users[message.content.user_id];\n            return (\n                <span className={className}>\n                    <span className=\"part-1\"><SenderFullName message={message} chat={chat} users={users}/>\n                    &nbsp;removed {deletedMember.first_name+' '+ deletedMember.last_name}</span>\n                </span>\n            );\n\n        case 'messageChatDeletePhoto':\n            if(message.is_channel_post) {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\">Channel photo removed</span>\n                    </span>\n                );\n            } else {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\"><SenderFullName message={message} chat={chat} users={users}/>\n                        &nbsp;removed group photo</span>\n                    </span>\n                );\n            }\n\n        case 'messageChatJoinByLink':\n            return (\n                <span className={className}>\n                    <span className=\"part-1\"><SenderFullName message={message} chat={chat} users={users}/>\n                    &nbsp;joined the group via invite link</span>\n                </span>\n            );\n\n        case 'messageChatSetTtl':\n            // seconds to day, week and month\n            var timeConversionTable= {86400: 'day', 604800: 'week', 2678400: 'month'};\n            return (\n                <span className={className}>\n                    <span className=\"part-1\"><SenderFullName message={message} chat={chat} users={users} includeYou={true}/> set messages to auto-delete in 1 {timeConversionTable[message.content.ttl]}</span>\n                </span>\n            );\n\n        case 'messageChatUpgradeFrom':\n        case 'messageChatUpgradeTo':\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">Group was upgraded to a super-group</span>\n                </span>\n            );\n\n        case 'messageContact':\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">Contact</span>\n                </span>\n            );\n\n        case 'messageContactRegistered':\n            return (\n                <span className={className}>\n                    <span className=\"part-1\"><SenderFullName message={message} chat={chat} users={users}/>\n                    &nbsp;joined Telegram</span>\n                </span>\n            );\n\n        case 'messageCustomServiceAction':\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{message.content.text}</span>\n                </span>\n            );\n\n        case 'messageDice':\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">{message.content.emoji}</span>\n                </span>\n            );\n\n        case 'messageDocument':\n            return (\n                <MayHaveCaption \n                    type={message.content.document.file_name} \n                    caption={message.content.caption?.text} \n                    className={className} \n                    message={message} \n                    chat={chat}\n                    users={users}/>\n            );\n        \n        // case 'messageExpiredPhoto':\n        // case 'messageExpiredVideo':\n        case 'messageGame':\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">🎮 {message.content.game.title}</span>\n                </span>\n            );\n\n        case 'messageGameScore':\n            var noGameTitleFallback= (\n                <span className={className}><span className=\"part-1\">\n                    <SenderFullName message={message} chat={chat} users={users} includeYou={true}/> scored {message.content.score}\n                </span></span>\n            );\n\n            // Get game message\n            var GameScoreWithTitle= React.lazy(()=>new Promise(resolve=> {\n                TdLib.sendQuery({\n                    '@type': 'getMessage',\n                    chat_id: chat.id,\n                    message_id: message.content.game_message_id\n                }).then(\n                    result=> { \n                        //eslint-disable-next-line react/display-name\n                        resolve({ default: ()=> (\n                            <span className={className}><span className=\"part-1\">\n                                <SenderFullName message={message} chat={chat} users={users} includeYou={true}/> scored {message.content.score} in {result.content.game.title}\n                            </span></span>\n                        )});\n                    },\n                    ()=> { \n                        //eslint-disable-next-line react/display-name\n                        resolve({ default: ()=> noGameTitleFallback});\n                    }\n                );\n            }));\n\n            return (\n                <React.Suspense fallback={noGameTitleFallback}>\n                    <GameScoreWithTitle/>\n                </React.Suspense>\n            );\n\n        case 'messageInvoice':\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">{message.content.title}</span>\n                </span>\n            );\n\n        case 'messageLocation':\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">{message.content.title}</span>\n                </span>\n            );\n\n        case 'messagePassportDataSent':\n            var passportDataTypeToString= {\n                'passportElementTypeAddress': 'address',\n                'passportElementTypeBankStatement': 'bank statement',\n                'passportElementTypeDriverLicense': 'driver license',\n                'passportElementTypeEmailAddress': 'email address',\n                'passportElementTypeIdentityCard': 'identity card',\n                'passportElementTypeInternalPassport': 'internal passport',\n                'passportElementTypePassport': 'passport',\n                'passportElementTypePassportRegistration': 'passport registration',\n                'passportElementTypePersonalDetails': 'personal details',\n                'passportElementTypePhoneNumber': 'phone number',\n                'passportElementTypeRentalAgreement': 'rental agreement',\n                'passportElementTypeTemporaryRegistration': 'temporary registration',\n                'passportElementTypeUtilityBill': 'utility bill',\n            };\n            var passportDataTypes= message.content.types.map(type=> passportDataTypeToString[type['@type']]);\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">\n                        {chat.title} received the following documents: {passportDataTypes.join(', ')}\n                    </span>\n                </span>\n            );\n\n        case 'messagePaymentSuccessful':\n            var noInvoiceTitleFallback= (\n                <span className={className}>\n                    <span className=\"part-1\">\n                        You successfully transferred \n                        {currencyAmountToString(message.content.currency, message.content.total_amount)} \n                        to {chat.title}\n                    </span>\n                </span>\n            );\n\n            // Get invoice message\n            var PaymentInfoWithInvoiceTitle= React.lazy(()=>new Promise(resolve=> {\n                TdLib.sendQuery({\n                    '@type': 'getMessage',\n                    chat_id: chat.id,\n                    message_id: message.content.invoice_message_id\n                }).then(\n                    result=> { \n                        //eslint-disable-next-line react/display-name\n                        resolve({ default: ()=> (\n                            <span className={className}>\n                                <span className=\"part-1\">\n                                    You successfully transferred \n                                    {currencyAmountToString(message.content.currency, message.content.total_amount)} \n                                    to {chat.title} for {result.content.title}\n                                </span>\n                            </span>\n                        )});\n                    },\n                    ()=> {\n                        resolve({ default: ()=> noInvoiceTitleFallback});\n                    }\n                );\n            }));\n\n            return (\n                <React.Suspense fallback={noInvoiceTitleFallback}>\n                    <PaymentInfoWithInvoiceTitle/>\n                </React.Suspense>\n            );\n\n        case 'messagePhoto':\n            if(message.content.is_secret) {\n                if(message.is_outgoing) {\n                    return (\n                        <span className={className}>\n                            <span className=\"part-1\">You sent a self-destructing photo</span>\n                        </span>\n                    );\n                } else {\n                    return (\n                        <span className={className}><span className=\"part-1\">\n                            <SenderFullName message={message} chat={chat} users={users}/> sent you a self-destructing photo. Please view it on your mobile.\n                        </span></span>\n                    );\n                }\n            } else {\n                return (\n                    <MayHaveCaption \n                        type=\"Photo\" \n                        caption={message.content.caption?.text} \n                        className={className} \n                        message={message} \n                        chat={chat}\n                        users={users}/>\n                );\n            }\n        \n        // case 'messagePinMessage':\n        case 'messagePoll':\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{message.content.poll.question}</span>\n                </span>\n            );\n        \n        // case 'messageProximityAlertTriggered':\n        // case 'messageScreenshotTaken':\n        case 'messageSticker':\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">{message.content.sticker.emoji} Sticker</span>\n                </span>\n            );\n\n        case 'messageSupergroupChatCreate':\n            if(message.is_channel_post) {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\">Channel created</span>\n                    </span>\n                );\n            } else {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\"><SenderFullName chat={chat} message={message} users={users}/> created the group «{message.content.title}»</span>\n                    </span>\n                );\n            }\n\n        case 'messageText':\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-2\">{message.content.text.text.replace(/(\\n|\\r|\\r\\n|\\n\\r)/g, ' ')}</span>\n                </span>\n            );\n\n        case 'messageUnsupported':\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-2\">This message is not supported by your version of DIBgram. Please update to the latest version.</span>\n                </span>\n            );\n        \n        case 'messageVenue':\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">Location, </span>\n                    <span className=\"part-2\">{message.content.venue.title}</span>\n                </span>\n            );\n\n        case 'messageVideo':\n            return (\n                <MayHaveCaption \n                    type=\"Video\" \n                    caption={message.content.caption?.text} \n                    className={className} \n                    message={message} \n                    chat={chat}\n                    users={users}/>\n            );\n\n        case 'messageVideoNote':\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">Video message</span>\n                </span>\n            );\n\n        case 'messageVoiceNote':\n            return (\n                <MayHaveCaption \n                    type=\"Voice message\" \n                    caption={message.content.caption?.text} \n                    className={className} \n                    message={message} \n                    chat={chat}\n                    users={users}/>\n            );\n\n        case 'messageWebsiteConnected':\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">You allowed this bot to message you when you logged in on {message.content.domain_name}</span>\n                </span>\n            );\n\n        default:\n            return null;\n        }\n    });\nexport default MessageSummaryWithoutIcon;\nMessageSummaryWithoutIcon.propTypes= {\n    message: PropTypes.object,\n    className: PropTypes.string\n};\n\n\n// If caption has a value, add a comma to type and return type\nfunction MayHaveCaption({type, caption, className, message, chat, users}) {\n    if(caption) type+=',';\n    return (\n        <span className={className}>\n            <MessageSummarySender message={message} chat={chat} users={users}/>\n            <span className=\"part-1\">{type}</span> <span className=\"part-2\">{caption.replace(/(\\n|\\r|\\r\\n|\\n\\r)/g, ' ')}</span>\n        </span>\n    );\n}\nMayHaveCaption.propTypes= {\n    type: PropTypes.string.isRequired,\n    caption: PropTypes.string,\n    className: PropTypes.string,\n    message: PropTypes.object,\n    chat: PropTypes.object,\n    users: PropTypes.object.isRequired\n};\n\nfunction SenderFullName({message, chat, users, includeYou}) {\n    if(includeYou) {\n        return message.is_outgoing ? 'You' : <SenderFullName message={message} chat={chat} users={users}/>;\n    }\n    const sender=message.sender;\n    const user=users[sender.user_id];\n    if(sender['@type']=='messageSenderUser') {\n        return user.last_name ? (user.first_name +' '+ user.last_name) : user.first_name;\n    } else if(sender['@type']=='messageSenderChat') {\n        return chat.title;\n    }\n}\n\nexport const MessageSummarySender= \n    function MessageSummarySender ({message, chat, users}) {\n        if(!message) return null;\n        var part1;\n        if(chat && (!message.is_channel_post)) {\n            if(message.is_outgoing) {\n                part1= 'You: ';\n            } else if(['chatTypeBasicGroup', 'chatTypeSupergroup'].includes(chat.type['@type'])) {\n                if(message.sender['@type']=='messageSenderUser') {\n                    part1= users[message.sender.user_id].first_name + ': ';\n                }\n            }\n            if(message.sender['@type']=='messageSenderChat') {\n                part1= chat.title+': ';\n            }\n        }\n        return part1? <span className=\"sender\">{part1}</span> : null;\n    };\nMessageSummarySender.propTypes= {\n    message: PropTypes.object.isRequired,\n    chat: PropTypes.object.isRequired,\n    users: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './link-button.scss';\n\nexport default function LinkButton({children, onClick}) {\n    return (\n        <button className=\"link-button\" onClick={onClick}>{children}</button>\n    );\n}\nLinkButton.propTypes = {\n    children: PropTypes.node.isRequired,\n    onClick: PropTypes.func\n};\n","import {createStore} from 'redux';\nimport TdLib from '../TdWeb/tdlib';\n\nfunction reducer(state, action) {\n    switch (action.type) {\n    case 'UPD_SUPERGROUP':\n        return {\n            ...state,\n            [action.supergroup.id]: action.supergroup\n        };\n    default:\n        return state;\n    }\n}\n\nconst supergroupStore= createStore(reducer);\nexport default supergroupStore;\n\nTdLib.registerUpdateHandler('updateSupergroup', (update) => {\n    supergroupStore.dispatch({\n        type: 'UPD_SUPERGROUP',\n        supergroup: update.supergroup\n    });\n});","\n/**\n * Converts a date and time to a short string.\n * - If the date is in the last 20 hours, the time is displayed in the format HH:MM.\n * - If the date is in the last 7 days, the weekday is displayed.\n * - If the date is older, the date is displayed in the format DD.MM.YY.\n * @param {Date|Number} date Input date\n */\nexport function smallDateTimeToString(date) {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    const now = new Date();\n    const yesterday = new Date(now.getTime() - 20 * 60 * 60 * 1000);\n    const lastWeek = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n\n    if (date.getTime() >= yesterday.getTime()) {\n        return timeToString(date);\n    } else if (date.getTime() >= lastWeek.getTime()) {\n        return weekdayToString(date);\n    } else {\n        return dateToString(date);\n    }\n}\n\n/**\n * Formats time in 12-hour format\n * @param {Date|Number} date input date\n */\nexport function timeToString(date) {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    var hours = date.getHours();\n    var minutes = date.getMinutes();\n    const ampm = hours >= 12 ? 'PM' : 'AM';\n    hours = hours % 12;\n    hours = hours ? hours : 12; // the hour '0' should be '12'\n    minutes = minutes < 10 ? `0${minutes}` : minutes;\n    return `${hours}:${minutes} ${ampm}`;\n}\n\n/**\n * Formats weekday in WWW format\n * @param {Date|Number} date input date\n */\nexport function weekdayToString(date) {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    return weekdays[date.getDay()];\n}\n\n/**\n * Formats date in DD.MM.YY format\n * @param {Date|Number} date input date\n */\nexport function dateToString(date) {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    var day = date.getDate();\n    var month = date.getMonth() + 1;\n    const year = String(date.getFullYear()).slice(2);\n    if (day < 10) {\n        day = `0${day}`;\n    }\n    if (month < 10) {\n        month = `0${month}`;\n    }\n    return `${day}.${month}.${year}`;\n}\n\nexport function TdLibDateToDate(tdLibDate) {\n    return new Date(tdLibDate * 1000);\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './menu.scss';\n\nexport default function Menu(props) {\n    return (\n        <div className=\"menu\" {...props}/>\n    );\n}\n\nMenu.MenuContents= function MenuContents(props) {\n    return (\n        <div className=\"menu-contents\" {...props}/>\n    );\n};\n\nMenu.MenuItem= function MenuItem({children, ...rest}) {\n    return (\n        <div className=\"menu-item\" {...rest}>\n            {children}\n        </div>\n    );\n};\nMenu.MenuItem.propTypes = {\n    children: PropTypes.node\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { createStore } from 'redux';\nimport Menu from './menu';\nimport { connect } from 'react-redux';\n\nexport function ContextMenu({x, y, children}) {\n    return (\n        <div className=\"context-menu\" style={{'--x': x+'px', '--y': y+'px'}}>\n            <Menu>\n                {children}\n            </Menu>\n        </div>\n    );\n}\nContextMenu.propTypes = {\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n    children: PropTypes.node.isRequired\n};\n\nexport const contextMenusStore = createStore(function (state = null, action) {\n    if (action.type === 'ADD_CONTEXT_MENU') {\n        return action.menu;\n    }\n    else if (action.type === 'REMOVE_CONTEXT_MENUS') {\n        return null;\n    }\n    return state;\n});\n\nexport const ContextMenus= connect(state=>({menus:state}))(({menus}) => menus);\n\n/**\n * Create a context menu\n * @param {React.SyntheticEvent} e Pass down `e` from the event handler\n * @param {React.ReactNode} menu Context menu contents\n */\nexport function createContextMenu(e, menu) {\n    e.preventDefault();\n    setTimeout(() => { // This is to fix ripple effect glitch\n        contextMenusStore.dispatch({\n            type: 'ADD_CONTEXT_MENU',\n            menu: <ContextMenu x={e.nativeEvent.pageX} y={e.nativeEvent.pageY}>{menu}</ContextMenu>\n        });\n    }, 50); // Human brain cannot notice 50ms delay\n}\n\nexport function onAnywhereClicked() {\n    contextMenusStore.dispatch({\n        type: 'REMOVE_CONTEXT_MENUS'\n    });\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { createStore } from 'redux';\n\n/**\n * A redux store which state is an array of objects with {id: unique ID of dialog, element: react element of the dialog}\n */\nexport var dialogStore= createStore(\n    /**\n     * @param {any[]} state\n     * @param {Object} action\n     */\n    function (state= [], action) {\n        switch (action.type) {\n        case 'ADD_DIALOG':\n            return [\n                ...state,\n                action.dialog\n            ];\n        \n        case 'REMOVE_DIALOG':\n            return state.filter(value => value.id!=action.id);\n        \n        default:\n            break;\n        }\n    },\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\n/**\n * Opens a dialog\n * @param {string} id A unique ID for the dialog\n * @param {React.ReactElement} dialog The dialog React element\n */\nexport function addDialog(id, dialog) {\n    dialogStore.dispatch({\n        type: 'ADD_DIALOG',\n        dialog: {\n            element: dialog,\n            id: id\n        }\n    });\n}\n\n/**\n * Closes an existing dialog\n * @param {string} id The dialog unique ID\n */\nexport function removeDialog(id) {\n    dialogStore.dispatch({\n        type: 'REMOVE_DIALOG',\n        id: id\n    });\n}\n\nfunction Wrapper(props){\n    return props.children;\n}\n\n/**\n * Renders all dialogs.\n */\nconst Dialogs= (connect(function (state) {\n    return {dialogs: state || []};\n})(function Dialogs(props) {\n    return props.dialogs.map(el => <Wrapper key={el.id}>{el.element}</Wrapper>) || null;\n}));\n\nexport default Dialogs;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { removeDialog } from './dialogs';\nimport './toast.scss';\n\nexport default function Toast({id, children}) {\n    const [closed, setClosed] = React.useState(false);\n    React.useEffect(() => {\n        setTimeout(() => {\n            setClosed(true);\n            setTimeout(() => {\n                removeDialog(id);\n            }, 2000);\n        }, 6000);\n    }, []);\n    return (\n        <div className={'toast' + (closed? ' closed':'')}>\n            <div className=\"toast-content\">\n                {children}\n            </div>\n        </div>\n    );\n}\nToast.propTypes = {\n    id: PropTypes.string.isRequired,\n    children: PropTypes.node.isRequired,\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport RippleEffect, {handleMyMouseEvents} from './ripple-effect';\n\n/**\n * Renders a small button with accent color\n */\nexport default class SmallButton extends React.Component {\n    static propTypes= {\n        /** The button's content */\n        children: PropTypes.node.isRequired,\n        /** Fires when the button is clicked */\n        onClick: PropTypes.func\n    };\n    state= {\n        ripple: {\n            state: 'off'\n        }\n    }\n    constructor(props) {\n        super(props);\n        [this.mouseDown, this.mouseUp, this.mouseLeave]= handleMyMouseEvents(this);\n        var {children, ...rest}= props;\n        [this.children, this.rest]= [children, rest];\n    }\n    render() {\n        return (\n            <button \n                className=\"small-button\" \n                onMouseDown={this.mouseDown}\n                onMouseUp={this.mouseUp}\n                onMouseLeave={this.mouseLeave}\n                {...this.rest}>\n\n                <RippleEffect {...this.state.ripple} color=\"var(--theme-color-lightButtonBgRipple)\"/>\n\n                <div className=\"invisibleText\">\n                    {this.children}\n                </div>\n                <div className=\"content\">\n                    {this.children}\n                </div>\n                \n            </button>\n        );\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SmallButton from '../elements/small-button';\nimport { removeDialog } from './dialogs';\n/**\n * Renders a modal dialog with a title and cancel and OK button. OK button text can be changed.\n */\nexport default class ConfirmDialog extends React.Component{\n    static propTypes= {\n        children: PropTypes.node.isRequired,\n        /** Dialog width in CSS format */\n        width: PropTypes.string,\n        /** Dialog header */\n        title: PropTypes.string,\n        /** Text content of the OK button*/\n        OKButtonText: PropTypes.string,\n        /** Pass true to only show the OK button */\n        hideCancelButton: PropTypes.bool,\n        /** Unique ID of this dialog, used to close it. */\n        id: PropTypes.any.isRequired,\n        /** Called when the OK button is pressed */\n        onOK: PropTypes.func,\n        /** Called when the cancel button is pressed */\n        onCancel: PropTypes.func,\n        /** Third button text (optional) */\n        thirdButton: PropTypes.string,\n        /** Pass true if third button click closes dialog */\n        thirdButtonClosesDialog: PropTypes.bool,\n        /** Called when third button is pressed */\n        onThirdButtonClick: PropTypes.func\n    };\n    state= {\n        closing: false\n    }\n    handleOK =()=>{\n        this.closeDialog();\n        this.props.onOK && this.props.onOK();\n    }\n    handleCancel =()=>{\n        this.closeDialog();\n        this.props.onCancel && this.props.onCancel();\n    }\n    handleButton =(handler)=>{\n        this.closeDialog();\n        handler && handler();\n    }\n    render() {\n        return (\n            <div className={'modal-dialog confirm-dialog' + ((this.state.closing) ? ' closing' : '')}>\n                <div style={{\n                    'width': this.props.width || '320px'\n                }}>\n                    <h1>{this.props.title || ''}</h1>\n                    <div className=\"content\">\n                        {this.props.children}\n                    </div>\n                    <div className=\"options\">\n                        {this.props.thirdButton ?  (\n                            <SmallButton \n                                className=\"small-button left\"\n                                style={{'float': 'left'}}\n                                onClick={\n                                    this.props.thirdButtonClosesDialog ?\n                                        ()=>this.handleButton(this.props.onThirdButtonClick)\n                                        : this.props.onThirdButtonClick}>\n                                {this.props.thirdButton}\n                            </SmallButton>\n                        ) : null}\n                        {this.props.hideCancelButton ? null : (\n                            <SmallButton onClick={()=>this.handleButton(this.props.onCancel)}>\n                                Cancel\n                            </SmallButton>\n                        )}\n                        <SmallButton onClick={()=>this.handleButton(this.props.onOK)}>\n                            {this.props.OKButtonText || 'OK'}\n                        </SmallButton>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n    \n    closeDialog= ()=>{\n        this.setState({\n            closing: true\n        });\n        setTimeout(() => {\n            removeDialog(this.props.id);\n        }, 1000);\n    }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect, Provider } from 'react-redux';\nimport TdLib from '../../../TdWeb/tdlib';\nimport chatStore, { compareChatList } from '../../chat-store';\nimport './chat-list.scss';\nimport ProfilePhoto, { getChatTypeId } from '../../../ui/components/profile-photo';\nimport { dialogs_chat, dialogs_channel, dialogs_bot, dialogs_pinned, dialogs_verified_star, dialogs_verified_check, dialogs_sending, dialogs_sent, dialogs_received, archive_userpic } from '../../../ui/icon/icons';\nimport usersStore from '../../users-store';\nimport ScrollView from '../../../ui/scroll/scrollbar';\nimport MessageSummaryWithoutIcon from '../../message/message-summary-noicon';\nimport LinkButton from '../../../ui/elements/link-button';\nimport { isChatWithDeletedAccount, isChatVerified } from '../../chat-misc';\nimport { smallDateTimeToString } from '../../../time-tostring';\nimport { getMessageStatus } from '../../message-misc';\nimport options from '../../../TdWeb/options';\nimport RippleEffect, { handleMyMouseEvents, handleMyMouseEventsFunction } from '../../../ui/elements/ripple-effect';\nimport { createContextMenu } from '../../../ui/menu/context-menu';\nimport Menu from '../../../ui/menu/menu';\nimport Toast from '../../../ui/dialog/toast';\nimport { addDialog } from '../../../ui/dialog/dialogs';\nimport ConfirmDialog from '../../../ui/dialog/confirm-dialog';\n\n/**\n * Returns a sorted list of all chats in the given chat list\n * \n * Also for every chat, sets `chat.position` to the matching position (creates copy instead of modifying original object)\n * @param {import('tdweb').TdObject[]} chats\n * @param {import('tdweb').TdObject} list\n */\nexport function getChatsFromList(chats, list) {\n    return chats.map(chat => {\n        for( const position of chat.positions ) {\n            if (compareChatList(list, position.list)) {\n                if( position.order=='0' ) return false;\n                return {\n                    ...chat,\n                    position: position\n                };\n            }\n        }\n        return chat;\n    })\n        .filter(chat => !!chat.position)\n        .sort((a, b) => {\n            let order1= a.position.order, order2= b.position.order;\n\n            if (order1 == order2) {\n                return 0;\n            }\n            if (order1 < order2) {\n                return 1;\n            }\n            return -1;\n        });\n}\n\nconst ChatList= connect(state=> ({connectionState: state}))(\n    class ChatList extends React.Component { \n        static propTypes = {\n            chats: PropTypes.array.isRequired,\n            list: PropTypes.object.isRequired,\n            connectionState: PropTypes.string.isRequired\n        }\n\n        // When updating, TDLib sends updates of type\n        // updateChatLastMessage, where only the last one is needed.\n        // This greatly hurts performance.\n        // However, we can workaround it by not re-rendering \n        // until all updates have arrived.\n        shouldComponentUpdate(nextProps) {\n            return (nextProps.chats !== this.props.chats \n                || nextProps.list !== this.props.list \n                || nextProps.connectionState !== this.props.connectionState)\n                && nextProps.connectionState != 'connectionStateUpdating';\n        }\n\n        render() {\n            const array= getChatsFromList(this.props.chats, this.props.list).map(chat=><ChatListItem key={chat.id} chat={chat} />);\n            return (\n                <ScrollView id=\"chat-list\" scrollBarWidth=\"4\">\n                    {this.props.list['@type']=='chatListMain' && (\n                        <Provider store={chatStore}>\n                            <ArchivedChatsItem chats={this.props.chats}/>\n                        </Provider>\n                    )}\n                    <Provider store={usersStore}>\n                        {array.length ? array :  <EmptyChatList list={this.props.list} connectionState={this.props.connectionState}/>}\n                    </Provider>\n                </ScrollView>\n            );\n        }\n\n        componentDidMount() {\n            TdLib.sendQuery({\n                '@type': 'getChats',\n                'chat_list': {\n                    '@type': 'chatListMain'\n                },\n                'offset_order': '9223372036854775807',\n                'offset_chat_id': 0,\n                'limit': 50\n            });\n            TdLib.sendQuery({\n                '@type': 'getChats',\n                'chat_list': {\n                    '@type': 'chatListArchive'\n                },\n                'offset_order': '9223372036854775807',\n                'offset_chat_id': 0,\n                'limit': 50\n            });\n        }\n    }\n);\nexport default ChatList;\n\nexport class ChatListItem extends React.Component {\n    constructor(props) {\n        super(props);\n        [this.mouseDown, this.mouseUp, this.mouseLeave]= handleMyMouseEvents(this);\n    }\n    state= {\n        ripple: {\n            state: 'off'\n        }\n    };\n    shouldComponentUpdate(nextProps, nextState) {\n        return nextProps.chat.id !== this.props.chat.id\n            || nextProps.chat.last_message !== this.props.chat.last_message\n            || nextProps.chat.draft_message !== this.props.chat.draft_message\n            || nextProps.chat.unread_count !== this.props.chat.unread_count\n            || nextProps.chat.unread_mention_count !== this.props.chat.unread_mention_count\n            || nextProps.chat.position.is_pinned !== this.props.chat.position.is_pinned\n            || nextProps.chat.photo?.small?.id !== this.props.chat.photo?.small?.id\n            || nextProps.chat.title !== this.props.chat.title\n            || nextProps.chat.last_read_outbox_message_id !== this.props.chat.last_read_outbox_message_id\n            || nextState.ripple !== this.state.ripple;\n    }\n    render(){\n        const chat= {...this.props.chat}; // Clone chat object to avoid mutating it. Mutating it causes Saved messages and Deleted account chats to get past shouldComponentUpdate.\n        var chatType= '';\n        if (chat.type?.['@type'] == 'chatTypeBasicGroup' ||\n                (chat.type?.['@type'] == 'chatTypeSupergroup' &&\n                chat.type?.is_channel == false)\n        ){\n            chatType= dialogs_chat;\n        } \n        else if (chat.type?.['@type'] == 'chatTypeSupergroup' &&\n                chat.type?.is_channel == true){\n            chatType= dialogs_channel;\n        } \n        else if ((chat.type?.['@type'] == 'chatTypePrivate') &&\n                (usersStore.getState()[chat.type?.user_id]?.type?.['@type'] == 'userTypeBot')){\n            chatType= dialogs_bot;\n        }\n        if (chat.id==options['replies_bot_chat_id']) {\n            chatType= '';\n        }\n\n        if(isChatWithDeletedAccount(chat)) {\n            chat.title= 'Deleted Account'; // Chat object is a copy, so there is no problem with mutating it.\n        }\n\n        const isVerified= isChatVerified(chat);\n\n        if (chat.id==options['my_id']) {\n            chat.title= 'Saved Messages';\n        }\n\n        var messageStatus = null;\n        switch(getMessageStatus(chat, chat.last_message)) {\n        case 'sending': \n            messageStatus = <span className=\"message-status-icon sending\" dangerouslySetInnerHTML={{__html: dialogs_sending}}/>;\n            break;\n        case 'sent': \n            messageStatus = <span className=\"message-status-icon sent\" dangerouslySetInnerHTML={{__html: dialogs_sent}}/>;\n            break;\n        case 'seen': \n            messageStatus = <span className=\"message-status-icon seen\" dangerouslySetInnerHTML={{__html: dialogs_received}}/>;\n            break;\n        }\n\n        var unreadBadge = null;\n        const unreadBadgeClass= chat.notification_settings.mute_for ? 'unread-badge muted' : 'unread-badge';\n        // Show the mention badge alone if there is exactly one mention and no other unread messages\n        if (chat.unread_mention_count == 1 && chat.unread_count == chat.unread_mention_count) {\n            unreadBadge = <span className=\"unread-badge mention\">@</span>;\n        } \n        // Show the mention badge with unread badge together if there are more than one unread messages and there are mentions\n        else if (chat.unread_mention_count > 0 && chat.unread_count > 1 ) {\n            unreadBadge = <React.Fragment>\n                <span className=\"unread-badge mention\">@</span>\n                <span className={unreadBadgeClass}>{chat.unread_count}</span>\n            </React.Fragment>;\n        }\n        // Show the unread badge alone if there are no mentions and there are unread messages\n        else if (chat.unread_count > 0 && chat.unread_mention_count == 0) {\n            unreadBadge = <span className={unreadBadgeClass}>{chat.unread_count}</span>;\n        }\n        // Show an empty badge if chat is manually marked as unread\n        else if (chat.is_marked_as_unread) {\n            unreadBadge = <span className={unreadBadgeClass}></span>;\n        }\n        else {\n            unreadBadge = chat.position?.is_pinned && <span className=\"pinned_icon\" dangerouslySetInnerHTML={{__html: dialogs_pinned}}></span>;\n        }\n\n        return(\n            <div className=\"chat\" onContextMenu={e=> createContextMenu(e, <ChatContextMenu chat={chat}/>)}\n                onMouseDown={this.mouseDown} onMouseUp={this.mouseUp} onMouseLeave={this.mouseLeave}>\n                <RippleEffect {...this.state.ripple} color=\"var(--theme-color-dialogsRippleBg)\"/>\n                <div className=\"content\">\n                    <ProfilePhoto name={chat.title} photo={chat.photo?.small} id={getChatTypeId(chat)}/>\n                    <div className=\"details\">\n                        <div className=\"top\">\n                            <div className=\"left\">\n                                <div className=\"type-icon\" dangerouslySetInnerHTML={{__html: chatType}}></div>\n                                <div className=\"title\">{chat.title}</div>\n                                {isVerified && <span className=\"verified-icon\">\n                                    <span className=\"verified-icon-star\" dangerouslySetInnerHTML={{__html: dialogs_verified_star}}></span>\n                                    <span className=\"verified-icon-check\" dangerouslySetInnerHTML={{__html: dialogs_verified_check}}></span>\n                                </span>}\n                            </div>\n                            <div className=\"right\">\n                                {messageStatus}\n                                {chat.last_message?.date && <span className=\"date\">{smallDateTimeToString(chat.last_message.date)}</span>}\n                            </div>\n                        </div>\n                        <div className=\"bottom\">\n                            <div className=\"left\">\n                                {chat.draft_message ? \n                                    <span className=\"last-message\">\n                                        <span className=\"draft\">Draft:</span> <span className=\"part-2\">{chat.draft_message.input_message_text.text.text}</span>\n                                    </span> \n                                    : \n                                    <MessageSummaryWithoutIcon message={chat.last_message} chat={chat} className=\"last-message\"/>\n                                }\n                            </div>\n                            <div className=\"right\">\n                                {unreadBadge}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nChatListItem.propTypes = {\n    chat: PropTypes.object.isRequired\n};\n\nfunction ChatContextMenu({chat}) {\n    const [movableChatLists, setMovableChatLists] = React.useState([]);\n\n    React.useEffect(() => {\n        TdLib.sendQuery({\n            '@type': 'getChatListsToAddChat',\n            chat_id: chat.id\n        }).then(result => {\n            setMovableChatLists(result.chat_lists.map(chatList=> {\n                const text= {'chatListMain': 'Unarchive chat', 'chatListArchive': 'Archive chat'}[chatList['@type']];\n                if(!text) return;\n                return (\n                    <Menu.MenuItem key={chatList.chat_filter_id || chatList['@type']} onClick={() => {\n                        TdLib.sendQuery({\n                            '@type': 'addChatToList',\n                            chat_id: chat.id,\n                            chat_list: chatList\n                        }).then(() => {\n                            if(chatList['@type'] == 'chatListMain') {\n                                addDialog('chat-un-archived-toast', (\n                                    <Toast id=\"chat-un-archived-toast\">\n                                        Chat restored from your archive.\n                                    </Toast>\n                                ));\n                            } \n                            else if(chatList['@type'] == 'chatListArchive') {\n                                addDialog('chat-archived-toast', (\n                                    <Toast id=\"chat-archived-toast\">\n                                        Chat archived. <br/>\n                                        Muted chats stay archived when new messages arrive.\n                                    </Toast>\n                                ));\n                            }\n                        });\n                    }}>\n                        {text}\n                    </Menu.MenuItem>\n                );\n            }));\n        });\n    }, []);\n\n    return (\n        <Menu.MenuContents>\n            {movableChatLists}\n            <Menu.MenuItem onClick={()=> {\n                TdLib.sendQuery({\n                    '@type': 'toggleChatIsPinned',\n                    chat_list: chat.position.list,\n                    chat_id: chat.id,\n                    is_pinned: !chat.position.is_pinned\n                }).catch(error=> {\n                    if(error.code == 400) {\n                        const max= chat.position.list['@type'] == 'chatListMain'? options['pinned_chat_count_max'] : options['pinned_archived_chat_count_max'];\n                        addDialog('maximum-pinned-chats-reached', (\n                            <ConfirmDialog id=\"maximum-pinned-chats-reached\" hideCancelButton={true}>\n                                Sorry, you can only pin {max} chats to the top.\n                            </ConfirmDialog>\n                        ));\n                    }\n                });\n            }}>\n                {chat.position.is_pinned? 'Unpin from top' : 'Pin to top'}\n            </Menu.MenuItem>\n        </Menu.MenuContents>\n    );\n}\nChatContextMenu.propTypes = {\n    chat: PropTypes.object.isRequired\n};\n\nconst ArchivedChatsItem= connect(state=> ({archiveButtonState: state.archiveButtonState})) (function ArchivedChatsItem({chats, archiveButtonState}) {\n    const chatsInList = getChatsFromList(chats, {'@type': 'chatListArchive'});\n    if(!chatsInList.length) return null; // There are no archived chats\n\n    const ripple= React.useState({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave]= handleMyMouseEventsFunction(ripple);\n\n    function onArchiveOpen() {\n        chatStore.dispatch({\n            type: 'SET_ARCHIVE_STATE',\n            archiveState: 'open'\n        });\n    }\n\n    function setButtonState(state) {\n        chatStore.dispatch({\n            type: 'SET_ARCHIVE_BUTTON_STATE',\n            archiveButtonState: state\n        });\n    }\n\n    const moveToMainMenuToast= <Toast id=\"moveToMainMenuToast\" >\n        Archive moved to the main menu! <br/>\n        You can return it from the context menu of the archive button.\n    </Toast>;\n\n    switch(archiveButtonState) {\n    case 'expanded':\n    default:\n        return (\n            <div \n                className=\"chat archived\" onClick={onArchiveOpen}\n                onMouseDown={mouseDown} onMouseUp={mouseUp} onMouseLeave={mouseLeave}\n                onContextMenu={e=> createContextMenu(e, (\n                    <Menu.MenuContents>\n                        <Menu.MenuItem onClick={()=>{\n                            setButtonState('collapsed');\n                            localStorage.setItem('dibgram-archived-chats-button-mode', 'collapsed');\n                        }}>\n                            Collapse\n                        </Menu.MenuItem>\n                        <Menu.MenuItem onClick={()=>{\n                            setButtonState('hidden-expanded');\n                            localStorage.setItem('dibgram-archived-chats-button-mode', 'hidden-expanded');\n                            addDialog('moveToMainMenuToast', moveToMainMenuToast);\n                        }}>\n                            Move to main menu\n                        </Menu.MenuItem>\n                    </Menu.MenuContents>\n                ))}>\n                <RippleEffect {...ripple[0]} color=\"var(--theme-color-dialogsRippleBg)\"/>\n                <div className=\"content\">\n                    <div className=\"profile-photo\">\n                        <div className=\"svg\" dangerouslySetInnerHTML={{__html: archive_userpic}}/>\n                    </div>\n                    <div className=\"details\">\n                        <div className=\"top\">\n                            <div className=\"left\">\n                                <div className=\"title\">Archived chats</div>\n                            </div>\n                        </div>\n                        <div className=\"bottom\">\n                            <div className=\"left\">\n                                <div className=\"last-message\">\n                                    <span className=\"part-2\">\n                                        {chatsInList.map(chat => chat.title || 'Deleted Account').join(', ')}\n                                    </span>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n\n    case 'collapsed':\n        return (\n            <div\n                className=\"archived\" onClick={onArchiveOpen}\n                onMouseDown={mouseDown} onMouseUp={mouseUp} onMouseLeave={mouseLeave}\n                onContextMenu={e=> createContextMenu(e, (\n                    <Menu.MenuContents>\n                        <Menu.MenuItem onClick={()=>{\n                            setButtonState('expanded');\n                            localStorage.setItem('dibgram-archived-chats-button-mode', 'expanded');\n                        }}>\n                            Expand\n                        </Menu.MenuItem>\n                        <Menu.MenuItem onClick={()=>{\n                            setButtonState('hidden-collapsed');\n                            localStorage.setItem('dibgram-archived-chats-button-mode', 'hidden-collapsed');\n                            addDialog('moveToMainMenuToast', moveToMainMenuToast);\n                        }}>\n                            Move to main menu\n                        </Menu.MenuItem>\n                    </Menu.MenuContents>\n                ))}>\n                <RippleEffect {...ripple[0]} color=\"var(--theme-color-dialogsRippleBg)\"/>\n                <div className=\"content\">\n                    Archived chats\n                </div>\n            </div>\n        );\n    case 'hidden-expanded':\n    case 'hidden-collapsed':\n        return null;\n    }\n});\nArchivedChatsItem.propTypes = {\n    chats: PropTypes.array.isRequired\n};\n\nfunction EmptyChatList({list, connectionState}) {\n    if(connectionState!='connectionStateReady') {\n        return (\n            <div className=\"empty\">\n                <div>Loading...</div>\n            </div>\n        );\n    }\n    if(list['@type']=='chatListFilter'){\n        return (\n            <div className=\"empty\">\n                <div>No chats currently belong to this folder.</div>\n                <LinkButton>Edit Folder</LinkButton>\n            </div>\n        );\n    } else {\n        return (\n            <div className=\"empty\">\n                <div>Your chats will be here</div>\n                <LinkButton>New contact</LinkButton>\n            </div>\n        );\n    }\n}\n","import supergroupStore from './supergroup-store';\nimport usersStore from './users-store';\n\nexport function isChatWithDeletedAccount(chat) {\n    switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n    case 'chatTypeSupergroup':\n        return false;\n    \n    case 'chatTypeSecret':\n    case 'chatTypePrivate': \n        var user= usersStore.getState()?.[chat.type.user_id];\n        return user && user.type['@type'] === 'userTypeDeleted';\n    }\n    return false;\n}\n\nexport function isChatVerified(chat){\n    switch (chat.type['@type']) {\n    case 'chatTypeBasicGroup':\n        return false;\n\n    case 'chatTypeSupergroup':\n        var supergroup= supergroupStore.getState()?.[chat.type.supergroup_id];\n        return supergroup.is_verified;\n        \n    case 'chatTypeSecret':\n    case 'chatTypePrivate': \n        var user= usersStore.getState()?.[chat.type.user_id];\n        return user.is_verified;\n    }\n    return false;\n}","/**\n * Gets message sending status. Can return 3 values:\n * - `\"sending\"`: the message is outgoing and is being sent.\n * - `\"sent\"`: the message is outgoing and was sent.\n * - `\"seen\"`: the message is outgoing and was seen by the other party.\n * - `\"unread\"`: the message is incoming and was not seen by this party.\n * - `\"read\"`: the message is incoming and was seen by this party.\n * @param {import(\"tdweb\").TdObject} chat The chat in which the message was sent.\n * @param {import(\"tdweb\").TdObject} message The message to check.\n */\nexport function getMessageStatus(chat, message) {\n    if(!chat || !message) return undefined;\n    if(message.is_outgoing) {\n        if(message.sending_state) {\n            return 'sending';\n        }\n        if(chat.last_read_outbox_message_id >= message.id) {\n            return 'seen';\n        }\n        return 'sent';\n    }\n    if(chat.last_read_inbox_message_id >= message.id) {\n        return 'read';\n    }\n    return 'unread';\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './search-box.scss';\nimport { info_close } from '../../../../ui/icon/icons';\n\n/**\n * Renders the search box.\n */\nexport default function SearchBox(props) {\n    return (\n        <div id=\"search-box\">\n            <input \n                placeholder=\"Search\"\n                value={props.value}\n                onChange={props.onChange}\n                {...props}/>\n            <button \n                className=\"clear\" \n                onClick={()=> props.onChange && props.onChange({target: {value: ''}})}\n                data-visible={(props.value || '').length}\n                dangerouslySetInnerHTML={{__html: info_close}}>\n            </button>\n        </div>\n    );\n}\nSearchBox.propTypes= {\n    value: PropTypes.string,\n    onChange: PropTypes.func\n};","import { createStore } from 'redux';\nimport TdLib from './tdlib';\n\nconst connectionStore = createStore(\n    (state = 'connectionStateConnecting', action) => {\n        switch (action.type) {\n        case 'SET_CONNECTION':\n            return  action.connection;\n        default:\n            return state;\n        }\n    }\n);\n\nTdLib.registerUpdateHandler('updateConnectionState', (update) => {\n    connectionStore.dispatch({\n        type: 'SET_CONNECTION',\n        connection: update.state['@type']\n    });\n});\nexport default connectionStore;","import React from 'react';\nimport { connect, Provider } from 'react-redux';\nimport ConnectionState from '../../../ui/components/connecting';\nimport ChatList from './chat-list';\nimport SearchBox from './search/search-box';\nimport HamburgerMenuButton from './hamburger-menu/menu-button';\nimport connectionStore from '../../../TdWeb/connectionStore';\nimport IconButton from '../../../ui/elements/icon-button';\nimport './chat-list-bar.scss';\nimport { info_back } from '../../../ui/icon/icons';\nimport chatStore from '../../chat-store';\n\n/**\n * Renders the navigation menu, containing chat list, search field and search results, chat folders and the hamburger menu\n */\nconst ChatListBar = connect(function (state) {\n    return {\n        useFolders: (state.filters || []).length != 0,\n        chats: state.chats, \n        list: state.currentChatList,\n        archiveState: state.archiveState,\n    };\n})(function ChatListBar({useFolders, chats, list, archiveState, onHamburgerMenuOpened}) {\n    var [searchText, setSearchText] = React.useState('');\n    \n    function closeArchive() {\n        chatStore.dispatch({\n            type: 'SET_ARCHIVE_STATE',\n            archiveState: 'closing'\n        });\n        setTimeout(() => {\n            if(chatStore.getState().archiveState == 'closing') {\n                chatStore.dispatch({\n                    type: 'SET_ARCHIVE_STATE',\n                    archiveState: 'closed'\n                });\n            }\n        }, 2000);\n    }\n\n    return (\n        <div id=\"chat-list-bar\" className={archiveState == 'open' ? 'archive-open' : ''}>\n            <div className=\"chat-list-header\">\n                {(!useFolders) && <HamburgerMenuButton.WithoutFolders onClick={onHamburgerMenuOpened}/>}\n                <SearchBox value={searchText} onChange={e => setSearchText(e.target.value)}/>\n            </div>\n            <Provider store={connectionStore}>\n                <ChatList chats={chats} list={list}/>\n                {archiveState != 'closed' && (\n                    <div className=\"archived-chats\">\n                        <div className=\"chat-list-header\">\n                            <IconButton icon={info_back} onClick={closeArchive}/>\n                            <div className=\"title\">Archived chats</div>\n                        </div>\n                        <ChatList chats={chats} list={{'@type': 'chatListArchive'}}/>\n                    </div>\n                )}\n                <ConnectionState/>\n            </Provider>\n        </div>\n    );\n});\nexport default ChatListBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './menu.scss';\nimport TdLib from '../../../../TdWeb/tdlib';\nimport ProfilePhoto from '../../../../ui/components/profile-photo';\nimport { getChatsFromList } from '../chat-list';\nimport chatStore from '../../../chat-store';\nimport { archive_userpic } from '../../../../ui/icon/icons';\nimport { connect } from 'react-redux';\nimport { createContextMenu } from '../../../../ui/menu/context-menu';\nimport Menu from '../../../../ui/menu/menu';\n\nconst HamburgerMenu= connect(state=> ({\n    chats: state.chats,\n    archiveButtonState: state.archiveButtonState,\n})) (\n    function HamburgerMenu ({visible, onClose, chats, archiveButtonState}) {\n        const [me, setMe] = React.useState(null);\n        React.useEffect(() => {\n            TdLib.sendQuery({\n                '@type': 'getMe'\n            }).then(result => {\n                if(result.phone_number) {\n                    TdLib.sendQuery({\n                        '@type': 'getPhoneNumberInfo',\n                        phone_number_prefix: result.phone_number\n                    }).then(info => {\n                        result.phone_number= `+${info.country_calling_code} ${info.formatted_phone_number}`;\n                        setMe(result);\n                    });\n                } \n                else setMe(result);\n            });\n        }, []);\n\n        /**@type React.KeyboardEventHandler<HTMLDivElement> */\n        function onKeyDown (e){\n            if(e.key === 'Escape') {\n                onClose();\n            }\n        }\n        var ref = React.useRef(null);\n        React.useEffect(() => {\n            if(visible) {\n                ref.current.focus();\n            }\n        }, [visible]);\n\n        const showArchivedChats = getChatsFromList(chats, {'@type': 'chatListArchive'}).length > 0;\n\n        return (\n            <div id=\"hamburger-menu\" ref={ref} className={visible ? 'visible' : ''} \n                onKeyDown={onKeyDown} tabIndex={0}>\n                <div className=\"content\">\n                    <div className=\"header\">\n                        <div className=\"row-1\">\n                            <ProfilePhoto \n                                id={me?.id || 0} \n                                name={(me?.first_name || '') + (me?.last_name? (' ' + me.last_name) : '')} \n                                photo={me?.profile_photo?.small}\n                                disableSavedMessages={true}/>\n                            <div className=\"buttons\">\n                                {(showArchivedChats && (['hidden-collapsed', 'hidden-expanded'].includes(archiveButtonState))) && (\n                                    <button \n                                        className=\"button\" \n                                        dangerouslySetInnerHTML={{__html: archive_userpic}}\n                                        onClick={() => {\n                                            chatStore.dispatch({\n                                                type: 'SET_ARCHIVE_STATE',\n                                                archiveState: 'open'\n                                            });\n                                            onClose();\n                                        }}\n                                        onContextMenu={e=> createContextMenu(e, (\n                                            <Menu.MenuContents>\n                                                <Menu.MenuItem onClick={()=> {\n                                                    const newState= {'hidden-collapsed': 'collapsed', 'hidden-expanded': 'expanded'}[archiveButtonState];\n                                                    chatStore.dispatch({\n                                                        type: 'SET_ARCHIVE_BUTTON_STATE',\n                                                        archiveButtonState: newState\n                                                    });\n                                                    localStorage.setItem('dibgram-archived-chats-button-mode', newState);\n                                                    onClose();\n                                                }}>Move to chats list</Menu.MenuItem>\n                                            </Menu.MenuContents>\n                                        ))}/>\n                                )}\n                            </div>\n                        </div>\n                        <div className=\"row-2\">\n                            <div className=\"name\">\n                                {me?.first_name} {me?.last_name || ''}\n                            </div>\n                            <div className=\"phone-number\">\n                                {me?.phone_number}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"shadow\" onClick={onClose}></div>\n            </div>\n        );\n    });\nHamburgerMenu.propTypes = {\n    visible: PropTypes.bool.isRequired,\n    onClose: PropTypes.func\n};\nexport default HamburgerMenu;\n","import React from 'react';\nimport TdLib from '../TdWeb/tdlib';\nimport BigHighlightedButton from '../ui/elements/highlighted-button';\nimport ChatFoldersList from './sections/navigation-menu/chat-folders';\nimport ChatListBar from './sections/navigation-menu/chat-list-bar';\nimport chatStore from './chat-store';\nimport { Provider } from 'react-redux';\nimport './messengerWindow.scss';\nimport HamburgerMenu from './sections/navigation-menu/hamburger-menu/menu';\n\n/**\n * Renders the messenger screen\n */\nexport function MessengerWindow () {\n    function logOut() {\n        TdLib.sendQuery({\n            '@type': 'logOut'\n        });\n    }\n\n    const [isMenuOpen, setIsMenuOpen] = React.useState(false);\n\n    return (\n        <div id=\"messenger-screen\">\n            <Provider store={chatStore}>\n                <HamburgerMenu visible={isMenuOpen} onClose={()=> setIsMenuOpen(false)}/>\n                <ChatFoldersList onHamburgerMenuOpened={()=> setIsMenuOpen(true)}/>\n                <ChatListBar onHamburgerMenuOpened={()=> setIsMenuOpen(true)}/>\n            </Provider>\n            <div id=\"chat-container\">\n                This is messenger window. You&apos;ve authenticated successfully!\n                <BigHighlightedButton onClick={logOut}>Log out</BigHighlightedButton>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Renders a beautiful field with a title and underline\n */\nexport default class UnderlinedInput extends React.Component {\n    constructor(args) {\n        super(args);\n\n        this.state= {\n            inactive: false,\n            mouseX: '50%',\n            titleClass: this.getTitleClass(this.props.autoFocus)\n        };\n    }\n\n    getTitleClass (focus) {\n        return (focus || (!!this.props.value)) ? 'title top' : 'title placeholder';\n    }\n\n    render () {\n        var className='underlined-input';\n        if(this.state.inactive) {\n            className+=' inactive';\n        }\n        if(this.props.autoFocus) {\n            className+=' autoFocus';\n        }\n        if(this.props.invalid) {\n            className+=' invalid';\n        }\n        return (\n            <div className={className}\n                style={{'--mouse-left': this.state.mouseX || '50%'}}>\n                { this.props.title ? (\n                    <div className={this.state.titleClass}>{this.props.title}</div>\n                ) : null }\n                <input \n                    type={this.props.type} \n                    onChange={this.props.onChange} \n                    value={this.props.value}\n                    onMouseDown={this.handleMouseDown}\n                    onFocus={this.handleFocus}\n                    onBlur={this.handleBlur}\n                    autoFocus={this.props.autoFocus || false}\n                    onKeyDown={this.handleKeyDown}\n                    maxLength={this.props.maxLength}\n                    onCopy={e=> {\n                        if(this.props.disableCopy) {\n                            e.preventDefault();\n                        }\n                    }}/>\n                <div className=\"underline\"></div>\n            </div>\n        );\n    }\n\n    handleFocus =()=>{\n        this.setState({\n            inactive: false,\n            titleClass: this.getTitleClass(true)\n        });\n    }\n    handleBlur =()=>{\n        this.setState({\n            inactive: true, \n            mouseX: '50%',\n            titleClass: this.getTitleClass(false)\n        });\n    }\n    handleMouseDown =(e)=>{\n        this.setState({\n            mouseX: e.nativeEvent.offsetX+'px'\n        });\n    }\n    handleKeyDown =(e)=>{\n        if(e.key=='Enter') {\n            this.props.onEnterKeyPressed && this.props.onEnterKeyPressed();\n        }\n    }\n\n    static propTypes = {\n        type: PropTypes.oneOf(['text', 'number', 'password', 'email', 'url']).isRequired,\n        onChange: PropTypes.func,\n        value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        maxLength: PropTypes.number,\n        active: PropTypes.bool,\n        autoFocus: PropTypes.bool,\n        onEnterKeyPressed: PropTypes.func,\n        title: PropTypes.string,\n        invalid: PropTypes.bool,\n        disableCopy: PropTypes.bool,\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TdLib from '../TdWeb/tdlib';\nimport Auth from '../TdWeb/auth';\nimport {MessengerWindow} from '../messenger/messengerWindow';\n\nimport BigHighlightedButton from '../ui/elements/highlighted-button';\nimport UnderlinedInput from '../ui/elements/underlined-input';\nimport ConnectionState from '../ui/components/connecting';\nimport { addDialog } from '../ui/dialog/dialogs';\nimport ConfirmDialog from '../ui/dialog/confirm-dialog';\n\nimport './auth.scss';\nimport { Provider } from 'react-redux';\nimport connectionStore from '../TdWeb/connectionStore';\n\nvar initialAuthState = {'@type': undefined};\nexport function setInitialAuthState(state) {\n    initialAuthState=state;\n}\n\n/**\n * Start managing a status text block with fade effects.  \n * Usage:\n * ```js\n * manageStatusTextContent(this);\n * ```\n * \n * @param {React.Component} thisClass pass `this` as this argument\n * @returns Store this function and call it to change \n */\nfunction manageStatusTextContent(thisClass) {\n    thisClass.Status= function Status(){\n        return (\n            <div className={'status'+ (thisClass.state.statusVisible?'':' hidden')}>{thisClass.state.statusContent}</div>\n        );\n    };\n    thisClass.changeStatus= function(string){\n        if(string) {\n            thisClass.setState({\n                statusContent: string,\n                statusVisible: true\n            });\n        } else {\n            thisClass.setState({\n                statusVisible: false\n            });\n            setTimeout(() => {\n                thisClass.setState({\n                    statusContent: null\n                });\n            }, 1000);\n        }\n    };\n}\n\n/**\n * Renders the messenger or authorization screens. Does not include dialogs and toasts\n */\nexport class MainApp extends React.Component {\n    state= {\n        step: initialAuthState\n    };\n\n    componentDidMount(){\n        // eslint-disable-next-line no-func-assign\n        setInitialAuthState= state=> {\n            this.setState({step: state});\n        };\n\n        TdLib.registerUpdateHandler('updateAuthorizationState', this.handleAuthStateUpdate);\n    }\n\n    handleAuthStateUpdate= update => {\n        const states= [\n            'authorizationStateWaitPhoneNumber',\n            'authorizationStateWaitCode',\n            'authorizationStateWaitPassword',\n            'authorizationStateWaitRegistration',\n            'authorizationStateReady',\n            'authorizationStateClosed',\n        ];\n        const state=update['authorization_state'];\n        if(states.includes(state['@type'])) {\n            this.setState({step: state});\n        }\n    };\n    \n    render () {\n        switch (this.state.step['@type']) {\n        case 'authorizationStateWaitPhoneNumber':\n            return (\n                <AuthWindowStepPhoneNumber/>\n            );\n\n        case 'authorizationStateWaitCode':\n            return (\n                <AuthWindowStepCode info={this.state.step.code_info}/>\n            );\n\n        case 'authorizationStateWaitPassword':\n            return (\n                <AuthWindowStepPassword info={this.state.step}/>\n            );\n\n        case 'authorizationStateWaitRegistration':\n            return (\n                <AuthWindowStepRegister/>\n            );\n\n        case 'authorizationStateReady':\n            return (\n                <MessengerWindow/>\n            );\n\n        case 'authorizationStateClosed':\n            window.location.reload();\n            return (\n                <p>This session is closed. Please wait till DIBgram reloads automatically...</p>\n            );\n        \n        default:\n            return <p>Loading...</p>;\n        }\n    }\n}\n\n/**\n * Renders the phone number step of authorization screen\n */\nclass AuthWindowStepPhoneNumber extends React.Component {\n    constructor(args) {\n        super(args);\n        manageStatusTextContent(this);\n    }\n    state= {\n        number: '',\n        invalid: false,\n        statusContent: '',\n        statusVisible: false\n    };\n    handlePNFieldChange = (event) => {\n        this.setState({\n            number: event.target.value,\n            invalid: false\n        });\n        this.changeStatus('');\n    }\n    submitNumber= async () => {\n        Auth.givePhoneNumber(this.state.number).catch(reason=> {\n            switch(reason.message){\n            case 'PHONE_NUMBER_FLOOD':\n                addDialog( 'phone_number_flood_error',\n                    <ConfirmDialog width=\"320px\" hideCancelButton={true} id=\"phone_number_flood_error\">\n                        Sorry, you have deleted and re-created your account too many times recently.<br/>\n                        Please wait for a few days before signing up again.\n                    </ConfirmDialog>\n                );\n                this.changeStatus('');\n                break;\n            case 'PHONE_NUMBER_INVALID':\n                this.setState({invalid: true});\n                this.changeStatus('Invalid phone number. Please try again.');\n                \n                break;\n            case 'Another authorization query has started': \n                break;\n            default:\n                this.setState({invalid: false});\n                this.changeStatus(reason.message);\n                break;\n            }\n        });\n    }\n    render () {\n        const Status=this.Status;\n        return (\n            <div id=\"auth\" className=\"auth-step-phoneNumber\">\n\n                <h2>Your Phone Number</h2>\n\n                <p className=\"description\">\n                    Please confirm your country code and enter your mobile phone number.\n                </p>\n\n                <UnderlinedInput \n                    type=\"text\" \n                    value={this.state.number} \n                    autoFocus={true}\n                    onChange={this.handlePNFieldChange}\n                    onEnterKeyPressed={this.submitNumber}\n                    invalid={this.state.invalid}/>\n\n                <Status/>\n\n                <BigHighlightedButton \n                    onClick={this.submitNumber}>\n                    NEXT\n                </BigHighlightedButton>\n\n                <Provider store={connectionStore}>\n                    <ConnectionState/>\n                </Provider>\n            </div>\n        );\n    }\n}\n\n/**\n * Renders verification code step of authorization screen\n */\nclass AuthWindowStepCode extends React.Component {\n    static propTypes= {\n        info: PropTypes.object\n    };\n    constructor(args) {\n        super(args);\n        manageStatusTextContent(this);\n    }\n    state= {\n        code: '',\n        invalid: false,\n        statusContent: '',\n        statusVisible: false\n    };\n    handleCodeFieldChange= (event) => {\n        this.setState({\n            code: event.target.value,\n            invalid: false\n        });\n        this.changeStatus('');\n        if(event.target.value.length==this.props.info.type.length) {\n            this.handleContinueButton(event.target.value);\n        }\n    }\n    handleContinueButton= (code) => {\n        if(typeof code != 'string') {\n            code= undefined;\n        }\n        code = code || this.state.code;\n        if(code.length!=this.props.info.type.length) return;\n\n        Auth.checkAuthCode(code).catch(reason=> {\n            if(reason.message==='PHONE_CODE_INVALID'){\n                this.setState({invalid: true});\n                this.changeStatus('You have entered an invalid code.');\n            }\n            else {\n                this.setState({invalid: true});\n                this.changeStatus(reason.message);\n            }\n        });\n    }\n    render () {\n        const Status = this.Status;\n\n        var message= (this.props.info.type['@type']=='authenticationCodeTypeSms') ?\n            (<p className=\"description\">\n                We&apos;ve sent an activation code to your phone. <br/>\n                Please enter it below.\n            </p>) \n            :\n            (<p className=\"description\">\n                A code was sent <strong>via Telegram</strong> to your other devices, if you have any connected.\n            </p>);\n            \n        return (\n            <div id=\"auth\" className=\"auth-step-code\">\n\n                <h2>{this.props.info.phone_number}</h2>\n\n                {message}\n\n                <UnderlinedInput \n                    type=\"text\" \n                    value={this.state.code} \n                    onChange={this.handleCodeFieldChange}\n                    autoFocus={true}\n                    title=\"Code\"\n                    maxLength={this.props.info.type.length}\n                    onEnterKeyPressed={this.handleContinueButton}\n                    invalid={this.state.invalid}/>\n\n                <Status/>\n\n                <BigHighlightedButton \n                    onClick={this.handleContinueButton}>\n                    NEXT\n                </BigHighlightedButton>\n\n                <Provider store={connectionStore}>\n                    <ConnectionState/>\n                </Provider>\n            </div>\n        );\n    }\n}\n\n/**\n * Renders 2FA password step of authorization screen\n */\nclass AuthWindowStepPassword extends React.Component {\n    constructor(args) {\n        super(args);\n        manageStatusTextContent(this);\n    }\n    static propTypes= {\n        info: PropTypes.object\n    };\n    state= {\n        password: '',\n        invalid: false,\n        statusContent: '',\n        statusVisible: false\n    };\n    handlePasswordFieldChange= (event) => {\n        this.setState({\n            password: event.target.value,\n            invalid: false,\n        });\n        this.changeStatus('');\n    }\n    handleContinueButton= async () => {\n        Auth.check2FACode(this.state.password).catch(reason=> {\n            if(reason.message=='PASSWORD_HASH_INVALID') {\n                this.setState({invalid: true});\n                this.changeStatus('You have entered a wrong password.');\n            }\n            else {\n                this.setState({invalid: true});\n                this.changeStatus(reason.message);\n            }\n        });\n    }\n    render () {\n        const Status=this.Status;\n        return (\n            <div id=\"auth\" className=\"auth-step-password\">\n                <div className=\"content\">\n\n                    <h2>Cloud password check</h2>\n\n                    <p className=\"description\">\n                        Please enter your cloud password.\n                    </p>\n\n                    <UnderlinedInput \n                        type={'webkitTextSecurity' in document.body.style ? 'text' : 'password'} \n                        value={this.state.password} \n                        onChange={this.handlePasswordFieldChange}\n                        autoFocus={true} \n                        title=\"Your cloud password\"\n                        onEnterKeyPressed={this.handleContinueButton}\n                        disableCopy={true}\n                        invalid={this.state.invalid}/>\n\n                    <div className=\"hint\">\n                        {this.props.info.password_hint?'Hint: ':<span>&nbsp;</span>}{this.props.info.password_hint}\n                    </div>\n\n                    <div className=\"forgot-password\">\n                        <a href=\"#\">Forgot password?</a>\n                    </div>\n\n                    <Status/>\n\n                    <BigHighlightedButton \n                        onClick={this.handleContinueButton}>\n                        SUBMIT\n                    </BigHighlightedButton>\n\n                    <Provider store={connectionStore}>\n                        <ConnectionState/>\n                    </Provider>\n                </div>\n            </div>\n        );\n    }\n}\n\n/**\n * Render sign up step of authorization screen\n */\nclass AuthWindowStepRegister extends React.Component {\n    state= {\n        firstName: '',\n        lastName: '',\n        statusContent: '',\n        statusVisible: false\n    };\n    handleFirstNameFieldChange= (event) => {\n        this.setState({firstName: event.target.value});\n    }\n    handleLastNameFieldChange= (event) => {\n        this.setState({lastName: event.target.value});\n    }\n    handleContinueButton= async () => {\n        await Auth.registerNewAccount(this.state.firstName, this.state.lastName).catch(reason=> {\n            this.setState({textUnderField: reason.message});\n        });\n    }\n    render () {\n        return (\n            <div id=\"auth\" className=\"auth-step-signup\">\n                <div className=\"content\">\n\n                    <h2>Your info</h2>\n\n                    <p className=\"description\">\n                        Please enter your name and upload a photo.\n                    </p>\n\n                    <UnderlinedInput \n                        type=\"text\" \n                        value={this.state.firstName} \n                        onChange={this.handleFirstNameFieldChange}\n                        autoFocus={true} />\n\n                    <UnderlinedInput \n                        type=\"text\" \n                        value={this.state.lastName} \n                        onChange={this.handleLastNameFieldChange} />\n\n                    <div className=\"status\">\n                        {this.state.textUnderField || ''}\n                    </div>\n\n                    <BigHighlightedButton \n                        onClick={this.handleContinueButton}>\n                        SIGN UP\n                    </BigHighlightedButton>\n\n                    <Provider store={connectionStore}>\n                        <ConnectionState/>\n                    </Provider>\n                </div>\n            </div>\n        );\n    }\n}\n","// DIBgram themes are converted to CSS in runtime here.\n\nexport function convertThemeToCSS(theme){\n    var css={};\n    for(const name in theme){\n        var obj= theme[name];\n        if(typeof obj.value == 'string') {\n            css['--theme-color-' + name]= obj.value;\n        } else if(typeof obj.value == 'object') {\n            css['--theme-color-' + name]= `var(--theme-color-${obj.value.equals})`;\n        }\n    }\n    return css;\n}","import React from 'react';\nimport classic from './classic.json';\nimport day from './day.json';\nimport tinted from './tinted.json';\nimport night from './night.json';\nimport { convertThemeToCSS } from './dibgram-theme-to-css';\n\nconst themes = { day, classic, tinted, night };\nexport var currentTheme= 'night';\n\nexport function ThemeProvider(props) {\n    return (\n        <div \n            data-theme-is-dark={isThemeDark}\n            {...props} \n            style={convertThemeToCSS({...classic, ...themes[currentTheme]})}\n        />\n    );\n}\n\nconst isThemeDark=themes[currentTheme].isDark.value;\nexport {isThemeDark};","import React from 'react';\nimport { Provider } from 'react-redux';\nimport {MainApp, setInitialAuthState} from './dibgram/auth/auth-screen';\nimport TdLib from './dibgram/TdWeb/tdlib';\nimport ConfirmDialog from './dibgram/ui/dialog/confirm-dialog';\nimport Dialogs, {dialogStore, addDialog} from './dibgram/ui/dialog/dialogs';\nimport './dibgram/ui/main.scss';\nimport { ContextMenus, contextMenusStore, onAnywhereClicked } from './dibgram/ui/menu/context-menu';\nimport { ThemeProvider } from './dibgram/ui/themes/theme';\n\nTdLib.initializeTdLib().then(function (res) {\n    setInitialAuthState(res);\n});\n\n/**\n * Renders the whole React app\n */\nfunction App() {\n    React.useEffect(() => {\n        TdLib.registerUpdateHandler('updateFatalError', window.simulateFatalError=  function (update) {\n            console.error('Fatal error:', update.error);\n            \n            addDialog( 'tdlib_fatal_error',\n                <ConfirmDialog \n                    width=\"400px\" \n                    hideCancelButton={true} \n                    id=\"tdlib_fatal_error\" \n                    thirdButton=\"Refresh\"\n                    onThirdButtonClick={window.location.reload.bind(window.location)}\n                    thirdButtonClosesDialog={false}\n                    title=\"Fatal Error\">\n                    \n                    A fatal error occurred in TdLib.<br/> \n                    Try refreshing, clearing site data or opening \n                    DIBgram in a private window. <br/>\n                    If none of these helped, report this to the developers \n                    by <a href=\"https://github.com/DIBgram/DIBgram/issues/new/choose\" rel=\"noreferrer\" target=\"_blank\"\n                        style={{color: 'var(--theme-color-windowActiveTextFg)'}}>filing an issue.</a>\n                    <br/><br/>\n                    <pre>{update.error.toString()}</pre>\n                </ConfirmDialog>\n            );\n        });\n    }, []);\n\n    return (\n        <ThemeProvider id=\"app\" onClick={onAnywhereClicked}>\n            <Provider store={dialogStore}>\n                <Dialogs/>\n            </Provider>\n            <MainApp/>\n            <Provider store={contextMenusStore}>\n                <ContextMenus/>\n            </Provider>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","import './remove-item-from-array';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}