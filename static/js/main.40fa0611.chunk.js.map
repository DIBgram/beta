{"version":3,"sources":["dibgram/language-pack/special-strings lazy /^/.//.*/.json$/ groupOptions: {} namespace object","remove-item-from-array.js","dibgram/TdWeb/tdlib.ts","dibgram/TdWeb/tdweb.js","dibgram/TdWeb/config.js","dibgram/ui/icon/chat_filters/chat-filters.ts","dibgram/ui/elements/ripple-effect.tsx","dibgram/ui/elements/icon-button.tsx","dibgram/ui/icon/icons.ts","dibgram/messenger/sections/navigation-menu/hamburger-menu/menu-button.tsx","dibgram/messenger/chat-store.ts","dibgram/ui/scroll/scrollbar.tsx","dibgram/language-pack/string-format.tsx","dibgram/language-pack/language-pack.ts","dibgram/messenger/sections/navigation-menu/chat-folders.tsx","dibgram/ui/elements/loading-spinner.tsx","dibgram/ui/components/connecting.tsx","dibgram/messenger/users-store.ts","dibgram/ui/elements/link-button.tsx","dibgram/messenger/supergroup-store.ts","dibgram/messenger/chat-misc.ts","dibgram/ui/menu/context-menu.tsx","dibgram/ui/menu/menu.tsx","dibgram/ui/dialog/toast.tsx","dibgram/TdWeb/options.ts","dibgram/messenger/message-misc.ts","dibgram/TdWeb/file.ts","dibgram/ui/img/TgLogo.png","dibgram/ui/components/profile-photo.tsx","dibgram/time-tostring.ts","dibgram/messenger/sections/payments/currency-tostring.tsx","dibgram/messenger/user-misc.ts","dibgram/ui/elements/small-button.tsx","dibgram/ui/dialog/dialogs.tsx","dibgram/ui/dialog/dialog.tsx","dibgram/ui/dialog/confirm-dialog.tsx","dibgram/messenger/message/ui/entities.tsx","dibgram/messenger/message/message-pinned-message.tsx","dibgram/messenger/message/message-summary-noicon.tsx","dibgram/ui/icon/menu/menu.tsx","dibgram/messenger/sections/navigation-menu/chat-list-item.tsx","dibgram/messenger/sections/navigation-menu/chat-list.tsx","dibgram/messenger/sections/navigation-menu/search/search-box.tsx","dibgram/TdWeb/connectionStore.ts","dibgram/ui/elements/nav-animation.tsx","dibgram/messenger/sections/navigation-menu/chat-list-bar.tsx","version.ts","dibgram/ui/tool-strip/button.tsx","dibgram/ui/tool-strip/tool-strip.ts","dibgram/ui/tool-strip/section.tsx","dibgram/ui/tool-strip/toggle-button.tsx","dibgram/ui/tool-strip/separator.tsx","dibgram/ui/themes/dibgram-theme-to-css.ts","dibgram/ui/themes/theme.tsx","dibgram/ui/menu/three-dots-menu.tsx","dibgram/ui/dialog/search.tsx","dibgram/messenger/sections/settings/choose-language.tsx","dibgram/messenger/sections/settings/advanced/advanced.tsx","dibgram/messenger/sections/settings/settings-dialog.tsx","dibgram/messenger/sections/navigation-menu/hamburger-menu/menu.tsx","dibgram/messenger/message-store.ts","dibgram/messenger/message/message-summary-withicon.tsx","dibgram/messenger/message/ui/message-containers.tsx","dibgram/messenger/sections/chat/headers/title.tsx","dibgram/messenger/basic-group-store.ts","dibgram/messenger/sections/chat/footer/compose-button.tsx","dibgram/messenger/sections/chat/footer/footer.tsx","dibgram/messenger/users-wrapper.tsx","dibgram/messenger/message/ui/types/messageText.tsx","dibgram/messenger/message/ui/types/messageUnsupported.tsx","dibgram/messenger/message/ui/message.tsx","dibgram/messenger/message/ui/types/messageExpiredPhoto.tsx","dibgram/messenger/message/ui/types/messageExpiredVideo.tsx","dibgram/messenger/message/ui/types/messageVideoChatScheduled.tsx","dibgram/messenger/message/ui/types/messageVideoChatStarted.tsx","dibgram/messenger/message/ui/types/messageVideoChatEnded.tsx","dibgram/messenger/message/ui/types/messageInviteVideoChatParticipants.tsx","dibgram/messenger/message/ui/types/messageBasicGroupChatCreate.tsx","dibgram/messenger/message/ui/types/messageSupergroupChatCreate.tsx","dibgram/messenger/message/ui/types/messageChatChangeTitle.tsx","dibgram/messenger/message/ui/types/messageChatDeletePhoto.tsx","dibgram/messenger/message/ui/types/messageChatAddMembers.tsx","dibgram/messenger/message/ui/types/messageChatJoinByLink.tsx","dibgram/messenger/message/ui/types/messageChatJoinByRequest.tsx","dibgram/messenger/message/ui/types/messageChatDeleteMember.tsx","dibgram/messenger/message/ui/types/messagePinMessage.tsx","dibgram/messenger/message/ui/types/messageChatSetTheme.tsx","dibgram/messenger/message/ui/types/messageChatSetTtl.tsx","dibgram/messenger/message/ui/types/messageCustomServiceAction.tsx","dibgram/messenger/message/ui/types/messageGameScore.tsx","dibgram/messenger/message/ui/types/messagePaymentSuccessful.tsx","dibgram/messenger/message/ui/types/messageContactRegistered.tsx","dibgram/messenger/message/ui/types/messageWebsiteConnected.tsx","dibgram/messenger/message/ui/types/messagePassportDataSent.tsx","dibgram/messenger/message/chat-history.ts","dibgram/messenger/message/message-is-service.ts","dibgram/ui/elements/outline-button.tsx","dibgram/messenger/message/ui/types/sponsored.tsx","dibgram/messenger/sections/chat/history/history.tsx","dibgram/messenger/message/processHistory.ts","dibgram/messenger/sections/chat/chat-section.tsx","dibgram/messenger/messengerWindow.tsx","dibgram/TdWeb/auth.ts","dibgram/ui/elements/highlighted-button.tsx","dibgram/ui/elements/underlined-input.tsx","dibgram/auth/auth-step/phone-number/country-select.tsx","dibgram/auth/auth-step/phone-number/phone-number.tsx","dibgram/auth/auth-step/verification-code/verification-code.js","dibgram/auth/auth-step/cloud-password/cloud-password.tsx","dibgram/auth/auth-step/register/signup-profile-photo.tsx","dibgram/auth/auth-step/register/register.tsx","dibgram/auth/auth-screen.tsx","dibgram/TdWeb/online-handler.ts","App.tsx","serviceWorkerRegistration.js","index.tsx"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","t","keys","Object","module","exports","removeItemFromArray","item","i","this","length","splice","Array","prototype","remove","getUseTestDc","urlPar","URL","window","location","href","searchParams","get","TdLib","op","log","use_test_dc","log_updates","log_queries","useDatabase","instanceName","onUpdate","update","console","forEach","h","TdClient","sendQuery","type","handler","undefined","push","call","query","reject","send","result","error","warn","chatFilerIcons","All","Bots","Channels","Custom","Groups","Private","Setup","Unread","Cat","Crown","Favorite","Flower","Game","Home","Love","Mask","Party","Sport","Study","Trade","Travel","Work","RippleEffect","props","small","X","Y","width","rX","rY","height","Math","hypot","abs","max","state","className","style","getMaxRadius","backgroundColor","color","React","Component","getRelativeCoordinates","event","rect","target","getBoundingClientRect","clientX","left","clientY","top","handleMyMouseEvents","This","ripple","setState","setTimeout","clientWidth","clientHeight","bind","mouseUp","handleMyMouseEventsFunction","setRipple","up","nativeEvent","offsetX","offsetY","IconButton","icon","rest","useState","onMouseDown","onMouseUp","onMouseLeave","dangerouslySetInnerHTML","__html","archive_userpic","dialogs_sending","history_to_down","info_back","info_close","HamburgerMenuButton","WithFolders","mouseDown","mouseLeave","onClick","PureComponent","WithoutFolders","chatStore","createStore","currentChatList","archiveState","archiveButtonState","localStorage","getItem","chats","filters","selectedChat","unread","main","archive","action","chatList","chat_list","unread_messages_count","unread_count","unread_unmuted_messages_count","unread_unmuted_count","chat_filter_id","total_chats_count","total_count","unread_chats_count","unread_unmuted_chats_count","marked_as_unread_chats_count","marked_as_unread_count","marked_as_unread_unmuted_chats_count","marked_as_unread_unmuted_count","chat","chat_id","changed","newChat","positions","position","compareChatList","list","payload","property","value","__REDUX_DEVTOOLS_EXTENSION__","registerUpdateHandler","dispatch","action_bar","default_disable_notification","draft_message","chat_filters","has_scheduled_messages","is_blocked","is_marked_as_unread","last_message","message_ttl","notification_settings","permissions","photo","last_read_inbox_message_id","last_read_outbox_message_id","reply_markup_message_id","theme_name","title","unread_mention_count","pending_join_requests","video_chat","message_sender_id","has_protected_content","list1","list2","getChatNoCache","getState","ScrollView","scrollBarWidth","scrollRef","scrollAlwaysVisible","propsRest","mouseEntered","setMouseEntered","timeoutId","setTimeoutId","data-mouse-entered","renderTrackHorizontal","renderTrackVertical","renderThumbHorizontal","renderThumbVertical","onMouseEnter","clearTimeout","autoHide","data-auto-hide","autoHideTimeout","hideTracksWhenNotNeeded","ref","applyKeys","index","Fragment","getFormattedText","text","useFragments","formatted","applyFormatting","format","res","includes","indexOf","test","execed","exec","formatString","params","formatChunkedString","chunk","flat","getCountMode","count","getPluralString","mode","callback","currentLanguagePack","specialStrings","specialStringsEnglish","getCurrentLanguagePack","englishIsDefault","json","JSON","parse","base_language_pack_id","is_beta","is_installed","is_official","is_rtl","local_string_count","name","native_name","plural_code","total_string_count","translated_string_count","translation_url","getRtlMode","__","key","languagePackString","languagePack","englishLanguagePack","__fmt","string","__pl","pluralized","pluralizedString","__collection","isInvite","users","usesReact","getLPString","formatLast","user","accumulated","join","_s__","_s__fmt","chatListScrollToTopEvent","ChatFolder","folder","active","icon_name","iconName","setIconName","useEffect","ic","Number","data-muted","connect","folders","currentFolder","onHamburgerMenuOpened","LoadingSpinner","percentage","intervalNum","percent","caps","trackColor","spin","transitionDuration","setInterval","clearInterval","progressColor","size","lineWidth","usersStore","userId","status","user_id","LinkButton","children","click","open","supergroupStore","supergroup","isChatWithDeletedAccount","chatTitleOrDeletedAccount","ContextMenu","x","y","direction","setDirection","hide","setHide","useRef","handleMouseDown","contextMenusStore","current","document","documentElement","classList","contains","menu","ContextMenus","menus","createContextMenu","preventDefault","pageX","pageY","Menu","MenuContents","MenuItem","Toast","closed","setClosed","addToast","toastStore","toast","Toasts","options","getMessageStatus","message","is_outgoing","sending_state","downloadFile","file_id","priority","onReject","catch","downloadCallbacks","file","local","is_downloading_completed","cachedFiles","blobToUrl","blob","webkitURL","createObjectURL","profileNameToInitials","words","replace","toUpperCase","split","ProfilePhoto","customIcon","setPhoto","photoObj","setPhotoObj","loaded","setLoaded","isServiceMessages","isSavedMessages","isReplies","mounted","enableCache","data","resolveFilePart","filePart","f","is_downloading_active","getFileContent","disableSavedMessages","tgLogo","Initials","onLoad","src","getIdColorCode","getChatTypeId","supergroup_id","basic_group_id","smallDateTimeToString","date","TdLibDateToDate","now","Date","yesterday","getTime","lastWeek","timeToString","getDay","weekdayToString","day","getDate","month","getMonth","year","String","getFullYear","dateToString","hours","getHours","minutes","getMinutes","am_pm","futureDayToString","today","tomorrow","durationToString","duration","floor","lastSeenToString","lastSeen","was_online","diff","diffMinutes","diffHours","currentDate","lastSeenDate","time","toLocaleTimeString","toLocaleDateString","tdLibDate","currencyAmountToString","currency","total_amount","currencies","symbol","thousands_sep","decimal_sep","symbol_left","space_between","exp","formattedAmount","toFixed","getUserFullName","first_name","last_name","SmallButton","attention","data-attention","dialogStore","dialog","filter","addDialog","element","removeDialog","Dialogs","dialogs","data-dialog","el","Dialog","closing","createRef","close","ConfirmDialog","dialogRef","handleOK","onOK","handleCancel","onCancel","handleButton","largeFont","thirdButton","thirdButtonClosesDialog","onThirdButtonClick","hideCancelButton","OKButtonText","maybeDeleteNewLines","str","doIt","compileEntities","singleLine","last","entities","entity","offset","getEntityJsx","innerText","SpoilerEntity","url","viewed","setViewed","MessaagePinnedMessage","from","content","media","emoji","game","poll","question","sticker","ctext","MessageSummaryWithoutIcon","MayHaveCaption","caption","audio","file_name","performer","SenderFullName","discard_reason","is_video","MessageSummarySender","sender_id","member_user_ids","newMembers","is_channel_post","deletedMember","ServiceMessageIncludingYou","lpString","lpString_you","ttlTimeUnit","86400","604800","2678400","ttl","MayHaveCaptionThumbnail","thumbnails","minithumbnail","noGameTitleFallback","score","GameScoreWithTitle","lazy","message_id","game_message_id","default","Suspense","fallback","passportDataTypeToString","passportDataTypes","types","toLowerCase","documents","noInvoiceTitleFallback","amount","PaymentInfoWithInvoiceTitle","invoice_chat_id","invoice_message_id","invoice","is_secret","PinnedMessageMessage","venue","isVideo","video","start_date","invitedMembers","user_ids","domain","domain_name","includeYou","sender","part1","menu_move_to_menu","ChatListItem","openChat","nextProps","nextState","getUser","is_pinned","selected","chatType","is_channel","isVerified","is_verified","isChatVerified","messageStatus","unreadBadge","unreadBadgeClass","mute_for","isOnline","onContextMenu","ChatContextMenu","data-online","input_message_text","Chat","movableChatLists","setMovableChatLists","chat_lists","getChatsFromList","order","sort","a","b","order1","order2","ChatList","connectionState","scrollToTopVisible","chatListFinished","onScroll","visible","scrollTop","scrollToTop","view","scroll","behavior","array","store","EmptyChatList","ArchivedChatsItem","chatsInList","onArchiveOpen","setButtonState","moveToMainMenuToast","setItem","loadingFallBack","SearchBox","placeholder","onChange","data-visible","connectionStore","connection","NavAnimation","innerScreen","innerClass","closeNavAnimation","ChatListBar","useFolders","searchText","setSearchText","ArchiveScreen","closeArchive","ToolStripButton","hideIcon","ToolStrip","Button","Section","ToggleButton","isActive","checked","readOnly","Separator","convertThemeToCSS","theme","css","obj","equals","themes","classic","tinted","night","getThemeFromStorage","matchMedia","matches","themeStore","rtl","ThemeProvider","dir","data-theme-is-dark","isDark","ThreeDotsMenu","setVisible","BoxSearch","ChooseLanguageDialog","languages","setLanguages","search","setSearch","country","startsWith","response","language_packs","currentPack","pack","LanguagePack","specialStringsImport","cache","apply","stringify","reload","language_pack_id","strings","selectLanguage","SettingsAdvanced","onClose","onBack","enableRtl","setEnableRtl","SettingsDialog","navState","setNavState","section","setSection","profile_photo","HamburgerMenu","me","setMe","phone_number","phone_number_prefix","info","country_calling_code","formatted_phone_number","nightMode","setNightMode","focus","showArchivedChats","onKeyDown","tabIndex","newState","isNight","version","tdlib","gpl_link","github_link","faq_link","defaultMessageStoreState","messages","messageStore","messageId","messageIds","reduce","MessageSummaryWithIcon","ServiceMessageBubble","ServiceMessage","MessageBubble","beforeBubble","showTail","BubbleMessage","senderId","usesPhoto","hide_tail","hide_sender_name","via_bot_user_id","inline_bot","username","reply_to_message_id","MessageReplyTo","MessageFooter","tick","replyMessage","setReplyMessage","rMessage","reply_in_chat_id","requestHandler","TitleHeader","singleColumnLayout","SubText","group_call_id","can_be_reported","basicGroup","member_count","is_support","basicGroupStore","basic_group","ComposeButton","ChatFooter","withUsers","WrappedComponent","MessageText","messageContent","BubbleMsg","can_be_saved","MessageUnsupported","messageTypes","pinnedMessage","setPinnedMessage","handleMessageQuery","pmessage","gameMessage","setGameMessage","gmessage","invoiceMessage","setInvoiceMessage","imessage","Message","memo","MessageComponent","old_message_id","message_ids","new_content","edit_date","reply_markup","interaction_info","serviceMessages","messageIsService","OutlineButton","SponsoredMessage","viewport","sponsor_chat_id","observer","IntersectionObserver","entries","isIntersecting","disconnect","root","threshold","observe","ChatHistory","upperEndDetectorRef","lowerEndDetectorRef","prev","prevEl","processedType","processMessageHistory","sponsoredMessage","setSponsoredMessage","setObserver","currentlyLoading","setCurrentlyLoading","upperEndDetectorVisible","setUpperEndDetectorVisible","lowerEndDetectorVisible","setLowerEndDetectorVisible","reachedEndTop","setReachedEndTop","setReachedEndBottom","ob","entry","chatId","fromMessageId","limit","from_message_id","loadChatHistory","jumpToDownVisible","setJumpToDownVisible","Message2","ChatSection","c","ChatSectionContentWrapperPrivate","ChatSectionContentWrapper","ChatSectionContentWrapperBasicGroup","basicGroups","ChatSectionContentWrapperSupergroup","supergroups","MessengerWindow","isMenuOpen","setIsMenuOpen","useSingleLayout","setUseSingleLayout","check","wid","Infinity","addEventListener","defaultSize","minWidth","handleClasses","right","enable","bottom","topRight","bottomRight","bottomLeft","topLeft","SingleLevel","credentials","api_id","api_hash","auth_state","Auth","number","pass","first","BigHighlightedButton","UnderlinedInput","args","handleFocus","inactive","titleClass","getTitleClass","handleBlur","mouseX","handleKeyDown","onEnterKeyPressed","preventNumberScrolling","autoFocus","invalid","iRef","onFocus","onBlur","maxLength","onCopy","disableCopy","CountrySelect","countries","is_hidden","CountrySelectItem","calling_codes","country_code","english_name","AuthWindowStepPhoneNumber","number_p","statusContent","statusVisible","dropDownText","changeStatus","Status","ref1","ref2","handlePNFieldChange","openCountryDropdown","cc","getCountryDropdownText","handlePNFieldChange_p","callingCodes","callingCode","value_new","submitNumber","givePhoneNumber","reason","manageStatusTextContent","countryName","AuthWindowStepCode","handleCodeFieldChange","handleContinueButton","checkAuthCode","AuthWindowStepPassword","password","handlePasswordFieldChange","check2FACode","password_hint","SignUpProfilePic","image","alt","accept","AuthWindowStepRegister","firstName","lastName","textUnderField","handleFirstNameFieldChange","handleLastNameFieldChange","registerNewAccount","showTos","tos","files","link","authStore","thisClass","MainApp","step","authorization_state","code_info","terms_of_service","onfocus","onblur","initializeTdLib","hasFocus","languageInfo","specialStringsCache","initLanguagePack","App","rel","toString","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onSuccess","ReactDOM","render","StrictMode","getElementById","process","origin","fetch","headers","contentType","ready","unregister","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.40fa0611.chunk.js","sourcesContent":["var map = {\n\t\"./be.json\": [\n\t\t111,\n\t\t3\n\t],\n\t\"./ca.json\": [\n\t\t112,\n\t\t4\n\t],\n\t\"./de.json\": [\n\t\t113,\n\t\t5\n\t],\n\t\"./en.json\": [\n\t\t22\n\t],\n\t\"./es.json\": [\n\t\t114,\n\t\t6\n\t],\n\t\"./fr.json\": [\n\t\t115,\n\t\t7\n\t],\n\t\"./it.json\": [\n\t\t116,\n\t\t8\n\t],\n\t\"./ko.json\": [\n\t\t117,\n\t\t9\n\t],\n\t\"./ms.json\": [\n\t\t118,\n\t\t10\n\t],\n\t\"./nl.json\": [\n\t\t119,\n\t\t11\n\t],\n\t\"./pl.json\": [\n\t\t120,\n\t\t12\n\t],\n\t\"./pt-br.json\": [\n\t\t121,\n\t\t13\n\t],\n\t\"./ru.json\": [\n\t\t122,\n\t\t14\n\t],\n\t\"./tr.json\": [\n\t\t123,\n\t\t15\n\t],\n\t\"./uk.json\": [\n\t\t124,\n\t\t16\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__.t(id, 3);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 92;\nmodule.exports = webpackAsyncContext;","// https://love2dev.com/blog/javascript-remove-from-array/#remove-from-array-splice\n/**\n * Removes an item from an array\n * @param {*} item The item to remove\n */\nexport default function removeItemFromArray(item) {\n    for( var i = 0; i < this.length; i++){ \n        if ( this[i] === item) { \n            this.splice(i, 1); \n        }\n    }\n}\n\nArray.prototype.remove= removeItemFromArray;","/* eslint-disable */\nimport { createTdClient } from './tdweb';\nimport {getConfig} from './config';\nimport TdApi from './td_api';\nimport removeItemFromArray from '../../remove-item-from-array';\nexport function getUseTestDc() {\n    var urlPar=new URL(window.location.href).searchParams.get('test');\n    if(urlPar){\n        return urlPar==='1' || urlPar==='true';\n    }\n    return false;\n}\n\nexport function getCurrentSessionId() {\n    return new URL(window.location.href).searchParams.get('account') || '1';\n}\n\n/**\n * Provides options to communicate with the Tdweb library\n */\nexport default class TdLib {\n    static #tdClient: any;\n    /** @type {[string: Array<Function>]} */\n    static #updateHandlers: {[key: string]: ((update: any) => void)[]}={};\n\n    /**\n     * Creates the instance of Tdweb\n     */\n    static initializeTdLib() {\n        const {log}= getConfig();\n        TdLib.#tdClient= createTdClient({\n            useDatabase: true,\n            instanceName: ( getCurrentSessionId() ) + (getUseTestDc() ? 'test' : 'production'), // e.g. ?account=1&test=1 = '1test' or ?account=1&test=0 = '1production'\n            onUpdate: function (update: TdApi.td_Update) {\n                if(log.log_updates) {\n                    console.log('Update: ',update);\n                }\n                if(TdLib.#updateHandlers[update['@type']]){\n                    TdLib.#updateHandlers[update['@type']].forEach(h => h(update));\n                }\n            }\n        });\n        return TdLib.sendQuery({'@type': 'getAuthorizationState'}); // It both starts TDLib and returns the authorization state\n    }\n\n    /**\n     * Listen for updates from TdLib\n     * @param type The type of the update to listen to. Look for TdLib API docs for types\n     * @param handler The function that gets called with the update object when the update is received\n     */\n    static registerUpdateHandler<T extends TdApi.td_Update>(type: TdApi.TdUpdateType<T>, handler: (update: T) => void): void {\n        if(TdLib.#updateHandlers[type]===undefined){\n            TdLib.#updateHandlers[type]= [];\n        }\n        TdLib.#updateHandlers[type].push(handler);\n    }\n\n    /**\n     * Remove an existing update handler\n     * @param {string} type The type of the update to remove handler from. Look for TdLib API docs for types\n     * @param {Function} handler The handler to remove\n     */\n    static unRegisterUpdateHandler<T extends TdApi.td_Update>(type: TdApi.TdUpdateType<T>, handler: (update: T) => void): void {\n        if(TdLib.#updateHandlers[type]===undefined){\n            return;\n        }\n        removeItemFromArray.call(TdLib.#updateHandlers[type], handler);\n    }\n\n    /**\n     * Send a request to the TdLib instance\n     * If the query contains an `@extra` field, the same field will be added to the result\n     * @param query The request to send. Consult TdLib & JSON interface API for help.\n     * @returns The result of the request\n     */\n    static sendQuery<T extends TdApi.TdFunction>(query: T): Promise<TdApi.TdFunctionReturn<T> | TdApi.td_Error> {\n        const {log}= getConfig();\n        if(log.log_queries && query['@type']!=='setTdlibParameters') {\n            console.log('Query: ',query);\n        }\n        return new Promise((resolve, reject) => {\n            TdLib.#tdClient.send(query).then((result: TdApi.TdFunctionReturn<T>)=> {\n                if(log.log_queries) {\n                    console.log('Query result: ', result);\n                }\n                resolve(result);\n            }, (error: TdApi.td_Error)=> {\n                if(log.log_queries) {\n                    console.warn('Query failed: ', error);\n                }\n                reject(error);\n            }\n            );\n        });\n    }\n}","import TdClient from '@dibgram/tdweb';\n\n// This file is created to workaround a TypeScript error.\n\nexport function createTdClient(op) {\n    return new TdClient(op);\n}","export function getCredentials() {return {api_id: 3022678,api_hash: 'd7b7676a82906a6182f4a5e5e9555673'};}export function getConfig() {return {use_test_dc: false,log: {log_updates: true,log_queries: true}};}\n","// All icons are from Telegram Desktop, converted to SVG using https://pngtosvg.com/\n\nimport raw from 'raw.macro';\n\nconst chatFilerIcons: {\n    [key: string]: [string, string] | [string];\n} = {\n    All     : [raw('./all.svg'     ), raw('./all_active.svg'     )],\n    Bots    : [raw('./bots.svg'    ), raw('./bots_active.svg'    )],\n    Channels: [raw('./channels.svg'), raw('./channels_active.svg')],\n    Custom  : [raw('./custom.svg'  ), raw('./custom_active.svg'  )],\n    Groups  : [raw('./groups.svg'  ), raw('./groups_active.svg'  )],\n    Private : [raw('./private.svg' ), raw('./private_active.svg' )],\n    Setup   : [raw('./setup.svg'   )                              ],\n    Unread  : [raw('./unread.svg'  ), raw('./unread_active.svg'  )],\n\n    Cat     : [raw('./cat.svg'     ), raw('./cat_active.svg'     )],\n    Crown   : [raw('./crown.svg'   ), raw('./crown_active.svg'   )],\n    Favorite: [raw('./favorite.svg'), raw('./favorite_active.svg')],\n    Flower  : [raw('./flower.svg'  ), raw('./flower_active.svg'  )],\n    Game    : [raw('./game.svg'    ), raw('./game_active.svg'    )],\n    Home    : [raw('./home.svg'    ), raw('./home_active.svg'    )],\n    Love    : [raw('./love.svg'    ), raw('./love_active.svg'    )],\n    Mask    : [raw('./mask.svg'    ), raw('./mask_active.svg'    )],\n    Party   : [raw('./party.svg'   ), raw('./party_active.svg'   )],\n    Sport   : [raw('./sport.svg'   ), raw('./sport_active.svg'   )],\n    Study   : [raw('./study.svg'   ), raw('./study_active.svg'   )],\n    Trade   : [raw('./trade.svg'   ),                             ],\n    Travel  : [raw('./travel.svg'  ), raw('./travel_active.svg'  )],\n    Work    : [raw('./work.svg'    ), raw('./work_active.svg'    )],\n};\nexport default chatFilerIcons;\n","import React from 'react';\n\nexport type RippleEffectProps_AutoSettable = {\n    /** \n     * - Change to `pressed` on `mouseDown`\n     * - Change to `released` on `mouseUp`\n     * - Change to `off` 1000ms after `mouseUp`\n     */\n    state: 'off' | 'pressed' | 'released';\n    X?: number;\n    Y?: number;\n    width?: number;\n    height?: number;\n}\n\ntype RippleEffectProps = RippleEffectProps_AutoSettable & {\n    /** The color to show in the ripple (same as `:active` if you used CSS) */\n    color: string;\n    /** Pass true if the button is small to make animation faster */\n    small?: boolean;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype RippleableComponent= React.Component<any, {ripple: RippleEffectProps_AutoSettable}>;\n\n/**\n * Adds a ripple effect to a button.\n * \n * Insert at the beginning of the button.\n * \n * **Note:** The button needs `position: relative;` and `overflow: hidden;`\n */\nexport default class RippleEffect extends React.Component<RippleEffectProps> {\n\n    /** Gets the smallest radius that a circle, centered at click location, needs to fill the button */\n    getMaxRadius(): number {\n        if(!this.props.small){\n        //  It's a bit hard to understand. Let me explain:\n        //  \n        //  1. It calculates the coordinates relative to the 4 edges of the button ────╮\n        //  2. The diagonal distance to the edges are calculated using the             │\n        //      pythagoras rule, from the results of step 1            │               │\n        //  3. The biggest distance is selected and then returned.     │               │\n        //          │                                                  │               │\n        //  ╭───────┴──────╮  ╭────────────────────────────────────────╯               │        \n        //  │           ╭──┼──┴───╮                                                    │                  \n            return Math.max(//    │╭───────────────────────────────────────────────────┴───────────────────────────────────────────────────────────────╮\n                /* ┏ */ Math.hypot(this.props.X as number                                   , this.props.Y as number),//                               │ \n                /* ┓ */ Math.hypot((this.props.width as number) - (this.props.X as number)  , this.props.Y as number),//                               │\n                /* ┗ */ Math.hypot(this.props.X as number                                   ,( this.props.height as number) - (this.props.Y as number)), \n                /* ┛ */ Math.hypot((this.props.width as number) - (this.props.X as number)  , (this.props.height as number) - (this.props.Y as number)), \n            );\n        } else {\n            const {X, Y, width, height} = this.props as {X: number, Y: number, width: number, height: number};\n            const [rX, rY] = [X - width / 2, Y - height / 2]; // Click position relative to center of circle.\n            const distanceToCenter= Math.hypot(Math.abs(rX), Math.abs(rY)); // Get distance from click position to the center of circle.\n            return distanceToCenter + (width / 2); // Add circle radius to result\n        }\n    }\n    render(): JSX.Element|null {\n        if(this.props.state=='off') return null;\n        return (\n            <div\n                className={'ripple '+this.props.state+ (this.props.small? ' small':'')}\n                style={{\n                    '--top': (this.props.Y || 0)+'px',\n                    '--left': (this.props.X || 0)+'px',\n                    '--radius': this.getMaxRadius()+'px',\n                    backgroundColor: this.props.color\n                } as {[key: string]: string}}/>\n        );\n    }\n}\n\nfunction getRelativeCoordinates(event: React.MouseEvent): {X: number, Y: number} {\n    const rect = (event.target as HTMLElement).getBoundingClientRect();\n    return {\n        X: event.clientX - rect.left,\n        Y: event.clientY - rect.top\n    };\n}\n\n/** \n * Assign your `mouseDown`, `mouseUp` and `mouseLeave` to the returned functions.\n * @param This The current component\n */\nexport function handleMyMouseEvents(This: RippleableComponent): ((e: React.MouseEvent) => void)[] {\n    return [\n        // mouseDown\n        (function(this: RippleableComponent, e: React.MouseEvent): void {\n            // Reset the ripple effect if it's not off\n            if(this.state.ripple.state!='off'){\n                this.setState({\n                    ripple: { state: 'off' }\n                });\n                setTimeout(() => {\n                    this.setState({\n                        ripple: {\n                            state: 'pressed',\n                            ...getRelativeCoordinates(e),\n                            width: (e.target as HTMLElement).clientWidth,\n                            height: (e.target as HTMLElement).clientHeight\n                        }\n                    });\n                }, 50);\n                return;\n            }\n            this.setState({\n                ripple: {\n                    state: 'pressed',\n                    ...getRelativeCoordinates(e),\n                    width:  (e.target as HTMLElement).clientWidth,\n                    height:  (e.target as HTMLElement).clientHeight\n                }\n            });\n        }).bind(This),\n        // mouseUp\n        (function(this: RippleableComponent, e: React.MouseEvent): void {\n            this.setState({\n                ripple: { \n                    state: 'released',\n                    ...getRelativeCoordinates(e),\n                    width:  (e.target as HTMLElement).clientWidth,\n                    height:  (e.target as HTMLElement).clientHeight \n                }\n            });\n        }).bind(This),\n        // mouseLeave\n        (function(this: RippleableComponent, e: React.MouseEvent): void {\n            if(this.state.ripple.state=='pressed') {\n                (this as any).mouseUp(e);\n            }\n        }).bind(This)\n    ];\n}\n// Assign your `mouseDown`, `mouseUp` and `mouseLeave` to the returned functions.\nexport function handleMyMouseEventsFunction([ripple, setRipple]: [RippleEffectProps_AutoSettable, React.Dispatch<React.SetStateAction<RippleEffectProps_AutoSettable>>]): ((e: React.MouseEvent) => void)[] {\n    function down(e: React.MouseEvent): void {\n        // Reset the ripple effect if it's not off\n        if(ripple.state!='off'){\n            setRipple({ state: 'off' });\n            setTimeout(() => {\n                setRipple ({\n                    state: 'pressed',\n                    ...getRelativeCoordinates(e),\n                    width:  (e.target as HTMLElement).clientWidth,\n                    height:  (e.target as HTMLElement).clientHeight\n                });\n            }, 50);\n            return;\n        }\n        setRipple ({\n            state: 'pressed',\n            ...getRelativeCoordinates(e),\n            width:  (e.target as HTMLElement).clientWidth,\n            height:  (e.target as HTMLElement).clientHeight\n        });\n    }\n\n    function up(e: React.MouseEvent): void {\n        setRipple ({\n            state: 'released',\n            X: e.nativeEvent.offsetX,\n            Y: e.nativeEvent.offsetY,\n            width:  (e.target as HTMLElement).clientWidth,\n            height:  (e.target as HTMLElement).clientHeight\n        });\n    }\n\n    function leave(e: React.MouseEvent): void {\n        if(ripple.state=='pressed') {\n            up(e);\n        }\n    }\n    \n    return [down, up, leave];\n}","import React from 'react';\nimport RippleEffect, {handleMyMouseEventsFunction, RippleEffectProps_AutoSettable} from '../../ui/elements/ripple-effect';\nimport './icon-button.scss';\n\nexport type IconButtonProps = React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement> & {\n    icon: string;\n}\n\n/**\n * Renders a round button with an icon in it, and a special ripple effect.\n */\nexport default function IconButton({icon, ...rest}: IconButtonProps): JSX.Element {\n    const ripple= React.useState<RippleEffectProps_AutoSettable>({state: 'off'});\n    const [onMouseDown, onMouseUp, onMouseLeave]= handleMyMouseEventsFunction(ripple);\n    return (\n        <button className=\"icon-button\" {...rest} {...{onMouseDown, onMouseUp, onMouseLeave}}>\n            <span dangerouslySetInnerHTML={{__html: icon}} />\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-windowBgOver)\" small={true}/>\n        </button>\n    );\n}","// All icons are from Telegram Desktop, converted to SVG using https://pngtosvg.com/\n\nimport raw from 'raw.macro';\n\nexport const archive_userpic = raw('./archive_userpic.svg');\nexport const bubble_tail = raw('./bubble_tail.svg');\nexport const dialogs_bot = raw('./dialogs_bot.svg');\nexport const dialogs_channel = raw('./dialogs_channel.svg');\nexport const dialogs_chat = raw('./dialogs_chat.svg');\nexport const dialogs_menu = raw('./dialogs_menu.svg');\nexport const dialogs_pinned = raw('./dialogs_pinned.svg');\nexport const dialogs_received = raw('./dialogs_received.svg');\n//export const dialogs_search_cancel = raw('./dialogs_search_cancel.svg');\nexport const dialogs_sending = raw('./dialogs_sending.svg');\nexport const dialogs_sent = raw('./dialogs_sent.svg');\nexport const dialogs_verified_check = raw('./dialogs_verified_check.svg');\nexport const dialogs_verified_star = raw('./dialogs_verified_star.svg');\nexport const history_received = raw('./history_received.svg');\nexport const history_sent = raw('./history_sent.svg');\nexport const history_to_down = raw('./history_to_down.svg');\nexport const info_back = raw('./info_back.svg');\nexport const info_close = raw('./info_close.svg');\nexport const intro_country_dropdown = raw('./intro_country_dropdown.svg');\nexport const menu_new_channel = raw('./menu_new_channel.svg');\nexport const menu_new_group = raw('./menu_new_group.svg');\nexport const menu_night_mode = raw('./menu_night_mode.svg');\nexport const menu_settings = raw('./menu_settings.svg');\nexport const new_chat_photo = raw('./new_chat_photo.svg');\nexport const replies_userpic = raw('./replies_userpic.svg');\nexport const saved_messages = raw('./saved_messages.svg');\nexport const settings_name = raw('./settings_name.svg');\nexport const settings_phone_number = raw('./settings_phone_number.svg');\nexport const settings_info = raw('./settings/info.svg');\nexport const settings_privacy_security = raw('./settings/privacy_security.svg');\nexport const settings_notifications = raw('./settings/notifications.svg');\nexport const settings_chat = raw('./settings/chat.svg');\nexport const settings_folders = raw('./settings/folders.svg');\nexport const settings_advanced = raw('./settings/advanced.svg');\nexport const settings_language = raw('./settings/language.svg');\nexport const settings_faq = raw('./settings/faq.svg');\nexport const three_dots = raw('./three_dots.svg');\nexport const title_search = raw('./title_search.svg');\nexport const top_bar_call = raw('./top_bar/call.svg');\nexport const top_bar_group_call = raw('./top_bar/group_call.svg');\nexport const top_bar_profile = raw('./top_bar/profile.svg');\nexport const top_bar_search = raw('./top_bar/search.svg');\n\nexport const filters_edit = raw('./chat_filters/edit.svg');\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport IconButton, { IconButtonProps } from '../../../../ui/elements/icon-button';\nimport RippleEffect, {handleMyMouseEvents, RippleEffectProps_AutoSettable} from '../../../../ui/elements/ripple-effect';\nimport { dialogs_menu } from '../../../../ui/icon/icons';\nimport './menu-button.scss';\n\ntype WithFoldersProps = {\n    /** Fires when the button is clicked */\n    onClick?: (e: React.MouseEvent<HTMLButtonElement>) => void;\n}\n\ntype WithFoldersState = {\n    ripple: RippleEffectProps_AutoSettable;\n}\n\n/**\n * Renders the button which opens the hamburger menu (when there are folders)\n */\nclass WithFolders extends React.PureComponent<WithFoldersProps, WithFoldersState> {\n    static propTypes= {\n        onClick: PropTypes.func,\n    };\n    state= {\n        ripple: {\n            state: 'off'\n        }\n    } as const;\n    mouseDown: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    mouseUp: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    mouseLeave: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    constructor(props: WithFoldersProps | Readonly<WithFoldersProps>) {\n        super(props);\n        [this.mouseDown, this.mouseUp, this.mouseLeave]= handleMyMouseEvents(this);\n    }\n    render(): JSX.Element {\n        return (\n            <button id=\"hamburger-menu-button\" className=\"uses-folders\"\n                onMouseDown={this.mouseDown}\n                onMouseUp={this.mouseUp}\n                onMouseLeave={this.mouseLeave}\n                onClick={this.props.onClick}>\n                <div id=\"bars\"><span></span><span></span><span></span></div>\n                <RippleEffect {...this.state.ripple} color=\"var(--theme-color-sideBarBgRipple)\"/>\n            </button>\n        );\n    }\n}\n\ntype WithoutFoldersProps= Pick<IconButtonProps, 'onClick'> & Partial<IconButtonProps>;\n\n/**\n * Renders the button which opens the hamburger menu (when there are no folders)\n */\nfunction WithoutFolders (props: WithoutFoldersProps): JSX.Element {\n    return (\n        <IconButton \n            icon={dialogs_menu}\n            id=\"hamburger-menu-button\"\n            className=\"icon-button no-folders\"\n            {...props}/>\n    );\n}\n\nconst HamburgerMenuButton = {\n    WithFolders,\n    WithoutFolders\n};\n\nexport default HamburgerMenuButton;","import { createStore, Store } from 'redux';\nimport TdLib from '../TdWeb/tdlib';\nimport TdApi from '../TdWeb/td_api';\n\n/**\n * It is recommended to use the outline view or find tool to navigate this file.\n */\n\nexport type ChatStoreState = {\n    currentChatList: TdApi.td_ChatList,\n    archiveState: 'open' | 'closing' | 'closed',\n    archiveButtonState: 'expanded' | 'collapsed' | 'hidden-expanded' | 'hidden-collapsed',\n    chats: TdApi.td_chat[],\n    filters: TdApi.td_chatFilterInfo[],\n    selectedChat: number,\n    unread: ChatStoreUnreadData\n}\n\nexport type ChatStoreUnreadData = {\n    main: ChatListUnreadData,\n    archive: ChatListUnreadData,\n    filters: {\n        [filterId: number]: ChatListUnreadData,\n    }\n}\n\nexport type ChatListUnreadData = {\n    unread_messages_count?: number,\n    unread_unmuted_messages_count?: number,\n    total_chats_count?: number,\n    unread_chats_count?: number,\n    unread_unmuted_chats_count?: number,\n    marked_as_unread_chats_count?: number,\n    marked_as_unread_unmuted_chats_count?: number,\n}\n\nexport type ChatStoreAction = {\n    type: 'SET_CURRENT_CHAT_LIST',\n    chatList: TdApi.td_ChatList,\n} | {\n    type: 'SET_ARCHIVE_STATE',\n    archiveState: 'open' | 'closing' | 'closed',\n} | {\n    type: 'UPDATE_UNREAD_MESSAGE_COUNT',\n    chat_list: TdApi.td_ChatList,\n    unread_count: number,\n    unread_unmuted_count: number,\n} | {\n    type: 'UPDATE_UNREAD_CHAT_COUNT',\n    chat_list: TdApi.td_ChatList,\n    total_count: number,\n    unread_count: number,\n    unread_unmuted_count: number,\n    marked_as_unread_count: number,\n    marked_as_unread_unmuted_count: number,\n} | {\n    type: 'SET_ARCHIVE_BUTTON_STATE',\n    archiveButtonState: 'expanded' | 'collapsed' | 'hidden-expanded' | 'hidden-collapsed',\n} | {\n    type: 'ADD_CHAT',\n    chat: TdApi.td_chat,\n} | {\n    type: 'UPDATE_CHAT_POSITION',\n    chat_id: number,\n    position: TdApi.td_chatPosition,\n} | {\n    type: 'REPLACE_CHAT_FILTERS',\n    payload: TdApi.td_chatFilterInfo[],\n} | (\n    Exclude<{ [K in keyof TdApi.td_chat]: {\n        type: 'UPDATE_CHAT_PROPERTY',\n        chat_id: number,\n        property: K\n        value: TdApi.td_chat[K],\n    } }[keyof TdApi.td_chat], undefined>\n) | {\n    type: 'SELECT_CHAT',\n    chat_id: number,\n}\n\nconst chatStore= (createStore<ChatStoreState, ChatStoreAction, any, any>(reducer, \n    (window as any).__REDUX_DEVTOOLS_EXTENSION__?.())) as Store<ChatStoreState, ChatStoreAction>;\n    \nfunction reducer(state: ChatStoreState= {\n    currentChatList: {'@type': 'chatListMain'},\n    archiveState: 'closed',\n    archiveButtonState: localStorage.getItem('dibgram-archived-chats-button-mode') as 'expanded' | 'collapsed' | 'hidden-expanded' | 'hidden-collapsed',\n    chats: [],\n    filters: [],\n    selectedChat: -1,\n    unread: {\n        main: {},\n        archive: {},\n        filters: {}\n    }\n}, action: ChatStoreAction) {\n    switch (action.type) {\n        case 'SET_CURRENT_CHAT_LIST':\n            return {\n                ...state,\n                currentChatList: action.chatList\n            };\n        case 'SET_ARCHIVE_STATE':\n            return {\n                ...state,\n                archiveState: action.archiveState\n            };\n        case 'UPDATE_UNREAD_MESSAGE_COUNT':\n            if(action.chat_list['@type'] === 'chatListMain') {\n                return {\n                    ...state,\n                    unread: {\n                        ...state.unread,\n                        main: {\n                            ...state.unread.main,\n                            unread_messages_count: action.unread_count,\n                            unread_unmuted_messages_count: action.unread_unmuted_count\n                        }\n                    }\n                };\n            } else if(action.chat_list['@type'] === 'chatListArchive') {\n                return {\n                    ...state,\n                    unread: {\n                        ...state.unread,\n                        archive: {\n                            ...state.unread.archive,\n                            unread_messages_count: action.unread_count,\n                            unread_unmuted_messages_count: action.unread_unmuted_count\n                        }\n                    }\n                };\n            } else if(action.chat_list['@type'] === 'chatListFilter') {\n                return {\n                    ...state,\n                    unread: {\n                        ...state.unread,\n                        filters: {\n                            ...state.unread.filters,\n                            [action.chat_list.chat_filter_id]: {\n                                ...state.unread.filters[action.chat_list.chat_filter_id],\n                                unread_messages_count: action.unread_count,\n                                unread_unmuted_messages_count: action.unread_unmuted_count\n                            }\n                        }\n                    }\n                };\n            }\n            return state;\n        case 'UPDATE_UNREAD_CHAT_COUNT':\n            if(action.chat_list['@type'] === 'chatListMain') {\n                return {\n                    ...state,\n                    unread: {\n                        ...state.unread,\n                        main: {\n                            ...state.unread.main,\n                            total_chats_count: action.total_count,\n                            unread_chats_count: action.unread_count,\n                            unread_unmuted_chats_count: action.unread_unmuted_count,\n                            marked_as_unread_chats_count: action.marked_as_unread_count,\n                            marked_as_unread_unmuted_chats_count: action.marked_as_unread_unmuted_count\n                        }\n                    }\n                };\n            } else if(action.chat_list['@type'] === 'chatListArchive') {\n                return {\n                    ...state,\n                    unread: {\n                        ...state.unread,\n                        archive: {\n                            ...state.unread.archive,\n                            total_chats_count: action.total_count,\n                            unread_chats_count: action.unread_count,\n                            unread_unmuted_chats_count: action.unread_unmuted_count,\n                            marked_as_unread_chats_count: action.marked_as_unread_count,\n                            marked_as_unread_unmuted_chats_count: action.marked_as_unread_unmuted_count\n                        }\n                    }\n                };\n            } else if(action.chat_list['@type'] === 'chatListFilter') {\n                return {\n                    ...state,\n                    unread: {\n                        ...state.unread,\n                        filters: {\n                            ...state.unread.filters,\n                            [action.chat_list.chat_filter_id]: {\n                                ...state.unread.filters[action.chat_list.chat_filter_id],\n                                total_chats_count: action.total_count,\n                                unread_chats_count: action.unread_count,\n                                unread_unmuted_chats_count: action.unread_unmuted_count,\n                                marked_as_unread_chats_count: action.marked_as_unread_count,\n                                marked_as_unread_unmuted_chats_count: action.marked_as_unread_unmuted_count\n                            }\n                        }\n                    }\n                };\n            }\n            return state;\n\n        case 'SET_ARCHIVE_BUTTON_STATE':\n            return {\n                ...state,\n                archiveButtonState: action.archiveButtonState\n            };\n        case 'ADD_CHAT':\n            return {\n                ...state,\n                chats: [\n                    ...state.chats,\n                    action.chat\n                ]\n            };\n        case 'UPDATE_CHAT_POSITION': // Replace the position property of a chat\n            return {\n                ...state,\n                chats: state.chats.map((chat) => {\n                    if (chat.id === action.chat_id) {\n                        let changed=false;\n                        const newChat = {\n                            ...chat,\n                            positions: chat.positions.map((position) => {\n                                if (compareChatList(position.list, action.position.list)) {\n                                    changed=true;\n                                    return action.position;\n                                }\n                                return position;\n                            })\n                        };\n                        if(!changed) {\n                            return {\n                                ...chat,\n                                positions: [\n                                    ...chat.positions,\n                                    action.position\n                                ]\n                            };\n                        }\n                        return newChat;\n                    }\n                    return chat;\n                })\n            };\n        case 'REPLACE_CHAT_FILTERS':\n            return {\n                ...state,\n                filters: action.payload\n            };\n        case 'UPDATE_CHAT_PROPERTY':\n            return {\n                ...state,\n                chats: state.chats.map((chat) => {\n                    if (chat.id === action.chat_id) {\n                        return {\n                            ...chat,\n                            [action.property]: action.value\n                        };\n                    }\n                    return chat;\n                })\n            };\n        case 'SELECT_CHAT':\n            return {\n                ...state,\n                selectedChat: action.chat_id\n            };\n        default:\n            return state;\n    }\n}\n\nTdLib.registerUpdateHandler<TdApi.td_updateUnreadChatCount>('updateUnreadChatCount', (update) => {\n    chatStore.dispatch({\n        type: 'UPDATE_UNREAD_CHAT_COUNT',\n        ...update\n    });\n});\n\nTdLib.registerUpdateHandler<TdApi.td_updateUnreadMessageCount>('updateUnreadMessageCount', (update) => {\n    chatStore.dispatch({\n        type: 'UPDATE_UNREAD_MESSAGE_COUNT',\n        ...update\n    });\n});\n\nTdLib.registerUpdateHandler<TdApi.td_updateNewChat>('updateNewChat', update => {\n    chatStore.dispatch({\n        type: 'ADD_CHAT',\n        chat: update.chat\n    });\n});\n\nTdLib.registerUpdateHandler<TdApi.td_updateChatActionBar>('updateChatActionBar', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'action_bar',\n        chat_id: update.chat_id,\n        value: update.action_bar\n    });\n});\n\nTdLib.registerUpdateHandler<TdApi.td_updateChatDefaultDisableNotification>('updateChatDefaultDisableNotification', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'default_disable_notification',\n        chat_id: update.chat_id,\n        value: update.default_disable_notification\n    });\n});\n\nTdLib.registerUpdateHandler<TdApi.td_updateChatDraftMessage>('updateChatDraftMessage', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'draft_message',\n        chat_id: update.chat_id,\n        value: update.draft_message\n    });\n    for (const position of update.positions) {\n        chatStore.dispatch({\n            type: 'UPDATE_CHAT_POSITION',\n            chat_id: update.chat_id,\n            position: position\n        });\n    }\n});\n\nTdLib.registerUpdateHandler<TdApi.td_updateChatFilters>('updateChatFilters', update=> {\n    if(update.chat_filters) {\n        chatStore.dispatch({\n            type: 'REPLACE_CHAT_FILTERS',\n            payload: update.chat_filters\n        });\n    }\n});\n\nTdLib.registerUpdateHandler<TdApi.td_updateChatHasScheduledMessages>('updateChatHasScheduledMessages', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'has_scheduled_messages',\n        chat_id: update.chat_id,\n        value: update.has_scheduled_messages\n    });\n});\n\nTdLib.registerUpdateHandler<TdApi.td_updateChatIsBlocked>('updateChatIsBlocked', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'is_blocked',\n        chat_id: update.chat_id,\n        value: update.is_blocked\n    });\n});\n\nTdLib.registerUpdateHandler<TdApi.td_updateChatIsMarkedAsUnread>('updateChatIsMarkedAsUnread', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'is_marked_as_unread',\n        chat_id: update.chat_id,\n        value: update.is_marked_as_unread\n    });\n});\n\nTdLib.registerUpdateHandler<TdApi.td_updateChatLastMessage>('updateChatLastMessage', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'last_message',\n        chat_id: update.chat_id,\n        value: update.last_message\n    });\n    for (const position of update.positions) {\n        chatStore.dispatch({\n            type: 'UPDATE_CHAT_POSITION',\n            chat_id: update.chat_id,\n            position: position\n        });\n    }\n});\n\nTdLib.registerUpdateHandler<TdApi.td_updateChatMessageTtl>('updateChatMessageTtl', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'message_ttl',\n        chat_id: update.chat_id,\n        value: update.message_ttl\n    });\n});\n\nTdLib.registerUpdateHandler<TdApi.td_updateChatNotificationSettings>('updateChatNotificationSettings', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'notification_settings',\n        chat_id: update.chat_id,\n        value: update.notification_settings\n    });\n});\n\n// Temporarily disabled because `online_member_count` is not a field in `chat`\n// TdLib.registerUpdateHandler<TdApi.td_updateChatOnlineMemberCount>('updateChatOnlineMemberCount', update=> {\n//     chatStore.dispatch({\n//         type: 'UPDATE_CHAT_PROPERTY',\n//         property: 'online_member_count',\n//         chat_id: update.chat_id,\n//         value: update.online_member_count\n//     });\n// });\n\nTdLib.registerUpdateHandler<TdApi.td_updateChatPermissions>('updateChatPermissions', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'permissions',\n        chat_id: update.chat_id,\n        value: update.permissions\n    });\n});\n\nTdLib.registerUpdateHandler<TdApi.td_updateChatPhoto>('updateChatPhoto', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'photo',\n        chat_id: update.chat_id,\n        value: update.photo\n    });\n});\n\nTdLib.registerUpdateHandler<TdApi.td_updateChatPosition>('updateChatPosition', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_POSITION',\n        chat_id: update.chat_id,\n        position: update.position\n    });\n});\n\nTdLib.registerUpdateHandler<TdApi.td_updateChatReadInbox>('updateChatReadInbox', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'unread_count',\n        chat_id: update.chat_id,\n        value: update.unread_count\n    });\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'last_read_inbox_message_id',\n        chat_id: update.chat_id,\n        value: update.last_read_inbox_message_id\n    });\n});\n\nTdLib.registerUpdateHandler<TdApi.td_updateChatReadOutbox>('updateChatReadOutbox', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'last_read_outbox_message_id',\n        chat_id: update.chat_id,\n        value: update.last_read_outbox_message_id\n    });\n});\n\nTdLib.registerUpdateHandler<TdApi.td_updateChatReplyMarkup>('updateChatReplyMarkup', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'reply_markup_message_id',\n        chat_id: update.chat_id,\n        value: update.reply_markup_message_id\n    });\n});\n\nTdLib.registerUpdateHandler<TdApi.td_updateChatTheme>('updateChatTheme', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'theme_name',\n        chat_id: update.chat_id,\n        value: update.theme_name\n    });\n});\n\nTdLib.registerUpdateHandler<TdApi.td_updateChatTitle>('updateChatTitle', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'title',\n        chat_id: update.chat_id,\n        value: update.title\n    });\n});\n\nTdLib.registerUpdateHandler<TdApi.td_updateChatUnreadMentionCount>('updateChatUnreadMentionCount', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'unread_mention_count',\n        chat_id: update.chat_id,\n        value: update.unread_mention_count\n    });\n});\n\nTdLib.registerUpdateHandler<TdApi.td_updateChatPendingJoinRequests>('updateChatPendingJoinRequests', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'pending_join_requests',\n        chat_id: update.chat_id,\n        value: update.pending_join_requests\n    });\n});\n\nTdLib.registerUpdateHandler<TdApi.td_updateChatVideoChat>('updateChatVideoChat', update=> {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'video_chat',\n        chat_id: update.chat_id,\n        value: update.video_chat\n    });\n});\n\nTdLib.registerUpdateHandler<TdApi.td_updateMessageMentionRead>('updateMessageMentionRead', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'unread_mention_count',\n        chat_id: update.chat_id,\n        value: update.unread_mention_count\n    });\n});\n\nTdLib.registerUpdateHandler<TdApi.td_updateChatMessageSender>('updateChatMessageSender', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'message_sender_id',\n        chat_id: update.chat_id,\n        value: update.message_sender_id\n    });\n});\n\nTdLib.registerUpdateHandler<TdApi.td_updateChatHasProtectedContent>('updateChatHasProtectedContent', update => {\n    chatStore.dispatch({\n        type: 'UPDATE_CHAT_PROPERTY',\n        property: 'has_protected_content',\n        chat_id: update.chat_id,\n        value: update.has_protected_content\n    });\n});\n\nexport default chatStore;\n\n/**\n * Check if two chat lists are equal\n * @param list1 \n * @param list2 \n * @returns True if the provided objects refer to the same list. Otherwise false\n */\nexport function compareChatList(list1: TdApi.td_ChatList, list2: TdApi.td_ChatList): boolean {\n    if (list1['@type'] != list2['@type']) { // First compare type\n        return false;\n    }\n    if (list1['@type'] == 'chatListFilter' ) { // Then Compare folder ID\n        return list1.chat_filter_id == (list2 as TdApi.td_chatListFilter).chat_filter_id;\n    }\n    return true;\n}\n\n/**\n * Gets a chat from a chat ID. Supports caching.\n */\nexport function getChat(id: number): Promise<TdApi.td_chat | TdApi.td_error> {\n    let res;\n    for(const chat of chatStore.getState()?.chats) {\n        if(chat.id==id) res = Promise.resolve(chat);\n    }\n    if(!res){\n        res = TdLib.sendQuery({\n            '@type': 'getChat',\n            'chat_id': id\n        });\n    }\n    return res;\n}\n\n/**\n * Gets a chat from a chat ID. Does not support caching to prevent promises complexity.\n * @param id\n */\nexport function getChatNoCache(id: number): TdApi.td_chat|undefined {\n    for(const chat of chatStore.getState()?.chats) {\n        if(chat.id==id) return chat;\n    }\n}\n","import React from 'react';\nimport { ScrollbarProps, Scrollbars } from 'react-custom-scrollbars-2';\nimport './scrollbar.scss';\n\ntype ScrollViewProps = ScrollbarProps & {\n    /** Scroll-bar thickness, in pixels (default: 4) */\n    scrollBarWidth?: number|string;\n    /** A React ref that is passed down to the scrollbars component */\n    scrollRef?: React.RefObject<Scrollbars>;\n    /** Whether to always show the scrollbars (default: false) */\n    scrollAlwaysVisible?: boolean;\n}\n\n\n/**\n * A scrollable container. Sizing might need to be tweaked by CSS.\n */\nexport default function ScrollView({scrollBarWidth, scrollRef, scrollAlwaysVisible, ...propsRest}: ScrollViewProps): JSX.Element {\n    const [mouseEntered, setMouseEntered] = React.useState(false);\n    const [timeoutId, setTimeoutId] = React.useState(0);\n    return (\n        <Scrollbars\n            className=\"scrollbar\"\n            style= {{ '--bar-width': (scrollBarWidth || 4)+'px' } as {[key: string]: string}}\n            data-mouse-entered={mouseEntered}\n            renderTrackHorizontal={props => <div {...props} className=\"track-horizontal\" />}\n            renderTrackVertical={props => <div {...props} className=\"track-vertical\" />}\n            renderThumbHorizontal={props => <div {...props} className=\"thumb-horizontal\" />}\n            renderThumbVertical={props => <div {...props} className=\"thumb-vertical\" />}\n            onMouseEnter={() => {\n                setMouseEntered(true);\n                setTimeoutId(window.setTimeout(() => {\n                    setMouseEntered(false);\n                }, 1000));\n            }}\n            onMouseLeave={() => {\n                setMouseEntered(false);\n                clearTimeout(timeoutId);\n            }}\n            autoHide={!scrollAlwaysVisible}\n            data-auto-hide={scrollAlwaysVisible? 'false' : 'true'}\n            autoHideTimeout={1000}\n            hideTracksWhenNotNeeded={true}\n            ref={scrollRef}\n            {...propsRest}\n        />\n    );\n}\n","import React from 'react';\n\nexport type FormatParams = {\n    [key: string]: string | number | React.ReactNode | React.ReactNode[];\n}\n\nexport const applyKeys= (item: React.ReactNode|React.ReactNode[], index: number): JSX.Element => (\n    <React.Fragment key={index}>{item}</React.Fragment>\n);\n\nexport function getFormattedText(text: string, useFragments=true): React.ReactNode[]|string {\n    const formatted= applyFormatting(text);\n    if(formatted.length === 1) return formatted[0] as string;\n    return formatted.map(useFragments? applyKeys : e=>e);\n}\n\nexport function applyFormatting(format: string): React.ReactNode[] {\n    const res: React.ReactNode[]= [];\n    /* eslint-disable-next-line no-constant-condition */\n    while(true) {\n        if(format.includes('\\n')){ // New line\n            const index= format.indexOf('\\n');\n            applyFormatting(format.slice(0, index)).forEach(e=>res.push(e));\n            res.push(<br/>);\n            format= format.slice(index + 1);\n        } \n        else if(/\\*\\*(.+)\\*\\*/.test(format)){ // Bold\n            const execed= /\\*\\*(.+)\\*\\*/.exec(format) as RegExpExecArray;\n            applyFormatting(format.slice(0, execed.index)).forEach(e=>res.push(e));\n            res.push(<strong>{execed[1]}</strong>);\n            format= format.slice(execed.index + execed[1].length+4);\n        }\n        else break;\n    }\n    res.push(format);\n    return res;\n}\n\nexport function formatString(format: string, params: FormatParams= {}): React.ReactNode[] {\n    const res: React.ReactNode[]= [];\n    while(format.includes('{') && format.includes('}')) {\n        const execed= /{(\\w+)}/.exec(format) as RegExpExecArray;\n        applyFormatting(format.slice(0, execed.index)).forEach(e=>res.push(e));\n        res.push(params[execed[1]]);\n        format= format.slice(execed.index + execed[1].length+2);\n    }\n    return [...res, ...applyFormatting(format)];\n}\n\n// Same as formatString, but for strings which are split in array elements.\nexport function formatChunkedString<O=React.ReactNode>(format: (string|O)[], params: FormatParams= {}): (O|React.ReactNode)[] {\n    const result: (O|React.ReactNode)[]= [];\n    for(const chunk of format) {\n        if(typeof chunk == 'string') {\n            result.push(formatString(chunk, params));\n        } else {\n            result.push(chunk);\n        }\n    }\n    return result.flat() as (O|React.ReactNode)[];\n}\n\nexport type PluralMode= 'zero'|'one'|'two'|'few'|'many'|'other';\n\n// Returns 'zero', 'one', 'two', 'few', 'many' or 'other' depending on the number\nexport function getCountMode(count: number): PluralMode {\n    if(count === 0) return 'zero';\n    if(count === 1) return 'one';\n    if(count === 2) return 'two';\n    if(count > 2 && count < 10) return 'few';\n    if(count >= 10) return 'many';\n    return 'other';\n}\n\nexport function getPluralString(mode: PluralMode, callback: (mode: PluralMode)=>string): string {\n    switch(mode) {\n        case 'zero': return callback('zero') || callback('few') || callback('many') || callback('other');\n        case 'one': return callback('one') || callback('other');\n        case 'two': return callback('two') || callback('few') || callback('many') || callback('other');\n        case 'few': return callback('few') || callback('many') || callback('other');\n        case 'many': return callback('many') || callback('other');\n        case 'other': return callback('other');\n    }\n}\n","import { authStore } from '../auth/auth-screen';\nimport TdLib from '../TdWeb/tdlib';\nimport englishLanguagePack from './english.json';\nimport { applyKeys, formatChunkedString, FormatParams, formatString, getCountMode, getFormattedText, getPluralString, PluralMode } from './string-format';\nimport specialStringsEnglish from './special-strings/en.json';\nimport TdApi from '../TdWeb/td_api';\nimport React from 'react';\nimport { LanguagePackKey, LanguagePackSpecialStringName, LanguagePackStringName, LanguagePackStringNamePluralized } from './language-pack-types';\n\nlet currentLanguagePack: { [key: string]: TdApi.td_languagePackString }|null = null;\nlet specialStrings= specialStringsEnglish;\n\nexport function initLanguagePack(): void{\n    const languageInfo= getCurrentLanguagePack(true);\n\n    const specialStringsCache= localStorage.getItem('dibgram-special-language-strings-cache');\n    if(specialStringsCache){\n        specialStrings= JSON.parse(specialStringsCache)[languageInfo.id] || specialStringsEnglish;\n    }\n    console.log('initLanguagePack');\n    TdLib.sendQuery({\n        '@type': 'setOption', \n        'name': 'localization_target', \n        'value': {\n            '@type': 'optionValueString', \n            value: 'tdesktop'\n        }\n    }).then(()=>{\n        TdLib.sendQuery({\n            '@type': 'getLanguagePackStrings',\n            language_pack_id: languageInfo.id || 'en'\n        }).then(result=>{\n            result= result as TdApi.td_languagePackStrings;\n            currentLanguagePack = {};\n            for (const string of result.strings) {\n                currentLanguagePack[string.key] = string;\n            }\n\n            authStore.dispatch({ // Force re-render\n                type: 'SET_STATE',\n                state: authStore.getState().state\n            });\n        });\n    });\n}\n\n/**\n * Gets the language pack info for the selected language\n * @param englishIsDefault If true, returns english if the user didn't set a language\n * @returns Language pack object\n */\nexport function getCurrentLanguagePack<T extends boolean=true>(englishIsDefault: T): T extends true ? TdApi.td_LanguagePackInfo : TdApi.td_LanguagePackInfo | null {\n    const json= localStorage.getItem('dibgram-active-language');\n    if(json) {\n        return JSON.parse(json);\n    } else {\n        if(englishIsDefault) {\n            return {\n                '@type': 'languagePackInfo',\n                base_language_pack_id: '',\n                id: 'en',\n                is_beta: false,\n                is_installed: false,\n                is_official: true,\n                is_rtl: false,\n                local_string_count: 2784,\n                name: 'English',\n                native_name: 'English',\n                plural_code: 'en',\n                total_string_count: 2784,\n                translated_string_count: 2784,\n                translation_url: 'https://translations.telegram.org/en/'\n            };\n        }\n        else {\n            return null as T extends true ? TdApi.td_LanguagePackInfo : TdApi.td_LanguagePackInfo | null;\n        }\n    }\n}\n\nexport function getRtlMode(): boolean {\n    return (localStorage.getItem('dibgram-allow-rtl-layout') == 'true') && (getCurrentLanguagePack(false)?.is_rtl || false);\n}\n\n/**\n * Returns the localized string for the given language pack string.  \n * Use `__fmt` for formatted strings, or `__pl` for pluralized strings.\n * @example ```js\n * __('lng_menu_settings') // 'Settings'\n * __('lng_error_phone_flood') // 'Sorry, you have deleted and re-created your account too many times recently. Please wait for a few days before signing up again.'\n * ```\n * @param key Language pack string name\n * @returns Localized version of the string\n */\nexport default function __(key: LanguagePackKey, useFragments= true): string | React.ReactNode[] {\n    if(currentLanguagePack) {\n        const languagePackString= currentLanguagePack[key].value;\n        if(languagePackString['@type'] === 'languagePackStringValueOrdinary') {\n            return getFormattedText(languagePackString.value, useFragments);\n        }\n    }\n\n    const languagePack = englishLanguagePack;\n    return getFormattedText(languagePack[key], useFragments);\n}\n\n/**\n * Returns the localized string for the given language pack string, formatted with the given parameters.\n * @example \n * ```js\n * __fmt('lng_menu_settings', {name: 'John'}) // 'John'\n * ```\n * @param name Language pack string name\n * @param params An object containing formatting parameters\n * @returns Localized version of the string, with formatting applied\n */\nexport function __fmt(name: Exclude<LanguagePackStringName, LanguagePackStringNamePluralized>, params: FormatParams, useFragments= true): React.ReactNode[] {\n    let string= __(name, false);\n    string= typeof string == 'string' ? formatString(string, params) : formatChunkedString(string, params);\n    return string.map(useFragments? applyKeys : e=>e);\n}\n\nexport function __pl(key: string, count: number, params: FormatParams={}): React.ReactNode[] {\n    let callback: (mode: PluralMode) => string = null!;\n    if(currentLanguagePack) {\n        if(currentLanguagePack[key].value['@type'] === 'languagePackStringValuePluralized') {\n            const pluralized= currentLanguagePack[key].value;\n            callback= (mode) => pluralized[(mode+'_value') as keyof typeof pluralized];\n        }\n    }\n    else callback=  (mode) => englishLanguagePack[(key+'#'+mode) as keyof typeof englishLanguagePack];\n\n    const pluralizedString= getPluralString(getCountMode(count), callback);\n    const formatted= formatString(pluralizedString, {count, ...params});\n    return formatted.map(applyKeys);\n}\n\n/**\n * Formats an array of objects in the format `A, B, C and D`\n * Uses the format strings given as the parameters to do the formatting.\n * The default values for the strings are `{accumulated}, {user}` and `{accumulated} and {user}`\n * \n * @param {boolean} isInvite If true, the value of the strings `lng_action_invite_users_and_one` and `lng_action_invite_users_and_last` will be used. Otherwise, `lng_action_add_users_and_one` and `lng_action_add_users_and_last` will be used.\n * @param {React.ReactNode[]} users An array of objects to format\n * @param {boolean} usesReact If true, the result will be returned as an array of objects, each wrapped in a React Fragment. If false, the result will be returned as a string.\n */\nexport function __collection<B extends boolean=true, U extends ( B extends true ? React.ReactNode|React.ReactNode[] : string)= string>(isInvite: boolean, users: U[], usesReact: B, getLPString= __): U | (B extends true ? React.ReactNode[] : string) {\n    if(users.length == 1) return users[0];\n\n    const format= getLPString(isInvite? 'lng_action_invite_users_and_one' : 'lng_action_add_users_and_one') as string;\n    const formatLast= getLPString(isInvite? 'lng_action_invite_users_and_last' : 'lng_action_add_users_and_last') as string;\n\n    let result: (React.ReactNode|React.ReactNode[]|string)[]= [users[0]];\n    for(let i= 1; i < users.length - 1; i++) {\n        const user= users[i];\n        result= formatString(format, {accumulated: result, user}).flat();\n    }\n    result= formatString(formatLast, {accumulated: result, user: users[users.length - 1]}).flat();\n    return (usesReact? result.map(applyKeys) : result.join('')) as B extends true ? React.ReactNode[] : string;\n}\n\nexport function _s__(key: LanguagePackSpecialStringName): string {\n    return specialStrings[key];\n}\n\nexport function _s__fmt(key: LanguagePackSpecialStringName, params: FormatParams, useFragments= true): React.ReactNode[] {\n    return formatString(_s__(key), params).map(useFragments? applyKeys : e=>e);\n}\n\n// export function _s__pl(key, count, params={}) {\n// }\n\n// export function _s__collection(isInvite, users, usesReact) {\n//     return __collection(isInvite, users, usesReact, _s__);\n// }\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport filters from '../../../ui/icon/chat_filters/chat-filters';\nimport RippleEffect, {handleMyMouseEventsFunction, RippleEffectProps_AutoSettable} from '../../../ui/elements/ripple-effect';\nimport HamburgerMenuButton from './hamburger-menu/menu-button';\nimport { ChatListUnreadData, ChatStoreAction, ChatStoreState, ChatStoreUnreadData, compareChatList } from '../../chat-store';\nimport TdLib from '../../../TdWeb/tdlib';\nimport ScrollView from '../../../ui/scroll/scrollbar';\nimport './chat-folders.scss';\nimport __ from '../../../language-pack/language-pack';\nimport TdApi from '../../../TdWeb/td_api';\nimport { Dispatch } from 'redux';\n\n//eslint-disable-next-line @typescript-eslint/no-empty-function\nexport const chatListScrollToTopEvent = [function():void{}];\n\ntype ChatFolderProps = {\n    folder: TdApi.td_chatFilterInfo,\n    active: boolean,\n    onClick: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void,\n    unread: ChatListUnreadData\n}\n\n/**\n * Renders a chat folder button\n */\nexport function ChatFolder({folder, active, onClick, unread}: ChatFolderProps): JSX.Element {\n    // Ripple effect\n    const ripple= React.useState<RippleEffectProps_AutoSettable>({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave]= handleMyMouseEventsFunction(ripple);\n\n    const [iconName, setIconName]= React.useState(folder.icon_name);\n\n    React.useEffect(()=> { // Get folder chats, TDLib won't show them if this request isn't sent\n        TdLib.sendQuery({\n            '@type': 'loadChats',\n            'chat_list': {\n                '@type': 'chatListFilter',\n                'chat_filter_id': folder.id,\n            },\n            'limit': 50 // Only get 50 chats //TODO: Implement loading more chats\n        });\n    }, []);\n\n    React.useEffect(()=> {\n        if(!folder.icon_name) {\n            // Default icon is used and we don't know what it is.\n            TdLib.sendQuery({ // Get chat filter info so we can get an idea what it is\n                '@type': 'getChatFilter',\n                'chat_filter_id': folder.id\n            }).then(folder=> {\n                TdLib.sendQuery({ // Ask TDLib what the icon should be\n                    '@type': 'getChatFilterDefaultIconName',\n                    'filter': folder as TdApi.td_chatFilter\n                }).then(result=> setIconName((result as TdApi.td_text).text));\n            });\n        }\n    }, [folder]);\n\n    function handleClick(e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void {\n        onClick(e);\n        chatListScrollToTopEvent[0]?.();\n    }\n\n    const ic= (filters[iconName] || filters['Custom']); // If the icon was empty, show a generic icon instead.\n    const icon= ic[Number(active)] || ic[0]; // Some icons dont have active variant\n    return (\n        <div className={active ? 'item active' : 'item'}>\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-sideBarBgRipple)\"/>\n            <button\n                onMouseDown={mouseDown}\n                onMouseUp={mouseUp}\n                onMouseLeave={mouseLeave}\n                onClick={handleClick}>\n\n                <div className=\"icon\" dangerouslySetInnerHTML={{__html: icon}}></div>\n                <div className=\"title\">{folder.title}</div>\n                {unread?.unread_chats_count? (\n                    <div className=\"unread-badge\" \n                        data-muted={(unread?.unread_unmuted_chats_count==0) ? 'true' : 'false'}>\n                        <span>{unread?.unread_chats_count}</span>\n                    </div>\n                ): null}\n            </button>\n        </div>\n    );\n}\n\nChatFolder.propTypes= {\n    /** The folder object provided by TdLib */\n    folder: PropTypes.object.isRequired,\n    /** A boolean indicating if the folder is currently selected */\n    active: PropTypes.bool.isRequired,\n    /** A function to call when the folder is clicked */\n    onClick: PropTypes.func.isRequired,\n    /** An object containing unread messages and chats count, from `chatStore` */\n    unread: PropTypes.object\n};\n\ntype ChatFolderListSelfProps= {\n    /** Fires when main menu is triggered */\n    onHamburgerMenuOpened: ()=>void\n}\n\ntype ChatFolderListStoreProps= {\n    folders: TdApi.td_chatFilterInfo[],\n    currentFolder: TdApi.td_ChatList,\n    unread: ChatStoreUnreadData\n}\n\ntype ChatFolderListProps= ChatFolderListSelfProps & ChatFolderListStoreProps & {dispatch: Dispatch<ChatStoreAction>};\n\n/**\n * Renders the chat folders list\n */\nfunction ChatFolderList({folders, currentFolder, unread, dispatch, onHamburgerMenuOpened}: ChatFolderListProps): JSX.Element|null {\n    if(!folders || folders.length==0) return null;\n\n    return (\n        <div id=\"chat-folders-list\">\n            <HamburgerMenuButton.WithFolders onClick={onHamburgerMenuOpened}/>\n\n            <ScrollView scrollBarWidth=\"4\" className=\"list scrollbar full-size\">\n                <ChatFolder \n                    active={compareChatList(currentFolder, {'@type': 'chatListMain'})} \n                    folder={{ \n                        '@type': 'chatFilterInfo',\n                        id: -1,\n                        title: (__('lng_filters_all') as string), \n                        icon_name: 'All' \n                    }}\n                    unread={unread.main}\n                    onClick={()=> dispatch({\n                        type: 'SET_CURRENT_CHAT_LIST',\n                        chatList: { '@type': 'chatListMain' }\n                    })}/>\n                \n                {folders.map(folder=> (\n                    <ChatFolder folder={folder} key={folder.id}\n                        unread={unread.filters[folder.id]}\n                        active={compareChatList(currentFolder, \n                            {'@type': 'chatListFilter', 'chat_filter_id': folder.id})}\n                        onClick={()=> dispatch({\n                            type: 'SET_CURRENT_CHAT_LIST',\n                            chatList: { \n                                '@type': 'chatListFilter',\n                                chat_filter_id: folder.id\n                            }\n                        })}/>\n                ))}\n            </ScrollView>\n        </div>\n    );\n}\nexport default connect<ChatFolderListStoreProps, unknown, ChatFolderListSelfProps, ChatStoreState>(state=>({\n    folders:state.filters, \n    currentFolder: state.currentChatList,\n    unread: state.unread\n}))(ChatFolderList);","import { ProgressRing } from 'progress-ring';\nimport 'progress-ring/src/styles.css';\nimport React from 'react';\n\ntype LoadingSpinnerProps = {\n    /** Spinner circle size */\n    size: number;\n    /** Spinner thickness */\n    lineWidth: number;\n    /** Spinner color */\n    progressColor: string;\n}\n\ntype LoadingSpinnerState = {\n    percentage: number;\n}\n\n/**\n * Renders a spinner which in addition to spinning, also changes size.\n */\nexport default class LoadingSpinner extends React.Component<LoadingSpinnerProps, LoadingSpinnerState> {\n    state= {\n        percentage: 10 // From 10 to 90, this specifies how much the spinner grows and shrinks while spinning (reversed)\n    }\n    intervalNum= 0;\n    render (): JSX.Element {\n        return (\n            <div className=\"loading-spinner\">\n                <ProgressRing\n                    percent={this.state.percentage}\n                    caps='round'\n                    trackColor=\"transparent\"\n                    spin={true}\n                    {...this.props}\n                    transitionDuration={2000}/>\n            </div>\n        );\n    }\n\n    componentDidMount (): void {\n        this.intervalNum= window.setInterval(() => { // Spinner grows and shrinks while spinning\n            this.setState({\n                percentage: (90 - this.state.percentage)\n            });\n        }, 2000);\n    }\n\n    componentWillUnmount (): void {\n        clearInterval(this.intervalNum);\n    }\n}","import React from 'react';\nimport LoadingSpinner from '../elements/loading-spinner';\nimport { connect } from 'react-redux';\nimport { ConnectionStoreState } from '../../TdWeb/connectionStore';\n\n/**\n * Renders the connecting spinner at the bottom left corner, which is hidden when connected\n */\nexport default (connect<{state: ConnectionStoreState}, unknown, Record<string, never>, ConnectionStoreState>((state:ConnectionStoreState)=> ({state: state})) (function ConnectionState({state}) {\n    return (\n        <div className={'connectionState'+(([\n            'connectionStateConnecting',\n            'connectionStateConnectingToProxy',\n            'connectionStateWaitingForNetwork'\n        ].includes(state))? '' : ' connected')}>\n            <LoadingSpinner\n                progressColor=\"var(--theme-color-menuIconFg)\"\n                size={20}\n                lineWidth={2}/>\n        </div>\n    );\n}) as unknown as ()=> JSX.Element);\n","import { createStore, Store } from 'redux';\nimport TdLib from '../TdWeb/tdlib';\nimport TdApi from '../TdWeb/td_api';\n\nexport type UsersStoreState = {\n    [id: number]: TdApi.td_user;\n}\n\nexport type UsersStoreAction = {\n    type: 'UPD_USER',\n    user: TdApi.td_user;\n} | {\n    type: 'UPD_USER_STATUS',\n    userId: number;\n    status: TdApi.td_UserStatus;\n}\n\nconst usersStore: Store<UsersStoreState, UsersStoreAction> = createStore<UsersStoreState, UsersStoreAction, any, any>((state = {}, action) => {\n    switch (action.type) {\n        case 'UPD_USER':\n            return {\n                ...state,\n                [action.user.id]: action.user\n            };\n        case 'UPD_USER_STATUS':\n            return {\n                ...state,\n                [action.userId]: {\n                    ...state[action.userId],\n                    status: action.status\n                }\n            };\n        default:\n            return state;\n    }\n    //eslint-disable-next-line @typescript-eslint/no-explicit-any\n}, (window as any).__REDUX_DEVTOOLS_EXTENSION__?.());\n\nTdLib.registerUpdateHandler<TdApi.td_updateUser>('updateUser', (update) => {\n    usersStore.dispatch({\n        type: 'UPD_USER',\n        user: update.user\n    });\n});\n\nTdLib.registerUpdateHandler<TdApi.td_updateUserStatus>('updateUserStatus', (update) => {\n    usersStore.dispatch({\n        type: 'UPD_USER_STATUS',\n        userId: update.user_id,\n        status: update.status\n    });\n});\n\nexport default usersStore;\n","import React from 'react';\nimport './link-button.scss';\n\ntype LinkButtonProps= {\n    href?: string;\n    children: React.ReactNode;\n    onClick?: (e: React.SyntheticEvent) => void;\n    //eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [key: string]: any;\n}\n\n/**\n * Renders a button looking like a link.\n */\nexport default function LinkButton({href, children, onClick, ...rest}: LinkButtonProps): JSX.Element {\n    const click= href ? ()=> window.open(href) : onClick;\n    return (\n        <a className=\"link-button\" onClick={click} {...rest}>{children}</a>\n    );\n}\n","import {createStore} from 'redux';\nimport TdLib from '../TdWeb/tdlib';\nimport TdApi from '../TdWeb/td_api';\n\nexport type SupergroupStoreState= {\n    [id: number]: TdApi.td_supergroup;\n}\n\nexport type SupergroupStoreAction= {\n    type: 'UPD_SUPERGROUP',\n    supergroup: TdApi.td_supergroup;\n}\n\nfunction reducer(state: SupergroupStoreState= {}, action: SupergroupStoreAction): SupergroupStoreState {\n    switch (action.type) {\n        case 'UPD_SUPERGROUP':\n            return {\n                ...state,\n                [action.supergroup.id]: action.supergroup\n            };\n        default:\n            return state;\n    }\n}\n\nconst supergroupStore= createStore<SupergroupStoreState, SupergroupStoreAction, any, any>(reducer);\nexport default supergroupStore;\n\nTdLib.registerUpdateHandler<TdApi.td_updateSupergroup>('updateSupergroup', (update) => {\n    supergroupStore.dispatch({\n        type: 'UPD_SUPERGROUP',\n        supergroup: update.supergroup\n    });\n});","import __ from '../language-pack/language-pack';\nimport TdApi from '../TdWeb/td_api';\nimport supergroupStore from './supergroup-store';\nimport usersStore, { UsersStoreState } from './users-store';\n\n/**\n * Check if the chat is with a deleted user\n * @param chat The chat to check\n * @param users A dictionary of all users (e.g. usersStore state)\n * @returns True if the chat is private and the other party's account is deleted\n */\nexport function isChatWithDeletedAccount(chat: TdApi.td_chat, users: UsersStoreState|undefined= undefined): boolean {\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup': // Groups are not applicable\n        case 'chatTypeSupergroup':\n            return false;\n        \n        case 'chatTypeSecret':\n        case 'chatTypePrivate': {\n            const user= (users || usersStore.getState())?.[chat.type.user_id];\n            return user && user.type['@type'] === 'userTypeDeleted';\n        }\n    }\n    return false;\n}\n\n/**\n * Returns the chat's title and handles deleted account\n * @param chat The chat to get the name of\n * @param users A list of all users (e.g. usersStore state). If not provided, usersStore will be used\n * @returns Chat title, or 'Deleted Account'\n */\nexport function chatTitleOrDeletedAccount(chat: TdApi.td_chat, users: UsersStoreState|undefined= undefined): string {\n    if(isChatWithDeletedAccount(chat, users))\n        return __('lng_deleted') as string;\n    return chat.title;\n}\n\n/**\n * Checks if a user, bot or channel is verified\n * @param {import('tdweb').TdObject} chat The chat to be checked\n * @returns {boolean} True if the chat is verified, false if not\n */\nexport function isChatVerified(chat: TdApi.td_chat): boolean {\n    switch (chat.type['@type']) {\n        case 'chatTypeBasicGroup':\n            return false;\n\n        case 'chatTypeSupergroup': {\n            return (supergroupStore.getState()?.[chat.type.supergroup_id]).is_verified;\n        }\n        case 'chatTypeSecret':\n        case 'chatTypePrivate': \n            return (usersStore.getState()?.[chat.type.user_id]).is_verified;\n    }\n    return false;\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { createStore } from 'redux';\nimport { connect } from 'react-redux';\nimport './context-menu.scss';\n\ntype ContextMenuProps = {\n    x: number;\n    y: number;\n    children: React.ReactNode | React.ReactNode[];\n}\n\n/**\n * A context menu (right click menu)\n */\nexport function ContextMenu({x, y, children}: ContextMenuProps): JSX.Element {\n    const [direction, setDirection] = React.useState('br');\n    const [hide, setHide] = React.useState(false);\n    const ref = React.useRef<HTMLDivElement>() as React.RefObject<HTMLDivElement>;\n    React.useEffect(() => {\n        setTimeout(() => {\n            if(!ref?.current) return;\n            const rect = ref.current.children[0].getBoundingClientRect();\n            const {width, height} = rect;\n            const {clientWidth, clientHeight} = document.documentElement;\n            let X = 'r', Y = 'b';\n            if (x + width > clientWidth) {\n                X = 'l';\n            }\n            if (y + height > clientHeight) {\n                Y = 't';\n            }\n            setDirection(Y + X);\n        }, 0);\n    }, []);\n\n    function handleMouseDown() {\n        setHide(true);\n        setTimeout(() => {\n            contextMenusStore.dispatch({\n                type: 'REMOVE_CONTEXT_MENUS'\n            });\n        }, 500);\n    }\n\n    return (\n        <div className={'context-menu' + (hide? ' hidden' : '')} \n            style={{'--x': x+'px', '--y': y+'px'} as {[key: string]: string}}\n            onMouseDown={e=> (!(e.target as HTMLElement).classList.contains('menu-item') && handleMouseDown())}\n            onMouseUp={e=> (((e.target as HTMLElement).classList.contains('menu-item')) && handleMouseDown())}>\n\n            <div className={'menu ' + direction} ref={ref}>\n                {children}\n            </div>\n        </div>\n    );\n}\nContextMenu.propTypes = {\n    /** Position relative to viewport */\n    x: PropTypes.number.isRequired,\n    /** Position relative to viewport */\n    y: PropTypes.number.isRequired,\n    children: PropTypes.node.isRequired\n};\n\ntype ContextMenusStoreState = React.ReactElement|null;\n\ntype ContextMenusStoreAction_AddContextMenu = {\n    type: 'ADD_CONTEXT_MENU';\n    menu: React.ReactElement;\n}\ntype ContextMenusStoreAction_RemoveContextMenus = {\n    type: 'REMOVE_CONTEXT_MENUS';\n}\n\ntype ContextMenusStoreAction = ContextMenusStoreAction_AddContextMenu | ContextMenusStoreAction_RemoveContextMenus;\n\nexport const contextMenusStore = createStore<ContextMenusStoreState, ContextMenusStoreAction, any, any>(function (state = null, action) {\n    if (action.type === 'ADD_CONTEXT_MENU') {\n        return action.menu;\n    }\n    else if (action.type === 'REMOVE_CONTEXT_MENUS') {\n        return null;\n    }\n    return state;\n});\n\nexport const ContextMenus= (connect(state=>({menus:state}))(({menus}) => menus)) as unknown as ()=> JSX.Element;\n\n/**\n * Create a context menu\n * @param e Pass down `e` from the event handler\n * @param menu Context menu contents\n */\nexport function createContextMenu(e: React.MouseEvent, menu: React.ReactElement): void {\n    e.preventDefault();\n    setTimeout(() => { // This is to fix ripple effect glitch\n        contextMenusStore.dispatch({\n            type: 'ADD_CONTEXT_MENU',\n            menu: <ContextMenu x={e.nativeEvent.pageX} y={e.nativeEvent.pageY}>{menu}</ContextMenu>\n        });\n    }, 50); // Human brain cannot notice 50ms delay\n}\n","import React from 'react';\nimport './menu.scss';\nimport RippleEffect, { handleMyMouseEventsFunction, RippleEffectProps_AutoSettable } from '../elements/ripple-effect';\n\n/**\n * A dropdown menu (not to be confused with `<select>`).\n */\nexport default function Menu(props: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>): JSX.Element {\n    return (\n        <div className=\"menu\" {...props}/>\n    );\n}\n\n/**\n * Dropdown menu contents (created as a separate component so that it can be wrapped by other components).\n */\nMenu.MenuContents= function MenuContents(props: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>): JSX.Element {\n    return (\n        <div className=\"menu-contents\" {...props}/>\n    );\n};\n\nexport type Menu_MenuitemProps = {\n    icon?: string,\n}\n\n/**\n * A menu item.\n */\nMenu.MenuItem= function MenuItem({children, icon, ...rest}: Menu_MenuitemProps & React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>): JSX.Element {\n    const ripple= React.useState<RippleEffectProps_AutoSettable>({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave] = handleMyMouseEventsFunction(ripple);\n    return (\n        <div className=\"menu-item\" {...rest} onMouseDown={mouseDown} onMouseUp={mouseUp} onMouseLeave={mouseLeave}>\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-windowBgRipple)\"/>\n            {icon ? \n                <div className=\"content has-icon\">\n                    <div className=\"icon\" dangerouslySetInnerHTML={{__html: icon}}/>\n                    <span>{children}</span>\n                </div>\n                :\n                <div className=\"content\">\n                    {children}\n                </div>\n            }   \n        </div>\n    );\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './toast.scss';\nimport { createStore } from 'redux';\nimport { connect } from 'react-redux';\n\n/**\n * Renders a toast (a small text which is temporarily shown in the middle of the screen)\n */\nexport default function Toast({children}: {children: React.ReactNode}): JSX.Element {\n    const [closed, setClosed] = React.useState(false);\n    React.useEffect(() => {\n        setTimeout(() => { // Automatically close after 6 seconds\n            setClosed(true); // When an element has a closing dialog, a CSS class should be added to trigger the animation\n            setTimeout(() => { // Then we wait until the animation is finished\n                addToast(null); // And we can safely remove the element\n            }, 2000);\n        }, 6000);\n    }, []);\n    return (\n        <div className={'toast' + (closed? ' closed':'')}>\n            <div className=\"toast-content\">\n                {children}\n            </div>\n        </div>\n    );\n}\nToast.propTypes = {\n    children: PropTypes.node.isRequired,\n};\n\ntype ToastStoreAction_SetToast = {\n    type: 'SET_TOAST';\n    toast: React.ReactNode;\n}\n\nexport const toastStore= createStore<React.ReactNode, ToastStoreAction_SetToast, any, any> (\n    (state=null, action) => {\n        if(action.type=='SET_TOAST') return action.toast;\n        return state;\n    })\n;\n\nexport const Toasts= (connect(state=>({toast: state}))(function Toasts({toast}){\n    return toast;\n})) as unknown as ()=> JSX.Element;\n\nexport function addToast(toast: React.ReactNode): void {\n    toastStore.dispatch({\n        type: 'SET_TOAST',\n        toast\n    });\n}\n","import TdLib from './tdlib';\nimport TdApi from './td_api';\n\ntype OptionInt64ToInt53<T> = \n    T extends TdApi.td_optionValueInteger ? number :\n    T extends TdApi.td_optionValueBoolean ? boolean :\n    T extends TdApi.td_optionValueString ? string :\n    T extends TdApi.td_optionValueEmpty ? undefined :\n    never;\ntype OptionsInt64ToInt53<T> = { [K in keyof T]: OptionInt64ToInt53<T[K]> };\n\n/**\n * Contains all options received from TdLib `updateOption`s\n */\nconst options: OptionsInt64ToInt53<TdApi.TdOptions>={};\n\nTdLib.registerUpdateHandler<TdApi.td_updateOption>('updateOption', function (update) {\n    switch (update.value['@type']) {\n        case 'optionValueInteger':\n            options[update.name] = Number(update.value.value);\n            break;\n        case 'optionValueBoolean':\n            options[update.name] = update.value.value;\n            break;\n        case 'optionValueString':\n            options[update.name] = update.value.value;\n            break;\n        case 'optionValueEmpty':\n            options[update.name] = undefined;\n            break;\n    }\n});\n\nexport default options;\n","import TdApi from '../TdWeb/td_api';\n\n/**\n * Gets message sending status. Can return 3 values:\n * - `\"sending\"`: the message is outgoing and is being sent.\n * - `\"sent\"`: the message is outgoing and was sent.\n * - `\"seen\"`: the message is outgoing and was seen by the other party.\n * - `\"unread\"`: the message is incoming and was not seen by this party.\n * - `\"read\"`: the message is incoming and was seen by this party.\n * @param chat The chat in which the message was sent.\n * @param message The message to check.\n */\nexport function getMessageStatus(chat: TdApi.td_chat|undefined, message: TdApi.td_message|undefined): 'sending' | 'sent' | 'seen' | 'unread' | 'read' | undefined {\n    if (!chat || !message) return undefined;\n    if(message.is_outgoing) {\n        if(message.sending_state) {\n            return 'sending';\n        }\n        if(chat.last_read_outbox_message_id >= message.id) {\n            return 'seen';\n        }\n        return 'sent';\n    }\n    if(chat.last_read_inbox_message_id >= message.id) {\n        return 'read';\n    }\n    return 'unread';\n}","import TdLib from './tdlib';\nimport TdApi from './td_api';\n\n/**\n * Downloads a file. Promise is resolved when the file is downloaded.\n * @param file_id ID of file to be downloaded\n * @param priority From 1 to 32, higher number results in earlier download\n * @returns File object\n */\nexport function downloadFile (file_id: number, priority: number): Promise<TdApi.td_file> {\n    let onReject;\n    TdLib.sendQuery({\n        '@type': 'downloadFile',\n        'file_id': file_id,\n        'priority': priority,\n        'offset': 0,\n        'limit': 0,\n        'synchronous': false\n    }).catch(onReject);\n\n    return new Promise((resolve, reject) => {\n        downloadCallbacks[file_id]= (result: TdApi.td_file) => {\n            resolve(result);\n            delete downloadCallbacks[file_id];\n        };\n        onReject=reject;\n    });\n}\nconst downloadCallbacks: {[key: number]: (result: TdApi.td_file) => void} = {};\n\nTdLib.registerUpdateHandler<TdApi.td_updateFile>('updateFile', function (update) {\n    if(update.file.local.is_downloading_completed){\n        downloadCallbacks[update.file.id]?.(update.file);\n    }\n});\n\nconst cachedFiles: {[key: number]: Blob} = {};\n\n/**\n * Gets file content (downloads if necessary). Promise is resolved with a `filePart` object when file content is ready\n * @param file File object\n * @param priority Download priority from 1 to 32. Higher value = earlier download\n * @param enableCache If true, files smaller than 500KiB will be stored in a cache in the RAM.\n * @returns A `filePart` object\n * \n */\nexport function getFileContent(file: TdApi.td_file, priority: number, enableCache= true): Promise<TdApi.td_filePart> {\n    if(file.id in cachedFiles){ // If we have it in cache, we can use that\n        return Promise.resolve({\n            '@type': 'filePart',\n            data: cachedFiles[file.id]\n        });\n    }\n\n    function resolveFilePart(filePart: TdApi.td_filePart): TdApi.td_filePart {\n        if(enableCache && file.size <= 500*1024) {\n            cachedFiles[file.id]=filePart.data;\n        }\n        return filePart;\n    }\n\n    if(file.local.is_downloading_completed){ // File is already downloaded - only read file\n        return new Promise((resolve, reject) => {\n            TdLib.sendQuery({\n                '@type': 'readFilePart',\n                'file_id': file.id,\n                'offset': 0,\n                'count': 0\n            }).then((f)=>resolve(resolveFilePart(f as TdApi.td_filePart))).catch(reject);\n        });\n    } \n    else if(file.local.is_downloading_active){ // File is already being downloaded - gets quite complex here.\n        return new Promise((resolve, reject) => {\n            const callback = downloadCallbacks[file.id];\n            downloadCallbacks[file.id] = (result) => { // Replace old callback with a new callback that calls the old one and also does its own stuff\n                callback(result); // Call the old callback\n                TdLib.sendQuery({ // Read the file\n                    '@type': 'readFilePart',\n                    'file_id': file.id,\n                    'offset': 0,\n                    'count': 0\n                }).then((f)=>resolve(resolveFilePart(f as TdApi.td_filePart))).catch(reject);\n            };\n        });\n    } else {\n        return new Promise((resolve, reject) => { // File is not downloaded.\n            downloadFile(file.id, priority).then(()=> { // Download it...\n                TdLib.sendQuery({ // ...then read it\n                    '@type': 'readFilePart',\n                    'file_id': file.id,\n                    'offset': 0,\n                    'count': 0\n                }).then((f)=>resolve(resolveFilePart(f as TdApi.td_filePart))).catch(reject);\n            }).catch(reject);\n        });\n    }\n}\n\n/**\n * Converts a blob to a URL\n * @param blob Blob to convert\n * @returns Created URL\n */\nexport function blobToUrl (blob: Blob): string {\n    return (window.URL || window.webkitURL).createObjectURL(blob);\n}\n","export default __webpack_public_path__ + \"static/media/TgLogo.d1ff1195.png\";","import React from 'react';\nimport { blobToUrl, getFileContent } from '../../TdWeb/file';\nimport options from '../../TdWeb/options';\nimport './profile-photo.scss';\nimport tgLogo from '../../ui/img/TgLogo.png';\nimport { saved_messages, replies_userpic } from '../icon/icons';\nimport TdApi from '../../TdWeb/td_api';\n\n/**\n * Converts a name to initials.\n * @param {string} name Input name\n * @returns {string} One or two uppercase letters\n */\nexport function profileNameToInitials(name: string): string {\n    const words=name.replace(/[\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007F]/g,'') // Remove non-word characters\n        .toUpperCase().split(' ');\n    if(words[0].length==0){\n        return '';\n    } else if(words.length===1) {\n        return words[0][0];\n    } else {\n        return words[0][0] + words[words.length-1][0];\n    }\n}\n\ntype ProfilePhotoProps = {\n    /** Chat type id (supergroup id, user id, etc.), used for initials background */\n    id: number|string;\n    /** Chat / user photo (e.g. `chat.photo?.small`) */\n    photo?: TdApi.td_file;\n    /** If false, saved messages icon will be used when user_id = my_id */\n    disableSavedMessages?: boolean;\n    /** Chat/user name, used for initials */\n    name: string;\n}\n\n/**\n * Renders a chat / profile photo.\n */\nexport default function ProfilePhoto (props: ProfilePhotoProps): JSX.Element {\n    const [photo, setPhoto] = React.useState<string|null>(null);\n    const [photoObj, setPhotoObj] = React.useState<TdApi.td_file|undefined>(undefined);\n    const [loaded, setLoaded] = React.useState(false);\n    const isServiceMessages= props.id==options['telegram_service_notifications_chat_id'];\n    const isSavedMessages= props.id==options['my_id'];\n    const isReplies= props.id==options['replies_bot_chat_id'];\n    \n    React.useEffect(() => { // Fetch image data\n        let mounted=true;\n        if(props.photo){\n            if(photoObj!=props.photo){ // No need for any fetch if the same photo is already loaded\n                getFileContent(props.photo, 8).then((file: TdApi.td_FilePart)=> {\n                    if(!mounted) return;\n                    setPhoto(blobToUrl(file.data));\n                    setPhotoObj(props.photo);\n                });\n            }\n        } else { // No photo\n            if(photo && photoObj){\n                setPhoto(null);\n                setPhotoObj(undefined);\n            }\n        }\n        return ()=> {mounted=false;};\n    }, [props.photo]);\n\n    let customIcon: [0|1, string]|undefined; \n    if(isSavedMessages && (!props?.disableSavedMessages)){ // Use saved messages icon instead of user pic (if not disabled)\n        customIcon= [0, saved_messages];\n    }\n    if(isReplies){ // Replies chat has no icons and we supply one ourselves\n        customIcon= [0, replies_userpic];\n    }\n    if((!props.photo) && isServiceMessages) { // Service messages may have no photo (e.g. on test DC)\n        customIcon = [1, tgLogo];\n    }\n    return (\n        <div className=\"profile-photo\">\n            {(!loaded || !(props.photo && photo)) && <Initials id={props.id} name={props.name}/>}\n            {\n                customIcon? (\n                    customIcon[0]?\n                        <React.Fragment>\n                            {(!loaded) && <Initials id={props.id} name={props.name}/>}\n                            <img onLoad={()=> setLoaded(true)} src={customIcon[1]}/>\n                        </React.Fragment>\n                        :\n                        <div className=\"svg\" dangerouslySetInnerHTML={{__html: customIcon[1]}}/>\n                ) : (\n                    (props.photo && photo) && <img onLoad={()=> setLoaded(true)} src={photo}/> \n                )\n            }\n        </div>\n    );\n}\n\ntype InitialsProps= {\n    /** Chat type ID, used to generate background color */\n    id: number|string;\n    /** Chat/user name, used to generate initials */\n    name: string;\n}\n\n/** Renders photo initials fallback */\nfunction Initials({id, name}: InitialsProps): JSX.Element {\n    return (\n        <span className={'initials color_'+ getIdColorCode(id)}>\n            {profileNameToInitials(name)}\n        </span>\n    );\n}\n\nexport function getIdColorCode(id: string|number): number {\n    const map = [1, 8, 5, 2, 4, 4, 6];\n    return map[Math.abs((id || 0) as number) % 7];\n}\n\n/**\n * Returns a chat's type ID. (supergroup Id / basic group ID / user ID)\n * @param chat Input chat\n * @returns Chat type ID\n */\nexport function getChatTypeId(chat: TdApi.td_chat): number {\n    switch (chat?.type?.['@type']) {\n        case 'chatTypeSupergroup': {\n            return chat?.type?.supergroup_id;\n        }\n        case 'chatTypeBasicGroup': {\n            return chat?.type?.basic_group_id;\n        }\n        case 'chatTypePrivate':\n        case 'chatTypeSecret': {\n            return chat?.type?.user_id;\n        }\n    }\n    return 0;\n}\n","import React from 'react';\nimport __, { __fmt, __pl } from './language-pack/language-pack';\nimport TdApi from './TdWeb/td_api';\n\n/**\n * Converts a date and time to a short string.\n * - If the date is in the last 20 hours, the time is displayed in the format HH:MM.\n * - If the date is in the last 7 days, the weekday is displayed.\n * - If the date is older, the date is displayed in the format DD.MM.YY.\n * @param date Input date\n */\nexport function smallDateTimeToString(date: Date|number): string {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    const now = new Date();\n    const yesterday = new Date(now.getTime() - 20 * 60 * 60 * 1000);\n    const lastWeek = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n\n    if (date.getTime() >= yesterday.getTime()) {\n        return timeToString(date);\n    } else if (date.getTime() >= lastWeek.getTime()) {\n        return weekdayToString(date);\n    } else {\n        return dateToString(date);\n    }\n}\n\n/**\n * Formats time in 12-hour format\n * @param date input date\n */\nexport function timeToString(date: Date|number): string {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    let hours = date.getHours();\n    let minutes: string|number = date.getMinutes();\n    const am_pm = hours >= 12 ? 'PM' : 'AM';\n    hours = hours % 12;\n    hours = hours ? hours : 12; // the hour '0' should be '12'\n    minutes = minutes < 10 ? `0${minutes}` : minutes;\n    return `${hours}:${minutes} ${am_pm}`;\n}\n\n/**\n * Formats weekday in WWW format\n * @param date input date\n */\nexport function weekdayToString(date: Date|number): string {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    return weekdays[date.getDay()];\n}\n\n/**\n * Formats date in DD.MM.YY format\n * @param date input date\n */\nexport function dateToString(date: Date|number): string {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    let day: string|number = date.getDate();\n    let month: string|number = date.getMonth() + 1;\n    const year = String(date.getFullYear()).slice(2);\n    if (day < 10) {\n        day = `0${day}`;\n    }\n    if (month < 10) {\n        month = `0${month}`;\n    }\n    return `${day}.${month}.${year}`;\n}\n\n/**\n * Converts a future day to a string.  \n * If the day is today, returns 'today'.  \n * If the day is tomorrow, returns 'tomorrow'.  \n * If the day is neither today or tomorrow, returns the month and day. (eg. 'February 12')\n * @param date Input date\n * @returns `today`, `tomorrow` or month+day\n */\nexport function futureDayToString(date: Date|number): string {\n    if(typeof date == 'number') date= TdLibDateToDate(date);\n    const today = new Date();\n    const tomorrow = new Date(today.getTime() + 24 * 60 * 60 * 1000);\n\n    if (date.getDate() == today.getDate() && date.getMonth() == today.getMonth()) {\n        return 'today';\n    } else if (date.getDate() == tomorrow.getDate() && date.getMonth() == tomorrow.getMonth()) {\n        return 'tomorrow';\n    } else {\n        const months= ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n        return `${months[date.getMonth()]} ${date.getDate()}`;\n    }\n}\n\n/**\n * Converts a duration to string.\n * If the duration is less than 2 minutes, the string is in the format 'X seconds'.\n * If the duration is less than 2 hours, the string is in the format 'X minutes'.\n * If the duration is less than 1 day, the string is in the format 'X hours'.\n * If the duration is longer, the string is in the format 'X days'.\n * @param duration Duration in seconds\n */\nexport function durationToString(duration: number): string {\n    if (duration < 2 * 60) {\n        return `${duration} seconds`;\n    } else if (duration < 2 * 60 * 60) {\n        return `${Math.floor(duration / 60)} minutes`;\n    } else if (duration < 24 * 60 * 60) {\n        return `${Math.floor(duration / 60 / 60)} hours`;\n    } else {\n        return `${Math.floor(duration / 24 / 60 / 60)} days`;\n    }\n}\n\nexport function lastSeenToString(status: TdApi.td_UserStatus): React.ReactNode {\n    switch (status['@type']) {\n        case 'userStatusLastMonth':\n            return __('lng_status_last_month');\n        \n        case 'userStatusLastWeek':\n            return __('lng_status_last_week');\n\n        case 'userStatusOffline': {\n            const current = Math.floor((new Date().getTime()) / 1000);\n            const lastSeen = status.was_online;\n            const diff = current - lastSeen; // Difference in seconds\n            const diffMinutes = Math.floor(diff / 60);\n            const diffHours = Math.floor(diff / 3600);\n            \n            if (diffMinutes < 1)\n            {\n                return __('lng_status_lastseen_now');\n            }\n            if (diffMinutes < 60)\n            {\n                return __pl('lng_status_lastseen_minutes', diffMinutes);\n            }\n            if (diffHours < 12)\n            {\n                return __pl('lng_status_lastseen_hours', diffHours);\n            }\n            \n            const currentDate = TdLibDateToDate(current);\n            const lastSeenDate = TdLibDateToDate(lastSeen);\n\n            if (currentDate.getHours() - diffHours >= 0)\n            {\n                return __fmt('lng_status_lastseen_today', {time: lastSeenDate.toLocaleTimeString('en-US')});\n            }\n            if (currentDate.getHours() - diffHours < 0 && currentDate.getHours() - diffHours > -24)\n            {\n                return __fmt('lng_status_lastseen_yesterday', {time: lastSeenDate.toLocaleTimeString('en-US')});\n            }\n            return __fmt('lng_status_lastseen_date', {date: lastSeenDate.toLocaleDateString('en-US')});\n        }\n\n        case 'userStatusRecently':\n            return __('lng_status_recently');\n\n        case 'userStatusOnline':\n            return __('lng_status_online');\n\n        default: // userStatusEmpty\n            return null;\n    }\n}\n\n/**\n * Converts a TDLIb unix time to a `Date` object.\n */\nexport function TdLibDateToDate(tdLibDate: number): Date {\n    return new Date(tdLibDate * 1000);\n}","import currencies from './currencies.json';\n\n/**\n * Converts currency to string\n * @param currency Three-letter currency code\n * @param total_amount The total amount\n * @returns Formatted currency string\n */\nexport default function currencyAmountToString (currency: keyof typeof currencies, total_amount: number): string {\n    const {symbol, thousands_sep, decimal_sep, symbol_left, space_between, exp}= currencies[currency];\n    const calculatedAmount= total_amount / 10.0**exp;\n    const formattedAmount= calculatedAmount.toFixed(exp).replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, thousands_sep).replace(/\\./, decimal_sep);\n    const withSymbol= symbol_left ? `${symbol}${space_between ? ' ' : ''}${formattedAmount}` : `${formattedAmount}${space_between ? ' ' : ''}${symbol}`;\n    return withSymbol;\n    \n    // var formatter = new Intl.NumberFormat('en-US', {\n    //     style: 'currency',\n    //     currency: currency,\n        \n    //     minimumFractionDigits: 2,\n    //     maximumFractionDigits: 2,\n    // });\n    // return formatter.format(total_amount / 10**currencyObject.exp); // Move two last digits to the right of the decimal point\n}","import { __fmt } from '../language-pack/language-pack';\nimport TdApi from '../TdWeb/td_api';\n\nexport function getUserFullName({first_name, last_name}: TdApi.td_user): string {\n    return last_name ? __fmt('lng_full_name', {first_name, last_name}, false).join('') : first_name;\n}","import React from 'react';\nimport RippleEffect, {handleMyMouseEventsFunction, RippleEffectProps_AutoSettable} from './ripple-effect';\n\ntype SmallButtonProps= {\n    /** The button's content */\n    children: React.ReactNode;\n    /** Fires when the button is clicked */\n    onClick?: () => void;\n    /** Setting to true causes the button to become red */\n    attention?: boolean;\n    //eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [x: string]: any;\n}\n\n/**\n * Renders a small button with accent color\n */\nexport default function SmallButton ({children, attention, ...rest}: SmallButtonProps): JSX.Element {\n    const ripple= React.useState<RippleEffectProps_AutoSettable>({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave]= handleMyMouseEventsFunction(ripple);\n    return (\n        <button \n            className=\"small-button\" \n            data-attention={attention? 'true': 'false'}\n            onMouseDown={mouseDown}\n            onMouseUp={mouseUp}\n            onMouseLeave={mouseLeave}\n            {...rest}>\n\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-lightButtonBgRipple)\"/>\n\n            {/* Because we use absolute positioning on the actual content, we need a copy of it without absolute position to get the correct parent size. */}\n            <div className=\"invisibleText\">\n                {children}\n            </div>\n\n            <div className=\"content\">\n                {children}\n            </div>\n            \n        </button>\n    );\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { createStore } from 'redux';\n\ntype CanBeDialog= any;\ntype DialogStoreState= CanBeDialog[];\n\ntype DialogStoreAction_AddDialog= {\n    type: 'ADD_DIALOG';\n    dialog: CanBeDialog;\n}\ntype DialogStoreAction_RemoveDialog= {\n    type: 'REMOVE_DIALOG';\n    id: string;\n}\ntype DialogStoreAction= DialogStoreAction_AddDialog | DialogStoreAction_RemoveDialog;\n\n/**\n * A redux store which state is an array of objects with {id: unique ID of dialog, element: react element of the dialog}\n */\nexport const dialogStore= createStore<DialogStoreState, DialogStoreAction, any, any> (\n    function (state: DialogStoreState= [], action: DialogStoreAction): DialogStoreState {\n        switch (action.type) {\n            case 'ADD_DIALOG':\n                return [\n                    ...state,\n                    action.dialog\n                ];\n            \n            case 'REMOVE_DIALOG':\n                return state.filter(value =>value.id!=action.id);\n            \n            default:\n                return state;\n        }\n    },\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__?.());\n\n/**\n * Opens a dialog\n * @param id A unique ID for the dialog\n * @param dialog The dialog React element\n */\nexport function addDialog(id: string, dialog: CanBeDialog): void {\n    dialogStore.dispatch({\n        type: 'ADD_DIALOG',\n        dialog: {\n            element: dialog,\n            id: id\n        }\n    });\n}\n\n/**\n * Closes an existing dialog\n * @param id The dialog unique ID\n */\nexport function removeDialog(id: string): void {\n    dialogStore.dispatch({\n        type: 'REMOVE_DIALOG',\n        id: id\n    });\n}\ntype DialogsProps= {\n    // dialogs: DialogStoreState;\n    // dispatch: (action: DialogStoreAction) => void;\n    [key: string]: any;\n}\n\n/**\n * Renders all dialogs.\n */\nconst Dialogs= (connect<{dialogs: DialogStoreState}, unknown, DialogsProps, DialogStoreState>(\n    function (state) {\n        return {dialogs: state || []};\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    })(function Dialogs({dialogs, dispatch, ...rest}: DialogsProps): JSX.Element {\n    return (\n        <div data-dialog={!!dialogs.length} {...rest}>\n            {dialogs.map((el: CanBeDialog) => <React.Fragment key={el.id}>{(el as any).element}</React.Fragment>) || null}\n        </div>\n    );\n}\n));\n\nexport default Dialogs;","import React from 'react';\nimport { removeDialog } from './dialogs';\n\ntype DialogProps= {\n    children: React.ReactNode;\n    /** Dialog width in CSS format */\n    width?: string;\n    /** Unique ID of this dialog, used to close it. */\n    id: string;\n    className?: string;\n}\ntype DialogState= {\n    closing: boolean;\n}\n\n/**\n * Renders a modal dialog\n * Use React ref to access the `close()` method.\n */\nexport default class Dialog extends React.Component<DialogProps, DialogState> {\n    state= {\n        closing: false\n    }\n\n    ref = React.createRef<HTMLDivElement>();\n\n    /** @param {React.SyntheticEvent} e */\n    onClick= (e: React.SyntheticEvent): void => {\n        if (e.target === this.ref.current) {\n            this.close();\n        }\n    }\n\n    render(): JSX.Element {\n        return (\n            <div ref={this.ref} onClick={this.onClick} id={this.props.id} className={'modal-dialog' + ((this.state.closing) ? ' closing ' : ' ') + this.props.className}>\n                <div style={{\n                    'width': this.props.width || 'auto'\n                }}>\n                    {this.props.children}\n                </div>\n            </div>\n        );\n    }\n    \n    close= (): void=> {\n        this.setState({\n            closing: true\n        });\n        setTimeout(() => {\n            removeDialog(this.props.id);\n        }, 1000);\n    }\n}\n","import React from 'react';\nimport SmallButton from '../elements/small-button';\nimport Dialog from './dialog';\nimport __ from '../../language-pack/language-pack';\n\ntype ConfirmDialogProps = {\n    children: React.ReactNode;\n    /** Dialog width in CSS format */\n    width?: string;\n    /** Dialog header */\n    title?: React.ReactNode;\n    /** Text content of the OK button*/\n    OKButtonText?: React.ReactNode;\n    /** Pass true to only show the OK button */\n    hideCancelButton?: boolean;\n    /** Unique ID of this dialog, used to close it. */\n    id: string;\n    /** Called when the OK button is pressed */\n    onOK?: () => void;\n    /** Called when the cancel button is pressed */\n    onCancel?: () => void;\n    /** Third button text (optional) */\n    thirdButton?: React.ReactNode;\n    /** Pass true if third button click closes dialog */\n    thirdButtonClosesDialog?: boolean;\n    /** Called when third button is pressed */\n    onThirdButtonClick?: () => void;\n    /** If true, the OK button will become red, meaning the user should pay attention */\n    attention?: boolean;\n    /** If true, the dialog text will be larger */\n    largeFont?: boolean;\n};\n\n/**\n * Renders a modal dialog with a title and cancel and OK button. OK button text can be changed.\n */\nexport default class ConfirmDialog extends React.Component<ConfirmDialogProps> {\n    dialogRef = React.createRef<Dialog>();\n    handleOK= (): void=> {\n        this.dialogRef.current?.close();\n        this.props.onOK && this.props.onOK();\n    }\n    handleCancel= (): void=> {\n        this.dialogRef.current?.close();\n        this.props.onCancel && this.props.onCancel();\n    }\n    handleButton= (handler: (()=> void) | undefined): void=> {\n        this.dialogRef.current?.close();\n        handler && handler();\n    }\n    render(): JSX.Element {\n        return (\n            <Dialog className=\"confirm-dialog\" id={this.props.id} ref={this.dialogRef} width={this.props.width || '320px'}>\n                <h1>{this.props.title || ''}</h1>\n                <div className={'content' + (this.props.largeFont? ' large-font' : '')}>\n                    {this.props.children}\n                </div>\n                <div className=\"options\">\n                    {this.props.thirdButton ?  (\n                        <SmallButton \n                            className=\"small-button left\"\n                            style={{'float': 'left'}}\n                            onClick={ this.props.thirdButtonClosesDialog ?\n                                ()=>this.handleButton(this.props.onThirdButtonClick)\n                                : this.props.onThirdButtonClick}>\n                            {this.props.thirdButton}\n                        </SmallButton>\n                    ) : null}\n                    {this.props.hideCancelButton ? null : (\n                        <SmallButton onClick={()=>this.handleButton(this.props.onCancel)}>\n                            {__('lng_cancel')}\n                        </SmallButton>\n                    )}\n                    <SmallButton onClick={()=>this.handleButton(this.props.onOK)} attention={this.props.attention}>\n                        {this.props.OKButtonText || __('lng_box_ok')}\n                    </SmallButton>\n                </div>\n            </Dialog>\n        );\n    }\n}\n","import React from 'react';\nimport __ from '../../../language-pack/language-pack';\nimport TdApi from '../../../TdWeb/td_api';\nimport ConfirmDialog from '../../../ui/dialog/confirm-dialog';\nimport { addDialog } from '../../../ui/dialog/dialogs';\nimport LinkButton from '../../../ui/elements/link-button';\nimport './entities.scss';\n\nfunction maybeDeleteNewLines(str: string, doIt: boolean) {\n    return doIt? str.replace(/(\\n|\\r|\\r\\n|\\n\\r)/g, ' ') : str;\n}\n\nexport default function compileEntities(text: TdApi.td_formattedText, singleLine= false): React.ReactNode {\n    let last= 0;\n    const res: React.ReactNode[]= [];\n    /* eslint-disable-next-line no-constant-condition */\n    for(const entity of text.entities) {\n        res.push(maybeDeleteNewLines(text.text.slice(last, entity.offset), singleLine));\n        res.push(getEntityJsx(text.text, entity, singleLine));\n        last= entity.offset + entity.length;\n    }\n    res.push(maybeDeleteNewLines(text.text.slice(last), singleLine));\n    return res;\n}\n\nfunction getEntityJsx(text: string, entity: TdApi.td_textEntity, singleLine=false) {\n    const innerText= maybeDeleteNewLines(text.slice(entity.offset, entity.offset + entity.length), singleLine);\n\n    if(singleLine) {\n        switch(entity.type['@type']) {\n            case 'textEntityTypeEmailAddress':\n                return <span className='part-1'>{innerText}</span>;\n            case 'textEntityTypeSpoiler':\n                return <SpoilerEntity>{innerText}</SpoilerEntity>;\n            default:\n                return innerText;\n        }\n    } else {\n        switch(entity.type['@type']) {\n            // case 'textEntityTypeBankCardNumber':\n            case 'textEntityTypeBold':\n                return <strong>{innerText}</strong>;\n            case 'textEntityTypeBotCommand':\n                return <LinkButton>{innerText}</LinkButton>; //TODO: Send bot command when clicked\n            case 'textEntityTypeCashtag':\n                return <LinkButton>{innerText}</LinkButton>; //TODO: Search for cashtag when clicked\n            case 'textEntityTypeCode':\n                return <code>{innerText}</code>;\n            case 'textEntityTypeEmailAddress':\n                return <LinkButton href={'mailto:'+innerText}>{innerText}</LinkButton>;\n            case 'textEntityTypeHashtag':\n                return <LinkButton>{innerText}</LinkButton>; //TODO: Search for hashtag when clicked\n            case 'textEntityTypeItalic':\n                return <em>{innerText}</em>;\n            // case 'textEntityTypeMediaTimestamp':\n            //     return <LinkButton>{innerText}</LinkButton>; //TODO: Open media when clicked\n            case 'textEntityTypeMention':\n                return <LinkButton>{innerText}</LinkButton>; //TODO: Open user when clicked\n            case 'textEntityTypeMentionName':\n                return <LinkButton>{innerText}</LinkButton>; //TODO: Open user when clicked\n            // case 'textEntityTypePhoneNumber'\n            case 'textEntityTypePre':\n                return <pre>{innerText}</pre>;\n            case 'textEntityTypePreCode':\n                return <pre><code>{innerText}</code></pre>;\n            case 'textEntityTypeSpoiler':\n                return <SpoilerEntity>{innerText}</SpoilerEntity>;\n            case 'textEntityTypeStrikethrough':\n                return <del>{innerText}</del>;\n            case 'textEntityTypeTextUrl': {\n                const url= entity.type.url;\n                return (\n                    <LinkButton title={url} onClick={()=> {\n                        addDialog('textEntityTypeTextUrl_confirm_dialog',\n                            <ConfirmDialog id=\"textEntityTypeTextUrl_confirm_dialog\"\n                                OKButtonText={__('lng_open_link')}\n                                onOK={()=> window.open(url)}\n                                largeFont={true}>\n\n                                {__('lng_open_this_link')} <br/>\n                                <br/>\n                                {url}\n                            </ConfirmDialog>\n                        );\n                    }}>\n                        {innerText}\n                    </LinkButton>\n                );\n            }\n            case 'textEntityTypeUnderline':\n                return <u>{innerText}</u>;\n            case 'textEntityTypeUrl':\n                if (!/^https?:\\/\\//i.test(innerText))\n                    return <LinkButton href={'https://'+innerText}>{innerText}</LinkButton>;\n                return <LinkButton href={innerText}>{innerText}</LinkButton>;\n            default:\n                return innerText;\n        }\n    }\n}\n\n//eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction SpoilerEntity(props: {[key:string]:any}): JSX.Element {\n    const [viewed, setViewed]= React.useState(false);\n\n    return (\n        <span className={'spoiler' + (viewed?' viewed' : '')} onClick={()=>setViewed(true)} {...props}/>\n    );\n}","import __, { _s__, __fmt } from '../../language-pack/language-pack';\nimport TdApi from '../../TdWeb/td_api';\nimport compileEntities from './ui/entities';\nimport React from 'react';\n\ntype MessagePinnedMessageProps = {\n    /** The message which was pinned */\n    message: TdApi.td_message,\n    /** The string representation of the user/chat who pinned the message */\n    from: React.ReactNode|React.ReactNode[],\n}\n\nexport default function MessaagePinnedMessage({message, from}: MessagePinnedMessageProps): JSX.Element {\n    switch (message.content['@type']) {\n        case 'messageAnimation':\n            return <>{__fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_gif'), from: from})}</>;\n\n        case 'messageAudio':\n            return <>{__fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_audio'), from: from})}</>;\n\n        case 'messageContact':\n            return <>{__fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_contact'), from: from})}</>;\n\n        case 'messageAnimatedEmoji':\n        case 'messageDice':\n            return <>{__fmt('lng_action_pinned_message', {text: message.content.emoji, from: from})}</>;\n\n        case 'messageDocument':\n            return <>{__fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_file'), from: from})}</>;\n\n        case 'messageGame':\n            return <>{__fmt('lng_action_pinned_media', {media: __fmt('lng_action_pinned_media_game', {game: message.content.game.title}), from: from})}</>;\n\n        case 'messagePhoto':\n            return <>{__fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_photo'), from: from})}</>;\n\n        case 'messagePoll':\n            return <>{__fmt('lng_action_pinned_message', {text: message.content.poll.question, from: from})}</>;\n\n        case 'messageSticker':\n            return <>{__fmt('lng_action_pinned_media', {media: __fmt('lng_action_pinned_media_emoji_sticker', {emoji: message.content.sticker.emoji}), from: from})}</>;\n        \n        case 'messageText': {\n            let text= message.content.text.text;\n            if( text.length > 21 ) {\n                text = `${text.slice(0, 16)}...`;\n            }\n            const ctext= compileEntities({\n                '@type': 'formattedText',\n                entities: message.content.text.entities,\n                text\n            });\n            return <>{__fmt('lng_action_pinned_message', {text: ctext, from})}</>;\n        }\n        case 'messageUnsupported':\n            return <>{__fmt('lng_action_pinned_message', {text: (_s__('lngd_message_unsupported') as string).slice(0, 16)+'...', from: from})}</>;\n\n        case 'messageLocation':\n        case 'messageVenue':\n            return <>{__fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_location'), from: from})}</>;\n\n        case 'messageVideo':\n            return <>{__fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_video'), from: from})}</>;\n\n        case 'messageVideoNote':\n            return <>{__fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_video_message'), from: from})}</>;\n\n        case 'messageVoiceNote':\n            return <>{__fmt('lng_action_pinned_media', {media: __('lng_action_pinned_media_voice'), from: from})}</>;\n\n        default:\n            return <>{__fmt('lng_action_pinned_message', {text: '', from: from})}</>;\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TdLib from '../../TdWeb/tdlib';\nimport currencyAmountToString from '../sections/payments/currency-tostring';\nimport {getUserFullName} from '../user-misc';\nimport { getChatNoCache } from '../chat-store';\nimport MessagePinnedMessage from './message-pinned-message';\nimport { durationToString, futureDayToString, timeToString } from '../../time-tostring';\nimport __, { _s__, __collection, __fmt, __pl } from '../../language-pack/language-pack';\nimport compileEntities from './ui/entities';\nimport TdApi from '../../TdWeb/td_api';\nimport { UsersStoreState } from '../users-store';\nimport { LanguagePackKey, LanguagePackStringName, LanguagePackStringNamePluralized } from '../../language-pack/language-pack-types';\nimport currencies from '../sections/payments/currencies.json';\n\ntype MessageSummaryWithoutIconProps = {\n    message?: TdApi.td_message,\n    className: string,\n    users: UsersStoreState,\n    chat: TdApi.td_chat,\n}\n\n/**\n * Gets a textual representation of the message without a thumbnail.\n * Usage examples: \n * - Last message in chat list\n * - Search results \n * TODO: add possibility to hide sender name (for search results)\n * @returns A span element containing a textual representation of the message. Contains span.part-1 and span.part-2\n */\nexport default function MessageSummaryWithoutIcon({message, className, users, chat}: MessageSummaryWithoutIconProps): JSX.Element|null {\n    if(!message) return null;\n\n    switch(message.content['@type']) {\n        case 'messageAnimation': // GIF\n            return (\n                <MayHaveCaption\n                    type=\"GIF\" //TODO: Find the localized string\n                    caption={message.content.caption} \n                    className={className} \n                    message={message} \n                    chat={chat}\n                    users={users}/>\n            );\n        \n        case 'messageAudio': { // Audio/music file\n            let title= message.content.audio.title || message.content.audio.file_name; // If there is no title, use file name instead\n            if(message.content.audio.performer) // Prepend performer name\n                title= message.content.audio.performer+ ' ­­– ' + title;\n            return (\n                <MayHaveCaption \n                    type={title} \n                    caption={message.content.caption} \n                    className={className} \n                    message={message} \n                    chat={chat}\n                    users={users}/>\n            );\n        }\n\n        case 'messageBasicGroupChatCreate': // X created the group «xxxx»\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{__fmt('lng_action_created_chat', {from: <SenderFullName chat={chat} message={message} users={users}/>, title: message.content.title})}</span>\n                </span>\n            );\n\n        case 'messageCall': { // Call\n            let text: React.ReactNode|React.ReactNode[] ='';\n            if(message.is_outgoing) { // You made the call\n                switch(message.content.discard_reason?.['@type']) {\n                    case 'callDiscardReasonMissed':\n                        text= __(message.content.is_video? 'lng_call_video_cancelled' : 'lng_call_cancelled');\n                        break;\n                    default:\n                        text= __(message.content.is_video? 'lng_call_video_outgoing' : 'lng_call_outgoing');\n                }\n            } else { // The other user called you\n                switch(message.content.discard_reason?.['@type']) {\n                    case 'callDiscardReasonDeclined':\n                        text= __(message.content.is_video? 'lng_call_video_declined' : 'lng_call_declined');\n                        break;\n                    case 'callDiscardReasonMissed':\n                        text= __(message.content.is_video? 'lng_call_video_missed' : 'lng_call_missed');\n                        break;\n                    default: \n                        text= __(message.content.is_video? 'lng_call_video_incoming' : 'lng_call_incoming');\n                }\n            } \n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">{text}</span>\n                </span>\n            );\n        }\n\n        case 'messageChatAddMembers': { // X added Y\n            // If the user joined the group by themselves, it appears as 'X added X' and that is not accurate.\n            if(message.sender_id['@type']=='messageSenderUser' && message.content.member_user_ids[0] == message.sender_id?.user_id) {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\">{__fmt('lng_action_user_joined', {from: <SenderFullName message={message} chat={chat} users={users}/>})}</span>\n                    </span>\n                );\n            }\n\n            const newMembers= __collection(false, message.content.member_user_ids.map(id=> getUserFullName(users[id])), false);\n            \n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt(newMembers.length> 1 ? 'lng_action_add_users_many' : 'lng_action_add_user', {\n                        from: <SenderFullName message={message} chat={chat} users={users}/>,\n                        users: newMembers,\n                        user: newMembers\n                    })}\n                </span></span>\n            );\n        }\n\n        case 'messageChatChangePhoto': // Chat photo changed\n            // Telegram Desktop shows chat photo change events as 'Photo' instead of 'X changed group photo' or 'Channel photo changed'\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{__('lng_attach_photo')}</span> \n                </span>\n            );\n\n        case 'messageChatChangeTitle': // Chat was renamed\n            if(message.is_channel_post) {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\">{__fmt('lng_action_changed_title_channel', {title: message.content.title})}</span>\n                    </span>\n                );\n            } else {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\">{__fmt('lng_action_changed_title', {\n                            from: <SenderFullName message={message} chat={chat} users={users}/>,\n                            title: message.content.title\n                        })}</span>\n                    </span>\n                );\n            }\n\n        case 'messageChatDeleteMember': { // X removed Y\n            const deletedMember= users[message.content.user_id];\n            if( message.sender_id['@type']=='messageSenderUser' && deletedMember.id == message.sender_id.user_id ) { // Left the group\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_action_user_left', {\n                            from: <SenderFullName message={message} chat={chat} users={users}/>\n                        })}\n                    </span></span>\n                );\n            }\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_kick_user', {\n                        from: <SenderFullName message={message} chat={chat} users={users}/>,\n                        user: getUserFullName(deletedMember)\n                    })}\n                </span></span>\n            );\n        }\n\n        case 'messageChatDeletePhoto': // Chat photo was deleted\n            if(message.is_channel_post) {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\">{__('lng_action_removed_photo_channel')}</span>\n                    </span>\n                );\n            } else {\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_action_removed_photo', {\n                            from:  <SenderFullName message={message} chat={chat} users={users}/>\n                        })}\n                    </span></span>\n                );\n            }\n\n        case 'messageChatJoinByLink': // X joined the group via invite link\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_user_joined_by_link', {\n                        from: <SenderFullName message={message} chat={chat} users={users}/>\n                    })}\n                </span></span>\n            );\n\n        case 'messageChatJoinByRequest': // X was accepted to the group\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_user_joined_by_request', {\n                        from: <SenderFullName message={message} chat={chat} users={users}/>\n                    })}\n                </span></span>\n            );\n\n        case 'messageChatSetTheme':\n            if(message.content.theme_name){\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        <ServiceMessageIncludingYou \n                            message={message} chat={chat} users={users}\n                            lpString=\"lng_action_theme_changed\"\n                            lpString_you=\"lng_action_you_theme_changed\"\n                            params={{emoji: message.content.theme_name}}/>\n                    </span></span>\n                );\n            } else {\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        <ServiceMessageIncludingYou \n                            message={message} chat={chat} users={users}\n                            lpString=\"lng_action_theme_disabled\"\n                            lpString_you=\"lng_action_you_theme_disabled\"/>\n                    </span></span>\n                );\n            }\n\n        case 'messageChatSetTtl': { // Auto-delete / self-destruct timer changed\n            const ttlTimeUnit= {\n                86400: __('lng_ttl_about_duration1'), \n                604800: __('lng_ttl_about_duration2'),\n                2678400: __('lng_ttl_about_duration3'),\n            }[message.content.ttl];\n\n            if(message.is_channel_post) {\n                if(message.content.ttl) { // If TTL is disabled, it will be set to 0\n                    return (\n                        <span className={className}><span className=\"part-1\">\n                            {__fmt('lng_action_ttl_changed_channel', {\n                                duration: ttlTimeUnit\n                            })}\n                        </span></span>\n                    );\n                } else {\n                    return (\n                        <span className={className}><span className=\"part-1\">\n                            {__('lng_action_ttl_removed_channel')}\n                        </span></span>\n                    );\n                }\n            } else {\n                if(message.content.ttl) { // If TTL is disabled, it will be set to 0\n                    return (\n                        <span className={className}><span className=\"part-1\">\n                            <ServiceMessageIncludingYou \n                                message={message} chat={chat} users={users}\n                                lpString=\"lng_action_ttl_changed\"\n                                lpString_you=\"lng_action_ttl_changed_you\"\n                                params={{duration: ttlTimeUnit}}/>\n                        </span></span>\n                    );\n                } else {\n                    return (\n                        <span className={className}><span className=\"part-1\">\n                            <ServiceMessageIncludingYou \n                                message={message} chat={chat} users={users}\n                                lpString=\"lng_action_ttl_removed\"\n                                lpString_you=\"lng_action_ttl_removed_you\"/>\n                        </span></span>\n                    );\n                }\n            }\n        }\n\n        case 'messageChatUpgradeFrom': // It is too complicated to get basic group last message.\n        case 'messageChatUpgradeTo': // TODO: It's complicated, but it should be done.\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{_s__('lngd_action_upgrade_to_supergroup')}</span>\n                </span>\n            );\n\n        case 'messageContact': // Shared contact\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">{__('lng_in_dlg_contact')}</span>\n                </span>\n            );\n\n        case 'messageContactRegistered': // X joined Telegram\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_user_registered', {\n                        from: <SenderFullName message={message} chat={chat} users={users}/>\n                    })}\n                </span></span>\n            );\n\n        case 'messageCustomServiceAction': // ¯\\_(ツ)_/¯\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{message.content.text}</span>\n                </span>\n            );\n\n        case 'messageAnimatedEmoji':\n        case 'messageDice': // Dice (🎲🎯🎳⚽🏀)\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">{message.content.emoji}</span>\n                </span>\n            );\n\n        case 'messageDocument': // File/document\n            return (\n                <MayHaveCaptionThumbnail\n                    type={message.content.document.file_name} \n                    caption={message.content.caption} \n                    className={className} \n                    message={message} \n                    chat={chat}\n                    users={users}\n                    thumbnails={[message.content?.document?.minithumbnail?.data]}/>\n            );\n        \n        case 'messageExpiredPhoto': \n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{__('lng_ttl_photo_expired')}</span>\n                </span>\n            );\n        \n        case 'messageExpiredVideo':\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{__('lng_ttl_video_expired')}</span>\n                </span>\n            );\n        \n        case 'messageGame': // Game\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">🎮 {message.content.game.title}</span>\n                </span>\n            );\n\n        case 'messageGameScore': { // X scored {score} in {game}\n            // Text to use if game message is not available\n            const noGameTitleFallback= (\n                <span className={className}><span className=\"part-1\">\n                    <ServiceMessageIncludingYou \n                        message={message} chat={chat} users={users}\n                        lpString=\"lng_action_game_score_no_game\"\n                        lpString_you=\"lng_action_game_you_scored_no_game\"\n                        count={message.content.score}/>\n                </span></span>\n            );\n\n            // Get game message\n            const GameScoreWithTitle= React.lazy(()=> new Promise<{default: React.ComponentType}>(resolve=> {\n                message.content = message.content as TdApi.td_messageGameScore;\n                TdLib.sendQuery({\n                    '@type': 'getMessage',\n                    chat_id: chat.id,\n                    message_id: message.content.game_message_id\n                }).then(\n                    result=> { \n                        //eslint-disable-next-line react/display-name\n                        resolve({ default: ()=> {\n                            message.content = message.content as TdApi.td_messageGameScore;\n                            result = result as TdApi.td_message;\n                            result.content = result.content as TdApi.td_messageGame;\n\n                            return (\n                                <span className={className}><span className=\"part-1\">\n                                    <ServiceMessageIncludingYou \n                                        message={message} chat={chat} users={users}\n                                        lpString=\"lng_action_game_score\"\n                                        lpString_you=\"lng_action_game_you_scored\"\n                                        count={message.content.score}\n                                        params={{game: result.content.game.title}}/>\n                                </span></span>\n                            );\n                        }});\n                    },\n                    ()=> { // Failed\n                        //eslint-disable-next-line react/display-name\n                        resolve({ default: ()=> noGameTitleFallback});\n                    }\n                );\n            }));\n\n            return (\n                <React.Suspense fallback={noGameTitleFallback}>\n                    <GameScoreWithTitle/>\n                </React.Suspense>\n            );\n        }\n\n        case 'messageInvoice': // Invoice (a buyable product)\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">{message.content.title}</span>\n                </span>\n            );\n\n        case 'messageLocation': // Location\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">{__('lng_maps_point')}</span>\n                </span>\n            );\n\n        case 'messagePassportDataSent': { // You sent some Telegram passport data\n            const passportDataTypeToString= {\n                'passportElementTypeAddress':               'lng_passport_address',\n                'passportElementTypeBankStatement':         'lng_passport_address_statement',\n                'passportElementTypeDriverLicense':         'lng_passport_identity_license',\n                'passportElementTypeEmailAddress':          'lng_passport_email_title',\n                'passportElementTypeIdentityCard':          'lng_passport_identity_card',\n                'passportElementTypeInternalPassport':      'lng_passport_identity_internal',\n                'passportElementTypePassport':              'lng_passport_identity_passport',\n                'passportElementTypePassportRegistration':  'lng_passport_address_registration',\n                'passportElementTypePersonalDetails':       'lng_passport_personal_details',\n                'passportElementTypePhoneNumber':           'lng_passport_phone_title',\n                'passportElementTypeRentalAgreement':       'lng_passport_address_agreement',\n                'passportElementTypeTemporaryRegistration': 'lng_passport_address_temporary',\n                'passportElementTypeUtilityBill':           'lng_passport_address_bill',\n            };\n            const passportDataTypes= message.content.types.map(type=> (__(passportDataTypeToString[type['@type']] as LanguagePackKey) as string).toLowerCase());\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_secure_values_sent', {\n                        user: chat.title,\n                        documents: passportDataTypes.join(', ')\n                    })}\n                </span></span>\n            );\n        }\n\n        case 'messagePaymentSuccessful': { // You paid [real] money\n            // To be shown if invoice is not available\n            const noInvoiceTitleFallback= (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_payment_done', {\n                        amount: currencyAmountToString(message.content.currency as keyof typeof currencies, message.content.total_amount),\n                        user: chat.title\n                    })}\n                </span></span>\n            );\n\n            // Get invoice message\n            const PaymentInfoWithInvoiceTitle= React.lazy(()=>new Promise<{default:React.ComponentType}>(resolve=> {\n                message.content= message.content as TdApi.td_messagePaymentSuccessful;\n                TdLib.sendQuery({\n                    '@type': 'getMessage',\n                    chat_id: message.content.invoice_chat_id,\n                    message_id: message.content.invoice_message_id\n                }).then(\n                    result=> { \n                        //eslint-disable-next-line react/display-name\n                        resolve({ default: ()=> {\n                            message.content= message.content as TdApi.td_messagePaymentSuccessful;\n                            result= result as TdApi.td_message;\n                            result.content= result.content as TdApi.td_messageInvoice;\n                            return (\n                                <span className={className}><span className=\"part-1\">\n                                    {__fmt('lng_action_payment_done_for', {\n                                        amount: currencyAmountToString(message.content.currency as keyof typeof currencies, message.content.total_amount),\n                                        user: chat.title,\n                                        invoice: result.content.title\n                                    })}\n                                </span></span>\n                            );\n                        }});\n                    },\n                    ()=> { // Failed\n                        resolve({ default: ()=> noInvoiceTitleFallback});\n                    }\n                );\n            }));\n\n            return (\n                <React.Suspense fallback={noInvoiceTitleFallback}>\n                    <PaymentInfoWithInvoiceTitle/>\n                </React.Suspense>\n            );\n        }\n\n        case 'messagePhoto': // A photo\n            if(message.content.is_secret) { // Self-destructing photo, not implemented\n                if(message.is_outgoing) { // You sent it\n                    return (\n                        <span className={className}>\n                            <span className=\"part-1\">{__('lng_ttl_photo_sent')}</span>\n                        </span>\n                    );\n                } else { // You received it\n                    return (\n                        <span className={className}><span className=\"part-1\">\n                            {__fmt('lng_ttl_photo_received', {\n                                from: <SenderFullName message={message} chat={chat} users={users}/>\n                            })}\n                        </span></span>\n                    );\n                }\n            } else { // Normal photo\n                return (\n                    <MayHaveCaptionThumbnail \n                        type={__('lng_in_dlg_photo') as string}\n                        caption={message.content.caption} \n                        className={className} \n                        message={message} \n                        chat={chat}\n                        users={users}\n                        thumbnails={[message.content?.photo?.minithumbnail?.data]}/>\n                );\n            }\n        \n        case 'messagePinMessage': { // Pinned message\n\n            // Get pinned message message\n            const PinnedMessageMessage= React.lazy(()=>new Promise<{default:React.ComponentType}>(resolve=> {\n                message.content= message.content as TdApi.td_messagePinMessage;\n                TdLib.sendQuery({\n                    '@type': 'getMessage',\n                    chat_id: chat.id,\n                    message_id: message.content.message_id\n                }).then(\n                    result=> { \n                        //eslint-disable-next-line react/display-name\n                        resolve({ default: ()=> {\n                            message.content= message.content as TdApi.td_messagePinMessage;\n                            result= result as TdApi.td_message;\n                            return (\n                                <span className={className}><span className=\"part-1\">\n                                    <MessagePinnedMessage message={result} from={<SenderFullName message={message} chat={chat} users={users}/>}/>\n                                </span></span>\n                            );\n                        }});\n                    },\n                    ()=> { // Failed\n                        //eslint-disable-next-line react/display-name\n                        resolve({ default: ()=> (\n                            <span className={className}><span className=\"part-1\">\n                                {__fmt('lng_action_pinned_media', {\n                                    from: <SenderFullName message={message} chat={chat} users={users}/>,\n                                    media: __('lng_deleted_message')\n                                })}\n                            </span></span>\n                        )});\n                    }\n                );\n            }));\n\n            return (\n                <React.Suspense fallback={\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_action_pinned_media', {\n                            from: <SenderFullName message={message} chat={chat} users={users}/>,\n                            media: __('lng_contacts_loading')\n                        })}\n                    </span></span>\n                }>\n                    <PinnedMessageMessage/>\n                </React.Suspense>\n            );\n        }\n        \n        case 'messagePoll':\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{message.content.poll.question}</span>\n                </span>\n            );\n        \n        // case 'messageProximityAlertTriggered': // TODO: Reproduce this message and implement it\n        // case 'messageScreenshotTaken':\n        case 'messageSticker': // Sticker\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">\n                        {__fmt('lng_in_dlg_sticker_emoji', {\n                            emoji: message.content.sticker.emoji\n                        })}\n                    </span>\n                </span>\n            );\n\n        case 'messageSupergroupChatCreate': // Supergroup created\n            if(message.is_channel_post) {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\">{__('lng_action_created_channel')}</span>\n                    </span>\n                );\n            } else {\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_action_created_chat', {\n                            from: <SenderFullName message={message} chat={chat} users={users}/>,\n                            title: message.content.title\n                        })}\n                    </span></span>\n                );\n            }\n\n        case 'messageText':\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-2\">{compileEntities(message.content.text, true)}</span>\n                </span>\n            );\n\n        case 'messageUnsupported': // Is not supported :(\n            return ( //TODO localize\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-2\">{_s__('lngd_message_unsupported')}</span>\n                </span>\n            );\n        \n        case 'messageVenue': // Venue/location\n            return ( //TODO find the translation string\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">Location, </span>\n                    <span className=\"part-2\">{message.content.venue.title}</span>\n                </span>\n            );\n\n        case 'messageVideo': // Video\n            if(message.content.is_secret) { // Self-destructing photo, not implemented\n                if(message.is_outgoing) { // You sent it\n                    return (\n                        <span className={className}>\n                            <span className=\"part-1\">{__('lng_ttl_video_sent')}</span>\n                        </span>\n                    );\n                } else { // You received it\n                    return (\n                        <span className={className}><span className=\"part-1\">\n                            {__fmt('lng_ttl_video_received', {\n                                from: <SenderFullName message={message} chat={chat} users={users}/>\n                            })}\n                        </span></span>\n                    );\n                }\n            } else { // Normal photo\n                return (\n                    <MayHaveCaptionThumbnail\n                        type={__('lng_in_dlg_video') as string}\n                        caption={message.content.caption} \n                        className={className} \n                        message={message} \n                        chat={chat}\n                        users={users}\n                        isVideo={true}\n                        thumbnails={[message.content?.video?.minithumbnail?.data]}/>\n                );\n            }\n\n        case 'messageVideoNote':\n            return (\n                <span className={className}>\n                    <MessageSummarySender message={message} chat={chat} users={users}/>\n                    <span className=\"part-1\">{__('lng_in_dlg_video_message')}</span>\n                </span>\n            );\n\n        case 'messageVideoChatScheduled':\n            if(message.is_channel_post) {\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_action_group_call_scheduled_channel', {\n                            date: __fmt('lng_mediaview_date_time', {\n                                date: futureDayToString(message.content.start_date),\n                                time: timeToString(message.content.start_date)\n                            })\n                        })}\n                    </span></span>\n                );\n            } else {\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_action_group_call_scheduled_group', {\n                            from: <SenderFullName message={message} chat={chat} users={users}/>,\n                            date: __fmt('lng_mediaview_date_time', {\n                                date: futureDayToString(message.content.start_date),\n                                time: timeToString(message.content.start_date)\n                            })\n                        })}\n                    </span></span>\n                );\n            }\n\n        case 'messageVideoChatStarted':\n            if(message.is_channel_post) {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\">{__('lng_action_group_call_started_channel')}</span>\n                    </span>\n                );\n            } else {\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_action_group_call_started_group', {\n                            from: <SenderFullName message={message} chat={chat} users={users}/>\n                        })}\n                    </span></span>\n                );\n            }\n\n        case 'messageVideoChatEnded':\n            if(message.is_channel_post) {\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_action_group_call_finished', {\n                            duration: durationToString(message.content.duration)\n                        })}\n                    </span></span>\n                );\n            } else {\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_action_group_call_finished_group', {\n                            from: <SenderFullName message={message} chat={chat} users={users}/>,\n                            duration: durationToString(message.content.duration)\n                        })}\n                    </span></span>\n                );\n            }\n\n        case 'messageInviteVideoChatParticipants': {\n            const invitedMembers= __collection(true, message.content.user_ids.map(id=> // convert user IDs to names\n                getUserFullName(users[id])), false); // A, B, and C\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt((invitedMembers.length==1 ? 'lng_action_invite_user' : 'lng_action_invite_users_many'), {\n                        from: <SenderFullName message={message} chat={chat} users={users}/>,\n                        user: invitedMembers,\n                        users: invitedMembers,\n                        chat: __('lng_action_invite_user_chat')\n                    })}\n                </span></span>\n            );\n        }\n\n        case 'messageVoiceNote':\n            return (\n                <MayHaveCaption \n                    type={__('lng_in_dlg_audio') as string}\n                    caption={message.content.caption} \n                    className={className} \n                    message={message} \n                    chat={chat}\n                    users={users}/>\n            );\n\n        case 'messageWebsiteConnected':\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_bot_allowed_from_domain', {\n                        domain: message.content.domain_name\n                    })}\n                </span></span>\n            );\n\n        default:\n            return null;\n    }\n}\n\ntype MayHaveCaptionProps= {\n    /** Message type, e.g. 'GIF', 'Video' */\n    type: string,\n    /** Message caption, can be empty */\n    caption: TdApi.td_formattedText,\n\n    className: string,\n    /** Message object */\n    message: TdApi.td_message,\n    /** The chat in which the message was sent */\n    chat: TdApi.td_chat,\n    /** A dictionary of all users */\n    users: UsersStoreState,\n}\n\n/** If caption has a value, adds a comma to type and returns type */ \nfunction MayHaveCaption({type, caption, className, message, chat, users}: MayHaveCaptionProps): JSX.Element {\n    if(caption?.text) type+=',';\n    return (\n        <span className={className}>\n            <MessageSummarySender message={message} chat={chat} users={users}/>\n            <span className=\"part-1\">{type}</span> <span className=\"part-2\">{compileEntities(caption, true)}</span>\n        </span>\n    );\n}\n\ntype MayHaveCaptionThumbnailsProps= {\n    /** An array of one or more base64-encoded image data */\n    thumbnails?: (string|undefined)[],\n    /** If true, a tiny play icon will be shown on the image */\n    isVideo?: boolean,\n    /** Message type, e.g. 'GIF', 'Video' */\n    type: string,\n    /** Message caption, can be empty */\n    caption: TdApi.td_formattedText,\n\n    className: string,\n    /** Message object */\n    message: TdApi.td_message,\n    /** The chat in which the message was sent */\n    chat: TdApi.td_chat,\n    /** A dictionary of all users */\n    users: UsersStoreState,\n}\n\n/** If caption has a value, adds a comma to type and returns type */ \nfunction MayHaveCaptionThumbnail({thumbnails, isVideo, type, caption, className, message, chat, users}: MayHaveCaptionThumbnailsProps): JSX.Element {\n    if(!thumbnails?.length) return <MayHaveCaption type={type} caption={caption} className={className} message={message} chat={chat} users={users}/>;\n    return (\n        <span className={className}>\n            <MessageSummarySender message={message} chat={chat} users={users}/>\n            {thumbnails.map((data, i) => data && <span className={'thumbnail'+ (isVideo? ' video': '')} key={i}><img src={'data:image/jpeg;base64,'+data}/></span>)} \n            {caption?.text? \n                <span className=\"part-2\">{compileEntities(caption, true)}</span>\n                :<span className=\"part-1\">{type}</span> \n            }\n        </span>\n    );\n}\n\ntype SenderFullNameProps= {\n    message: TdApi.td_message,\n    chat: TdApi.td_chat,\n    users: UsersStoreState,\n    includeYou?: boolean,\n}\n\n/** Sender's first name + last name */\nexport function SenderFullName({message, chat, users, includeYou}: SenderFullNameProps): JSX.Element {\n    if(includeYou) { // Use 'You' if the message is outgoing?\n        return message.is_outgoing ? <>{__('lng_from_you')}</> : <SenderFullName message={message} chat={chat} users={users}/>;\n    }\n    const sender=message.sender_id;\n    if(sender['@type']=='messageSenderUser') {\n        const user=users[sender.user_id];\n        return <>{getUserFullName(user)}</>; \n    } else if(sender['@type']=='messageSenderChat') { // Anonymous admin\n        return <>{chat.title}</>;\n    } else {\n        throw new Error('sender was neither user nor chat');\n    }\n}\n\ntype ServiceMessageIncludingYouProps= {\n    /** The message object */\n    message: TdApi.td_message,\n    /** The chat in which the message was sent */\n    chat: TdApi.td_chat,\n    /** A dictionary of all users */\n    users: UsersStoreState,\n    /** Language pack string key for the service message */\n    lpString: LanguagePackStringName,\n    /** Language pack string key for the service message if the service message is outgoing */\n    lpString_you: LanguagePackStringName,\n    /** Parameters for the language pack string */\n    params?: {[key: string]: React.ReactNode|React.ReactNode[]},\n    /** If provided, the language pack strings will be treated as pluralized */\n    count?: number,\n}\n\n/**\n * Formats a service message which 'from' can be 'You' or a user's full name\n */\nexport function ServiceMessageIncludingYou({message, chat, users, lpString, lpString_you, params={}, count=undefined}: ServiceMessageIncludingYouProps): JSX.Element {\n    let string= lpString_you;\n    let sender;\n    if(!message.is_outgoing){\n        string= lpString;\n\n        if(message.sender_id['@type']=='messageSenderUser') {\n            const user=users[message.sender_id.user_id];\n            sender= getUserFullName(user); \n        } else if(message.sender_id['@type']=='messageSenderChat') { // Anonymous admin\n            sender= chat.title;\n        }\n    }\n\n    if(count==undefined) {\n        return <>{__fmt(string as Exclude<LanguagePackStringName, LanguagePackStringNamePluralized>, {\n            from: sender,\n            ...params\n        })}</>;\n    } else {\n        return <>{__pl(string, count, {\n            from: sender,\n            ...params\n        })}</>;\n    }\n}\n\ntype MessageSummarySenderProps= {\n    /** Message to check the sender */\n    message: TdApi.td_message,\n    /** Chat in which the message was sent */\n    chat: TdApi.td_chat,\n    /** A dictionary of all users */\n    users: UsersStoreState,\n}\n\n/** Short sender names in the beginning of message previews */\nexport function MessageSummarySender({message, chat, users}: MessageSummarySenderProps): JSX.Element|null {\n    if(!message) return null;\n\n    let part1;\n    if(chat && (!message.is_channel_post)) { // Channel posts dont have sender names\n        if(message.is_outgoing) {\n            part1= __('lng_from_you');\n        } else if(['chatTypeBasicGroup', 'chatTypeSupergroup'].includes(chat.type['@type'])) { // Message is sent in a group\n            if(message.sender_id['@type']=='messageSenderUser') {\n                part1= users[message.sender_id.user_id].first_name;\n            }\n        }\n        if(message.sender_id['@type']=='messageSenderChat') {\n            part1= getChatNoCache(message.sender_id.chat_id)?.title;\n        }\n    }\n    return part1? <span className=\"sender\">{__fmt('lng_dialogs_text_from_wrapped', {from: part1})} </span> : null;\n}","import raw from 'raw.macro';\n\nexport const menu_add_account = raw('./add_account.svg');\nexport const menu_archive = raw('./archive.svg');\nexport const menu_collapse = raw('./collapse.svg');\nexport const menu_expand = raw('./expand.svg');\nexport const menu_info = raw('./info.svg');\nexport const menu_leave = raw('./leave.svg');\nexport const menu_move_from_menu = raw('./move_from_menu.svg');\nexport const menu_move_to_menu = raw('./move_to_menu.svg');\nexport const menu_pin = raw('./pin.svg');\nexport const menu_report = raw('./report.svg');\nexport const menu_unarchive = raw('./unarchive.svg');\nexport const menu_unpin = raw('./unpin.svg');","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport TdLib from '../../../TdWeb/tdlib';\nimport RippleEffect, { handleMyMouseEvents, RippleEffectProps_AutoSettable } from '../../../ui/elements/ripple-effect';\nimport { dialogs_bot, dialogs_channel, dialogs_chat, dialogs_pinned, dialogs_received, dialogs_sending, dialogs_sent, dialogs_verified_check, dialogs_verified_star } from '../../../ui/icon/icons';\nimport { isChatVerified, isChatWithDeletedAccount } from '../../chat-misc';\nimport options from '../../../TdWeb/options';\nimport { getMessageStatus } from '../../message-misc';\nimport __, { __pl } from '../../../language-pack/language-pack';\nimport { createContextMenu } from '../../../ui/menu/context-menu';\nimport ProfilePhoto, { getChatTypeId } from '../../../ui/components/profile-photo';\nimport { smallDateTimeToString } from '../../../time-tostring';\nimport MessageSummaryWithoutIcon from '../../message/message-summary-noicon';\nimport Menu from '../../../ui/menu/menu';\nimport Toast, { addToast } from '../../../ui/dialog/toast';\nimport { addDialog } from '../../../ui/dialog/dialogs';\nimport ConfirmDialog from '../../../ui/dialog/confirm-dialog';\nimport chatStore from '../../chat-store';\nimport { ChatWPosition } from './chat-list';\nimport { UsersStoreState } from '../../users-store';\nimport TdApi from '../../../TdWeb/td_api';\nimport { menu_archive, menu_pin, menu_unarchive, menu_unpin } from '../../../ui/icon/menu/menu';\n\ntype ChatListItemSelfProps = {\n    /** The chat (TdApi.td_chat) */\n    chat: ChatWPosition;\n    /** A boolean value which should be `true` if the chat is currently open */\n    selected: boolean;\n}\n\ntype ChatListItemStoreProps = {\n    users: UsersStoreState;\n}\n\ntype ChatListItemProps = ChatListItemSelfProps & ChatListItemStoreProps;\n\ntype ChatListItemState = {\n    ripple: RippleEffectProps_AutoSettable\n}\n\n/**\n * Renders a single chat\n */\nclass ChatListItem extends React.Component<ChatListItemProps, ChatListItemState> {\n    constructor(props: ChatListItemProps | Readonly<ChatListItemProps>) {\n        super(props);\n        [this.mouseDown, this.mouseUp, this.mouseLeave]= handleMyMouseEvents(this);\n    }\n    state= {\n        ripple: {\n            state: 'off'\n        }\n    } as const;\n    \n    mouseDown: (e: React.MouseEvent<HTMLDivElement>) => void;\n    mouseUp: (e: React.MouseEvent<HTMLDivElement>) => void;\n    mouseLeave: (e: React.MouseEvent<HTMLDivElement>) => void;\n\n    shouldComponentUpdate(nextProps: ChatListItemProps, nextState: ChatListItemState): boolean {\n        function getUser(props: ChatListItemProps): TdApi.td_user|null { // Gets the user which is the other party of the chat. Used to see if the needed user has changed\n            if(props.chat.type['@type']=='chatTypePrivate') {\n                return props.users[props.chat.type.user_id];\n            }\n            return null;\n        }\n        return nextProps.chat.id !== this.props.chat.id\n            || nextProps.chat.last_message !== this.props.chat.last_message\n            || nextProps.chat.draft_message !== this.props.chat.draft_message\n            || nextProps.chat.unread_count !== this.props.chat.unread_count\n            || nextProps.chat.unread_mention_count !== this.props.chat.unread_mention_count\n            || nextProps.chat.is_marked_as_unread !== this.props.chat.is_marked_as_unread\n            || nextProps.chat.position.is_pinned !== this.props.chat.position.is_pinned\n            || nextProps.chat.photo?.small?.id !== this.props.chat.photo?.small?.id\n            || nextProps.chat.title !== this.props.chat.title\n            || nextProps.chat.last_read_outbox_message_id !== this.props.chat.last_read_outbox_message_id\n            || nextProps.selected !== this.props.selected\n            || nextState.ripple !== this.state.ripple\n            || getUser(nextProps) !== getUser(this.props);\n    }\n    openChat = () => {\n        chatStore.dispatch({\n            type: 'SELECT_CHAT',\n            chat_id: this.props.chat.id\n        });\n    }\n    render(): JSX.Element {\n        const chat= {...this.props.chat}; // Clone chat object to avoid mutating it. Mutating it causes Saved messages and Deleted account chats to get past shouldComponentUpdate.\n        let chatType= '';\n        if (chat.type?.['@type'] == 'chatTypeBasicGroup' ||      // Groups are basic groups and non-channel supergroups\n                (chat.type?.['@type'] == 'chatTypeSupergroup' &&\n                chat.type?.is_channel == false)\n        ){\n            chatType= dialogs_chat;\n        } \n        else if (chat.type?.['@type'] == 'chatTypeSupergroup' && // Channels are supergroups with is_channel set to true\n                chat.type?.is_channel == true){\n            chatType= dialogs_channel;\n        } \n        else if ((chat.type?.['@type'] == 'chatTypePrivate') &&  // Bots are private chats with bot user type\n                (this.props.users[chat.type?.user_id]?.type?.['@type'] == 'userTypeBot')){\n            chatType= dialogs_bot;\n        }\n        if (chat.id==options['replies_bot_chat_id']) { // Replies bot does not have a type icon\n            chatType= '';\n        }\n\n        if(isChatWithDeletedAccount(chat, this.props.users)) {\n            chat.title= __('lng_deleted') as string; // Chat object is a copy, so there is no problem with mutating it.\n        }\n\n        const isVerified= isChatVerified(chat);\n\n        if (chat.id==options['my_id']) {\n            chat.title= __('lng_saved_messages') as string;\n        }\n\n        let messageStatus = null;\n        switch(getMessageStatus(chat, chat.last_message)) { // Is the message sending, sent or seen?\n            case 'sending': \n                messageStatus = <span className=\"message-status-icon sending\" dangerouslySetInnerHTML={{__html: dialogs_sending}}/>;\n                break;\n            case 'sent': \n                messageStatus = <span className=\"message-status-icon sent\" dangerouslySetInnerHTML={{__html: dialogs_sent}}/>;\n                break;\n            case 'seen': \n                messageStatus = <span className=\"message-status-icon seen\" dangerouslySetInnerHTML={{__html: dialogs_received}}/>;\n                break;\n        }\n\n        let unreadBadge = null;\n        const unreadBadgeClass= chat.notification_settings.mute_for ? 'unread-badge muted' : 'unread-badge';\n        // Show the mention badge alone if there is exactly one mention and no other unread messages\n        if (chat.unread_mention_count == 1 && chat.unread_count == chat.unread_mention_count) {\n            unreadBadge = <span className=\"unread-badge mention\">@</span>;\n        } \n        // Show the mention badge with unread badge together if there are more than one unread messages and there are mentions\n        else if (chat.unread_mention_count > 0 && chat.unread_count > 1 ) {\n            unreadBadge = <React.Fragment>\n                <span className=\"unread-badge mention\">@</span>\n                <span className={unreadBadgeClass}>{chat.unread_count}</span>\n            </React.Fragment>;\n        }\n        // Show the unread badge alone if there are no mentions and there are unread messages\n        else if (chat.unread_count > 0 && chat.unread_mention_count == 0) {\n            unreadBadge = <span className={unreadBadgeClass}>{chat.unread_count}</span>;\n        }\n        // Show an empty badge if chat is manually marked as unread\n        else if (chat.is_marked_as_unread) {\n            unreadBadge = <span className={unreadBadgeClass}></span>;\n        }\n\n        let isOnline= false; // User online status\n        if((chat.type['@type']== 'chatTypePrivate') && // Only private chats (except saved messages and service notifications)\n            (chat.id!=options['my_id']) && (chat.id!=options['telegram_service_notifications_chat_id']) ){ \n            const user= this.props.users[chat.type.user_id];\n            if(user) {\n                isOnline= user.type['@type'] == 'userTypeRegular' && user.status['@type'] == 'userStatusOnline'; // Shouldn't be a bot\n            }\n        }\n\n        return(\n            <div className={'chat' + (this.props.selected? ' active' : '')} onClick={this.openChat}\n                onContextMenu={e=> createContextMenu(e, <ChatContextMenu chat={chat}/>)}\n                onMouseDown={this.mouseDown} onMouseUp={this.mouseUp} onMouseLeave={this.mouseLeave}>\n                \n                <RippleEffect {...this.state.ripple} color=\"var(--theme-color-dialogsRippleBg)\"/>\n                <div className=\"content\" data-online={isOnline ? 'true' : 'false'}>\n                    <ProfilePhoto name={chat.title} photo={chat.photo?.small} id={getChatTypeId(chat)}/>\n                    <div className=\"details\">\n                        <div className=\"top\">\n                            <div className=\"left\">\n                                <div className=\"type-icon\" dangerouslySetInnerHTML={{__html: chatType}}></div>\n                                <div className=\"title\">{chat.title}</div>\n                                {isVerified && <span className=\"verified-icon\">\n                                    <span className=\"verified-icon-star\" dangerouslySetInnerHTML={{__html: dialogs_verified_star}}></span>\n                                    <span className=\"verified-icon-check\" dangerouslySetInnerHTML={{__html: dialogs_verified_check}}></span>\n                                </span>}\n                            </div>\n                            <div className=\"right\">\n                                {messageStatus}\n                                {chat.last_message?.date && <span className=\"date\">{smallDateTimeToString(chat.last_message.date)}</span>}\n                            </div>\n                        </div>\n                        <div className=\"bottom\">\n                            <div className=\"left\">\n                                {(chat.draft_message && !unreadBadge) ?  // I don't know why, but Telegram Desktop does not show the draft message if the chat is unread.\n                                    <span className=\"last-message\">\n                                        <span className=\"draft\">{__('lng_from_draft')}:</span> <span className=\"part-2\">{(chat.draft_message.input_message_text as TdApi.td_inputMessageText).text.text}</span>\n                                    </span> \n                                    :\n                                    <MessageSummaryWithoutIcon message={chat.last_message} users={this.props.users} chat={chat} className=\"last-message\"/>\n                                }\n                            </div>\n                            <div className=\"right\">\n                                {unreadBadge || ( // Unread badge overrides pinned icon\n                                    chat.position?.is_pinned && <span className=\"pinned_icon\" dangerouslySetInnerHTML={{__html: dialogs_pinned}}></span>\n                                )}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nexport const Chat = (connect<ChatListItemStoreProps, unknown, ChatListItemSelfProps, UsersStoreState>(state=> ({users: state}))(ChatListItem)) as unknown as React.ComponentType<ChatListItemSelfProps>;\n\ntype ChatContextMenuProps = {\n    chat: ChatWPosition\n}\n\n/** Renders the context menu of a chat */\nfunction ChatContextMenu({chat}: ChatContextMenuProps): JSX.Element {\n    const [movableChatLists, setMovableChatLists] = React.useState<React.ReactNode>([]);\n\n    // Archive/unarchive chats\n    React.useEffect(() => {\n        TdLib.sendQuery({ // Only TDLib can know what lists we can add the chat to\n            '@type': 'getChatListsToAddChat',\n            chat_id: chat.id\n        }).then((result: TdApi.td_chatLists | TdApi.td_error) => {\n            result= result as TdApi.td_chatLists;\n            setMovableChatLists(result.chat_lists.map(chatList=> {\n                const text= { // Only archive / unarchive\n                    'chatListMain': __('lng_archived_remove'), \n                    'chatListArchive': __('lng_archived_add'),\n                    'chatListFilter': undefined\n                }[chatList['@type']];\n                if(!text) return;\n                const icon= { // Only archive / unarchive\n                    'chatListMain': menu_unarchive, \n                    'chatListArchive': menu_archive,\n                    'chatListFilter': undefined\n                }[chatList['@type']];\n                return (\n                    <Menu.MenuItem key={'chat_filter_id' in chatList ? chatList.chat_filter_id : chatList['@type']} onClick={() => {\n                        TdLib.sendQuery({\n                            '@type': 'addChatToList',\n                            chat_id: chat.id,\n                            chat_list: chatList\n                        }).then(() => {\n                            if(chatList['@type'] == 'chatListMain') {\n                                addToast(<Toast>{__('lng_archived_removed')}</Toast>);\n                            } \n                            else if(chatList['@type'] == 'chatListArchive') {\n                                addToast(<Toast>{__('lng_archived_added')}</Toast>);\n                            }\n                        });\n                    }} icon={icon}>\n                        {text}\n                    </Menu.MenuItem>\n                );\n            }));\n        });\n    }, []);\n\n    return (\n        <Menu.MenuContents>\n            {movableChatLists /* Archive/unarchive */}\n            <Menu.MenuItem onClick={()=> { // Pin/unpin\n                TdLib.sendQuery({\n                    '@type': 'toggleChatIsPinned',\n                    chat_list: chat.position.list,\n                    chat_id: chat.id,\n                    is_pinned: !chat.position.is_pinned\n                }).catch(error=> {\n                    // Maximum pinned messages\n                    if(error.code == 400) {\n                        const max= (chat.position.list['@type'] == 'chatListMain'? options['pinned_chat_count_max'] : options['pinned_archived_chat_count_max']) as number;\n                        addDialog('maximum-pinned-chats-reached', (\n                            <ConfirmDialog id=\"maximum-pinned-chats-reached\" largeFont={true} hideCancelButton={true}>\n                                {__pl('lng_error_pinned_max', max)}\n                            </ConfirmDialog>\n                        ));\n                    }\n                });\n            }} icon={chat.position.is_pinned? menu_unpin : menu_pin}>\n                {chat.position.is_pinned? __('lng_context_unpin_from_top') : __('lng_context_pin_to_top')}\n            </Menu.MenuItem>\n        </Menu.MenuContents>\n    );\n}\nChatContextMenu.propTypes = {\n    chat: PropTypes.object.isRequired\n};","import React from 'react';\nimport { connect, Provider } from 'react-redux';\nimport TdLib from '../../../TdWeb/tdlib';\nimport chatStore, { ChatListUnreadData, ChatStoreState, ChatStoreUnreadData, compareChatList } from '../../chat-store';\nimport './chat-list.scss';\nimport { archive_userpic, history_to_down } from '../../../ui/icon/icons';\nimport usersStore from '../../users-store';\nimport ScrollView from '../../../ui/scroll/scrollbar';\nimport LinkButton from '../../../ui/elements/link-button';\nimport { chatTitleOrDeletedAccount } from '../../chat-misc';\nimport RippleEffect, { handleMyMouseEventsFunction, RippleEffectProps_AutoSettable } from '../../../ui/elements/ripple-effect';\nimport { createContextMenu } from '../../../ui/menu/context-menu';\nimport Menu from '../../../ui/menu/menu';\nimport Toast, { addToast } from '../../../ui/dialog/toast';\nimport IconButton from '../../../ui/elements/icon-button';\nimport { chatListScrollToTopEvent } from './chat-folders';\nimport __ from '../../../language-pack/language-pack';\nimport { Chat } from './chat-list-item';\nimport TdApi from '../../../TdWeb/td_api';\nimport { ConnectionStoreState } from '../../../TdWeb/connectionStore';\nimport Scrollbars from 'react-custom-scrollbars-2';\nimport { menu_collapse, menu_expand, menu_move_to_menu } from '../../../ui/icon/menu/menu';\n\nexport type ChatWPosition = TdApi.td_chat & {position: TdApi.td_chatPosition};\n\n/**\n * Returns a sorted list of all chats in the given chat list\n * \n * Also for every chat, sets `chat.position` to the matching position (creates copy instead of modifying original object)\n * @param chats\n * @param list\n */\nexport function getChatsFromList(chats: TdApi.td_chat[], list: TdApi.td_ChatList): ChatWPosition[] {\n    return ((chats.map<any>((chat: TdApi.td_chat): (TdApi.td_chat|ChatWPosition|false) => { // Step 1 - get the chat positions which refer to the current list\n        for( const position of chat.positions ) {\n            if (compareChatList(list, position.list)) {\n                if( position.order=='0' ) return false; // Replace a chat without a suitable position with `false`\n                return {\n                    ...chat,\n                    position: position // Store the position in chat object\n                };\n            }\n        }\n        return chat;\n    }) as (TdApi.td_chat|ChatWPosition|false)[])\n        .filter(chat => chat!=false && 'position' in chat) as ChatWPosition[]) // Step 2 - Remove `false` values (chats outside the list)\n        .sort((a, b) => { // Step 3 - Sort it by position.order\n            const order1= a.position.order, order2= b.position.order;\n\n            if (order1 == order2) {\n                return 0;\n            }\n            if (order1 < order2) {\n                return 1;\n            }\n            return -1;\n        });\n}\n\ntype ChatListProps= {\n    chats: TdApi.td_chat[],\n    list: TdApi.td_ChatList,\n    unread: ChatStoreUnreadData,\n    selectedChat: number,\n}\n\ntype ChatListStoreProps= {connectionState: ConnectionStoreState}\n\ntype ChatListState= {\n    scrollToTopVisible: boolean,\n    chatListFinished: boolean,\n}\n\n/**\n * Renders the chats within a chat list\n */\nconst ChatList= (connect<ChatListStoreProps, unknown, ChatListProps, ConnectionStoreState>(state=> ({connectionState: state}))(\n    class ChatList extends React.Component<ChatListProps & ChatListStoreProps, ChatListState> {\n        state= {\n            scrollToTopVisible: false,\n            chatListFinished: false\n        }\n        scrollRef= React.createRef<Scrollbars>();\n\n        onScroll= (e: React.UIEvent) => {\n            const visible= (e.target as any).scrollTop > 480;\n            if (visible != this.state.scrollToTopVisible) {\n                this.setState({scrollToTopVisible: visible});\n            }\n        }\n\n        // When updating, TDLib sends updates of type updateChatLastMessage, where only the last one is needed.\n        // This greatly hurts performance.\n        // However, we can workaround it by not re-rendering until all updates have arrived.\n        shouldComponentUpdate(nextProps: ChatListProps & ChatListStoreProps, nextState: ChatListState): boolean {\n            return (nextProps.chats !== this.props.chats \n                || nextProps.list !== this.props.list \n                || nextProps.unread !== this.props.unread\n                || nextProps.connectionState !== this.props.connectionState\n                || nextProps.selectedChat !== this.props.selectedChat\n                || nextState.scrollToTopVisible !== this.state.scrollToTopVisible\n                || nextState.chatListFinished !== this.state.chatListFinished)\n                && nextProps.connectionState != 'connectionStateUpdating'\n                && nextState.chatListFinished; // Do not re-render if updating\n        }\n\n        render() {\n            // Get chats from the list (this needs to be repeated on every modification)\n            const array= \n                getChatsFromList(this.props.chats, this.props.list)\n                    .map(chat=>\n                        <Chat key={chat.id} chat={chat} selected={this.props.selectedChat == chat.id}/>\n                    );\n            \n            return (\n                <React.Fragment>\n                    <ScrollView scrollRef={this.scrollRef} id=\"chat-list\" scrollBarWidth=\"4\" onScroll={this.onScroll}>\n                        {this.props.list['@type']=='chatListMain' && (\n                            <Provider store={chatStore}>\n                                <ArchivedChatsItem chats={this.props.chats}/>\n                            </Provider>\n                        )}\n                        <Provider store={usersStore}>\n                            {array.length ? array :  <EmptyChatList list={this.props.list} unread={this.props.unread}/>}\n                        </Provider>\n                    </ScrollView>\n                    <IconButton icon={history_to_down} onClick={this.scrollToTop}\n                        className={'history-to-down '+(this.state.scrollToTopVisible ? 'visible' : '')}/>\n                </React.Fragment>\n            );\n        }\n\n        scrollToTop= () => {\n            (this.scrollRef.current as any)?.view.scroll({\n                top: 0,\n                behavior: 'smooth',\n            });\n        }\n\n        componentDidMount() {\n            chatListScrollToTopEvent[0]= this.scrollToTop;\n            // Request TDLib to return chats in main list and archive list\n            TdLib.sendQuery({\n                '@type': 'loadChats',\n                'chat_list': {\n                    '@type': 'chatListMain'\n                },\n                'limit': 50\n            }).then(()=> {\n                this.setState({\n                    chatListFinished: true\n                });\n            });\n            TdLib.sendQuery({\n                '@type': 'loadChats',\n                'chat_list': {\n                    '@type': 'chatListArchive'\n                },\n                'limit': 50\n            });\n        }\n    }\n));\nexport default ChatList;\n\ntype ArchivedChatsItemProps= {\n    /** A list of all chats (not just current list) */\n    chats: TdApi.td_chat[],\n}\n\ntype ArchivedChatsItemStoreProps= {\n    archiveButtonState: 'collapsed'|'expanded'|'hidden-collapsed'|'hidden-expanded',\n    unread: ChatListUnreadData,\n}\n\nconst ArchivedChatsItem= (connect<ArchivedChatsItemStoreProps, unknown, ArchivedChatsItemProps, ChatStoreState>((state) => ({\n    archiveButtonState: state.archiveButtonState,\n    unread: state.unread.archive\n})) (function ArchivedChatsItem({chats, unread, archiveButtonState}: ArchivedChatsItemProps & ArchivedChatsItemStoreProps) {\n    const chatsInList = getChatsFromList(chats, {'@type': 'chatListArchive'}); // Check if there are any archived chats\n    if(!chatsInList.length) return null; // If there are no archived chats, render nothing\n\n    // Ripple\n    const ripple= React.useState<RippleEffectProps_AutoSettable>({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave]= handleMyMouseEventsFunction(ripple);\n\n    function onArchiveOpen() {\n        chatStore.dispatch({\n            type: 'SET_ARCHIVE_STATE',\n            archiveState: 'open'\n        });\n    }\n\n    // Change button type to collapsed/expanded/moved to main menu\n    function setButtonState(state: 'collapsed'|'expanded'|'hidden-collapsed'|'hidden-expanded'): void {\n        chatStore.dispatch({\n            type: 'SET_ARCHIVE_BUTTON_STATE',\n            archiveButtonState: state\n        });\n    }\n\n    const moveToMainMenuToast= <Toast>{__('lng_context_archive_to_menu_info')}</Toast>;\n\n    switch(archiveButtonState) {\n        case 'expanded': // Looks like a regular chat\n        default:\n            return (\n                <div \n                    className=\"chat archived\" onClick={onArchiveOpen}\n                    onMouseDown={mouseDown} onMouseUp={mouseUp} onMouseLeave={mouseLeave}\n                    onContextMenu={e=> createContextMenu(e, (\n                        <Menu.MenuContents>\n                            <Menu.MenuItem onClick={()=>{\n                                setButtonState('collapsed');\n                                localStorage.setItem('dibgram-archived-chats-button-mode', 'collapsed');\n                            }} icon={menu_collapse}>\n                                {__('lng_context_archive_collapse')}\n                            </Menu.MenuItem>\n                            <Menu.MenuItem onClick={()=>{\n                                setButtonState('hidden-expanded');\n                                localStorage.setItem('dibgram-archived-chats-button-mode', 'hidden-expanded');\n                                addToast(moveToMainMenuToast);\n                            }} icon={menu_move_to_menu}>\n                                {__('lng_context_archive_to_menu')}\n                            </Menu.MenuItem>\n                        </Menu.MenuContents>\n                    ))}>\n                    <RippleEffect {...ripple[0]} color=\"var(--theme-color-dialogsRippleBg)\"/>\n                    <div className=\"content\">\n                        <div className=\"profile-photo\">\n                            <div className=\"svg\" dangerouslySetInnerHTML={{__html: archive_userpic}}/>\n                        </div>\n                        <div className=\"details\">\n                            <div className=\"top\">\n                                <div className=\"left\">\n                                    <div className=\"title\">{__('lng_archived_name')}</div>\n                                </div>\n                            </div>\n                            <div className=\"bottom\">\n                                <div className=\"left\">\n                                    <div className=\"last-message\">\n                                        <span className=\"part-1\">\n                                            {chatsInList\n                                                .filter(chat=> chat.unread_count > 0)\n                                                .map(chat => chatTitleOrDeletedAccount(chat) + ', ')\n                                                .join('')}\n                                        </span>\n                                        <span className=\"part-2\">\n                                            {chatsInList\n                                                .filter(chat=> chat.unread_count == 0)\n                                                .map(chat => chatTitleOrDeletedAccount(chat))\n                                                .join(', ')}\n                                        </span>\n                                    </div>\n                                </div>\n                                {unread.unread_messages_count? (\n                                    <div className=\"right\">\n                                        <span className=\"unread-badge muted\">{unread.unread_messages_count}</span>\n                                    </div>\n                                ) : null}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            );\n\n        case 'collapsed': // Only title / tiny icon\n            return (\n                <div\n                    className=\"chat archived collapsed\" onClick={onArchiveOpen}\n                    onMouseDown={mouseDown} onMouseUp={mouseUp} onMouseLeave={mouseLeave}\n                    onContextMenu={e=> createContextMenu(e, (\n                        <Menu.MenuContents>\n                            <Menu.MenuItem onClick={()=>{\n                                setButtonState('expanded');\n                                localStorage.setItem('dibgram-archived-chats-button-mode', 'expanded');\n                            }} icon={menu_expand}>\n                                {__('lng_context_archive_expand')}\n                            </Menu.MenuItem>\n                            <Menu.MenuItem onClick={()=>{\n                                setButtonState('hidden-collapsed');\n                                localStorage.setItem('dibgram-archived-chats-button-mode', 'hidden-collapsed');\n                                addToast(moveToMainMenuToast);\n                            }} icon={menu_move_to_menu}>\n                                {__('lng_context_archive_to_menu')}\n                            </Menu.MenuItem>\n                        </Menu.MenuContents>\n                    ))}>\n                    <RippleEffect {...ripple[0]} color=\"var(--theme-color-dialogsRippleBg)\"/>\n                    <div className=\"content\">\n                        {__('lng_archived_name')}\n                        {unread.unread_messages_count? (\n                            <div className=\"details\">\n                                <span className=\"unread-badge muted\">{unread.unread_messages_count}</span>\n                            </div>\n                        ) : null}\n                    </div>\n                </div>\n            );\n        case 'hidden-expanded': // Not here, it's in main menu\n        case 'hidden-collapsed':\n            return null;\n    }\n}) as unknown as React.FunctionComponent<ArchivedChatsItemProps>);\n\ntype EmptyChatListProps = {\n    /** The active chat list */\n    list: TdApi.td_ChatList,\n    /** Unread data */\n    unread: ChatStoreUnreadData,\n}\n\n/** Renders the empty chat list fallback */\nfunction EmptyChatList({list, unread}: EmptyChatListProps): JSX.Element {\n    const loadingFallBack= (\n        <div className=\"empty\">\n            <div>{__('lng_profile_loading')}</div>\n        </div>\n    );\n    if(list['@type']=='chatListFilter'){ // Empty filter / Filter not loaded\n        if(unread.filters?.[list.chat_filter_id]?.total_chats_count !== 0) return loadingFallBack;\n        return (\n            <div className=\"empty\">\n                <div>{__('lng_no_chats_filter')}</div>\n                <LinkButton>{__('lng_filters_edit')}</LinkButton>\n            </div>\n        );\n    } else { // There are no chats at all / Chats not loaded\n        if(unread.main?.total_chats_count !== 0) return loadingFallBack;\n        return (\n            <div className=\"empty\">\n                <div>{__('lng_no_chats')}</div>\n                <LinkButton>{__('lng_add_contact_button')}</LinkButton>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport './search-box.scss';\nimport { info_close } from '../../../../ui/icon/icons';\nimport __ from '../../../../language-pack/language-pack';\n\n/**\n * Renders the search box.\n */\nexport default function SearchBox(props: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>): JSX.Element {\n    return (\n        <div id=\"search-box\">\n            <input \n                placeholder={__('lng_dlg_filter') as string}\n                {...props}/>\n            <button \n                className=\"clear\" \n                onClick={()=> props.onChange && props.onChange({target: {value: ''}} as any)}\n                data-visible={((props.value as string) || '').length}\n                dangerouslySetInnerHTML={{__html: info_close}}>\n            </button>\n        </div>\n    );\n}\n","import { createStore } from 'redux';\nimport TdLib from './tdlib';\nimport TdApi from './td_api';\n\ntype ConnectionStoreAction_SetConnection= {\n    type: 'SET_CONNECTION',\n    connection: 'connectionStateWaitingForNetwork' | 'connectionStateConnectingToProxy' | 'connectionStateConnecting' | 'connectionStateUpdating' | 'connectionStateReady'\n}\ntype ConnectionStoreAction= ConnectionStoreAction_SetConnection;\n\nexport type ConnectionStoreState = 'connectionStateWaitingForNetwork' | 'connectionStateConnectingToProxy' | 'connectionStateConnecting' | 'connectionStateUpdating' | 'connectionStateReady';\n\nconst connectionStore = createStore<ConnectionStoreState, ConnectionStoreAction, any, any>(\n    (state = 'connectionStateConnecting', action) => {\n        switch (action.type) {\n            case 'SET_CONNECTION':\n                return  action.connection;\n            default:\n                return state;\n        }\n    }\n);\n\nTdLib.registerUpdateHandler<TdApi.td_updateConnectionState>('updateConnectionState', (update) => {\n    connectionStore.dispatch({\n        type: 'SET_CONNECTION',\n        connection: update.state['@type']\n    });\n});\nexport default connectionStore;","import React from 'react';\nimport './nav-animation.scss';\n\ntype NavAnimationProps = {\n    children?: React.ReactNode | React.ReactNode[],\n    /** The child screen content, only needed when open */\n    innerScreen?: React.ReactNode | React.ReactNode[],\n    /** The class name to apply to the outer element */\n    className?: string,\n    /** The class name to apply to the inner element */\n    innerClass?: string,\n    /** The current state of the animation. Can be `open`, `closing` or `closed` */\n    state: 'open' | 'closing' | 'closed',\n    /**\n     * The type of animation to use:\n     * - `slide-over`: The parent screen swipes a little to left, while the child screen slides in from the right. \n     *   A shadow is also shown over the parent screen in the animation.\n     * - `swipe-fade`: More subtle animation, the parent screen fades out while moving left, while at the same time the child screen fades in from the right.\n     */\n    mode: 'slide-over' | 'swipe-fade',\n\n    //eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [key: string]: any,\n}\n\n/**\n * Renders two navigation sections (outer and inner) with an animation between them\n * \n * You need to set a background color to the outer section. (it has the CSS class 'nav-animation-outer')\n */\nexport default function NavAnimation({ children, innerScreen, className, innerClass, state, mode, ...props }: NavAnimationProps): JSX.Element {\n    return (\n        <div className={'nav-animation ' + mode + ' ' + state + ' ' + className} {...props}>\n            <div className=\"outer\">\n                {children}\n            </div>\n            {state!='closed' && \n                <div className={'inner ' + innerClass}>\n                    {innerScreen}\n                </div>\n            }\n        </div>\n    );\n}\n\nexport function closeNavAnimation(getState: (()=>'open'|'closing'|'closed'), setState: (state: 'closed'|'closing') => void): void {\n    // First set state to closing, which triggers the closing animation. After that, we can delete the element.\n    setState('closing');\n    setTimeout(() => {\n        if(getState() == 'closing') { // This condition is to prevent glitches when archive is opened again before 2s\n            setState('closed');\n        }\n    }, 2000);\n}\n","import React from 'react';\nimport { connect, Provider } from 'react-redux';\nimport ConnectionState from '../../../ui/components/connecting';\nimport ChatList from './chat-list';\nimport SearchBox from './search/search-box';\nimport HamburgerMenuButton from './hamburger-menu/menu-button';\nimport connectionStore from '../../../TdWeb/connectionStore';\nimport IconButton from '../../../ui/elements/icon-button';\nimport './chat-list-bar.scss';\nimport { info_back } from '../../../ui/icon/icons';\nimport chatStore, { ChatStoreState, ChatStoreUnreadData } from '../../chat-store';\nimport NavAnimation, { closeNavAnimation } from '../../../ui/elements/nav-animation';\nimport __ from '../../../language-pack/language-pack';\nimport TdApi from '../../../TdWeb/td_api';\n\ntype ChatListBarProps = {\n    onHamburgerMenuOpened: () => void;\n};\n\ntype ChatListBarStateProps = {\n    useFolders: boolean;\n    chats: TdApi.td_chat[];\n    list: TdApi.td_ChatList;\n    archiveState: 'open' | 'closing' | 'closed';\n    unread: ChatStoreUnreadData,\n    selectedChat: number;\n}\n\n/**\n * Renders the navigation menu, containing chat list, search field and search results [and the main menu button]\n */\nconst ChatListBar = (connect<ChatListBarStateProps, unknown, ChatListBarProps, ChatStoreState>(function (state) {\n    return {\n        useFolders: (state.filters || []).length != 0,\n        chats: state.chats, \n        list: state.currentChatList,\n        archiveState: state.archiveState,\n        unread: state.unread,\n        selectedChat: state.selectedChat,\n    };\n})(function ChatListBar({useFolders, chats, list, archiveState, unread, selectedChat, onHamburgerMenuOpened}) {\n    const [searchText, setSearchText] = React.useState('');\n    \n    function closeArchive() {\n        closeNavAnimation(() => chatStore.getState().archiveState,\n            state => {\n                chatStore.dispatch({\n                    type: 'SET_ARCHIVE_STATE',\n                    archiveState: state\n                });\n            }\n        );\n    }\n\n    return (\n        <React.Fragment>\n            <NavAnimation \n                mode=\"slide-over\" \n                id=\"chat-list-bar\"\n                state={archiveState}\n                innerClass=\"archived-chats\"\n                innerScreen={<ArchiveScreen chats={chats} closeArchive={closeArchive} selectedChat={selectedChat} unread={unread}/>}>\n                <div className=\"chat-list-header\">\n                    {(!useFolders) && <HamburgerMenuButton.WithoutFolders onClick={onHamburgerMenuOpened}/>}\n                    <SearchBox value={searchText} onChange={e => setSearchText(e.target.value)}/>\n                </div>\n                <Provider store={connectionStore}>\n                    <ChatList chats={chats} list={list} unread={unread} selectedChat={selectedChat}/>\n                </Provider>\n            </NavAnimation>\n            <Provider store={connectionStore}>\n                <ConnectionState/>\n            </Provider>\n        </React.Fragment>\n    );\n})) as unknown as React.ComponentType<ChatListBarProps>;\nexport default ChatListBar;\n\ntype ArchiveScreenProps = {\n    unread: ChatStoreUnreadData,\n    selectedChat: number,\n    chats: TdApi.td_chat[],\n    closeArchive: () => void;\n}\n\nfunction ArchiveScreen({unread, selectedChat, chats, closeArchive}: ArchiveScreenProps): JSX.Element {\n    return (\n        <Provider store={connectionStore}>\n            <div className=\"chat-list-header\">\n                <IconButton icon={info_back} onClick={closeArchive}/>\n                {unread.main.unread_unmuted_messages_count? (\n                    <div className=\"unread-badge\">\n                        <span>{unread.main.unread_unmuted_messages_count}</span>\n                    </div>\n                ): null}\n                <div className=\"title\">{__('lng_archived_name')}</div>\n            </div>\n            <ChatList chats={chats} list={{'@type': 'chatListArchive'}} unread={unread} selectedChat={selectedChat}/>\n        </Provider>\n    );\n}\n","export default '0.0.2-beta3';","import React from 'react';\nimport PropTypes from 'prop-types';\nimport RippleEffect, {handleMyMouseEventsFunction, RippleEffectProps_AutoSettable} from '../elements/ripple-effect';\nimport './button.scss';\n\ntype ToolStripButtonProps = React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement> & {\n    children?: React.ReactNode | React.ReactNode[];\n    icon?: string;\n    text: React.ReactNode|React.ReactNode[];\n    hideIcon?: boolean;\n}\n\n/**\n * Renders a tool strip button. Has an icon and children, if provided will align to the right.\n */\nexport default function ToolStripButton({icon, text, children, hideIcon, ...rest}: ToolStripButtonProps): JSX.Element {\n    const ripple = React.useState<RippleEffectProps_AutoSettable>({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave]= handleMyMouseEventsFunction(ripple);\n    return (\n        <div className=\"tool-strip-button\" {...rest}\n            onMouseDown={mouseDown} onMouseUp={mouseUp} onMouseLeave={mouseLeave}>\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-windowBgRipple)\"/>\n            <div className=\"content\">\n                {(!hideIcon) && <div className=\"icon\" dangerouslySetInnerHTML={{__html: icon || ''}}></div>} \n                <div className=\"title\">{text}</div>\n                {children && (\n                    <div className=\"right\">\n                        {children}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\nToolStripButton.propTypes = {\n    /** Icon HTML */\n    icon: PropTypes.string,\n    /** Button text */\n    text: PropTypes.string,\n    /** Optionally, an element to show aligned to right */\n    children: PropTypes.node,\n    /** If true, does not show the icon. This removes the space allocated to the icon. */\n    hideIcon: PropTypes.bool\n};","/**\n * There are 3 ways to import the items\n * 1. import each component from the respective file\n * 2. import each component from tool-strip.js\n * 3. import the default export from tool-strip.js and access the object members\n * You can use whichever you want.\n */\n\nimport ToolStripButton from './button';\nimport ToolStripSection from './section';\nimport ToolStripSeparator from './separator';\nimport ToolStripToggleButton from './toggle-button';\n\n/**\n * A collection of different components to create a generic menu.\n * \n * Contains sections, menu-items, two kinds of separators, switches, check-boxes, etc.s\n */\nconst ToolStrip = {\n    Button: ToolStripButton,\n    Section: ToolStripSection,\n    ToggleButton: ToolStripToggleButton,\n    Separator: ToolStripSeparator\n};\nexport default ToolStrip;\nexport { ToolStripButton, ToolStripSection, ToolStripToggleButton, ToolStripSeparator };\n","import React from 'react';\nimport './section.scss';\n\n/**\n * Renders a tool strip section. Use different sections when using separators.\n */\nexport default function Section(props: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>): JSX.Element {\n    return <div className=\"tool-strip-section\" {...props}/>;\n}\n// Too simple for a separate file, no?","import React from 'react';\nimport ToolStripButton from './button';\nimport './toggle-button.scss';\n\ntype ToolStripToggleButtonProps = {\n    /** HTML of the icon to display */\n    icon?: string;\n    /** Button text */\n    text: React.ReactNode|React.ReactNode[];\n    /** Callback when the button is toggled */\n    onChange: (value: boolean) => void;\n    /** the on/off state of the button */\n    isActive: boolean;\n\n    //eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [key: string]: any;\n}\n\nexport default function ToolStripToggleButton({icon, text, onChange, isActive, ...rest}: ToolStripToggleButtonProps): JSX.Element {\n    function toggle() {\n        onChange(!isActive);\n    }\n    return (\n        <ToolStripButton icon={icon} text={text} onClick={toggle} {...rest}>\n            <input type=\"checkbox\" className=\"toggle-button\" checked={isActive} readOnly/>\n        </ToolStripButton>\n    );\n}\n","import React from 'react';\nimport './separator.scss';\n\n/**\n * Renders a tool strip button. Has an icon and children, if provided will align to the right.\n */\nexport default function ToolStripSeparator(props: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>): JSX.Element {\n    return (\n        <div className=\"tool-strip-separator\" {...props}/>\n    );\n}","// DIBgram themes are converted to CSS in runtime here.\n\nimport { ThemeObject } from './theme';\n\nexport function convertThemeToCSS(theme: ThemeObject): {[property: string]: string} { // Convert theme colors to CSS vars\n    const css: {[property: string]: string} = {};\n    for(const name in theme){\n        const obj= theme[name];\n        if(typeof obj.value == 'string') {\n            css['--theme-color-' + name]= obj.value;\n        } else if(typeof obj.value == 'object') { // A color is equal to another color\n            css['--theme-color-' + name]= `var(--theme-color-${obj.value.equals})`;\n        }\n    }\n    return css;\n}","import React from 'react';\nimport classic from './classic.json';\nimport day from './day.json';\nimport tinted from './tinted.json';\nimport night from './night.json';\nimport { convertThemeToCSS } from './dibgram-theme-to-css';\nimport { createStore } from 'redux';\nimport { connect } from 'react-redux';\nimport { getRtlMode } from '../../language-pack/language-pack';\n\nconst themes = { day, classic, tinted, night };\n\nexport type ThemeObject= {\n    [colorName: string]: {\n        value: string | {equals: string},\n        comment?: string|null,\n    }\n}\n\nexport type ThemeName= 'classic' | 'day' | 'tinted' | 'night';\n\nfunction getThemeFromStorage(): ThemeName {\n    let theme = localStorage.getItem('dibgram-theme');\n    if (!theme) { // if theme is not set in localStorage, use OS theme\n        theme= window.matchMedia?.('(prefers-color-scheme: dark)').matches ? 'night' : 'day';\n        localStorage.setItem('dibgram-theme', theme);\n    }\n    return theme as ThemeName;\n}\n\nexport type ThemeStoreState= {\n    theme: ThemeName,\n    rtl: boolean,\n}\n\nexport type ThemeStoreAction= {\n    type: 'SET_THEME',\n    theme: ThemeName,\n} | {\n    type: 'SET_RTL',\n    rtl: boolean,\n}\n\nexport const themeStore = createStore<ThemeStoreState, ThemeStoreAction, any, any>(\n    (state = { \n        theme: getThemeFromStorage(),\n        rtl: getRtlMode()\n    }, action) => {\n        switch (action.type) {\n            case 'SET_THEME':\n                return { ...state, theme: action.theme };\n            case 'SET_RTL':\n                return { ...state, rtl: action.rtl };\n            default:\n                return state;\n        }\n    }\n);\n\n/**\n * All children of this component will be rendered with the theme. Can be treated as a div.\n */\n//eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const ThemeProvider= connect<ThemeStoreState, unknown, React.PropsWithChildren<{[key:string]:any}>, ThemeStoreState>(state=> state) (\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any\n    function ThemeProvider({ theme, rtl, dispatch, ...rest}: ThemeStoreState & {dispatch: React.Dispatch<ThemeStoreAction>, [key:string]:any}): JSX.Element {\n        return (\n            <div dir={rtl ? 'rtl' : 'ltr'}\n                data-theme-is-dark={themes[theme].isDark.value}\n                {...rest} \n                style={convertThemeToCSS({...classic, ...themes[theme]})}\n            />\n        );\n    });\n\nexport function setTheme(theme: ThemeName): void {\n    localStorage.setItem('dibgram-theme', theme);\n    themeStore.dispatch({ type: 'SET_THEME', theme });\n}\n","import React from 'react';\nimport RippleEffect, { handleMyMouseEventsFunction, RippleEffectProps_AutoSettable } from '../elements/ripple-effect';\nimport { three_dots } from '../icon/icons';\nimport './three-dots-menu.scss';\nimport { getRtlMode } from '../../language-pack/language-pack';\n\nexport default function ThreeDotsMenu({children, className, ...rest}: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>): JSX.Element {\n    const ripple= React.useState<RippleEffectProps_AutoSettable>({state: 'off'});\n    const [onMouseDown, onMouseUp, onMouseLeave]= handleMyMouseEventsFunction(ripple);\n\n    const [visible, setVisible]= React.useState(false);\n\n    return (\n        <div className={'three-dots-menu ' + (className || '')} onMouseLeave={e=> {\n            onMouseLeave(e);\n            setVisible(false);\n        }} {...rest}>\n            <button className=\"icon-button\" onMouseDown={e=> {\n                onMouseDown(e);\n                setVisible(true);\n            }}>\n                <span dangerouslySetInnerHTML={{__html: three_dots}} />\n                <RippleEffect {...ripple[0]} color=\"var(--theme-color-windowBgOver)\" small={true}/>\n            </button>\n            {visible && <div className={'menu ' + (getRtlMode() ? 'br' : 'bl')} onClick={e=> {\n                onMouseUp(e);\n                setVisible(false);\n            }}>\n                {children}\n            </div>}\n        </div>\n    );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { info_close, title_search } from '../icon/icons';\nimport './search.scss';\nimport IconButton from '../elements/icon-button';\nimport __ from '../../language-pack/language-pack';\n\ntype BoxSearchProps = {\n    value: string;\n    onChange: (value: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport default function BoxSearch({value, onChange}: BoxSearchProps): JSX.Element {\n    return (\n        <div className=\"box-search\">\n            <span className=\"icon\" dangerouslySetInnerHTML={{__html: title_search}} />\n            <input type=\"text\" placeholder={__('lng_dlg_filter') as string} value={value} onChange={onChange} />\n            <IconButton icon={info_close} className=\"icon-button clear\" \n                onClick={()=> onChange && onChange({target: {value: ''} as any} as React.ChangeEvent<HTMLInputElement>)}\n                data-visible={(value || '').length}/>\n        </div>\n    );\n}\nBoxSearch.propTypes = {\n    value: PropTypes.string,\n    onChange: PropTypes.func\n};\n","import React from 'react';\nimport Dialog from '../../../ui/dialog/dialog';\nimport SmallButton from '../../../ui/elements/small-button';\nimport ScrollView from '../../../ui/scroll/scrollbar';\nimport RippleEffect, { handleMyMouseEventsFunction, RippleEffectProps_AutoSettable } from '../../../ui/elements/ripple-effect';\nimport BoxSearch from '../../../ui/dialog/search';\nimport __, { getCurrentLanguagePack } from '../../../language-pack/language-pack';\nimport TdLib from '../../../TdWeb/tdlib';\nimport './choose-language.scss';\nimport { addDialog } from '../../../ui/dialog/dialogs';\nimport ConfirmDialog from '../../../ui/dialog/confirm-dialog';\nimport ToolStrip from '../../../ui/tool-strip/tool-strip';\nimport TdApi from '../../../TdWeb/td_api';\n\ntype ChooseLanguageDialog= {\n    id: string\n}\n\nexport default function ChooseLanguageDialog({id}: ChooseLanguageDialog): JSX.Element {\n    const ref = React.useRef<Dialog>() as React.RefObject<Dialog>;\n    // eslint-disable-next-line prefer-const\n    let [languages, setLanguages] = React.useState<TdApi.td_languagePackInfo[]>([]);\n    const [search, setSearch] = React.useState('');\n\n    if(search.length > 0) { // Search\n        languages = languages.filter(country => country.name.toLowerCase().startsWith(search.toLowerCase()));\n    }\n\n    React.useEffect(() => {\n        TdLib.sendQuery({\n            '@type': 'getLocalizationTargetInfo',\n            'only_local': false\n        }).then((response) => {\n            response= response as TdApi.td_localizationTargetInfo;\n            setLanguages(response.language_packs);\n        });\n    }, []);\n\n    const currentPack= getCurrentLanguagePack(true);\n\n    return (\n        <Dialog ref={ref} id={id} width=\"320px\" className=\"confirm-dialog\">\n            <h1>{__('lng_languages')}</h1>\n\n            <BoxSearch value={search} onChange={(e) => setSearch(e.target.value)} />\n\n            <ScrollView scrollAlwaysVisible>\n                <ToolStrip.Section>\n                    {languages.map(pack => (\n                        <LanguagePack \n                            key={pack.id} \n                            pack={pack} \n                            onClick={()=> selectLanguage(pack)} \n                            selected={currentPack.id == pack.id}/>\n                    ))}\n                </ToolStrip.Section>\n            </ScrollView>\n\n            <div className=\"options\">\n                <SmallButton onClick={()=> {ref.current?.close();}}>{__('lng_close')}</SmallButton>\n            </div>\n        </Dialog>\n    );\n}\n\ntype LanguagePackProps= {\n    pack: TdApi.td_languagePackInfo,\n    onClick: (e: React.MouseEvent<HTMLDivElement>)=> void,\n    selected: boolean\n}\n\nexport function LanguagePack({pack, onClick, selected}: LanguagePackProps): JSX.Element {\n    const ripple = React.useState<RippleEffectProps_AutoSettable>({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave] = handleMyMouseEventsFunction(ripple);\n    return (\n        <div className=\"language-pack-item\" onClick={onClick} onMouseDown={mouseDown} onMouseUp={mouseUp} onMouseLeave={mouseLeave}>\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-windowBgRipple)\"/>\n            <div className=\"content\">\n                <input type=\"radio\" name=\"settings-language-pack-selector\" checked={selected}/>\n                <div className=\"right\">\n                    <div className=\"name\">{pack.native_name}</div>\n                    <div className=\"english-name\">{pack.name}</div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\ntype SpecialLanguageStrings= {\n    [key: string]: string\n}\ntype SpecialLanguageStringsCache= {\n    [id: string]: SpecialLanguageStrings\n}\n\nfunction selectLanguage(pack: TdApi.td_languagePackInfo): void {\n    const cache: SpecialLanguageStringsCache= JSON.parse(localStorage.getItem('dibgram-special-language-strings-cache') || '{}');\n    let specialStringsImport: Promise<{default:SpecialLanguageStrings}|null>;\n    if(!cache[pack.id] && pack.id!='en'){\n        specialStringsImport= import(`../../../language-pack/special-strings/${pack.id}.json`);\n    } else {\n        specialStringsImport= Promise.resolve(null);\n    }\n\n    function apply(){\n        specialStringsImport.then(specialStrings => {\n            if(!cache[pack.id] && pack.id!='en') {\n                specialStrings= specialStrings as {default:SpecialLanguageStrings};\n                cache[pack.id]= specialStrings.default;\n                localStorage.setItem('dibgram-special-language-strings-cache', JSON.stringify(cache));\n            }\n\n            localStorage.setItem('dibgram-active-language', JSON.stringify(pack));\n            window.location.reload();\n        });\n    }\n\n    TdLib.sendQuery({\n        '@type': 'getLanguagePackStrings',\n        language_pack_id: pack.id,\n        keys: [ 'lng_sure_save_language' ]\n    })\n        .then(response => {\n            response= response as TdApi.td_languagePackStrings;\n            addDialog('settings-language-restart-confirm-dialog', (\n                <ConfirmDialog id=\"settings-language-restart-confirm-dialog\"\n                    largeFont={true} onOK={apply}>\n\n                    {__('lng_sure_save_language')}\n                    <br/><br/>\n                    {(response.strings[0].value as TdApi.td_languagePackStringValueOrdinary).value}\n                </ConfirmDialog>\n            ));\n\n            TdLib.sendQuery({ // Request language pack strings so it is already cached after restart\n                '@type': 'getLanguagePackStrings',\n                language_pack_id: pack.id,\n            });\n        });\n}\n","import React from 'react';\nimport IconButton from '../../../../ui/elements/icon-button';\nimport { info_back, info_close } from '../../../../ui/icon/icons';\nimport __, { _s__ } from '../../../../language-pack/language-pack';\nimport ToolStrip from '../../../../ui/tool-strip/tool-strip';\nimport { themeStore } from '../../../../ui/themes/theme';\nimport { getRtlMode } from '../../../../language-pack/language-pack';\n\ntype SettingsAdvancedProps = {\n    onClose: () => void;\n    onBack: () => void;\n};\n\nexport default function SettingsAdvanced({onClose, onBack}: SettingsAdvancedProps): JSX.Element {\n    const [enableRtl, setEnableRtl] = React.useState(localStorage.getItem('dibgram-allow-rtl-layout') == 'true');\n\n    return (\n        <React.Fragment>\n            <div className=\"header\">\n                <IconButton className=\"icon-button back\" icon={info_back} onClick={onBack} />\n                <h3 className=\"title\">{__('lng_settings_advanced')}</h3>\n                <IconButton className=\"icon-button close\" icon={info_close} onClick={onClose}/>\n            </div>\n            <ToolStrip.Section>\n                <ToolStrip.ToggleButton text={_s__('lngd_settings_advanced_rtl')} hideIcon={true} isActive={enableRtl} onChange={() => {\n                    setEnableRtl(!enableRtl);\n                    localStorage.setItem('dibgram-allow-rtl-layout', String(!enableRtl));\n                    themeStore.dispatch({type: 'SET_RTL', rtl: getRtlMode()});\n                }} />\n            </ToolStrip.Section>\n        </React.Fragment>\n    );\n}\n","import React from 'react';\nimport Dialog from '../../../ui/dialog/dialog';\nimport ToolStrip from '../../../ui/tool-strip/tool-strip';\nimport ScrollView from '../../../ui/scroll/scrollbar';\nimport TdLib from '../../../TdWeb/tdlib';\nimport { addDialog } from '../../../ui/dialog/dialogs';\nimport ConfirmDialog from '../../../ui/dialog/confirm-dialog';\nimport ThreeDotsMenu from '../../../ui/menu/three-dots-menu';\nimport Menu from '../../../ui/menu/menu';\nimport './settings-dialog.scss';\nimport { info_close, settings_advanced, settings_chat, settings_faq, settings_folders, settings_info, settings_language, settings_notifications, settings_privacy_security } from '../../../ui/icon/icons';\nimport ProfilePhoto from '../../../ui/components/profile-photo';\nimport IconButton from '../../../ui/elements/icon-button';\nimport options from '../../../TdWeb/options';\nimport { connect } from 'react-redux';\nimport { getUserFullName } from '../../user-misc';\nimport __ from '../../../language-pack/language-pack';\nimport ChooseLanguageDialog from './choose-language';\nimport NavAnimation, { closeNavAnimation } from '../../../ui/elements/nav-animation';\nimport SettingsAdvanced from './advanced/advanced';\nimport { lastSeenToString } from '../../../time-tostring';\nimport { UsersStoreState } from '../../users-store';\nimport { menu_add_account, menu_info, menu_leave } from '../../../ui/icon/menu/menu';\n\ntype SettingsSection= React.ComponentType<{\n    onClose: ()=> void,\n    onBack: ()=> void\n}>;\n\ntype SettingsSelfProps = {\n    /** Unique ID of this dialog, used to close it. */\n    id: string,\n}\ntype SettingsStoreProps = {\n    users: UsersStoreState,\n}\ntype SettingsProps = SettingsSelfProps & SettingsStoreProps;\n\nfunction Settings ({id, users}: SettingsProps): JSX.Element {\n    const dialogRef = React.useRef<Dialog>() as React.RefObject<Dialog>;\n    const user= users[options['my_id'] as number];\n    const [navState, setNavState] = React.useState<'open'|'closing'|'closed'>('closed');\n    const [section, setSection] = React.useState<React.ReactElement|null>(null);\n\n    function openSection(Section: SettingsSection): void {\n        setSection(<Section onClose={(dialogRef.current as Dialog).close} onBack={()=> {\n            closeNavAnimation(()=>navState, setNavState);\n        }}/>);\n        setNavState('open');\n    }\n\n    return (\n        <Dialog className=\"settings-dialog\" id={id} ref={dialogRef} width=\"392px\">\n            <NavAnimation className=\"dialog-content\" innerScreen={section} mode=\"swipe-fade\" state={navState}>\n                <div className=\"header\">\n                    <h3 className=\"title\">{__('lng_menu_settings')}</h3>\n                    <IconButton className=\"icon-button close\" icon={info_close} onClick={() => {\n                        dialogRef.current?.close();\n                    }} />\n                    \n                    <ThreeDotsMenu className=\"more-options\">\n                        <Menu.MenuContents>\n                            <Menu.MenuItem icon={menu_add_account}>{__('lng_menu_add_account')}</Menu.MenuItem>\n                            <Menu.MenuItem icon={menu_info}>{__('lng_settings_information')}</Menu.MenuItem>\n                            <Menu.MenuItem icon={menu_leave} onClick={() => {\n                                addDialog('log-out-from-main-menu-confirm-dialog',\n                                    <ConfirmDialog largeFont={true}\n                                        id=\"log-out-from-main-menu-confirm-dialog\"\n                                        OKButtonText={__('lng_settings_logout')} onOK={()=> {\n                                            TdLib.sendQuery({\n                                                '@type': 'logOut'\n                                            });\n                                        }} attention={true}>\n                                        {__('lng_sure_logout')}\n                                    </ConfirmDialog>\n                                );\n                            }}>{__('lng_settings_logout')}</Menu.MenuItem>\n                        </Menu.MenuContents>\n                    </ThreeDotsMenu>\n                </div>\n                <ScrollView scrollBarWidth=\"4\">\n                    <div className=\"scroll-content\">\n                        <ToolStrip.Section className=\"profile-info\">\n                            <ProfilePhoto id={user?.id} name={user ? getUserFullName(user) : ''} photo={user?.profile_photo?.small} disableSavedMessages={true}/>\n                            <span>\n                                <p className=\"name\">{user && getUserFullName(user)}</p>\n                                <p className={`status ${user.status['@type'] == 'userStatusOnline' ? 'active' : ''}`}>\n                                    {lastSeenToString(user.status)}\n                                </p>\n                            </span>\n                        </ToolStrip.Section>\n                        <ToolStrip.Separator/>\n                        <ToolStrip.Section>\n                            <ToolStrip.Button icon={settings_info} text={__('lng_settings_information')}/>\n                            <ToolStrip.Button icon={settings_notifications} text={__('lng_settings_section_notify')}/>\n                            <ToolStrip.Button icon={settings_privacy_security} text={__('lng_settings_section_privacy')}/>\n                            <ToolStrip.Button icon={settings_chat} text={__('lng_settings_section_chat_settings')}/>\n                            <ToolStrip.Button icon={settings_folders} text={__('lng_settings_section_filters')}/>\n                            <ToolStrip.Button icon={settings_advanced} text={__('lng_settings_advanced')} onClick={()=> openSection(SettingsAdvanced)}/>\n                            <ToolStrip.Button icon={settings_language} text={__('lng_settings_language')}\n                                onClick={()=>addDialog('settings-change-language-dialog', <ChooseLanguageDialog id=\"settings-change-language-dialog\"/>)}>\n                                <span className=\"value\">{__('lng_language_name')}</span>\n                            </ToolStrip.Button>\n                        </ToolStrip.Section>\n                        <ToolStrip.Separator/>\n                        <ToolStrip.Section>\n                            <ToolStrip.Button icon={settings_faq} text={__('lng_settings_faq')} onClick={() => window.open('https://telegram.org/faq')}/>\n                            <ToolStrip.Button text={__('lng_settings_ask_question')}/>\n                        </ToolStrip.Section>\n                    </div>\n                </ScrollView>\n            </NavAnimation>\n        </Dialog>\n    );\n}\n\nconst SettingsDialog =( connect<SettingsStoreProps, unknown, SettingsSelfProps, UsersStoreState>( (users)=> ({users}) ) (Settings)) as unknown as React.FunctionComponent<SettingsSelfProps>;\nexport default SettingsDialog;","import React from 'react';\nimport './menu.scss';\nimport TdLib from '../../../../TdWeb/tdlib';\nimport ProfilePhoto from '../../../../ui/components/profile-photo';\nimport { getChatsFromList } from '../chat-list';\nimport chatStore, { ChatStoreState } from '../../../chat-store';\nimport { archive_userpic, menu_new_channel, menu_new_group, menu_night_mode, menu_settings, settings_name, settings_phone_number } from '../../../../ui/icon/icons';\nimport { connect, Provider } from 'react-redux';\nimport { createContextMenu } from '../../../../ui/menu/context-menu';\nimport Menu from '../../../../ui/menu/menu';\nimport ScrollView from '../../../../ui/scroll/scrollbar';\nimport LinkButton from '../../../../ui/elements/link-button';\nimport version from '../../../../../version';\nimport Dialogs, { addDialog, dialogStore } from '../../../../ui/dialog/dialogs';\nimport ConfirmDialog from '../../../../ui/dialog/confirm-dialog';\nimport ToolStrip from '../../../../ui/tool-strip/tool-strip';\nimport { setTheme, themeStore } from '../../../../ui/themes/theme';\nimport SettingsDialog from '../../settings/settings-dialog';\nimport usersStore from '../../../users-store';\nimport options from '../../../../TdWeb/options';\nimport { getUserFullName } from '../../../user-misc';\nimport __, { _s__fmt, __fmt } from '../../../../language-pack/language-pack';\nimport TdApi from '../../../../TdWeb/td_api';\nimport { menu_move_from_menu } from '../../../../ui/icon/menu/menu';\n\ntype HamburgerMenuSelfProps = {\n    visible: boolean;\n    onClose: () => void;\n}\n\ntype HamburgerMenuStoreProps = {\n    chats: TdApi.td_chat[];\n    archiveButtonState: 'expanded' | 'collapsed' | 'hidden-expanded' | 'hidden-collapsed';\n}\n\ntype HamburgerMenuProps = HamburgerMenuSelfProps & HamburgerMenuStoreProps;\n\n/**\n * Renders the main menu (always rendered but not always visible)\n */\nconst HamburgerMenu= (connect<HamburgerMenuStoreProps, unknown, HamburgerMenuSelfProps, ChatStoreState>(state=> ({\n    chats: state.chats,\n    archiveButtonState: state.archiveButtonState,\n})) (\n    function HamburgerMenu ({visible, onClose, chats, archiveButtonState}: HamburgerMenuProps): JSX.Element {\n        const [me, setMe] = React.useState<TdApi.td_user|null>(null);\n        React.useEffect(() => {\n            TdLib.sendQuery({ // Get current user info\n                '@type': 'getMe'\n            }).then(result => {\n                result= result as TdApi.td_user;\n                // Format phone number and put it in state\n                if(result.phone_number) {\n                    TdLib.sendQuery({\n                        '@type': 'getPhoneNumberInfo',\n                        phone_number_prefix: result.phone_number\n                    }).then(info => {\n                        result= result as TdApi.td_user;\n                        info = info as TdApi.td_phoneNumberInfo;\n                        // Format phone number\n                        if(info.country_calling_code){\n                            result.phone_number= `+${info.country_calling_code} ${info.formatted_phone_number}`;\n                        }\n                        setMe(result);\n                    });\n                } \n                else setMe(result);\n            });\n        }, []); // equivalent to componentDidMount\n\n        const [nightMode, setNightMode] = React.useState(['tinted', 'night'].includes(themeStore.getState().theme));\n\n        function onKeyDown (e: React.KeyboardEvent<HTMLDivElement>): void {\n            // `Esc` closes the menu\n            if(e.key === 'Escape') {\n                onClose();\n            }\n        }\n        // Autofocus menu\n        const ref = React.useRef<HTMLDivElement>(null);\n        React.useEffect(() => {\n            if(visible) {\n                ref.current?.focus();\n            }\n        }, [visible]);\n\n        // Get chats from archive to see if archive button should be shown\n        const showArchivedChats = getChatsFromList(chats, {'@type': 'chatListArchive'}).length > 0;\n\n        return (\n            <div id=\"hamburger-menu\" ref={ref} className={visible ? 'visible' : ''} \n                onKeyDown={onKeyDown} tabIndex={0}>\n                <div className=\"content\">\n                    <div className=\"header\">\n                        <div className=\"row-1\">\n                            <ProfilePhoto \n                                id={me?.id || 0} \n                                name={(me?.first_name || '') + (me?.last_name? (' ' + me.last_name) : '')} \n                                photo={me?.profile_photo?.small}\n                                disableSavedMessages={true}/>\n                            <div className=\"buttons\">\n                                {(showArchivedChats && (['hidden-collapsed', 'hidden-expanded'].includes(archiveButtonState))) && (\n                                    <button \n                                        className=\"button\" \n                                        dangerouslySetInnerHTML={{__html: archive_userpic}}\n                                        onClick={() => {\n                                            chatStore.dispatch({\n                                                type: 'SET_ARCHIVE_STATE',\n                                                archiveState: 'open'\n                                            });\n                                            onClose();\n                                        }}\n                                        onContextMenu={e=> createContextMenu(e, (\n                                            <Menu.MenuContents>\n                                                <Menu.MenuItem onClick={()=> {\n                                                    const newState= ({\n                                                        'hidden-collapsed': 'collapsed', \n                                                        'hidden-expanded': 'expanded',\n                                                        'collapsed': 'collapsed',\n                                                        'expanded': 'expanded'\n                                                    } as const)[archiveButtonState];\n                                                    chatStore.dispatch({\n                                                        type: 'SET_ARCHIVE_BUTTON_STATE',\n                                                        archiveButtonState: newState\n                                                    });\n                                                    localStorage.setItem('dibgram-archived-chats-button-mode', newState);\n                                                    onClose();\n                                                }} icon={menu_move_from_menu}>\n                                                    {__('lng_context_archive_to_list')}\n                                                </Menu.MenuItem>\n                                            </Menu.MenuContents>\n                                        ))}/>\n                                )}\n                            </div>\n                        </div>\n                        <div className=\"row-2\">\n                            <div className=\"name\">\n                                {me && getUserFullName(me)}\n                            </div>\n                            <div className=\"phone-number\">\n                                {me?.phone_number}\n                            </div>\n                        </div>\n                    </div>\n                    <ScrollView scrollAlwaysVisible>\n                        <div className=\"scroll-content\">\n                            <div className=\"options\">\n                                <ToolStrip.Section>\n                                    <ToolStrip.Button icon={menu_new_group} text={__('lng_create_group_title')}/>\n                                    <ToolStrip.Button icon={menu_new_channel} text={__('lng_create_channel_title')}/>\n                                    <ToolStrip.Button icon={settings_name} text={__('lng_menu_contacts')}/>\n                                    <ToolStrip.Button icon={settings_phone_number} text={__('lng_menu_calls')}/>\n                                    <ToolStrip.Button icon={menu_settings} text={__('lng_menu_settings')} onClick={()=> {\n                                        onClose();\n                                        addDialog('full-settings-dialog',\n                                            <Provider store={usersStore}>\n                                                <SettingsDialog id=\"full-settings-dialog\" />\n                                            </Provider>\n                                        );\n                                    }}/>\n                                    <ToolStrip.ToggleButton icon={menu_night_mode} text={__('lng_menu_night_mode')} isActive={nightMode} onChange={(isNight)=> {\n                                        setNightMode(isNight);\n                                        setTheme(isNight ? 'night' : 'day');\n                                    }}/>\n                                </ToolStrip.Section>\n                            </div>\n                            <div className=\"about\">\n                                <div className=\"row-1\">\n                                    <LinkButton href=\"https://github.com/DIBgram/DIBgram\">DIBgram</LinkButton>\n                                </div>\n                                <div className=\"row-2\">\n                                    <LinkButton href=\"https://github.com/DIBgram/DIBgram/releases/\">{__fmt('lng_settings_current_version', {version})}</LinkButton> ­– <LinkButton onClick={()=> {\n                                        // About DIBgram\n                                        onClose();\n                                        addDialog('main-menu-about-dibgram-dialog', (\n                                            <ConfirmDialog id=\"main-menu-about-dibgram-dialog\"\n                                                width=\"390px\" title=\"DIBgram\" OKButtonText={__('lng_close')}\n                                                hideCancelButton={true}>\n\n                                                <LinkButton className=\"version link-button\"\n                                                    style={{color: 'var(--theme-color-windowSubTextFg)'}} \n                                                    href=\"https://github.com/DIBgram/DIBgram/releases/\">\n                                                        \n                                                    {_s__fmt('lngd_about_version', {\n                                                        version,\n                                                        tdlib: options['version']\n                                                    })}\n                                                </LinkButton>\n\n                                                <p>{_s__fmt('lngd_about_text1', {\n                                                    tdlib: <LinkButton href=\"https://core.telegram.org/tdlib\">TDLib</LinkButton>\n                                                })}</p>\n\n                                                <p>{__fmt('lng_about_text2', { //TODO: find out why it doesn't work\n                                                    gpl_link: <LinkButton href=\"https://github.com/DIBgram/DIBgram/blob/main/LICENSE\">GNU GPL</LinkButton>,\n                                                    github_link: <LinkButton href=\"https://github.com/DIBgram/DIBgram\">GitHub</LinkButton>\n                                                })}</p>\n\n                                                <p>{__fmt('lng_about_text3', {\n                                                    faq_link: <LinkButton href=\"https://telegram.org/faq\">{__('lng_about_text3_faq')}</LinkButton>\n                                                })}</p>\n                                            </ConfirmDialog>\n                                        ));\n                                    }}>\n                                        {__('lng_menu_about')}\n                                    </LinkButton>\n                                </div>\n                            </div>\n                        </div>\n                    </ScrollView>\n                </div>\n                <Provider store={dialogStore}>\n                    <Dialogs className=\"shadow\" onClick={onClose}/>\n                </Provider>\n            </div>\n        );\n    }) as unknown as React.FunctionComponent<HamburgerMenuSelfProps>);\nexport default HamburgerMenu;\n","import { createStore } from 'redux';\nimport TdApi from '../TdWeb/td_api';\n\nexport type MessageStoreState= {\n    messages: {[id: number]: TdApi.td_message};\n}\n\ntype MessageStoreAction_AddMessages= { // Add a list of messages, which is returned from getChatHistory\n    type: 'ADD_MESSAGES';\n    messages: TdApi.td_message[];\n}\ntype MessageStoreAction_AddMessage= { // Add a single message\n    type: 'ADD_MESSAGE';\n    message: TdApi.td_message;\n}\ntype MessageStoreAction_RemoveMessages= { // Removes the messages with the given ids\n    type: 'REMOVE_MESSAGES';\n    messageIds: number[];\n}\ntype MessageStoreAction_ReduceMessage= { // Replaces the message with the given id with the result of the reduce function\n    type: 'REDUCE_MESSAGE';\n    messageId: number;\n    reduce: (message: TdApi.td_message) => TdApi.td_message;\n}\ntype MessageStoreAction_ClearMessages= {\n    type: 'CLEAR_MESSAGES'\n}\n\nexport type MessageStoreAction = MessageStoreAction_AddMessages | MessageStoreAction_AddMessage | MessageStoreAction_RemoveMessages | MessageStoreAction_ReduceMessage| MessageStoreAction_ClearMessages;\n\nconst defaultMessageStoreState= {\n    messages: {}\n};\n\nexport function reducer(state: MessageStoreState= defaultMessageStoreState , action: MessageStoreAction): MessageStoreState {\n    switch (action.type) {\n        case 'ADD_MESSAGES': {\n            const result: {[key: number]: TdApi.td_message} = {};\n            for (const message of action.messages) {\n                result[message.id] = message;\n            }\n            return {\n                ...state,\n                messages: {\n                    ...state.messages,\n                    ...result\n                }\n            };\n        }\n        case 'ADD_MESSAGE': {\n            return {\n                ...state,\n                messages: {\n                    ...state.messages,\n                    [action.message.id]: action.message\n                }\n            };\n        }\n        case 'REMOVE_MESSAGES': {\n            const result: {[key: number]: TdApi.td_message} = {};\n            for (const messageId in state.messages) {\n                if (!action.messageIds.includes(Number(messageId))) {\n                    result[messageId] = state.messages[messageId];\n                }\n            }\n            return {\n                ...state,\n                messages: result\n            };  \n        }\n        case 'REDUCE_MESSAGE': {\n            return {\n                ...state,\n                messages: {\n                    ...state.messages,\n                    [action.messageId]: action.reduce(state.messages[action.messageId])\n                }\n            };\n        }\n        case 'CLEAR_MESSAGES': \n            return defaultMessageStoreState;\n        default:\n            return state;\n    }\n}\n\nexport const messageStore= createStore(reducer);","import React from 'react';\nimport TdLib from '../../TdWeb/tdlib';\nimport currencyAmountToString from '../sections/payments/currency-tostring';\nimport {getUserFullName} from '../user-misc';\nimport MessagePinnedMessage from './message-pinned-message';\nimport { durationToString, futureDayToString, timeToString } from '../../time-tostring';\nimport __, { _s__, __collection, __fmt, __pl } from '../../language-pack/language-pack';\nimport compileEntities from './ui/entities';\nimport TdApi from '../../TdWeb/td_api';\nimport { UsersStoreState } from '../users-store';\nimport { LanguagePackKey, LanguagePackStringName, LanguagePackStringNamePluralized } from '../../language-pack/language-pack-types';\nimport currencies from '../sections/payments/currencies.json';\n\ntype MessageSummaryWithIconProps = {\n    message?: TdApi.td_message,\n    className: string,\n    users: UsersStoreState,\n    chat: TdApi.td_chat,\n}\n\nexport default function MessageSummaryWithIcon({message, className, users, chat}: MessageSummaryWithIconProps): JSX.Element|null {\n    if(!message) return null;\n\n    switch(message.content['@type']) {\n        case 'messageAnimation': // GIF\n            return (\n                <MayHaveCaption\n                    type=\"GIF\" //TODO: Find the localized string\n                    caption={message.content.caption} \n                    className={className}/>\n            );\n        \n        case 'messageAudio': { // Audio/music file\n            let title= message.content.audio.title || message.content.audio.file_name; // If there is no title, use file name instead\n            if(message.content.audio.performer) // Prepend performer name\n                title= message.content.audio.performer+ ' ­­– ' + title;\n            return (\n                <MayHaveCaption \n                    type={title} \n                    caption={message.content.caption} \n                    className={className}/>\n            );\n        }\n\n        case 'messageBasicGroupChatCreate': // X created the group «xxxx»\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{__fmt('lng_action_created_chat', {from: null, title: message.content.title})}</span>\n                </span>\n            );\n\n        case 'messageCall': { // Call\n            let text: React.ReactNode|React.ReactNode[] ='';\n            if(message.is_outgoing) { // You made the call\n                switch(message.content.discard_reason?.['@type']) {\n                    case 'callDiscardReasonMissed':\n                        text= __(message.content.is_video? 'lng_call_video_cancelled' : 'lng_call_cancelled');\n                        break;\n                    default:\n                        text= __(message.content.is_video? 'lng_call_video_outgoing' : 'lng_call_outgoing');\n                }\n            } else { // The other user called you\n                switch(message.content.discard_reason?.['@type']) {\n                    case 'callDiscardReasonDeclined':\n                        text= __(message.content.is_video? 'lng_call_video_declined' : 'lng_call_declined');\n                        break;\n                    case 'callDiscardReasonMissed':\n                        text= __(message.content.is_video? 'lng_call_video_missed' : 'lng_call_missed');\n                        break;\n                    default: \n                        text= __(message.content.is_video? 'lng_call_video_incoming' : 'lng_call_incoming');\n                }\n            } \n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{text}</span>\n                </span>\n            );\n        }\n\n        case 'messageChatAddMembers': { // X added Y\n            // If the user joined the group by themselves, it appears as 'X added X' and that is not accurate.\n            if(message.sender_id['@type']=='messageSenderUser' && message.content.member_user_ids[0] == message.sender_id?.user_id) {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\">{__fmt('lng_action_user_joined', {from: null})}</span>\n                    </span>\n                );\n            }\n\n            const newMembers= __collection(false, message.content.member_user_ids.map(id=> getUserFullName(users[id])), false);\n            \n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt(newMembers.length> 1 ? 'lng_action_add_users_many' : 'lng_action_add_user', {\n                        from: null,\n                        users: newMembers,\n                        user: newMembers\n                    })}\n                </span></span>\n            );\n        }\n\n        case 'messageChatChangePhoto': // Chat photo changed\n            // Telegram Desktop shows chat photo change events as 'Photo' instead of 'X changed group photo' or 'Channel photo changed'\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{__('lng_attach_photo')}</span> \n                </span>\n            );\n\n        case 'messageChatChangeTitle': // Chat was renamed\n            if(message.is_channel_post) {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\">{__fmt('lng_action_changed_title_channel', {title: message.content.title})}</span>\n                    </span>\n                );\n            } else {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\">{__fmt('lng_action_changed_title', {\n                            from: null,\n                            title: message.content.title\n                        })}</span>\n                    </span>\n                );\n            }\n\n        case 'messageChatDeleteMember': { // X removed Y\n            const deletedMember= users[message.content.user_id];\n            if( message.sender_id['@type']=='messageSenderUser' && deletedMember.id == message.sender_id.user_id ) { // Left the group\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_action_user_left', { from: null })}\n                    </span></span>\n                );\n            }\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_kick_user', {\n                        from: null,\n                        user: getUserFullName(deletedMember)\n                    })}\n                </span></span>\n            );\n        }\n\n        case 'messageChatDeletePhoto': // Chat photo was deleted\n            if(message.is_channel_post) {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\">{__('lng_action_removed_photo_channel')}</span>\n                    </span>\n                );\n            } else {\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_action_removed_photo', { from:  null })}\n                    </span></span>\n                );\n            }\n\n        case 'messageChatJoinByLink': // X joined the group via invite link\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_user_joined_by_link', { from: null })}\n                </span></span>\n            );\n\n        case 'messageChatJoinByRequest': // X was accepted to the group\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_user_joined_by_request', { from: null })}\n                </span></span>\n            );\n\n        case 'messageChatSetTheme':\n            if(message.content.theme_name){\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        <ServiceMessageIncludingYou \n                            message={message}\n                            lpString=\"lng_action_theme_changed\"\n                            lpString_you=\"lng_action_you_theme_changed\"\n                            params={{emoji: message.content.theme_name}}/>\n                    </span></span>\n                );\n            } else {\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        <ServiceMessageIncludingYou \n                            message={message}\n                            lpString=\"lng_action_theme_disabled\"\n                            lpString_you=\"lng_action_you_theme_disabled\"/>\n                    </span></span>\n                );\n            }\n\n        case 'messageChatSetTtl': { // Auto-delete / self-destruct timer changed\n            const ttlTimeUnit= {\n                86400: __('lng_ttl_about_duration1'), \n                604800: __('lng_ttl_about_duration2'),\n                2678400: __('lng_ttl_about_duration3'),\n            }[message.content.ttl];\n\n            if(message.is_channel_post) {\n                if(message.content.ttl) { // If TTL is disabled, it will be set to 0\n                    return (\n                        <span className={className}><span className=\"part-1\">\n                            {__fmt('lng_action_ttl_changed_channel', {\n                                duration: ttlTimeUnit\n                            })}\n                        </span></span>\n                    );\n                } else {\n                    return (\n                        <span className={className}><span className=\"part-1\">\n                            {__('lng_action_ttl_removed_channel')}\n                        </span></span>\n                    );\n                }\n            } else {\n                if(message.content.ttl) { // If TTL is disabled, it will be set to 0\n                    return (\n                        <span className={className}><span className=\"part-1\">\n                            <ServiceMessageIncludingYou \n                                message={message}\n                                lpString=\"lng_action_ttl_changed\"\n                                lpString_you=\"lng_action_ttl_changed_you\"\n                                params={{duration: ttlTimeUnit}}/>\n                        </span></span>\n                    );\n                } else {\n                    return (\n                        <span className={className}><span className=\"part-1\">\n                            <ServiceMessageIncludingYou \n                                message={message}\n                                lpString=\"lng_action_ttl_removed\"\n                                lpString_you=\"lng_action_ttl_removed_you\"/>\n                        </span></span>\n                    );\n                }\n            }\n        }\n\n        case 'messageChatUpgradeFrom': // It is too complicated to get basic group last message.\n        case 'messageChatUpgradeTo': // TODO: It's complicated, but it should be done.\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{_s__('lngd_action_upgrade_to_supergroup')}</span>\n                </span>\n            );\n\n        case 'messageContact': // Shared contact\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{__('lng_in_dlg_contact')}</span>\n                </span>\n            );\n\n        case 'messageContactRegistered': // X joined Telegram\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_user_registered', { from: null })}\n                </span></span>\n            );\n\n        case 'messageCustomServiceAction': // ¯\\_(ツ)_/¯\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{message.content.text}</span>\n                </span>\n            );\n\n        case 'messageAnimatedEmoji':\n        case 'messageDice': // Dice (🎲🎯🎳⚽🏀)\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{message.content.emoji}</span>\n                </span>\n            );\n\n        case 'messageDocument': // File/document\n            return (\n                <MayHaveCaption\n                    type={message.content.document.file_name} \n                    caption={message.content.caption} \n                    className={className}/>\n            );\n        \n        case 'messageExpiredPhoto': \n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{__('lng_ttl_photo_expired')}</span>\n                </span>\n            );\n        \n        case 'messageExpiredVideo':\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{__('lng_ttl_video_expired')}</span>\n                </span>\n            );\n        \n        case 'messageGame': // Game\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">🎮 {message.content.game.title}</span>\n                </span>\n            );\n\n        case 'messageGameScore': { // X scored {score} in {game}\n            // Text to use if game message is not available\n            const noGameTitleFallback= (\n                <span className={className}><span className=\"part-1\">\n                    <ServiceMessageIncludingYou \n                        message={message}\n                        lpString=\"lng_action_game_score_no_game\"\n                        lpString_you=\"lng_action_game_you_scored_no_game\"\n                        count={message.content.score}/>\n                </span></span>\n            );\n\n            // Get game message\n            const GameScoreWithTitle= React.lazy(()=> new Promise<{default: React.ComponentType}>(resolve=> {\n                message.content = message.content as TdApi.td_messageGameScore;\n                TdLib.sendQuery({\n                    '@type': 'getMessage',\n                    chat_id: chat.id,\n                    message_id: message.content.game_message_id\n                }).then(\n                    result=> { \n                        //eslint-disable-next-line react/display-name\n                        resolve({ default: ()=> {\n                            message.content = message.content as TdApi.td_messageGameScore;\n                            result = result as TdApi.td_message;\n                            result.content = result.content as TdApi.td_messageGame;\n\n                            return (\n                                <span className={className}><span className=\"part-1\">\n                                    <ServiceMessageIncludingYou \n                                        message={message}\n                                        lpString=\"lng_action_game_score\"\n                                        lpString_you=\"lng_action_game_you_scored\"\n                                        count={message.content.score}\n                                        params={{game: result.content.game.title}}/>\n                                </span></span>\n                            );\n                        }});\n                    },\n                    ()=> { // Failed\n                        //eslint-disable-next-line react/display-name\n                        resolve({ default: ()=> noGameTitleFallback});\n                    }\n                );\n            }));\n\n            return (\n                <React.Suspense fallback={noGameTitleFallback}>\n                    <GameScoreWithTitle/>\n                </React.Suspense>\n            );\n        }\n\n        case 'messageInvoice': // Invoice (a buyable product)\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{message.content.title}</span>\n                </span>\n            );\n\n        case 'messageLocation': // Location\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{__('lng_maps_point')}</span>\n                </span>\n            );\n\n        case 'messagePassportDataSent': { // You sent some Telegram passport data\n            const passportDataTypeToString= {\n                'passportElementTypeAddress':               'lng_passport_address',\n                'passportElementTypeBankStatement':         'lng_passport_address_statement',\n                'passportElementTypeDriverLicense':         'lng_passport_identity_license',\n                'passportElementTypeEmailAddress':          'lng_passport_email_title',\n                'passportElementTypeIdentityCard':          'lng_passport_identity_card',\n                'passportElementTypeInternalPassport':      'lng_passport_identity_internal',\n                'passportElementTypePassport':              'lng_passport_identity_passport',\n                'passportElementTypePassportRegistration':  'lng_passport_address_registration',\n                'passportElementTypePersonalDetails':       'lng_passport_personal_details',\n                'passportElementTypePhoneNumber':           'lng_passport_phone_title',\n                'passportElementTypeRentalAgreement':       'lng_passport_address_agreement',\n                'passportElementTypeTemporaryRegistration': 'lng_passport_address_temporary',\n                'passportElementTypeUtilityBill':           'lng_passport_address_bill',\n            };\n            const passportDataTypes= message.content.types.map(type=> (__(passportDataTypeToString[type['@type']] as LanguagePackKey) as string).toLowerCase());\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_secure_values_sent', {\n                        user: chat.title,\n                        documents: passportDataTypes.join(', ')\n                    })}\n                </span></span>\n            );\n        }\n\n        case 'messagePaymentSuccessful': { // You paid [real] money\n            // To be shown if invoice is not available\n            const noInvoiceTitleFallback= (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_payment_done', {\n                        amount: currencyAmountToString(message.content.currency as keyof typeof currencies, message.content.total_amount),\n                        user: chat.title\n                    })}\n                </span></span>\n            );\n\n            // Get invoice message\n            const PaymentInfoWithInvoiceTitle= React.lazy(()=>new Promise<{default:React.ComponentType}>(resolve=> {\n                message.content= message.content as TdApi.td_messagePaymentSuccessful;\n                TdLib.sendQuery({\n                    '@type': 'getMessage',\n                    chat_id: message.content.invoice_chat_id,\n                    message_id: message.content.invoice_message_id\n                }).then(\n                    result=> { \n                        //eslint-disable-next-line react/display-name\n                        resolve({ default: ()=> {\n                            message.content= message.content as TdApi.td_messagePaymentSuccessful;\n                            result= result as TdApi.td_message;\n                            result.content= result.content as TdApi.td_messageInvoice;\n                            return (\n                                <span className={className}><span className=\"part-1\">\n                                    {__fmt('lng_action_payment_done_for', {\n                                        amount: currencyAmountToString(message.content.currency as keyof typeof currencies, message.content.total_amount),\n                                        user: chat.title,\n                                        invoice: result.content.title\n                                    })}\n                                </span></span>\n                            );\n                        }});\n                    },\n                    ()=> { // Failed\n                        resolve({ default: ()=> noInvoiceTitleFallback});\n                    }\n                );\n            }));\n\n            return (\n                <React.Suspense fallback={noInvoiceTitleFallback}>\n                    <PaymentInfoWithInvoiceTitle/>\n                </React.Suspense>\n            );\n        }\n\n        case 'messagePhoto': // A photo\n            if(message.content.is_secret) { // Self-destructing photo, not implemented\n                if(message.is_outgoing) { // You sent it\n                    return (\n                        <span className={className}>\n                            <span className=\"part-1\">{__('lng_ttl_photo_sent')}</span>\n                        </span>\n                    );\n                } else { // You received it\n                    return (\n                        <span className={className}><span className=\"part-1\">\n                            {__fmt('lng_ttl_photo_received', { from: null })}\n                        </span></span>\n                    );\n                }\n            } else { // Normal photo\n                return (\n                    <MayHaveCaption\n                        type={__('lng_in_dlg_photo') as string}\n                        caption={message.content.caption} \n                        className={className}/>\n                );\n            }\n        \n        case 'messagePinMessage': { // Pinned message\n\n            // Get pinned message message\n            const PinnedMessageMessage= React.lazy(()=>new Promise<{default:React.ComponentType}>(resolve=> {\n                message.content= message.content as TdApi.td_messagePinMessage;\n                TdLib.sendQuery({\n                    '@type': 'getMessage',\n                    chat_id: chat.id,\n                    message_id: message.content.message_id\n                }).then(\n                    result=> { \n                        //eslint-disable-next-line react/display-name\n                        resolve({ default: ()=> {\n                            message.content= message.content as TdApi.td_messagePinMessage;\n                            result= result as TdApi.td_message;\n                            return (\n                                <span className={className}><span className=\"part-1\">\n                                    <MessagePinnedMessage message={result} from={null}/>\n                                </span></span>\n                            );\n                        }});\n                    },\n                    ()=> { // Failed\n                        //eslint-disable-next-line react/display-name\n                        resolve({ default: ()=> (\n                            <span className={className}><span className=\"part-1\">\n                                {__fmt('lng_action_pinned_media', {\n                                    from: null,\n                                    media: __('lng_deleted_message')\n                                })}\n                            </span></span>\n                        )});\n                    }\n                );\n            }));\n\n            return (\n                <React.Suspense fallback={\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_action_pinned_media', {\n                            from: null,\n                            media: __('lng_contacts_loading')\n                        })}\n                    </span></span>\n                }>\n                    <PinnedMessageMessage/>\n                </React.Suspense>\n            );\n        }\n        \n        case 'messagePoll':\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{message.content.poll.question}</span>\n                </span>\n            );\n        \n        // case 'messageProximityAlertTriggered': // TODO: Reproduce this message and implement it\n        // case 'messageScreenshotTaken':\n        case 'messageSticker': // Sticker\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">\n                        {__fmt('lng_in_dlg_sticker_emoji', {\n                            emoji: message.content.sticker.emoji\n                        })}\n                    </span>\n                </span>\n            );\n\n        case 'messageSupergroupChatCreate': // Supergroup created\n            if(message.is_channel_post) {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\">{__('lng_action_created_channel')}</span>\n                    </span>\n                );\n            } else {\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_action_created_chat', {\n                            from: null,\n                            title: message.content.title\n                        })}\n                    </span></span>\n                );\n            }\n\n        case 'messageText':\n            return (\n                <span className={className}>\n                    <span className=\"part-2\">{compileEntities(message.content.text, true)}</span>\n                </span>\n            );\n\n        case 'messageUnsupported': // Is not supported :(\n            return ( //TODO localize\n                <span className={className}>\n                    <span className=\"part-2\">{_s__('lngd_message_unsupported')}</span>\n                </span>\n            );\n        \n        case 'messageVenue': // Venue/location\n            return ( //TODO find the translation string\n                <span className={className}>\n                    <span className=\"part-1\">Location, </span>\n                    <span className=\"part-2\">{message.content.venue.title}</span>\n                </span>\n            );\n\n        case 'messageVideo': // Video\n            if(message.content.is_secret) { // Self-destructing photo, not implemented\n                if(message.is_outgoing) { // You sent it\n                    return (\n                        <span className={className}>\n                            <span className=\"part-1\">{__('lng_ttl_video_sent')}</span>\n                        </span>\n                    );\n                } else { // You received it\n                    return (\n                        <span className={className}><span className=\"part-1\">\n                            {__fmt('lng_ttl_video_received', { from: null })}\n                        </span></span>\n                    );\n                }\n            } else { // Normal photo\n                return (\n                    <MayHaveCaption\n                        type={__('lng_in_dlg_video') as string}\n                        caption={message.content.caption} \n                        className={className}/>\n                );\n            }\n\n        case 'messageVideoNote':\n            return (\n                <span className={className}>\n                    <span className=\"part-1\">{__('lng_in_dlg_video_message')}</span>\n                </span>\n            );\n\n        case 'messageVideoChatScheduled':\n            if(message.is_channel_post) {\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_action_group_call_scheduled_channel', {\n                            date: __fmt('lng_mediaview_date_time', {\n                                date: futureDayToString(message.content.start_date),\n                                time: timeToString(message.content.start_date)\n                            })\n                        })}\n                    </span></span>\n                );\n            } else {\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_action_group_call_scheduled_group', {\n                            from: null,\n                            date: __fmt('lng_mediaview_date_time', {\n                                date: futureDayToString(message.content.start_date),\n                                time: timeToString(message.content.start_date)\n                            })\n                        })}\n                    </span></span>\n                );\n            }\n\n        case 'messageVideoChatStarted':\n            if(message.is_channel_post) {\n                return (\n                    <span className={className}>\n                        <span className=\"part-1\">{__('lng_action_group_call_started_channel')}</span>\n                    </span>\n                );\n            } else {\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_action_group_call_started_group', { from: null })}\n                    </span></span>\n                );\n            }\n\n        case 'messageVideoChatEnded':\n            if(message.is_channel_post) {\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_action_group_call_finished', {\n                            duration: durationToString(message.content.duration)\n                        })}\n                    </span></span>\n                );\n            } else {\n                return (\n                    <span className={className}><span className=\"part-1\">\n                        {__fmt('lng_action_group_call_finished_group', {\n                            from: null,\n                            duration: durationToString(message.content.duration)\n                        })}\n                    </span></span>\n                );\n            }\n\n        case 'messageInviteVideoChatParticipants': {\n            const invitedMembers= __collection(true, message.content.user_ids.map(id=> // convert user IDs to names\n                getUserFullName(users[id])), false); // A, B, and C\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt((invitedMembers.length==1 ? 'lng_action_invite_user' : 'lng_action_invite_users_many'), {\n                        from: null,\n                        user: invitedMembers,\n                        users: invitedMembers,\n                        chat: __('lng_action_invite_user_chat')\n                    })}\n                </span></span>\n            );\n        }\n\n        case 'messageVoiceNote':\n            return (\n                <MayHaveCaption \n                    type={__('lng_in_dlg_audio') as string}\n                    caption={message.content.caption} \n                    className={className} />\n            );\n\n        case 'messageWebsiteConnected':\n            return (\n                <span className={className}><span className=\"part-1\">\n                    {__fmt('lng_action_bot_allowed_from_domain', {\n                        domain: message.content.domain_name\n                    })}\n                </span></span>\n            );\n\n        default:\n            return null;\n    }\n}\n\ntype MayHaveCaptionProps= {\n    /** Message type, e.g. 'GIF', 'Video' */\n    type: string,\n    /** Message caption, can be empty */\n    caption: TdApi.td_formattedText,\n\n    className: string,\n}\n\n/** If caption has a value, adds a comma to type and returns type */ \nfunction MayHaveCaption({type, caption, className}: MayHaveCaptionProps): JSX.Element {\n    if(caption?.text) type+=',';\n    return (\n        <span className={className}>\n            <span className=\"part-1\">{type}</span> <span className=\"part-2\">{compileEntities(caption, true)}</span>\n        </span>\n    );\n}\n\ntype ServiceMessageIncludingYouProps= {\n    /** The message object */\n    message: TdApi.td_message,\n    /** Language pack string key for the service message */\n    lpString: LanguagePackStringName,\n    /** Language pack string key for the service message if the service message is outgoing */\n    lpString_you: LanguagePackStringName,\n    /** Parameters for the language pack string */\n    params?: {[key: string]: React.ReactNode|React.ReactNode[]},\n    /** If provided, the language pack strings will be treated as pluralized */\n    count?: number,\n}\n\nfunction ServiceMessageIncludingYou({message, lpString, lpString_you, params={}, count=undefined}: ServiceMessageIncludingYouProps): JSX.Element {\n    const string= message.is_outgoing ? lpString_you : lpString;\n\n    if(count==undefined) {\n        return <>{__fmt(string as Exclude<LanguagePackStringName, LanguagePackStringNamePluralized>, {\n            from: null,\n            ...params\n        })}</>;\n    } else {\n        return <>{__pl(string, count, {\n            from: null,\n            ...params\n        })}</>;\n    }\n}\n","import React from 'react';\nimport TdApi from '../../../TdWeb/td_api';\nimport { timeToString } from '../../../time-tostring';\nimport ProfilePhoto, { getChatTypeId, getIdColorCode } from '../../../ui/components/profile-photo';\nimport { bubble_tail, dialogs_sending, history_received, history_sent } from '../../../ui/icon/icons';\nimport { getChatNoCache } from '../../chat-store';\nimport { getMessageStatus } from '../../message-misc';\nimport { getUserFullName } from '../../user-misc';\nimport { ProcessedSingleMessage } from '../processHistory';\nimport usersStore, { UsersStoreState } from '../../users-store';\n\nimport './message-containers.scss';\nimport __, { __fmt } from '../../../language-pack/language-pack';\nimport { messageStore } from '../../message-store';\nimport TdLib from '../../../TdWeb/tdlib';\nimport MessageSummaryWithIcon from '../message-summary-withicon';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function ServiceMessageBubble(props: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>): JSX.Element {\n    return (\n        <div className=\"history-service-message\" {...props}/>\n    );\n}\n\nexport function ServiceMessage({children}: {children: React.ReactNode|React.ReactNode[]}): JSX.Element {\n    return (\n        <div className=\"history-message service\">\n            <ServiceMessageBubble>\n                {children}\n            </ServiceMessageBubble>\n        </div>\n    );\n}\n\ntype MessageBubbleProps= {\n    children: React.ReactNode | React.ReactNode[],\n    showTail?: boolean,\n    beforeBubble?: React.ReactNode | React.ReactNode[],\n}\nexport function MessageBubble({ children, beforeBubble=null, showTail=true, ...rest}: MessageBubbleProps): JSX.Element {\n    return (\n        <div className=\"bubble-container\">\n            {beforeBubble}\n            <div className={`bubble ${showTail ? 'has-tail' : ''}`} {...rest}>\n                {children}\n                {showTail && <span className=\"tail\" dangerouslySetInnerHTML={{__html: bubble_tail}}/>}\n            </div>\n        </div>\n    );\n}\n\n\ntype BubbleMessageProps= {\n    message: ProcessedSingleMessage,\n    chat: TdApi.td_chat,\n    users: {[key: number]: TdApi.td_user},\n    children: React.ReactNode | React.ReactNode[],\n}\nexport function BubbleMessage({message, chat, users, children}: BubbleMessageProps): JSX.Element {\n    let sender= null;\n    let senderId= 0;\n    let photo= null;\n    let usesPhoto= false;\n    if(chat.type['@type'] === 'chatTypeSupergroup' && chat.type.is_channel) {\n        sender= chat.title;\n    } \n    else if(chat.type['@type'] === 'chatTypeSupergroup' || \n            chat.type['@type'] === 'chatTypeBasicGroup') {\n        usesPhoto= !message.is_outgoing;\n        switch(message.sender_id['@type']) {\n            case 'messageSenderUser':\n                if(!message.is_outgoing) {\n                    const user=users[message.sender_id.user_id];\n                    sender= getUserFullName(user);\n                    senderId= getIdColorCode(message.sender_id.user_id);\n                    photo= (!message.hide_tail) &&\n                            <ProfilePhoto \n                                id={user.id} \n                                name={sender} \n                                disableSavedMessages={true} \n                                photo={user.profile_photo?.small}\n                            />;\n                }\n                break;\n            case 'messageSenderChat': {\n                const chat: TdApi.td_chat= getChatNoCache(message.sender_id.chat_id) as TdApi.td_chat;\n                sender= chat.title;\n                photo= (!message.hide_tail) &&\n                        <ProfilePhoto \n                            id={getChatTypeId(chat)} \n                            name={sender}\n                            disableSavedMessages={true} \n                            photo={chat.photo?.small}\n                        />;\n            }\n        }\n    }\n    return (\n        <div className={'history-message' + \n                        ((message.is_outgoing && !message.is_channel_post) ? ' outgoing' : '') +\n                        (message.hide_sender_name? ' small-margin' : '')}>\n\n            <MessageBubble \n                beforeBubble={usesPhoto && <div className=\"profile-photo-c\">{photo}</div>} \n                showTail={!message.hide_tail}>\n\n                <div className=\"message-sender\">\n                    {sender && (!message.hide_sender_name) && (\n                        <span className={`color_${senderId}`}>{sender}</span>\n                    )}\n                    {message.via_bot_user_id? (\n                        <span className=\"color_0\">\n                            {__fmt('lng_inline_bot_via', {\n                                inline_bot: '@'+(usersStore.getState()[message.via_bot_user_id] as TdApi.td_user).username\n                            })}\n                        </span>\n                    ): null}\n                </div>\n\n                {message.reply_to_message_id ? <MessageReplyTo message={message} users={users}/>: null}\n                {children}\n                <div className=\"after\"/>\n            </MessageBubble>\n        </div>\n    );\n}\n\ntype MessageFooterProps= {\n    message: TdApi.td_message,\n    chat: TdApi.td_chat,\n}\nexport function MessageFooter({message, chat}: MessageFooterProps): JSX.Element {\n    let tick= null;\n    switch(getMessageStatus(chat, message)) {\n        case 'sending':\n            tick= <span className=\"tick sending\" dangerouslySetInnerHTML={{__html: dialogs_sending}}/>;\n            break;\n        case 'sent':\n            tick= <span className=\"tick sent\" dangerouslySetInnerHTML={{__html: history_sent}}/>;\n            break;\n        case 'seen':\n            tick= <span className=\"tick seen\" dangerouslySetInnerHTML={{__html: history_received}}/>;\n    }\n    return (\n        <div className=\"footer\">\n            <div className=\"text\">{timeToString(message.date)}</div>\n            {(!message.is_channel_post) && tick}\n        </div>\n    );\n}\n\ntype MessageReplyToProps= {\n    message: TdApi.td_message,\n    users: UsersStoreState\n}\n\nexport function MessageReplyTo({message, users}: MessageReplyToProps): JSX.Element|null {\n    const [replyMessage, setReplyMessage]= React.useState<TdApi.td_message|-1|0>(0);\n\n    const rMessage= ((message.reply_in_chat_id == message.chat_id) && messageStore.getState().messages[message.reply_to_message_id]) || replyMessage;\n\n    React.useEffect(() => {\n        function requestHandler(result: TdApi.td_message|TdApi.td_error) {\n            if(result['@type'] === 'error') {\n                setReplyMessage(-1);\n            } else {\n                setReplyMessage(result);\n            }\n        }\n\n        if((!rMessage) && replyMessage==0) {\n            TdLib.sendQuery({\n                '@type': 'getMessage',\n                chat_id: message.reply_in_chat_id,\n                message_id: message.reply_to_message_id\n            }).then(requestHandler, requestHandler);\n        }\n    }, []);\n\n    if( typeof rMessage != 'number') {\n        const chat= getChatNoCache(message.reply_in_chat_id) as TdApi.td_chat;\n        const sender= rMessage.sender_id['@type'] === 'messageSenderUser' ?\n            getUserFullName(users[rMessage.sender_id.user_id]):\n            (getChatNoCache(rMessage.sender_id.chat_id) as TdApi.td_chat).title;\n\n        return (\n            <div className=\"reply-to\">\n                <div className=\"reply-sender\">{sender}</div>\n                <div className=\"text-container\">\n                    <MessageSummaryWithIcon chat={chat} message={rMessage} className='text' users={users}/>\n                </div>\n            </div>\n        );\n    }\n    else {\n        return (\n            <div className=\"reply-to\">\n                <div className=\"placeholder\">\n                    { rMessage==-1 ? __('lng_deleted_message') : __('lng_contacts_loading')}\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './title.scss';\nimport __, { __pl } from '../../../../language-pack/language-pack';\nimport ThreeDotsMenu from '../../../../ui/menu/three-dots-menu';\nimport Menu from '../../../../ui/menu/menu';\nimport options from '../../../../TdWeb/options';\nimport IconButton from '../../../../ui/elements/icon-button';\nimport { info_back, top_bar_group_call, top_bar_profile, top_bar_search } from '../../../../ui/icon/icons';\nimport { chatTitleOrDeletedAccount } from '../../../chat-misc';\nimport { lastSeenToString } from '../../../../time-tostring';\nimport ProfilePhoto, { getChatTypeId } from '../../../../ui/components/profile-photo';\nimport chatStore from '../../../chat-store';\nimport { ChatSectionContentProps } from '../chat-section';\nimport TdApi from '../../../../TdWeb/td_api';\nimport { menu_report } from '../../../../ui/icon/menu/menu';\n\nexport default function TitleHeader(props: ChatSectionContentProps): JSX.Element {\n    return (\n        <div className=\"title-bar\">\n            {props.singleColumnLayout && (\n                <IconButton icon={info_back} className=\"icon-button back\" onClick={()=>{\n                    chatStore.dispatch({\n                        type: 'SELECT_CHAT',\n                        chat_id: -1\n                    });\n                }}/>\n            )}\n            <div className=\"title-bar-left\">\n                {props.singleColumnLayout && (\n                    <ProfilePhoto \n                        id={getChatTypeId(props.chat)} \n                        name={props.chat.title} \n                        photo={props.chat.photo?.small}\n                    />\n                )}\n                <div className=\"text\">\n                    <div className=\"title\">\n                        {options['my_id'] == props.chat.id && (__('lng_saved_messages'))}\n                        {options['replies_bot_chat_id'] == props.chat.id && (__('lng_replies_messages'))}\n                        {options['my_id'] != props.chat.id && options['replies_bot_chat_id'] != props.chat.id && (chatTitleOrDeletedAccount(props.chat))}\n                    </div>\n                    <SubText {...props}/>\n                </div>\n            </div>\n            <div className=\"title-bar-right\">\n                {/*TODO Missing item: Call button for private chats, depends on userFullInfo */}\n                {props.chat.video_chat.group_call_id != 0 && (\n                    <IconButton icon={top_bar_group_call} className=\"icon-button voice-chat\"/>\n                )}\n                <IconButton icon={top_bar_search}/>\n                <IconButton icon={top_bar_profile}/>\n                <ThreeDotsMenu>\n                    <Menu.MenuContents>\n                        {props.chat.can_be_reported && <Menu.MenuItem icon={menu_report}>{__('lng_report_button')}</Menu.MenuItem>}\n                    </Menu.MenuContents>\n                </ThreeDotsMenu>\n            </div>\n        </div>\n    );\n}\n\nfunction SubText({chat, user, basicGroup, supergroup}: ChatSectionContentProps): JSX.Element|null {\n    if(supergroup) {\n        return (\n            <div className=\"info\">\n                {__pl((chat.type as TdApi.td_chatTypeSupergroup).is_channel ? 'lng_chat_status_subscribers' : 'lng_chat_status_members', supergroup.member_count)}\n            </div>\n        );\n    } \n    else if(basicGroup) {\n        return (\n            <div className=\"info\">\n                {__pl('lng_chat_status_members', basicGroup.member_count)}\n            </div>\n        );\n    } \n    else if(user)\n    {\n        if (chat.id == options['my_id'] || chat.id == options['replies_bot_chat_id']) {\n            return null;\n        }\n        if (chat.id == options['telegram_service_notifications_chat_id']) {\n            // Service notifications\n            return (\n                <div className=\"info\">\n                    {__('lng_status_service_notifications')}\n                </div>\n            );\n        }\n        if (user.is_support) {\n            return (\n                <div className=\"info\">\n                    {__('lng_status_support')}\n                </div>\n            );\n        }\n        if (user.type['@type'] == 'userTypeBot') {\n            return (\n                <div className=\"info\">\n                    {__('lng_status_bot')}\n                </div>\n            );\n        }\n\n        // In this case, He is a normal user, So app should show status\n        return (\n            <div className={`info ${user.status['@type'] == 'userStatusOnline' ? 'active' : ''}`}>\n                {lastSeenToString(user.status)}\n            </div>\n        );\n    }\n\n    return null;\n}\n","import {createStore, Store} from 'redux';\nimport TdLib from '../TdWeb/tdlib';\nimport TdApi from '../TdWeb/td_api';\n\nexport type BasicGroupStoreState = {\n    [id: number]: TdApi.td_basicGroup\n}\n\nexport type BasicGroupStoreAction = {\n    type: 'UPD_BASIC_GROUP',\n    basic_group: TdApi.td_basicGroup\n}\n\nfunction reducer(state: BasicGroupStoreState = {}, action: BasicGroupStoreAction): BasicGroupStoreState {\n    switch (action.type) {\n        case 'UPD_BASIC_GROUP':\n            return {\n                ...state,\n                [action.basic_group.id]: action.basic_group\n            };\n        default:\n            return state;\n    }\n}\n\nconst basicGroupStore= createStore<BasicGroupStoreState, BasicGroupStoreAction, any, any>(reducer) as Store<BasicGroupStoreState, BasicGroupStoreAction>;\nexport default basicGroupStore;\n\nTdLib.registerUpdateHandler<TdApi.td_updateBasicGroup>('updateBasicGroup', (update) => {\n    basicGroupStore.dispatch({\n        type: 'UPD_BASIC_GROUP',\n        basic_group: update.basic_group\n    });\n});","import React from 'react';\nimport RippleEffect, { handleMyMouseEventsFunction, RippleEffectProps_AutoSettable } from '../../../../ui/elements/ripple-effect';\nimport './compose-button.scss';\n\ntype ComposeButtonProps = {\n    onClick: (e: React.SyntheticEvent<HTMLButtonElement>) => void;\n    children: React.ReactNode;\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    [key: string]: any;\n};\n\nexport default function ComposeButton({ onClick, children, ...rest }: ComposeButtonProps): JSX.Element {\n    const ripple= React.useState<RippleEffectProps_AutoSettable>({state: 'off'});\n    const [onMouseDown, onMouseUp, onMouseLeave]= handleMyMouseEventsFunction(ripple);\n    return (\n        <button className=\"compose-button\" onClick={onClick} onMouseDown={onMouseDown} onMouseUp={onMouseUp} onMouseLeave={onMouseLeave} {...rest}>\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-historyComposeButtonBgRipple)\"/>\n            <div className=\"content\">{children}</div>\n        </button>\n    );\n}","import React from 'react';\nimport './footer.scss';\nimport ComposeButton from './compose-button';\nimport __ from '../../../../language-pack/language-pack';\nimport options from '../../../../TdWeb/options';\nimport { ChatSectionContentProps } from '../chat-section';\n\nexport function ChatFooter({user, supergroup}: ChatSectionContentProps): JSX.Element {\n    return (\n        <div className=\"footer\">\n            {(user?.username || supergroup?.username) && ( // As DIBgram has many missing features, we can show an 'OPEN WITH' button so the user can open the chat with another client\n                <ComposeButton onClick={()=> {\n                    window.open((options['t_me_url'] as string) + (user?.username || supergroup?.username), '_blank');\n                }}>\n                    {__('lng_media_open_with')}\n                </ComposeButton>\n            )}\n            {/* TODO: Render different footers based on chat. (e.g. compose area, 'mute', 'unmute', 'unblock', etc.) Compose footer must be on a separate file. */}\n        </div>\n    );\n}\n","import React from 'react';\nimport usersStore, { UsersStoreAction, UsersStoreState } from './users-store';\nimport { Provider, connect } from 'react-redux';\nimport { Dispatch } from 'redux';\n/**\n * A React higher order component that provides the `users` prop to the wrapped component.\n */\nexport default function withUsers<P extends {users: UsersStoreState, dispatch?: Dispatch<UsersStoreAction>}>(Component: React.ComponentType<P>): React.ComponentType<Omit<P, 'users'|'dispatch'>> {\n    const WrappedComponent= connect<{users: UsersStoreState}, unknown, Omit<P, 'users'|'dispatch'>, UsersStoreState>(users => ({users}))(Component as any);\n    return function WithUsers(props) {\n        return (\n            <Provider store={usersStore}>\n                <WrappedComponent {...props} />\n            </Provider>\n        );\n    };\n}\n","import React from 'react';\nimport TdApi from '../../../../TdWeb/td_api';\nimport withUsers from '../../../users-wrapper';\nimport compileEntities from '../entities';\nimport { MessageProps } from '../message';\nimport { BubbleMessage, MessageFooter } from '../message-containers';\n\nexport default function MessageText({message, chat}: MessageProps): JSX.Element {\n    const messageContent= (message.content as TdApi.td_messageText);\n    \n    const BubbleMsg= withUsers(BubbleMessage);\n    return (\n        <BubbleMsg message={message} chat={chat}>\n            <div className={`content ${message.can_be_saved?'':'no-save'}`}>\n                {compileEntities(messageContent.text)}\n                <MessageFooter message={message} chat={chat}/>\n            </div>\n        </BubbleMsg>\n    );\n}\n","import React from 'react';\nimport { _s__ } from '../../../../language-pack/language-pack';\nimport { MessageProps } from '../message';\nimport MessageText from './messageText';\n\nexport function MessageUnsupported({message, chat, users}: MessageProps): JSX.Element {\n    return (\n        <MessageText chat={chat} users={users} message={{\n            ...message,\n            content: {\n                '@type': 'messageText',\n                text: {\n                    '@type': 'formattedText',\n                    text: _s__('lngd_message_unsupported'),\n                    entities: [],\n                },\n            }\n        }}/>\n    );\n}","import React from 'react';\nimport TdApi from '../../../TdWeb/td_api';\nimport { UsersStoreState } from '../../users-store';\nimport { ProcessedSingleMessage } from '../processHistory';\nimport MessageBasicGroupChatCreate from './types/messageBasicGroupChatCreate';\nimport MessageChatAddMembers from './types/messageChatAddMembers';\nimport MessageChatChangeTitle from './types/messageChatChangeTitle';\nimport MessageChatDeleteMember from './types/messageChatDeleteMember';\nimport MessageChatDeletePhoto from './types/messageChatDeletePhoto';\nimport MessageChatJoinByLink from './types/messageChatJoinByLink';\nimport MessageChatJoinByRequest from './types/messageChatJoinByRequest';\nimport MessageChatSetTheme from './types/messageChatSetTheme';\nimport MessageChatSetTtl from './types/messageChatSetTtl';\nimport MessageContactRegistered from './types/messageContactRegistered';\nimport MessageCustomServiceAction from './types/messageCustomServiceAction';\nimport MessageExpiredPhoto from './types/messageExpiredPhoto';\nimport MessageExpiredVideo from './types/messageExpiredVideo';\nimport MessageGameScore from './types/messageGameScore';\nimport MessageInviteVideoChatParticipants from './types/messageInviteVideoChatParticipants';\nimport MessagePassportDataSent from './types/messagePassportDataSent';\nimport MessagePaymentSuccessful from './types/messagePaymentSuccessful';\nimport MessagePinMessage from './types/messagePinMessage';\nimport MessageSupergroupChatCreate from './types/messageSupergroupChatCreate';\nimport MessageText from './types/messageText';\nimport { MessageUnsupported } from './types/messageUnsupported';\nimport MessageVideoChatEnded from './types/messageVideoChatEnded';\nimport MessageVideoChatScheduled from './types/messageVideoChatScheduled';\nimport MessageVideoChatStarted from './types/messageVideoChatStarted';\nimport MessageWebsiteConnected from './types/messageWebsiteConnected';\n\nconst messageTypes = {\n    'messageText': MessageText,\n    'messageExpiredPhoto': MessageExpiredPhoto,\n    'messageExpiredVideo': MessageExpiredVideo,\n    'messageVideoChatScheduled': MessageVideoChatScheduled,\n    'messageVideoChatStarted': MessageVideoChatStarted,\n    'messageVideoChatEnded': MessageVideoChatEnded,\n    'messageInviteVideoChatParticipants': MessageInviteVideoChatParticipants,\n    'messageBasicGroupChatCreate': MessageBasicGroupChatCreate,\n    'messageSupergroupChatCreate': MessageSupergroupChatCreate,\n    'messageChatChangeTitle': MessageChatChangeTitle,\n    'messageChatDeletePhoto': MessageChatDeletePhoto,\n    'messageChatAddMembers': MessageChatAddMembers,\n    'messageChatJoinByLink': MessageChatJoinByLink,\n    'messageChatJoinByRequest': MessageChatJoinByRequest,\n    'messageChatDeleteMember': MessageChatDeleteMember,\n    'messageChatUpgradeTo': ()=> null,\n    'messageChatUpgradeFrom': ()=> null,\n    'messagePinMessage': MessagePinMessage,\n    'messageChatSetTheme': MessageChatSetTheme,\n    'messageChatSetTtl': MessageChatSetTtl,\n    'messageCustomServiceAction': MessageCustomServiceAction,\n    'messageGameScore': MessageGameScore,\n    'messagePaymentSuccessful': MessagePaymentSuccessful,\n    'messageContactRegistered': MessageContactRegistered,\n    'messageWebsiteConnected': MessageWebsiteConnected,\n    'messagePassportDataSent': MessagePassportDataSent\n};\n\nexport type MessageProps = {\n    message: ProcessedSingleMessage\n    chat: TdApi.td_chat\n    users: UsersStoreState\n};\nexport const Message= React.memo(function Message({message, chat, users}: MessageProps): JSX.Element {\n    const MessageComponent= messageTypes[message.content['@type'] as keyof typeof messageTypes] || MessageUnsupported;\n    return <MessageComponent message={message} chat={chat} users={users}/>;\n});","import React from 'react';\nimport __ from '../../../../language-pack/language-pack';\nimport { ServiceMessage } from '../message-containers';\n\nexport default function MessageExpiredPhoto(): JSX.Element {\n    return (\n        <ServiceMessage>\n            {__('lng_ttl_photo_expired')}\n        </ServiceMessage>\n    );\n}","import React from 'react';\nimport __ from '../../../../language-pack/language-pack';\nimport { ServiceMessage } from '../message-containers';\n\nexport default function MessageExpiredVideo(): JSX.Element {\n    return (\n        <ServiceMessage>\n            {__('lng_ttl_video_expired')}\n        </ServiceMessage>\n    );\n}","import React from 'react';\nimport { __fmt } from '../../../../language-pack/language-pack';\nimport { futureDayToString, timeToString } from '../../../../time-tostring';\nimport { SenderFullName } from '../../message-summary-noicon';\nimport { MessageProps } from '../message';\nimport { ServiceMessage } from '../message-containers';\n\n\nexport default function MessageVideoChatScheduled({message, chat, users}: MessageProps): JSX.Element {\n    if(message.content['@type'] !== 'messageVideoChatScheduled') {\n        throw new Error('Message is not messageVideoChatScheduled');\n    }\n\n    if(message.is_channel_post) {\n        return (\n            <ServiceMessage>\n                {__fmt('lng_action_group_call_scheduled_channel', {\n                    date: __fmt('lng_mediaview_date_time', {\n                        date: futureDayToString(message.content.start_date),\n                        time: timeToString(message.content.start_date)\n                    })\n                })}\n            </ServiceMessage>\n        );\n    } else {\n        return (\n            <ServiceMessage>\n                {__fmt('lng_action_group_call_scheduled_group', {\n                    from: <SenderFullName message={message} chat={chat} users={users}/>,\n                    date: __fmt('lng_mediaview_date_time', {\n                        date: futureDayToString(message.content.start_date),\n                        time: timeToString(message.content.start_date)\n                    })\n                })}\n            </ServiceMessage>\n        );\n    }\n}","import React from 'react';\nimport __, { __fmt } from '../../../../language-pack/language-pack';\nimport { SenderFullName } from '../../message-summary-noicon';\nimport { MessageProps } from '../message';\nimport { ServiceMessage } from '../message-containers';\n\nexport default function MessageVideoChatStarted({message, chat, users}: MessageProps): JSX.Element {\n    if(message.is_channel_post) {\n        return (\n            <ServiceMessage>\n                <span className=\"part-1\">{__('lng_action_group_call_started_channel')}</span>\n            </ServiceMessage>\n        );\n    } else {\n        return (\n            <ServiceMessage>\n                {__fmt('lng_action_group_call_started_group', {\n                    from: <SenderFullName message={message} chat={chat} users={users}/>\n                })}\n            </ServiceMessage>\n        );\n    }\n}","import React from 'react';\nimport { __fmt } from '../../../../language-pack/language-pack';\nimport { durationToString } from '../../../../time-tostring';\nimport { MessageProps } from '../message';\nimport { ServiceMessage } from '../message-containers';\nimport { SenderFullName } from '../../message-summary-noicon';\n\nexport default function MessageVideoChatEnded({message, chat, users}: MessageProps): JSX.Element {\n    if(message.content['@type'] !== 'messageVideoChatEnded') {\n        throw new Error('Message is not messageVideoChatEnded');\n    }\n    if(message.is_channel_post) {\n        return (\n            <ServiceMessage>\n                {__fmt('lng_action_group_call_finished', {\n                    duration: durationToString(message.content.duration)\n                })}\n            </ServiceMessage>\n        );\n    } else {\n        return (\n            <ServiceMessage>\n                {__fmt('lng_action_group_call_finished_group', {\n                    from: <SenderFullName message={message} chat={chat} users={users}/>,\n                    duration: durationToString(message.content.duration)\n                })}\n            </ServiceMessage>\n        );\n    }\n}","import React from 'react';\nimport __, { __collection, __fmt } from '../../../../language-pack/language-pack';\nimport { getUserFullName } from '../../../user-misc';\nimport { SenderFullName } from '../../message-summary-noicon';\nimport { MessageProps } from '../message';\nimport { ServiceMessage } from '../message-containers';\n\nexport default function MessageInviteVideoChatParticipants({message, chat, users}: MessageProps): JSX.Element {\n    if(message.content['@type'] != 'messageInviteVideoChatParticipants') {\n        throw new Error('Message is not messageInviteVideoChatParticipants');\n    }\n    const invitedMembers= __collection(true, message.content.user_ids.map(id=> // convert user IDs to names\n        getUserFullName(users[id])), false); // A, B, and C\n    return (\n        <ServiceMessage>\n            {__fmt((invitedMembers.length==1 ? 'lng_action_invite_user' : 'lng_action_invite_users_many'), {\n                from: <SenderFullName message={message} chat={chat} users={users}/>,\n                user: invitedMembers,\n                users: invitedMembers,\n                chat: __('lng_action_invite_user_chat')\n            })}\n        </ServiceMessage>\n    );\n}","import React from 'react';\nimport __, { __fmt } from '../../../../language-pack/language-pack';\nimport { MessageProps } from '../message';\nimport { ServiceMessage } from '../message-containers';\nimport { SenderFullName } from '../../message-summary-noicon';\n\nexport default function MessageBasicGroupChatCreate({message, chat, users}: MessageProps): JSX.Element {\n    if(message.content['@type'] != 'messageBasicGroupChatCreate') {\n        throw new Error('Message is not messageBasicGroupChatCreate');\n    }\n    if(message.is_channel_post) {\n        return (\n            <ServiceMessage>\n                <span className=\"part-1\">{__('lng_action_created_channel')}</span>\n            </ServiceMessage>\n        );\n    } else {\n        return (\n            <ServiceMessage>\n                {__fmt('lng_action_created_chat', {\n                    from: <SenderFullName message={message} chat={chat} users={users}/>,\n                    title: message.content.title\n                })}\n            </ServiceMessage>\n        );\n    }\n}","import React from 'react';\nimport __, { __fmt } from '../../../../language-pack/language-pack';\nimport { MessageProps } from '../message';\nimport { ServiceMessage } from '../message-containers';\nimport { SenderFullName } from '../../message-summary-noicon';\n\nexport default function MessageSupergroupChatCreate({message, chat, users}: MessageProps): JSX.Element {\n    if(message.content['@type'] != 'messageSupergroupChatCreate') {\n        throw new Error('Message is not messageSuperGroupChatCreate');\n    }\n    if(message.is_channel_post) {\n        return (\n            <ServiceMessage>\n                <span className=\"part-1\">{__('lng_action_created_channel')}</span>\n            </ServiceMessage>\n        );\n    } else {\n        return (\n            <ServiceMessage>\n                {__fmt('lng_action_created_chat', {\n                    from: <SenderFullName message={message} chat={chat} users={users}/>,\n                    title: message.content.title\n                })}\n            </ServiceMessage>\n        );\n    }\n}","import React from 'react';\nimport { __fmt } from '../../../../language-pack/language-pack';\nimport { SenderFullName } from '../../message-summary-noicon';\nimport { MessageProps } from '../message';\nimport { ServiceMessage } from '../message-containers';\n\nexport default function MessageChatChangeTitle({message, chat, users}: MessageProps): JSX.Element {\n    if(message.content['@type'] != 'messageChatChangeTitle') {\n        throw new Error('Message is not messageChatChangeTitle');\n    }\n    if(message.is_channel_post) {\n        return (\n            <ServiceMessage>\n                <span className=\"part-1\">{__fmt('lng_action_changed_title_channel', {title: message.content.title})}</span>\n            </ServiceMessage>\n        );\n    } else {\n        return (\n            <ServiceMessage>\n                <span className=\"part-1\">{__fmt('lng_action_changed_title', {\n                    from: <SenderFullName message={message} chat={chat} users={users}/>,\n                    title: message.content.title\n                })}</span>\n            </ServiceMessage>\n        );\n    }\n}","import React from 'react';\nimport __, { __fmt } from '../../../../language-pack/language-pack';\nimport { SenderFullName } from '../../message-summary-noicon';\nimport { MessageProps } from '../message';\nimport { ServiceMessage } from '../message-containers';\n\nexport default function MessageChatDeletePhoto({message, chat, users}: MessageProps): JSX.Element {\n    if(message.is_channel_post) {\n        return (\n            <ServiceMessage>\n                <span className=\"part-1\">{__('lng_action_removed_photo_channel')}</span>\n            </ServiceMessage>\n        );\n    } else {\n        return (\n            <ServiceMessage>\n                {__fmt('lng_action_removed_photo', {\n                    from:  <SenderFullName message={message} chat={chat} users={users}/>\n                })}\n            </ServiceMessage>\n        );\n    }\n}","import React from 'react';\nimport { __collection, __fmt } from '../../../../language-pack/language-pack';\nimport { getUserFullName } from '../../../user-misc';\nimport { SenderFullName } from '../../message-summary-noicon';\nimport { MessageProps } from '../message';\nimport { ServiceMessage } from '../message-containers';\n\nexport default function MessageChatAddMembers({message, chat, users}: MessageProps): JSX.Element {\n    if(message.content['@type'] != 'messageChatAddMembers') {\n        throw new Error('Message is not messageChatAddMembers');\n    }\n\n    // If the user joined the group by themselves, it appears as 'X added X' and that is not accurate.\n    if(message.sender_id['@type']=='messageSenderUser' && message.content.member_user_ids[0] == message.sender_id?.user_id) {\n        return (\n            <ServiceMessage>\n                <span className=\"part-1\">{__fmt('lng_action_user_joined', {from: <SenderFullName message={message} chat={chat} users={users}/>})}</span>\n            </ServiceMessage>\n        );\n    }\n\n    const newMembers= __collection(false, message.content.member_user_ids.map(id=> getUserFullName(users[id])), false);\n    \n    return (\n        <ServiceMessage>\n            {__fmt(newMembers.length> 1 ? 'lng_action_add_users_many' : 'lng_action_add_user', {\n                from: <SenderFullName message={message} chat={chat} users={users}/>,\n                users: newMembers,\n                user: newMembers\n            })}\n        </ServiceMessage>\n    );\n}","import React from 'react';\nimport { __fmt } from '../../../../language-pack/language-pack';\nimport { ServiceMessage } from '../message-containers';\nimport { MessageProps } from '../message';\nimport { SenderFullName } from '../../message-summary-noicon';\n\nexport default function MessageChatJoinByLink({message, chat, users}: MessageProps): JSX.Element {\n    return (\n        <ServiceMessage>\n            {__fmt('lng_action_user_joined_by_link', {\n                from: <SenderFullName message={message} chat={chat} users={users}/>\n            })}\n        </ServiceMessage>\n    );\n}","import React from 'react';\nimport { __fmt } from '../../../../language-pack/language-pack';\nimport { SenderFullName } from '../../message-summary-noicon';\nimport { MessageProps } from '../message';\nimport { ServiceMessage } from '../message-containers';\n\nexport default function MessageChatJoinByRequest({message, chat, users}: MessageProps): JSX.Element {\n    return (\n        <ServiceMessage>\n            {__fmt('lng_action_user_joined_by_request', {\n                from: <SenderFullName message={message} chat={chat} users={users}/>\n            })}\n        </ServiceMessage>\n    );\n}","import React from 'react';\nimport { __fmt } from '../../../../language-pack/language-pack';\nimport { getUserFullName } from '../../../user-misc';\nimport { MessageProps } from '../message';\nimport { ServiceMessage } from '../message-containers';\nimport { SenderFullName } from '../../message-summary-noicon';\n\nexport default function MessageChatDeleteMember({message, chat, users}: MessageProps): JSX.Element {\n    if(message.content['@type'] != 'messageChatDeleteMember') {\n        throw new Error('Message is not messageChatDeleteMember');\n    }\n    const deletedMember= users[message.content.user_id];\n    if( message.sender_id['@type']=='messageSenderUser' && deletedMember.id == message.sender_id.user_id ) { // Left the group\n        return (\n            <ServiceMessage>\n                {__fmt('lng_action_user_left', {\n                    from: <SenderFullName message={message} chat={chat} users={users}/>\n                })}\n            </ServiceMessage>\n        );\n    }\n    return (\n        <ServiceMessage>\n            {__fmt('lng_action_kick_user', {\n                from: <SenderFullName message={message} chat={chat} users={users}/>,\n                user: getUserFullName(deletedMember)\n            })}\n        </ServiceMessage>\n    );\n}","import React from 'react';\nimport __, { __fmt } from '../../../../language-pack/language-pack';\nimport TdLib from '../../../../TdWeb/tdlib';\nimport TdApi from '../../../../TdWeb/td_api';\nimport { messageStore } from '../../../message-store';\nimport MessaagePinnedMessage from '../../message-pinned-message';\nimport { SenderFullName } from '../../message-summary-noicon';\nimport { MessageProps } from '../message';\nimport { ServiceMessage } from '../message-containers';\n\nexport default function MessagePinMessage({message, chat, users}: MessageProps): JSX.Element {\n    if(message.content['@type'] != 'messagePinMessage') {\n        throw new Error('Message is not messagePinMessage');\n    }\n\n    const [pinnedMessage, setPinnedMessage] = React.useState<TdApi.td_message|0|-1>(0);\n\n    function handleMessageQuery(result: TdApi.td_message|TdApi.td_error) {\n        if(result['@type'] == 'error') {\n            setPinnedMessage(-1);\n        }\n        else {\n            setPinnedMessage(result);\n        }\n    }\n\n    React.useEffect(() => {\n        message.content = message.content as TdApi.td_messagePinMessage;\n        if(pinnedMessage == 0) {\n            const pmessage= messageStore.getState().messages[message.content.message_id];\n            if(pmessage) {\n                setPinnedMessage(pmessage);\n            } else {\n                TdLib.sendQuery({\n                    '@type': 'getMessage',\n                    chat_id: chat.id,\n                    message_id: message.content.message_id\n                }).then(handleMessageQuery, handleMessageQuery);\n            }\n        }\n    }, []);\n\n    return pinnedMessage == 0 ? (\n        <ServiceMessage>\n            {__fmt('lng_action_pinned_media', {\n                from: <SenderFullName message={message} chat={chat} users={users}/>,\n                media: __('lng_contacts_loading')\n            })}\n        </ServiceMessage>\n    ) : pinnedMessage == -1 ? (\n        <ServiceMessage>\n            {__fmt('lng_action_pinned_media', {\n                from: <SenderFullName message={message} chat={chat} users={users}/>,\n                media: __('lng_deleted_message')\n            })}\n        </ServiceMessage>\n    ) : (\n        <ServiceMessage>\n            <MessaagePinnedMessage message={pinnedMessage} from={<SenderFullName message={message} chat={chat} users={users}/>}/>\n        </ServiceMessage>\n    );\n}","import React from 'react';\nimport { ServiceMessageIncludingYou } from '../../message-summary-noicon';\nimport { MessageProps } from '../message';\nimport { ServiceMessage } from '../message-containers';\n\nexport default function MessageChatSetTheme({message, chat, users}: MessageProps): JSX.Element {\n    if(message.content['@type'] != 'messageChatSetTheme') {\n        throw new Error('Message is not messageChatSetTheme');\n    }\n    \n    if(message.content.theme_name){\n        return (\n            <ServiceMessage>\n                <ServiceMessageIncludingYou \n                    message={message} chat={chat} users={users}\n                    lpString=\"lng_action_theme_changed\"\n                    lpString_you=\"lng_action_you_theme_changed\"\n                    params={{emoji: message.content.theme_name}}/>\n            </ServiceMessage>\n        );\n    } else {\n        return (\n            <ServiceMessage>\n                <ServiceMessageIncludingYou \n                    message={message} chat={chat} users={users}\n                    lpString=\"lng_action_theme_disabled\"\n                    lpString_you=\"lng_action_you_theme_disabled\"/>\n            </ServiceMessage>\n        );\n    }\n}","import React from 'react';\nimport __, { __fmt } from '../../../../language-pack/language-pack';\nimport { ServiceMessageIncludingYou } from '../../message-summary-noicon';\nimport { MessageProps } from '../message';\nimport { ServiceMessage } from '../message-containers';\n\nexport default function MessageChatSetTtl({message, chat, users}: MessageProps): JSX.Element {\n    if(message.content['@type'] != 'messageChatSetTtl') {\n        throw new Error('Message is not messageChatSetTtl');\n    }\n    \n    const ttlTimeUnit= {\n        86400: __('lng_ttl_about_duration1'), \n        604800: __('lng_ttl_about_duration2'),\n        2678400: __('lng_ttl_about_duration3'),\n    }[message.content.ttl];\n\n    if(message.is_channel_post) {\n        if(message.content.ttl) { // If TTL is disabled, it will be set to 0\n            return (\n                <ServiceMessage>\n                    {__fmt('lng_action_ttl_changed_channel', {\n                        duration: ttlTimeUnit\n                    })}\n                </ServiceMessage>\n            );\n        } else {\n            return (\n                <ServiceMessage>\n                    {__('lng_action_ttl_removed_channel')}\n                </ServiceMessage>\n            );\n        }\n    } else {\n        if(message.content.ttl) { // If TTL is disabled, it will be set to 0\n            return (\n                <ServiceMessage>\n                    <ServiceMessageIncludingYou \n                        message={message} chat={chat} users={users}\n                        lpString=\"lng_action_ttl_changed\"\n                        lpString_you=\"lng_action_ttl_changed_you\"\n                        params={{duration: ttlTimeUnit}}/>\n                </ServiceMessage>\n            );\n        } else {\n            return (\n                <ServiceMessage>\n                    <ServiceMessageIncludingYou \n                        message={message} chat={chat} users={users}\n                        lpString=\"lng_action_ttl_removed\"\n                        lpString_you=\"lng_action_ttl_removed_you\"/>\n                </ServiceMessage>\n            );\n        }\n    }\n}","import React from 'react';\nimport { MessageProps } from '../message';\nimport { ServiceMessage } from '../message-containers';\n\nexport default function MessageCustomServiceAction({message}: MessageProps): JSX.Element {\n    if(message.content['@type'] != 'messageCustomServiceAction') {\n        throw new Error('Message is not messageCustomServiceAction');\n    }\n\n    return (\n        <ServiceMessage>\n            {message.content.text}\n        </ServiceMessage>\n    );\n}","import React from 'react';\nimport TdLib from '../../../../TdWeb/tdlib';\nimport TdApi from '../../../../TdWeb/td_api';\nimport { messageStore } from '../../../message-store';\nimport { ServiceMessageIncludingYou } from '../../message-summary-noicon';\nimport { MessageProps } from '../message';\nimport { ServiceMessage } from '../message-containers';\n\nexport default function MessageGameScore({message, chat, users}: MessageProps): JSX.Element {\n    if(message.content['@type'] != 'messageGameScore') {\n        throw new Error('Message is not messageGameScore');\n    }\n\n    const [gameMessage, setGameMessage] = React.useState<TdApi.td_message|0|-1>(0);\n\n    function handleMessageQuery(result: TdApi.td_message|TdApi.td_error) {\n        if(result['@type'] == 'error') {\n            setGameMessage(-1);\n        }\n        else {\n            setGameMessage(result);\n        }\n    }\n\n    React.useEffect(() => {\n        message.content = message.content as TdApi.td_messageGameScore;\n        if(gameMessage == 0) {\n            const gmessage= messageStore.getState().messages[message.content.game_message_id];\n            if(gmessage) {\n                setGameMessage(gmessage);\n            } else {\n                TdLib.sendQuery({\n                    '@type': 'getMessage',\n                    chat_id: chat.id,\n                    message_id: message.content.game_message_id\n                }).then(handleMessageQuery, handleMessageQuery);\n            }\n        }\n    }, []);\n\n    return typeof gameMessage == 'number'? (\n        <ServiceMessage>\n            <ServiceMessageIncludingYou \n                message={message} chat={chat} users={users}\n                lpString=\"lng_action_game_score_no_game\"\n                lpString_you=\"lng_action_game_you_scored_no_game\"\n                count={message.content.score}/>\n        </ServiceMessage>\n    ) : (\n        <ServiceMessage>\n            <ServiceMessageIncludingYou \n                message={message} chat={chat} users={users}\n                lpString=\"lng_action_game_score\"\n                lpString_you=\"lng_action_game_you_scored\"\n                count={message.content.score}\n                params={{game: (gameMessage.content as TdApi.td_messageGame).game.title}}/>\n        </ServiceMessage>\n    );\n}","import React from 'react';\nimport { __fmt } from '../../../../language-pack/language-pack';\nimport TdLib from '../../../../TdWeb/tdlib';\nimport TdApi from '../../../../TdWeb/td_api';\nimport currencyAmountToString from '../../../sections/payments/currency-tostring';\nimport { MessageProps } from '../message';\nimport { ServiceMessage } from '../message-containers';\nimport currencies from '../../../sections/payments/currencies.json';\nimport { messageStore } from '../../../message-store';\n\nexport default function MessagePaymentSuccessful({message, chat}: MessageProps): JSX.Element {\n    if(message.content['@type'] != 'messagePaymentSuccessful') {\n        throw new Error('Message is not messagePaymentSuccessful');\n    }\n\n    const [invoiceMessage, setInvoiceMessage] = React.useState<TdApi.td_message|0|-1>(0);\n\n    function handleMessageQuery(result: TdApi.td_message|TdApi.td_error) {\n        if(result['@type'] == 'error') {\n            setInvoiceMessage(-1);\n        }\n        else {\n            setInvoiceMessage(result);\n        }\n    }\n\n    React.useEffect(() => {\n        message.content = message.content as TdApi.td_messagePaymentSuccessful;\n        if(invoiceMessage == 0) {\n            const imessage= messageStore.getState().messages[message.content.invoice_message_id];\n            if(imessage) {\n                setInvoiceMessage(imessage);\n            } else {\n                TdLib.sendQuery({\n                    '@type': 'getMessage',\n                    chat_id: message.content.invoice_chat_id,\n                    message_id: message.content.invoice_message_id\n                }).then(handleMessageQuery, handleMessageQuery);\n            }\n        }\n    }, []);\n\n    return typeof invoiceMessage == 'number'? (\n        <ServiceMessage>\n            {__fmt('lng_action_payment_done', {\n                amount: currencyAmountToString(message.content.currency as keyof typeof currencies, message.content.total_amount),\n                user: chat.title\n            })}\n        </ServiceMessage>\n    ) : (\n        <ServiceMessage>\n            {__fmt('lng_action_payment_done_for', {\n                amount: currencyAmountToString(message.content.currency as keyof typeof currencies, message.content.total_amount),\n                user: chat.title,\n                invoice: (invoiceMessage.content as TdApi.td_messageInvoice).title\n            })}\n        </ServiceMessage>\n    );\n}","import React from 'react';\nimport { __fmt } from '../../../../language-pack/language-pack';\nimport { SenderFullName } from '../../message-summary-noicon';\nimport { MessageProps } from '../message';\nimport { ServiceMessage } from '../message-containers';\n\nexport default function MessageContactRegistered({message, chat, users}: MessageProps): JSX.Element {\n    return (\n        <ServiceMessage>\n            {__fmt('lng_action_user_registered', {\n                from: <SenderFullName message={message} chat={chat} users={users}/>\n            })}\n        </ServiceMessage>\n    );\n}","import React from 'react';\nimport { __fmt } from '../../../../language-pack/language-pack';\nimport { MessageProps } from '../message';\nimport { ServiceMessage } from '../message-containers';\n\nexport default function MessageWebsiteConnected({message}: MessageProps): JSX.Element {\n    if(message.content['@type'] != 'messageWebsiteConnected') {\n        throw new Error('Message is not messageWebsiteConnected');\n    }\n\n    return (\n        <ServiceMessage>\n            {__fmt('lng_action_bot_allowed_from_domain', {\n                domain: message.content.domain_name\n            })}\n        </ServiceMessage>\n    )\n}","import React from 'react';\nimport __, { __fmt } from '../../../../language-pack/language-pack';\nimport { LanguagePackKey } from '../../../../language-pack/language-pack-types';\nimport { MessageProps } from '../message';\nimport { ServiceMessage } from '../message-containers';\n\nexport default function MessagePassportDataSent({message, chat}: MessageProps): JSX.Element {\n    if(message.content['@type'] != 'messagePassportDataSent') {\n        throw new Error('Message is not messagePassportDataSent');\n    }\n\n    const passportDataTypeToString= {\n        'passportElementTypeAddress':               'lng_passport_address',\n        'passportElementTypeBankStatement':         'lng_passport_address_statement',\n        'passportElementTypeDriverLicense':         'lng_passport_identity_license',\n        'passportElementTypeEmailAddress':          'lng_passport_email_title',\n        'passportElementTypeIdentityCard':          'lng_passport_identity_card',\n        'passportElementTypeInternalPassport':      'lng_passport_identity_internal',\n        'passportElementTypePassport':              'lng_passport_identity_passport',\n        'passportElementTypePassportRegistration':  'lng_passport_address_registration',\n        'passportElementTypePersonalDetails':       'lng_passport_personal_details',\n        'passportElementTypePhoneNumber':           'lng_passport_phone_title',\n        'passportElementTypeRentalAgreement':       'lng_passport_address_agreement',\n        'passportElementTypeTemporaryRegistration': 'lng_passport_address_temporary',\n        'passportElementTypeUtilityBill':           'lng_passport_address_bill',\n    };\n    const passportDataTypes= message.content.types.map(type=> (__(passportDataTypeToString[type['@type']] as LanguagePackKey) as string).toLowerCase());\n    return (\n        <ServiceMessage>\n            {__fmt('lng_action_secure_values_sent', {\n                user: chat.title,\n                documents: passportDataTypes.join(', ')\n            })}\n        </ServiceMessage>\n    );\n}","import TdLib from '../../TdWeb/tdlib';\nimport TdApi from '../../TdWeb/td_api';\nimport { messageStore } from '../message-store';\nimport chatStore from '../chat-store';\n\nexport function loadChatHistory(chatId: number, fromMessageId = 0, limit= 100): Promise<number> {\n    return new Promise<number>((resolve, reject) => {\n        TdLib.sendQuery({\n            '@type': 'getChatHistory',\n            chat_id: chatId,\n            from_message_id: fromMessageId,\n            limit: limit\n        }).then((result) => {\n            result= result as TdApi.td_messages;\n            if(chatId !== chatStore.getState().selectedChat) {\n                resolve(-1);\n                return;\n            }\n\n            if(result.messages) {\n                messageStore.dispatch({\n                    type: 'ADD_MESSAGES',\n                    messages: result.messages\n                });\n            }\n            resolve(result.total_count);\n        }, reject);\n    });\n}\n\nTdLib.registerUpdateHandler<TdApi.td_updateNewMessage>('updateNewMessage', (update) => {\n    if(update.message.chat_id !== chatStore.getState().selectedChat) return;\n    messageStore.dispatch({\n        type: 'ADD_MESSAGE',\n        message: update.message,\n    });\n});\nTdLib.registerUpdateHandler<TdApi.td_updateMessageSendSucceeded>('updateMessageSendSucceeded', (update) => {\n    if(update.message.chat_id !== chatStore.getState().selectedChat) return;\n    messageStore.dispatch({\n        type: 'REMOVE_MESSAGES',\n        messageIds: [update.old_message_id],\n    });\n    messageStore.dispatch({\n        type: 'ADD_MESSAGE',\n        message: update.message,\n    });\n});\nTdLib.registerUpdateHandler<TdApi.td_updateDeleteMessages>('updateDeleteMessages', (update) => {\n    if(update.chat_id !== chatStore.getState().selectedChat) return;\n    messageStore.dispatch({\n        type: 'REMOVE_MESSAGES',\n        messageIds: update.message_ids,\n    });\n});\nTdLib.registerUpdateHandler<TdApi.td_updateMessageContent>('updateMessageContent', (update) => {\n    if(update.chat_id !== chatStore.getState().selectedChat) return;\n    messageStore.dispatch({\n        type: 'REDUCE_MESSAGE',\n        messageId: update.message_id,\n        reduce: (message) => {\n            return {\n                ...message,\n                content: update.new_content,\n            };\n        }\n    });\n});\nTdLib.registerUpdateHandler<TdApi.td_updateMessageEdited>('updateMessageEdited', (update) => {\n    if(update.chat_id !== chatStore.getState().selectedChat) return;\n    messageStore.dispatch({\n        type: 'REDUCE_MESSAGE',\n        messageId: update.message_id,\n        reduce: (message) => {\n            return {\n                ...message,\n                edit_date: update.edit_date,\n                reply_markup: update.reply_markup,\n            };\n        }\n    });\n});\nTdLib.registerUpdateHandler<TdApi.td_updateMessageIsPinned>('updateMessageIsPinned', (update) => {\n    if(update.chat_id !== chatStore.getState().selectedChat) return;\n    messageStore.dispatch({\n        type: 'REDUCE_MESSAGE',\n        messageId: update.message_id,\n        reduce: (message) => {\n            return {\n                ...message,\n                is_pinned: update.is_pinned,\n            };\n        }\n    });\n});\nTdLib.registerUpdateHandler<TdApi.td_updateMessageInteractionInfo>('updateMessageInteractionInfo', (update) => {\n    if(update.chat_id !== chatStore.getState().selectedChat) return;\n    messageStore.dispatch({\n        type: 'REDUCE_MESSAGE',\n        messageId: update.message_id,\n        reduce: (message) => {\n            return {\n                ...message,\n                interaction_info: update.interaction_info,\n            };\n        }\n    });\n});","import TdApi from '../../TdWeb/td_api';\n\nconst serviceMessages= ([\n    'messageExpiredPhoto',\n    'messageExpiredVideo',\n    'messageVideoChatScheduled',\n    'messageVideoChatStarted',\n    'messageVideoChatEnded',\n    'messageInviteVideoChatParticipants',\n    'messageBasicGroupChatCreate',\n    'messageSupergroupChatCreate',\n    'messageChatChangeTitle',\n    'messageChatChangePhoto',\n    'messageChatDeletePhoto',\n    'messageChatAddMembers',\n    'messageChatJoinByLink',\n    'messageChatJoinByRequest',\n    'messageChatDeleteMember',\n    'messageChatUpgradeTo',\n    'messageChatUpgradeFrom',\n    'messagePinMessage',\n    'messageScreenshotTaken',\n    'messageChatSetTheme',\n    'messageChatSetTtl',\n    'messageCustomServiceAction',\n    'messageGameScore',\n    'messagePaymentSuccessful',\n    'messageContactRegistered',\n    'messageWebsiteConnected',\n    'messagePassportDataSent',\n    'messageProximityAlertTriggered',\n] as TdApi.td_MessageContent['@type'][])\n\nexport default function messageIsService(message: TdApi.td_message): boolean {\n    return serviceMessages.includes(message.content['@type']);\n}","import React from 'react';\nimport './outline-button.scss';\nimport RippleEffect, { handleMyMouseEventsFunction, RippleEffectProps_AutoSettable } from './ripple-effect';\n\ntype OutlineButtonProps= {\n    onClick: (e: React.SyntheticEvent<HTMLButtonElement>) => void,\n    children: React.ReactNode | React.ReactNode[],\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    [key: string]: any,\n}\n\nexport function OutlineButton({onClick, children, ...rest}: OutlineButtonProps): JSX.Element {\n    const ripple= React.useState<RippleEffectProps_AutoSettable>({state: 'off'});\n    const [onMouseDown, onMouseUp, onMouseLeave]= handleMyMouseEventsFunction(ripple);\n    return (\n        <button className=\"outline-button\" onClick={onClick} onMouseDown={onMouseDown} onMouseUp={onMouseUp} onMouseLeave={onMouseLeave} {...rest}>\n            <RippleEffect {...ripple[0]} color=\"\"/>{/* TODO: Find the color */}\n            <div className=\"content\">{children}</div>\n        </button>\n    );\n}","import React from 'react';\nimport __ from '../../../../language-pack/language-pack';\nimport TdLib from '../../../../TdWeb/tdlib';\nimport TdApi from '../../../../TdWeb/td_api';\nimport { OutlineButton } from '../../../../ui/elements/outline-button';\nimport chatStore, { getChatNoCache } from '../../../chat-store';\nimport compileEntities from '../entities';\nimport { MessageBubble } from '../message-containers';\nimport './sponsored.scss';\n\ntype SponsoredMessageProps= {\n    message: TdApi.td_SponsoredMessage;\n    chat_id: number;\n    viewport: React.RefObject<HTMLElement>;\n}\n\nexport default function SponsoredMessage({message, chat_id, viewport}: SponsoredMessageProps): JSX.Element {\n    const chat= getChatNoCache(message.sponsor_chat_id) as TdApi.td_chat;\n\n    const [viewed, setViewed]= React.useState(false);\n    const ref= React.useRef<HTMLDivElement>(null);\n    let observer: IntersectionObserver|null= null;\n    React.useEffect(() => {\n        if (ref.current) {\n            observer= new IntersectionObserver(entries => {\n                if (entries[0].isIntersecting) {\n                    if(!viewed) {\n                        observer?.disconnect();\n                        TdLib.sendQuery({\n                            '@type': 'viewMessages',\n                            chat_id: chat_id,\n                            // sponsor_message_id: message.message_id,\n                            message_ids: [message.message_id]\n                        });\n                    }\n                    setViewed(true);\n                }\n            }, {\n                root: viewport.current,\n                threshold: 1,\n            });\n            observer.observe(ref.current);\n        }\n        return () => {\n            observer?.disconnect();\n            setViewed(false);\n        };\n    }, [chat_id, message.message_id]);\n\n    return (\n        <div className=\"history-message sponsored\">\n            <MessageBubble>\n                <div className=\"message-sender\">\n                    <span className=\"color_0\">{chat.title}</span>\n                </div>\n                <div className=\"content\">\n                    <div ref={ref}>\n                        {compileEntities((message.content as TdApi.td_messageText).text)}\n                    </div>\n                    <div className=\"footer\">\n                        <div className=\"text\"> {__('lng_sponsored')}</div>\n                    </div>\n                    <div className=\"after\"/>\n                    <OutlineButton onClick={()=> {\n                        chatStore.dispatch({\n                            type: 'SELECT_CHAT',\n                            chat_id: message.sponsor_chat_id\n                        });\n                    }}>\n                        {chat.type['@type']== 'chatTypePrivate' ? __('lng_view_button_bot') : __('lng_view_button_channel')}\n                    </OutlineButton>\n                </div>\n            </MessageBubble>\n        </div>\n    );\n}","import React from 'react';\nimport './history.scss';\nimport ScrollView from '../../../../ui/scroll/scrollbar';\nimport { Message } from '../../../message/ui/message';\nimport { connect } from 'react-redux';\nimport { loadChatHistory } from '../../../message/chat-history';\nimport processMessageHistory from '../../../message/processHistory';\nimport TdLib from '../../../../TdWeb/tdlib';\nimport SponsoredMessage from '../../../message/ui/types/sponsored';\nimport './history-to-down.scss';\nimport IconButton from '../../../../ui/elements/icon-button';\nimport { history_to_down } from '../../../../ui/icon/icons';\nimport { MessageStoreAction, MessageStoreState } from '../../../message-store';\nimport { ChatSectionContentProps } from '../chat-section';\nimport { Dispatch } from 'redux';\nimport TdApi from '../../../../TdWeb/td_api';\nimport Scrollbars from 'react-custom-scrollbars-2';\nimport withUsers from '../../../users-wrapper';\n\nexport const ChatHistory= connect<MessageStoreState, unknown, ChatSectionContentProps, MessageStoreState>(({messages}) => ({messages})) (\n    function ChatHistory({chat, messages, dispatch }: ChatSectionContentProps & MessageStoreState & {dispatch: Dispatch<MessageStoreAction>}) {\n        \n        const ref= React.useRef<HTMLDivElement>() as React.RefObject<HTMLDivElement>;\n        const upperEndDetectorRef= React.useRef<HTMLDivElement>() as React.RefObject<HTMLDivElement>;\n        const lowerEndDetectorRef= React.useRef<HTMLDivElement>() as React.RefObject<HTMLDivElement>;\n        \n        const array= Object.keys(messages).length ? processMessageHistory(messages) : [];\n        \n        const [sponsoredMessage, setSponsoredMessage]= React.useState<TdApi.td_sponsoredMessage|null>(null);\n\n        const [observer, setObserver]= React.useState<IntersectionObserver|null>(null);\n        const [currentlyLoading, setCurrentlyLoading]= React.useState(0);\n\n        const [upperEndDetectorVisible, setUpperEndDetectorVisible]= React.useState(false);\n        const [lowerEndDetectorVisible, setLowerEndDetectorVisible]= React.useState(false);\n        const [reachedEndTop, setReachedEndTop]= React.useState(false);\n        const [reachedEndBottom, setReachedEndBottom]= React.useState(false);\n        React.useEffect(() => {\n            setCurrentlyLoading(0);\n            setUpperEndDetectorVisible(false);\n            setLowerEndDetectorVisible(false);\n            setReachedEndTop(false);\n            setReachedEndBottom(false);\n            if(!observer) {\n                const ob= new IntersectionObserver(entries => {\n                    entries.forEach(entry => {\n                        if(entry.target.classList.contains('upper')) {\n                            setUpperEndDetectorVisible(entry.isIntersecting);\n                        }\n                        else if(entry.target.classList.contains('lower')) {\n                            setLowerEndDetectorVisible(entry.isIntersecting);\n                        }\n                    });\n                }, {\n                    root: ref.current\n                });\n                ob.observe(upperEndDetectorRef.current as HTMLDivElement);\n                ob.observe(lowerEndDetectorRef.current as HTMLDivElement);\n                setObserver(ob);\n            }\n\n            if (chat.type['@type'] == 'chatTypeSupergroup' && chat.type.is_channel) {\n                TdLib.sendQuery({\n                    '@type': 'getChatSponsoredMessage',\n                    chat_id: chat.id\n                }).then((res)=>(setSponsoredMessage(res as TdApi.td_sponsoredMessage)));\n            } else {\n                setSponsoredMessage(null);\n            }\n\n            return () => {\n                observer?.disconnect();\n                dispatch({\n                    type: 'CLEAR_MESSAGES',\n                });\n            };\n        }, [chat.id]);\n\n        React.useEffect(() => {\n            if(currentlyLoading < 1) {\n                if(upperEndDetectorVisible && !reachedEndTop) {\n                    setCurrentlyLoading(current => current + 1);\n                    loadChatHistory(chat.id, array.length ? array[0].id : 0, 50).then((count)=> {\n                        (count!=-1) && setCurrentlyLoading(current => current - 1);\n                        (count==0) && setReachedEndTop(true);\n                    });\n                }\n            }\n        }, [upperEndDetectorVisible, lowerEndDetectorVisible, currentlyLoading]);\n\n        const scrollRef= React.useRef<Scrollbars>() as React.RefObject<Scrollbars>;\n        function jumpToDown() {\n            (scrollRef.current as any)?.view.scroll({\n                top: 0,\n                behavior: 'smooth',\n            });\n        }\n        const [jumpToDownVisible, setJumpToDownVisible]= React.useState(false);\n        function onScroll(e: React.UIEvent) {\n            const visible= (-(e.target as HTMLElement).scrollTop) > 480;\n            if (visible != jumpToDownVisible) {\n                setJumpToDownVisible(visible);\n            }\n        }\n\n        const Message2= withUsers(Message);\n\n        return (\n            <div className=\"history\" ref={ref}>\n                <ScrollView scrollRef={scrollRef} className=\"scrollbar full-size\" scrollBarWidth={6} onScroll={onScroll}>\n                    <div className=\"history-scroll-content\">\n                        <div className=\"end-detector upper\" ref={upperEndDetectorRef}></div>\n                        {array.map(message => <Message2 key={message.id} message={message} chat={chat}/>)}\n                        <div className=\"end-detector lower\" ref={lowerEndDetectorRef}></div>\n                        {sponsoredMessage && <SponsoredMessage message={sponsoredMessage} chat_id={chat.id} viewport={ref}/>}\n                    </div>\n                </ScrollView>\n                <IconButton icon={history_to_down} onClick={jumpToDown}\n                    className={'history-to-down '+(jumpToDownVisible ? 'visible' : '')}/>\n            </div>\n        );\n    }\n);\n","import TdApi from '../../TdWeb/td_api';\nimport messageIsService from './message-is-service';\n\nexport interface ProcessedSingleMessage extends TdApi.td_message, ProcessedMessage {\n}\n\nexport interface MessageAlbum extends ProcessedMessage {\n    processedType: 'messageAlbum';\n    type: 'messageDocument' | 'messagePhoto' | 'messageVideo' | 'messageAudio';\n    messages: TdApi.td_message[];\n}\n\nexport interface FileAlbum extends MessageAlbum {\n    type: 'messageDocument' | 'messageAudio',\n}\n\nexport interface MediaAlbum extends MessageAlbum {\n    type: 'messagePhoto' | 'messageVideo',\n}\n\nexport interface ProcessedMessage {\n    /** Indicates whether the sender name should *not* be shown on the top of the message */\n    hide_sender_name: boolean;\n    /** Indicates whether the message tail (and sender photo if applicable) should *not* be shown */\n    hide_tail: boolean;\n    processedType?: string;\n}\n\nexport default function processMessageHistory(messages: {[id: number|string]: TdApi.td_message}): ProcessedSingleMessage[] {\n    const array: TdApi.td_message[]= [];\n    for(const id of Object.keys(messages).sort((a, b) => Number(a) - Number(b))) {\n        array.push(messages[id]);\n    }\n\n    function reducer(prev: ProcessedMessage[] | null, current: TdApi.td_message): ProcessedMessage[] {\n        if(!prev) {\n            return [{\n                ...current,\n                hide_sender_name: false,\n                hide_tail: false,\n            }];\n        } else {\n            const prevEl= prev[prev.length-1];\n            let message: TdApi.td_message;\n            if(prevEl.processedType== 'messageAlbum') {\n                message= (prevEl as MessageAlbum).messages[0];\n            } else {\n                message= prevEl as ProcessedSingleMessage;\n            }\n\n            if( (!messageIsService(message)) &&\n                (!messageIsService(current)) &&\n                message.sender_id['@type']=='messageSenderUser' &&\n                current.sender_id['@type']=='messageSenderUser' &&\n                message.sender_id.user_id == current.sender_id.user_id &&\n                ((current.date - message.date) < (60 * 15))) {\n\n                return [\n                    ...prev.slice(0, -1),\n                    {\n                        ...prevEl,\n                        hide_tail: true\n                    }as ProcessedSingleMessage,\n                    {\n                        ...current,\n                        hide_sender_name: true\n                    } as ProcessedSingleMessage\n                ];\n            }\n\n            return [\n                ...prev,\n                {\n                    ...current,\n                    hide_sender_name: false,\n                    hide_tail: false,\n                }\n            ];\n        }\n    }\n    return array.reduce<ProcessedMessage[]>(reducer, null as any) as any; //TODO: Find an appropriate solution\n}","import React from 'react';\nimport { connect, Provider } from 'react-redux';\nimport __ from '../../../language-pack/language-pack';\nimport { ServiceMessageBubble } from '../../message/ui/message-containers';\nimport TitleHeader from './headers/title';\nimport './chat-section.scss';\nimport usersStore, { UsersStoreState } from '../../users-store';\nimport supergroupStore, { SupergroupStoreState } from '../../supergroup-store';\nimport basicGroupStore, { BasicGroupStoreState } from '../../basic-group-store';\nimport { ChatFooter } from './footer/footer';\nimport { ChatHistory } from './history/history';\nimport { messageStore } from '../../message-store';\nimport TdLib from '../../../TdWeb/tdlib';\nimport { ChatStoreState } from '../../chat-store';\nimport TdApi from '../../../TdWeb/td_api';\n\ntype ChatSectionSelfProps= {\n    singleColumnLayout?: boolean\n}\n\ntype ChatSectionStoreProps= {\n    chats: TdApi.td_chat[],\n    selectedChat: number\n}\n\nexport const ChatSection= (connect<ChatSectionStoreProps, unknown, ChatSectionSelfProps, ChatStoreState>(({chats, selectedChat}) => ({chats, selectedChat})) (\n    function ChatSection({chats, selectedChat, singleColumnLayout}: ChatSectionStoreProps & ChatSectionSelfProps) {\n        let chat;\n        for(const c of chats) {\n            if(c.id === selectedChat) {\n                chat = c;\n                break;\n            }\n        }\n\n        if(!chat) return (\n            <div id=\"chat-section\" className=\"no-chat\">\n                <ServiceMessageBubble>\n                    {__('lng_willbe_history')}\n                </ServiceMessageBubble>\n            </div>\n        );\n        switch(chat.type['@type']){\n            case 'chatTypePrivate':\n                return (\n                    <Provider store={usersStore}>\n                        <ChatSectionContentWrapperPrivate \n                            chat={chat} \n                            singleColumnLayout={singleColumnLayout}/>\n                    </Provider>\n                );\n            case 'chatTypeBasicGroup': \n                return (\n                    <Provider store={basicGroupStore}>\n                        <ChatSectionContentWrapperBasicGroup \n                            chat={chat} \n                            singleColumnLayout={singleColumnLayout}/>\n                    </Provider>\n                );\n            case 'chatTypeSupergroup':\n                return (\n                    <Provider store={supergroupStore}>\n                        <ChatSectionContentWrapperSupergroup \n                            chat={chat} \n                            singleColumnLayout={singleColumnLayout}/>\n                    </Provider>\n                );\n        }\n        return null;\n    }\n)) as unknown as React.FunctionComponent<ChatSectionSelfProps>;\n\ntype ChatSectionContentWrapperSelfProps= {chat: TdApi.td_chat} & ChatSectionSelfProps;\n\nconst ChatSectionContentWrapperPrivate= connect<{users: UsersStoreState}, unknown, ChatSectionContentWrapperSelfProps, UsersStoreState>(users=>({users}))(\n    function ChatSectionContentWrapperPrivate({users, chat, ...rest}: {users: UsersStoreState} & ChatSectionContentWrapperSelfProps) {\n        return <ChatSectionContentWrapper user={users[(chat.type as TdApi.td_chatTypePrivate).user_id]} chat={chat} {...rest}/>;\n    }\n);\n\nconst ChatSectionContentWrapperBasicGroup= connect<{basicGroups: BasicGroupStoreState}, unknown, ChatSectionContentWrapperSelfProps, BasicGroupStoreState>(basicGroups=>({basicGroups}))(\n    function ChatSectionContentWrapperBasicGroup({basicGroups, chat, ...rest}: {basicGroups: BasicGroupStoreState} & ChatSectionContentWrapperSelfProps) {\n        return <ChatSectionContentWrapper basicGroup={basicGroups[(chat.type as TdApi.td_chatTypeBasicGroup).basic_group_id]} chat={chat} {...rest}/>;\n    }\n);\n\nconst ChatSectionContentWrapperSupergroup= connect<{supergroups: SupergroupStoreState}, unknown, ChatSectionContentWrapperSelfProps, SupergroupStoreState>(supergroups=>({supergroups}))(\n    function ChatSectionContentWrapperSupergroup({supergroups, chat, ...rest}: {supergroups: SupergroupStoreState} & ChatSectionContentWrapperSelfProps) {\n        return <ChatSectionContentWrapper supergroup={supergroups[(chat.type as TdApi.td_chatTypeSupergroup).supergroup_id]} chat={chat} {...rest}/>;\n    }\n);\n\nexport type ChatSectionContentProps= ChatSectionContentWrapperSelfProps & {\n    user?: TdApi.td_user,\n    basicGroup?: TdApi.td_basicGroup,\n    supergroup?: TdApi.td_supergroup\n}\n\nfunction ChatSectionContentWrapper(props: ChatSectionContentProps) {\n    React.useEffect(()=>{\n        TdLib.sendQuery({\n            '@type': 'openChat',\n            chat_id: props.chat.id\n        });\n        return ()=>{\n            TdLib.sendQuery({\n                '@type': 'closeChat',\n                chat_id: props.chat.id\n            });\n        };\n    }, [props.chat.id]);\n    return (\n        <div id=\"chat-section\">\n            <div className=\"headers\">\n                <TitleHeader {...props}/>\n            </div>\n            <Provider store={messageStore}>\n                <ChatHistory {...props}/>\n            </Provider>\n            <ChatFooter {...props}/>\n        </div>\n    );\n}\n","import React from 'react';\nimport ChatFoldersList from './sections/navigation-menu/chat-folders';\nimport ChatListBar from './sections/navigation-menu/chat-list-bar';\nimport chatStore, { ChatStoreState } from './chat-store';\nimport { connect, Provider } from 'react-redux';\nimport './messengerWindow.scss';\nimport HamburgerMenu from './sections/navigation-menu/hamburger-menu/menu';\nimport {Resizable} from 're-resizable';\nimport { ChatSection } from './sections/chat/chat-section';\nimport NavAnimation from '../ui/elements/nav-animation';\nimport { ThemeStoreState } from '../ui/themes/theme';\n\n/**\n * Renders the messenger screen\n */\nexport const MessengerWindow= (connect<{rtl:boolean}, unknown, Record<string,never>, ThemeStoreState>(({rtl})=>({rtl})) (function MessengerWindow ({rtl}) {\n\n    const [isMenuOpen, setIsMenuOpen] = React.useState(false);\n    const [useSingleLayout, setUseSingleLayout] = React.useState(false);\n    const ref= React.useRef<HTMLDivElement>() as React.RefObject<HTMLDivElement>;\n    React.useEffect(()=> {\n        function check() {\n            const wid= ref.current?.clientWidth || Infinity;\n            setUseSingleLayout(wid < (380 + 260));\n        }\n        window.addEventListener('resize', check);\n        check();\n    }, []);\n\n    return (\n        <div id=\"messenger-screen\" className={useSingleLayout? 'single-column' : ''}>\n            <Provider store={chatStore}>\n                <HamburgerMenu visible={isMenuOpen} onClose={()=> setIsMenuOpen(false)}/>\n                <ChatFoldersList onHamburgerMenuOpened={()=> setIsMenuOpen(true)}/>\n                <div className=\"responsive-container\" ref={ref}>\n                    <div>\n                        {useSingleLayout? (\n                            <SingleLevel setIsMenuOpen={setIsMenuOpen}/>\n                        ):(<>\n                            <Resizable defaultSize={{width: 260} as any} minWidth={260}\n                                className=\"chat-list-bar-container\" handleClasses={{right: 'chat-list-bar-resize-handle', left: 'chat-list-bar-resize-handle'}}\n                                enable={{top: false, right: !rtl, bottom: false, left: rtl, topRight: false, bottomRight: false, bottomLeft: false, topLeft: false}}>\n                                <ChatListBar onHamburgerMenuOpened={()=> setIsMenuOpen(true)}/>\n                            </Resizable>\n                            <div id=\"chat-container\">\n                                <ChatSection/>\n                            </div>\n                        </>)}\n                    </div>\n                </div>\n            </Provider>\n        </div>\n    );\n}) as unknown as React.FunctionComponent<Record<string, never>>);\n\ntype SingleLevelProps= {\n    setIsMenuOpen: (isOpen:boolean)=> void;\n}\n\nconst SingleLevel=(connect<{selectedChat: number}, unknown, SingleLevelProps, ChatStoreState>(({selectedChat})=>({selectedChat}))(\n    function SingleLevel({selectedChat, setIsMenuOpen}: SingleLevelProps & {selectedChat: number}) {\n        return (\n            <NavAnimation mode=\"slide-over\" state={selectedChat==-1? 'closing' : 'open'}\n                innerScreen={(\n                    <div id=\"chat-container\">\n                        <ChatSection singleColumnLayout/>\n                    </div>)\n                }>\n                <ChatListBar onHamburgerMenuOpened={()=> setIsMenuOpen(true)}/>\n            </NavAnimation>\n        );\n    }\n)) as unknown as React.ComponentType<SingleLevelProps>;","import TdLib from './tdlib';\nimport {getCredentials} from './config';\nimport {getUseTestDc} from './tdlib';\nimport version from '../../version';\nimport TdApi from './td_api';\n\nTdLib.registerUpdateHandler<TdApi.td_updateAuthorizationState>('updateAuthorizationState',function (update) {\n    const credentials= getCredentials();\n    const auth_state= update['authorization_state'];\n    \n    if(auth_state['@type']==='authorizationStateWaitEncryptionKey'){\n        TdLib.sendQuery({'@type': 'checkDatabaseEncryptionKey', 'encryption_key': ''});\n    }\n    if(auth_state['@type']==='authorizationStateWaitTdlibParameters'){\n        TdLib.sendQuery({\n            '@type': 'setTdlibParameters',\n            'parameters': ({\n                '@type': 'tdlibParameters',\n                'database_directory': 'tdlib',\n                'use_message_database': true,\n                'use_secret_chats': false,\n                'api_id': credentials.api_id,\n                'api_hash': credentials.api_hash,\n                'system_language_code': 'en',\n                'device_model': 'Web',\n                'application_version': version,\n                'enable_storage_optimizer': true,\n                'use_test_dc': getUseTestDc()\n            } as any)\n        });\n    }\n});\n\n/**\n * Provides functions to pass required authorization data to Telegram\n */\nexport default class Auth {\n    /**\n     * Pass phone number of the account to be logged in to\n     * @param {string} number The phone number the user entered\n     * @returns TdLib query result\n     */\n    static givePhoneNumber(number: string): Promise<TdApi.td_error | TdApi.td_ok> {\n        return TdLib.sendQuery({'@type': 'setAuthenticationPhoneNumber', 'phone_number': number});\n    }\n    /**\n     * Pass authorization code the user has received\n     * @param {string} code The code the user entered\n     * @returns TdLib query result\n     */\n    static checkAuthCode(code: string): Promise<TdApi.td_error | TdApi.td_ok> {\n        return TdLib.sendQuery({'@type': 'checkAuthenticationCode', 'code': code});\n    }\n    /**\n     * Pass 2FA password of the account\n     * @param {string} pass The password the user entered\n     * @returns TdLib query result\n     */\n    static check2FACode(pass: string): Promise<TdApi.td_error | TdApi.td_ok> {\n        return TdLib.sendQuery({'@type': 'checkAuthenticationPassword', 'password': pass});\n    }\n    /**\n     * Sign up to Telegram\n     * @param {string} first The first name to be used in the new account\n     * @param {string} last Tha last name to be used in the new account\n     * @returns TdLib query result\n     */\n    static registerNewAccount(first: string, last: string): Promise<TdApi.td_error | TdApi.td_ok> {\n        return TdLib.sendQuery({'@type': 'registerUser', 'first_name': first, 'last_name': last});\n    }\n}","import React from 'react';\nimport RippleEffect, {handleMyMouseEvents, RippleEffectProps_AutoSettable} from './ripple-effect';\n\ntype BigHighlightedButtonProps = {\n        /** Fires when the button is clicked */\n    onClick: (e: React.SyntheticEvent<HTMLButtonElement>) => void;\n        /** The button's content */\n    children: React.ReactNode | React.ReactNode[];\n}\n\ntype BigHighlightedButtonState = {\n    ripple: RippleEffectProps_AutoSettable;\n}\n\n/**\n * Renders a BIG button which is filled with accent color\n */\nexport default class BigHighlightedButton extends React.Component<BigHighlightedButtonProps, BigHighlightedButtonState> {\n    state= {\n        ripple: {\n            state: 'off'\n        }\n    } as const;\n    mouseDown: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    mouseUp: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    mouseLeave: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    constructor(props: BigHighlightedButtonProps | Readonly<BigHighlightedButtonProps>) {\n        super(props);\n        [this.mouseDown, this.mouseUp, this.mouseLeave]= handleMyMouseEvents(this);\n    }\n\n    render (): JSX.Element {\n        return (\n            <button \n                className=\"big-highlighted-button\" \n                onClick={this.props.onClick}\n                onMouseDown={this.mouseDown}\n                onMouseUp={this.mouseUp}\n                onMouseLeave={this.mouseLeave}>\n\n                <RippleEffect {...this.state.ripple} color=\"var(--theme-color-activeButtonBgRipple)\"/>\n                <div className=\"content\">\n                    {this.props.children}\n                </div>\n            </button>\n        );\n    }\n}","import React from 'react';\n\ntype UnderlinedInputProps = {\n    /** Input type */\n    type: 'text' | 'password' | 'email' | 'number' | 'tel' | 'url';\n    /** Fired when input is modified */\n    onChange?: (value: React.ChangeEvent<HTMLInputElement>) => void;\n    /** Input value */\n    value?: string|number;\n    /** The maximum number of characters the input can have */\n    maxLength?: number;\n    /** If set to true, the input will gain focus when it renders */\n    autoFocus?: boolean;\n    /** Fires when the 'Enter' key is pressed */\n    onEnterKeyPressed?: (e: React.KeyboardEvent) => void;\n    /** Input title/placeholder */\n    title?: React.ReactNode|React.ReactNode[];\n    /** If true, the input will become red */\n    invalid?: boolean;\n    /** If true, text cannot be copied from the input */\n    disableCopy?: boolean;\n    /** If true, up and down buttons cannot change input value */\n    preventNumberScrolling?: boolean;\n    /** `<input>` React ref */\n    iRef?: React.RefObject<HTMLInputElement>;\n    /** Fires when a key is pushed down while the element is in focus. */\n    onKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\n}\n\ntype UnderlinedInputState = {\n    inactive: boolean;\n    mouseX: string;\n    titleClass: string;\n}\n\n/**\n * Renders a beautiful field with a title and underline\n */\nexport default class UnderlinedInput extends React.Component<UnderlinedInputProps, UnderlinedInputState> {\n    constructor(args: UnderlinedInputProps | Readonly<UnderlinedInputProps>) {\n        super(args);\n\n        this.state= {\n            inactive: false,\n            mouseX: '50%',\n            titleClass: this.getTitleClass(this.props.autoFocus)\n        };\n    }\n\n    getTitleClass (focus: boolean|undefined): string {\n        return (focus || (!!this.props.value)) ? 'title top' : 'title placeholder';\n    }\n\n    render(): JSX.Element {\n        let className='underlined-input';\n        if(this.state.inactive) {\n            className+=' inactive';\n        }\n        if(this.props.autoFocus) {\n            className+=' autoFocus';\n        }\n        if(this.props.invalid) {\n            className+=' invalid';\n        }\n        return (\n            <div className={className}\n                style={{'--mouse-left': this.state.mouseX || '50%'} as {[key: string]: string}}>\n                { this.props.title ? (\n                    <div className={this.state.titleClass}>{this.props.title}</div>\n                ) : null }\n                <input \n                    ref={this.props.iRef}\n                    type={this.props.type} \n                    onChange={this.props.onChange} \n                    value={this.props.value}\n                    onMouseDown={this.handleMouseDown}\n                    onFocus={this.handleFocus}\n                    onBlur={this.handleBlur}\n                    autoFocus={this.props.autoFocus || false}\n                    onKeyDown={this.handleKeyDown}\n                    maxLength={this.props.maxLength}\n                    onCopy={e=> {\n                        if(this.props.disableCopy) {\n                            e.preventDefault();\n                        }\n                    }}/>\n                <div className=\"underline\"></div>\n            </div>\n        );\n    }\n\n    handleFocus= (): void => {\n        this.setState({\n            inactive: false,\n            titleClass: this.getTitleClass(true)\n        });\n    }\n    handleBlur= (): void => {\n        this.setState({\n            inactive: true, \n            mouseX: '50%',\n            titleClass: this.getTitleClass(false)\n        });\n    }\n    handleMouseDown= (e: React.MouseEvent): void => {\n        this.setState({\n            mouseX: e.nativeEvent.offsetX+'px'\n        });\n    }\n    handleKeyDown= (e: React.KeyboardEvent<HTMLInputElement>): void => {\n        this.props.onKeyDown?.(e);\n        if(e.key=='Enter') {\n            this.props.onEnterKeyPressed && this.props.onEnterKeyPressed(e);\n        }\n        if(this.props.preventNumberScrolling) {\n            if(e.key=='ArrowUp' || e.key=='ArrowDown') {\n                e.preventDefault();\n            }\n        }\n    }\n\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Dialog from '../../../ui/dialog/dialog';\nimport SmallButton from '../../../ui/elements/small-button';\nimport ScrollView from '../../../ui/scroll/scrollbar';\nimport './country-select.scss';\nimport RippleEffect, { handleMyMouseEventsFunction, RippleEffectProps_AutoSettable } from '../../../ui/elements/ripple-effect';\nimport BoxSearch from '../../../ui/dialog/search';\nimport __ from '../../../language-pack/language-pack';\nimport TdApi from '../../../TdWeb/td_api';\n\ntype CountrySelectProps = {\n    onChange?: (country: string) => void;\n    id: string;\n    countries: TdApi.td_countryInfo[];\n}\n\nexport default function CountrySelect({onChange, id, countries}: CountrySelectProps): JSX.Element {\n    const ref = React.useRef<Dialog>() as React.RefObject<Dialog>;\n    \n    const [search, setSearch] = React.useState('');\n    if(search.length > 0) {\n        countries = countries.filter((country: TdApi.td_countryInfo) => country.name.toLowerCase().startsWith(search.toLowerCase()));\n    }\n\n    return (\n        <Dialog ref={ref} id={id} width=\"320px\" className=\"confirm-dialog\">\n            <h1>{__('lng_country_select')}</h1>\n\n            <BoxSearch value={search} onChange={(e) => setSearch(e.target.value)} />\n\n            <ScrollView scrollAlwaysVisible>\n                {countries.map(country => (country.is_hidden? null: (\n                    <CountrySelectItem key={country.country_code} country={country} onClick={ ()=>{\n                        onChange?.('+' + country.calling_codes[0]);\n                        ref.current?.close();\n                    }}/>\n                )))}\n            </ScrollView>\n\n            <div className=\"options\">\n                <SmallButton onClick={()=> {ref.current?.close();}}>{__('lng_close')}</SmallButton>\n            </div>\n        </Dialog>\n    );\n}\nCountrySelect.propTypes = {\n    onChange: PropTypes.func,\n    id: PropTypes.string.isRequired,\n    countries: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\ntype CountrySelectItemProps= {\n    country: TdApi.td_countryInfo;\n    onClick?: React.MouseEventHandler<HTMLDivElement>\n}\n\nexport function CountrySelectItem({country, onClick}: CountrySelectItemProps): JSX.Element {\n    const ripple = React.useState<RippleEffectProps_AutoSettable>({state: 'off'});\n    const [mouseDown, mouseUp, mouseLeave] = handleMyMouseEventsFunction(ripple);\n    return (\n        <div className=\"country-select-item\" onClick={onClick} onMouseDown={mouseDown} onMouseUp={mouseUp} onMouseLeave={mouseLeave}>\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-windowBgRipple)\"/>\n            <div className=\"content\">\n                <span className=\"name\">{country.english_name}</span>\n                <span className=\"codes\">{country.calling_codes.map(c=> '+' + c).join(', ')}</span>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport Auth from '../../../TdWeb/auth';\nimport connectionStore from '../../../TdWeb/connectionStore';\nimport ConfirmDialog from '../../../ui/dialog/confirm-dialog';\nimport { addDialog } from '../../../ui/dialog/dialogs';\nimport BigHighlightedButton from '../../../ui/elements/highlighted-button';\nimport UnderlinedInput from '../../../ui/elements/underlined-input';\nimport { manageStatusTextContent } from '../../auth-screen';\nimport ConnectionState from '../../../ui/components/connecting';\nimport callingCodes from './phone-number-calling-codes.json';\nimport './phone-number.scss';\nimport CountrySelect from './country-select';\nimport TdLib from '../../../TdWeb/tdlib';\nimport { intro_country_dropdown } from '../../../ui/icon/icons';\nimport __ from '../../../language-pack/language-pack';\nimport TdApi from '../../../TdWeb/td_api';\n\ntype AuthWindowStepPhoneNumberProps = {\n}\n\ntype AuthWindowStepPhoneNumberState = {\n    number: string;\n    number_p: string;\n    invalid: boolean;\n    statusContent: React.ReactNode|React.ReactNode[]|null;\n    statusVisible: boolean;\n    dropDownText: React.ReactNode|React.ReactNode[];\n    countries: TdApi.td_countryInfo[],\n}\n\n/**\n * Renders the phone number step of authorization screen\n */\nexport default class AuthWindowStepPhoneNumber extends React.Component<AuthWindowStepPhoneNumberProps, AuthWindowStepPhoneNumberState> {\n    constructor(args: AuthWindowStepPhoneNumberProps) {\n        super(args);\n        [this.Status, this.changeStatus] = manageStatusTextContent(this);\n    }\n    state= {\n        number: '',\n        number_p: '+',\n        invalid: false,\n        statusContent: '',\n        statusVisible: false,\n        dropDownText: '',\n        countries: [],\n    };\n\n    changeStatus: (status: React.ReactNode|React.ReactNode[])=> void;\n    Status: ()=> JSX.Element;\n\n    ref1= React.createRef<HTMLInputElement>();\n    ref2= React.createRef<HTMLInputElement>();\n\n    componentDidMount(): void {\n        TdLib.sendQuery({\n            '@type': 'getCountries',\n        }).then((result) => {\n            this.setState({\n                countries: (result as TdApi.td_countries).countries,\n            });\n        });\n    }\n\n\n    handlePNFieldChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        const value = event.target.value.replace(/[^0-9-]/g, '');\n        this.setState({\n            number: value,\n            invalid: false // We shouldn't show the phone number as invalid, since it has changed after submission\n        });\n        this.changeStatus(''); // The same\n    }\n\n    openCountryDropdown = (): void => {\n        addDialog('login-phone-number-country-selector-dialog', (\n            <CountrySelect id=\"login-phone-number-country-selector-dialog\"\n                countries={this.state.countries} onChange={cc=> {\n                    this.setState({\n                        number_p: cc,\n                        dropDownText: this.getCountryDropdownText(cc),\n                    });\n                }}/>\n        ));\n    }\n\n    getCountryDropdownText(callingCode: string): React.ReactNode|React.ReactNode[] {\n        let countryName= __('lng_bad_country_code');\n        if(callingCode == '+') {\n            countryName= __('lng_country_code');\n        }\n        for(const country of callingCodes) {\n            if( callingCode.slice(1) == country.callingCode) {\n                countryName = country.name;\n                break;\n            }\n        }\n        return countryName;\n    }\n\n    handlePNFieldChange_p = (event: React.ChangeEvent<HTMLInputElement>): void => {\n        const value = '+' + event.target.value.replace(/[^0-9-]/g, '');\n\n        if(value.length > 5) {\n            let length = 1;\n            for(const country of callingCodes) {\n                if(value.startsWith(country.callingCode, 1)) {\n                    length = country.callingCode.length+1;\n                    break;\n                }\n            }\n\n            const value_new = value.slice(0, length);\n            const rest= value.slice(length);\n\n            this.setState({\n                number_p: value_new,\n                number: rest + this.state.number,\n                invalid: false,\n                dropDownText: this.getCountryDropdownText(value_new)\n            });\n            this.ref2.current?.focus();\n        }\n        else {\n            this.setState({\n                number_p: value,\n                dropDownText: this.getCountryDropdownText(value)\n            });\n        }\n\n        this.changeStatus('');\n    }\n\n    handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>): void => { // Focus the previous field when the user presses the backspace key\n        if(e.nativeEvent.key === 'Backspace') {\n            if(this.state.number.length === 0) {\n                this.ref1.current?.focus();\n            }\n        }\n    }\n\n    submitNumber= (): void => {\n        const number = this.state.number_p + ' ' + this.state.number;\n        Auth.givePhoneNumber(number).catch(reason=> {\n            switch(reason.message){\n                case 'PHONE_NUMBER_FLOOD':\n                    addDialog( 'phone_number_flood_error',\n                        <ConfirmDialog width=\"320px\" hideCancelButton={true} largeFont={true} id=\"phone_number_flood_error\">\n                            {__('lng_error_phone_flood')}\n                        </ConfirmDialog>\n                    );\n                    this.changeStatus('');\n                    break;\n\n                case 'PHONE_NUMBER_INVALID':\n                    this.setState({invalid: true});\n                    this.changeStatus(__('lng_bad_phone'));\n                    break;\n\n                case 'Another authorization query has started': \n                    break;\n\n                default:\n                    // We don't know what error it is, so just show it to the user, he/she might understand it.\n                    this.setState({invalid: false});\n                    this.changeStatus(reason.message);\n                    break;\n            }\n        });\n    }\n    render (): JSX.Element {\n        const Status=this.Status;\n        return (\n            <div id=\"auth\" className=\"auth-step-phoneNumber\">\n\n                <h2>{__('lng_phone_title')}</h2>\n\n                <p className=\"description\">\n                    {__('lng_phone_desc')}\n                </p>\n\n                {//TODO: Add phone number placeholder\n                }\n\n                <div className=\"country-dropdown\" onClick={this.openCountryDropdown}>\n                    {this.state.dropDownText || __('lng_country_code')}\n                    <span dangerouslySetInnerHTML={{__html: intro_country_dropdown}}/>\n                </div>\n\n                <div className=\"phone-number-input\">\n                    <UnderlinedInput\n                        iRef={this.ref1}\n                        type=\"tel\" \n                        value={this.state.number_p} \n                        autoFocus={true}\n                        onChange={this.handlePNFieldChange_p}\n                        onEnterKeyPressed={this.submitNumber}\n                        preventNumberScrolling={false}/>\n                    \n                    <UnderlinedInput\n                        iRef={this.ref2}\n                        type=\"tel\" \n                        value={this.state.number} \n                        onChange={this.handlePNFieldChange}\n                        onEnterKeyPressed={this.submitNumber}\n                        invalid={this.state.invalid}\n                        preventNumberScrolling={false}\n                        onKeyDown={this.handleKeyDown}/>\n                </div>\n\n                <Status/>\n\n                <BigHighlightedButton\n                    onClick={this.submitNumber}>\n                    {__('lng_intro_next')}\n                </BigHighlightedButton>\n\n                <Provider store={connectionStore}>\n                    <ConnectionState/>\n                </Provider>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { manageStatusTextContent } from '../../auth-screen';\nimport Auth from '../../../TdWeb/auth';\nimport UnderlinedInput from '../../../ui/elements/underlined-input';\nimport BigHighlightedButton from '../../../ui/elements/highlighted-button';\nimport { Provider } from 'react-redux';\nimport connectionStore from '../../../TdWeb/connectionStore';\nimport ConnectionState from '../../../ui/components/connecting';\nimport './verification-code.scss';\nimport __ from '../../../language-pack/language-pack';\n\n/**\n * Renders verification code step of authorization screen\n */\nexport default class AuthWindowStepCode extends React.Component {\n    static propTypes= {\n        info: PropTypes.object\n    };\n    constructor(args) {\n        super(args);\n        [this.Status, this.changeStatus] = manageStatusTextContent(this);\n    }\n    state= {\n        code: '',\n        invalid: false,\n        statusContent: '',\n        statusVisible: false\n    };\n\n    handleCodeFieldChange= (event) => {\n        this.setState({\n            code: event.target.value,\n            invalid: false // Verification code is changed, and we don't know if it is correct or not. Do not show it as invalid anymore\n        });\n        this.changeStatus('');\n        if(event.target.value.length==this.props.info.type.length) { // Automatically submit code if it is filled in\n            this.handleContinueButton(event.target.value);\n        }\n    }\n    handleContinueButton= (code) => {\n        // `code` might be the authorization code, or an event object. If it is not the authorization code, get it ourselves\n        if(typeof code != 'string') {\n            code= undefined;\n        }\n        code = code || this.state.code;\n\n        if(code.length!=this.props.info.type.length) return; // The code is not complete. It is definitely wrong.\n\n        Auth.checkAuthCode(code).catch(reason=> {\n            if(reason.message==='PHONE_CODE_INVALID'){\n                this.setState({invalid: true});\n                this.changeStatus(__('lng_bad_code'));\n            }\n            else {\n                // We don't know the error, all we can do is to just inform the user about it\n                this.setState({invalid: true});\n                this.changeStatus(reason.message);\n            }\n        });\n    }\n    render () {\n        const Status = this.Status;\n\n        var message= (this.props.info.type['@type']=='authenticationCodeTypeSms') ?\n            (<p className=\"description\">{__('lng_code_desc')}</p>) \n            :\n            (<p className=\"description\">{__('lng_code_from_telegram')}</p>);\n            \n        return (\n            <div id=\"auth\" className=\"auth-step-code\">\n\n                <h2>{this.props.info.phone_number}</h2>\n\n                {message}\n\n                <UnderlinedInput\n                    type=\"number\" \n                    value={this.state.code} \n                    onChange={this.handleCodeFieldChange}\n                    autoFocus={true}\n                    title={__('lng_code_ph')}\n                    maxLength={this.props.info.type.length}\n                    onEnterKeyPressed={this.handleContinueButton}\n                    invalid={this.state.invalid}\n                    preventNumberScrolling={true}/>\n\n                <Status/>\n\n                <BigHighlightedButton\n                    onClick={this.handleContinueButton}>\n                    {__('lng_intro_next')}\n                </BigHighlightedButton>\n\n                <Provider store={connectionStore}>\n                    <ConnectionState/>\n                </Provider>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport { manageStatusTextContent } from '../../auth-screen';\nimport Auth from '../../../TdWeb/auth';\nimport UnderlinedInput from '../../../ui/elements/underlined-input';\nimport LinkButton from '../../../ui/elements/link-button';\nimport BigHighlightedButton from '../../../ui/elements/highlighted-button';\nimport { Provider } from 'react-redux';\nimport connectionStore from '../../../TdWeb/connectionStore';\nimport ConnectionState from '../../../ui/components/connecting';\nimport './cloud-password.scss';\nimport __, { __fmt } from '../../../language-pack/language-pack';\nimport TdApi from '../../../TdWeb/td_api';\n\ntype AuthWindowStepPasswordProps = {\n    info: TdApi.td_authorizationStateWaitPassword;\n}\n\ntype AuthWindowStepPasswordState = {\n    password: string;\n    invalid: boolean;\n    statusContent: React.ReactNode|React.ReactNode[]|null;\n    statusVisible: boolean;\n}\n\n/**\n * Renders 2FA password step of authorization screen\n */\nexport default class AuthWindowStepPassword extends React.Component<AuthWindowStepPasswordProps, AuthWindowStepPasswordState> {\n    constructor(args: AuthWindowStepPasswordProps) {\n        super(args);\n        [this.Status, this.changeStatus] = manageStatusTextContent(this);\n    }\n    state= {\n        password: '',\n        invalid: false,\n        statusContent: '',\n        statusVisible: false\n    };\n    changeStatus: (status: React.ReactNode|React.ReactNode[])=> void;\n    Status: ()=> JSX.Element;\n    handlePasswordFieldChange= (event: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({\n            password: event.target.value,\n            invalid: false, // Password was changed, and we don't know if it is wrong or not. We should not show it as wrong\n        });\n        this.changeStatus(''); // Same\n    }\n    handleContinueButton= (): void => {\n        Auth.check2FACode(this.state.password).catch(reason=> {\n            if(reason.message=='PASSWORD_HASH_INVALID') {\n                this.setState({invalid: true});\n                this.changeStatus(__('lng_signin_bad_password'));\n            }\n            else {\n                // We don't know what the error is, so all we can do is to show it to the user\n                this.setState({invalid: true});\n                this.changeStatus(reason.message);\n            }\n        });\n    }\n    render (): JSX.Element {\n        const Status=this.Status;\n        return (\n            <div id=\"auth\" className=\"auth-step-password\">\n                <div className=\"content\">\n\n                    <h2>{__('lng_signin_title')}</h2>\n\n                    <p className=\"description\">{__('lng_signin_desc')}</p>\n\n                    <UnderlinedInput\n                        type=\"password\"\n                        value={this.state.password} \n                        onChange={this.handlePasswordFieldChange}\n                        autoFocus={true} \n                        title={__('lng_signin_password')}\n                        onEnterKeyPressed={this.handleContinueButton}\n                        disableCopy={true}\n                        invalid={this.state.invalid}/>\n\n                    <div className=\"hint\">\n                        {this.props.info.password_hint?__fmt('lng_signin_hint', {password_hint: this.props.info.password_hint}):<span>&nbsp;</span>}\n                    </div>\n\n                    <div className=\"forgot-password\">\n                        <LinkButton>{__('lng_signin_recover')}</LinkButton>\n                    </div>\n\n                    <Status/>\n\n                    <BigHighlightedButton \n                        onClick={this.handleContinueButton}>\n                        {__('lng_intro_submit')}\n                    </BigHighlightedButton>\n\n                </div>\n                <Provider store={connectionStore}>\n                    <ConnectionState/>\n                </Provider>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport RippleEffect, { handleMyMouseEventsFunction, RippleEffectProps_AutoSettable } from '../../../ui/elements/ripple-effect';\nimport { new_chat_photo } from '../../../ui/icon/icons';\nimport './signup-profile-photo.scss';\nimport { blobToUrl } from '../../../TdWeb/file';\n\ntype SignUpProfilePicProps= {\n    image: Blob|null,\n    onChange: React.ChangeEventHandler<HTMLInputElement>\n}\n\nexport default function SignUpProfilePic({image, onChange}: SignUpProfilePicProps): React.ReactElement {\n    const ripple= React.useState<RippleEffectProps_AutoSettable>({state: 'off'});\n    const [onMouseDown, onMouseUp, onMouseLeave]= handleMyMouseEventsFunction(ripple);\n    return (\n        <div className={'icon-button sign-up-profile-pic' + (image? ' has-image' : '')} \n            {...{onMouseDown, onMouseUp, onMouseLeave}}>\n\n            {image && <img src={blobToUrl(image)} alt=\"profile\"/>}\n            <RippleEffect {...ripple[0]} color=\"var(--theme-color-activeButtonBgRipple)\" small={true}/>\n            <span dangerouslySetInnerHTML={{__html: new_chat_photo}} />\n            <label>\n                <input type=\"file\" accept=\"image/*\" onChange={onChange} />\n            </label>\n        </div>\n    );\n}\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport Auth from '../../../TdWeb/auth';\nimport connectionStore from '../../../TdWeb/connectionStore';\nimport ConfirmDialog from '../../../ui/dialog/confirm-dialog';\nimport { addDialog } from '../../../ui/dialog/dialogs';\nimport BigHighlightedButton from '../../../ui/elements/highlighted-button';\nimport UnderlinedInput from '../../../ui/elements/underlined-input';\nimport ConnectionState from '../../../ui/components/connecting';\nimport TdLib from '../../../TdWeb/tdlib';\nimport LinkButton from '../../../ui/elements/link-button';\nimport SignUpProfilePic from './signup-profile-photo';\nimport './register.scss';\nimport __, { __fmt } from '../../../language-pack/language-pack';\nimport TdApi from '../../../TdWeb/td_api';\n\ntype AuthWindowStepRegisterProps = {\n    tos: TdApi.td_termsOfService\n}\n\ntype AuthWindowStepRegisterState = {\n    firstName: string,\n    lastName: string,\n    statusContent: React.ReactNode|React.ReactNode[],\n    statusVisible: boolean,\n    image: Blob|null,\n    textUnderField: string,\n}\n\n/**\n * Render sign up step of authorization screen\n */\nexport default class AuthWindowStepRegister extends React.Component<AuthWindowStepRegisterProps, AuthWindowStepRegisterState> {    \n    state= {\n        firstName: '',\n        lastName: '',\n        statusContent: '',\n        statusVisible: false,\n        image: null,\n        textUnderField: '',\n    };\n    handleFirstNameFieldChange= (event: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({firstName: event.target.value});\n    }\n    handleLastNameFieldChange= (event: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({lastName: event.target.value});\n    }\n    handleContinueButton= (): void => {\n        Auth.registerNewAccount(this.state.firstName, this.state.lastName).catch(reason=> {\n            this.setState({textUnderField: reason.message});\n        }).then(()=> {\n            if(this.state.image) {\n                TdLib.sendQuery({\n                    '@type': 'setProfilePhoto',\n                    photo: {\n                        '@type': 'inputChatPhotoStatic',\n                        photo: {\n                            '@type': 'inputFileBlob',\n                            data: this.state.image,\n                        }\n                    }\n                });\n            }\n        });\n    }\n\n    showTos= (): void => {\n        addDialog('signup-tos-dialog', (\n            <ConfirmDialog id=\"signup-tos-dialog\" width=\"364px\"\n                hideCancelButton={true} title={__('lng_terms_header')}>\n                \n                {this.props.tos.text.text}\n            </ConfirmDialog>\n        ));\n    }\n\n    render (): JSX.Element {\n        return (\n            <div className=\"auth-container\">\n                <div id=\"auth\" className=\"auth-step-signup\">\n                    <div className=\"content\">\n\n                        <h2>{__('lng_signup_title')}</h2>\n\n                        <p className=\"description\">{__('lng_signup_desc')}</p>\n\n                        <SignUpProfilePic image={this.state.image} onChange={(e: React.ChangeEvent<HTMLInputElement>)=> this.setState({\n                            image: e.target.files?.[0] || null\n                        })}/>\n\n                        <UnderlinedInput\n                            type=\"text\" \n                            title={__('lng_signup_firstname')}\n                            value={this.state.firstName} \n                            onChange={this.handleFirstNameFieldChange}\n                            autoFocus={true} />\n\n                        <UnderlinedInput \n                            type=\"text\" \n                            title={__('lng_signup_lastname')}\n                            value={this.state.lastName} \n                            onChange={this.handleLastNameFieldChange} />\n\n                        <div className=\"status\">\n                            {this.state.textUnderField || ''}\n                        </div>\n\n                        <BigHighlightedButton\n                            onClick={this.handleContinueButton}>\n                            {__('lng_intro_finish')}\n                        </BigHighlightedButton>\n\n                    </div>\n                    <Provider store={connectionStore}>\n                        <ConnectionState/>\n                    </Provider>\n                </div>\n                <div className=\"tos-notice\">\n                    {__fmt('lng_terms_signup', {link: <LinkButton onClick={this.showTos}>{__('lng_terms_signup_link')}</LinkButton>})} \n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport TdLib from '../TdWeb/tdlib';\nimport {MessengerWindow} from '../messenger/messengerWindow';\nimport Dialogs, { dialogStore } from '../ui/dialog/dialogs';\nimport './auth.scss';\nimport { connect, Provider } from 'react-redux';\nimport AuthWindowStepPhoneNumber from './auth-step/phone-number/phone-number';\nimport AuthWindowStepCode from './auth-step/verification-code/verification-code';\nimport AuthWindowStepPassword from './auth-step/cloud-password/cloud-password';\nimport AuthWindowStepRegister from './auth-step/register/register';\nimport { createStore } from 'redux';\nimport { themeStore } from '../ui/themes/theme';\nimport { _s__ } from '../language-pack/language-pack';\nimport LoadingSpinner from '../ui/elements/loading-spinner';\nimport TdApi from '../TdWeb/td_api';\n\ntype AuthStoreState = {\n    state: TdApi.td_AuthorizationState | null;\n}\n\ntype AuthStoreAction_SetState = {\n    type: 'SET_STATE';\n    state: TdApi.td_AuthorizationState;\n}\n\nexport const authStore = createStore<AuthStoreState, AuthStoreAction_SetState, any, any>(\n    (state= { 'state': null }, action) => {\n        switch (action.type) {\n            case 'SET_STATE':\n                return {\n                    ...state,\n                    'state': action.state\n                };\n            default:\n                return state;\n        }\n    }\n);\n\n\ntype ComponentWithStatusText= React.Component<unknown, {\n    statusContent: React.ReactNode|React.ReactNode[]|null;\n    statusVisible: boolean;\n}>;\n\n/**\n * Returns 2 functions that can be used for managing status text content\n * \n * @param thisClass pass `this` as this argument\n * @returns Store this function and call it to change \n */\nexport function manageStatusTextContent(thisClass: ComponentWithStatusText): [\n    ()=> JSX.Element,\n    (status: React.ReactNode|React.ReactNode[])=> void\n] {\n    return [ \n        function Status() {\n            return (\n                <div className={'status'+ (thisClass.state.statusVisible?'':' hidden')}>{thisClass.state.statusContent}</div>\n            );\n        },\n        function changeStatus(string) {\n            if(string) {\n                thisClass.setState({\n                    statusContent: string,\n                    statusVisible: true\n                });\n            } else {\n                thisClass.setState({\n                    statusVisible: false\n                });\n                setTimeout(() => {\n                    if(!thisClass.state.statusVisible) { // Prevent timeout overlapping with later status changes\n                        thisClass.setState({\n                            statusContent: null\n                        });\n                    }\n                }, 1000);\n            }\n        }\n    ];\n}\n\ntype MainAppProps= {\n    step?: TdApi.td_AuthorizationState;\n}\n\n/**\n * Renders the messenger or authorization screens (layer 1). Does not include dialogs and toasts\n */\nexport const MainApp= connect<MainAppProps, unknown, Record<string, never>, AuthStoreState>(state=> ({step: state.state} as MainAppProps))(\n    class MainApp extends React.Component<MainAppProps> {\n        componentDidMount(){\n            // Handle authorization state updates\n            TdLib.registerUpdateHandler<TdApi.td_updateAuthorizationState>('updateAuthorizationState', (update) => {\n                authStore.dispatch({\n                    type: 'SET_STATE',\n                    state: update.authorization_state\n                });\n            });\n        }\n\n        shouldComponentUpdate(nextProps: MainAppProps): boolean {\n            // Some authorization states are handled without the user knowing. We don't change what's shown to the users if that happens.\n            const states= [\n                'authorizationStateWaitPhoneNumber',\n                'authorizationStateWaitCode',\n                'authorizationStateWaitPassword',\n                'authorizationStateWaitRegistration',\n                'authorizationStateReady',\n                'authorizationStateClosed',\n            ];\n            if(states.includes(nextProps.step?.['@type'] || '')) {\n                return true;\n            }\n            return false;\n        }\n        \n        render () {\n            switch (this.props.step?.['@type']) {\n                case 'authorizationStateWaitPhoneNumber':\n                    // Enter your phone number\n                    return (\n                        <React.Fragment>\n                            <Provider store={dialogStore}>\n                                <Dialogs/>\n                            </Provider>\n                            <AuthWindowStepPhoneNumber/>\n                        </React.Fragment>\n                    );\n\n                case 'authorizationStateWaitCode':\n                    // Enter the verification code sent to you\n                    return (\n                        <React.Fragment>\n                            <Provider store={dialogStore}>\n                                <Dialogs/>\n                            </Provider>\n                            <AuthWindowStepCode info={this.props.step.code_info}/>\n                        </React.Fragment>\n                    );\n\n                case 'authorizationStateWaitPassword':\n                    // Enter your 2-factor auth password\n                    return (\n                        <React.Fragment>\n                            <Provider store={dialogStore}>\n                                <Dialogs/>\n                            </Provider>\n                            <AuthWindowStepPassword info={this.props.step}/>\n                        </React.Fragment>\n                    );\n\n                case 'authorizationStateWaitRegistration':\n                    // There isn't an account on this number, you need to sign up\n                    return (\n                        <React.Fragment>\n                            <Provider store={dialogStore}>\n                                <Dialogs/>\n                            </Provider>\n                            <AuthWindowStepRegister tos={this.props.step.terms_of_service}/>\n                        </React.Fragment>\n                    );\n\n                case 'authorizationStateReady':\n                    // Logged in\n                    return (\n                        <Provider store={themeStore}>\n                            <MessengerWindow/>\n                        </Provider>\n                    );\n\n                case 'authorizationStateClosed':\n                    // TDLib session is closed.\n                    window.location.reload();\n                    return (\n                        <p>{_s__('lngd_auth_closed_restart')}</p>\n                    );\n                \n                default:\n                    // TDLib is still loading\n                    return (\n                        <div id=\"auth\" className=\"loading\">\n                            <LoadingSpinner size={50} lineWidth={5} progressColor=\"var(--theme-color-menuIconFg)\"/>\n                        </div>\n                    );\n            }\n        }\n    }\n);\n","import TdLib from './tdlib';\n\n/**\n * Sets initial online state\n */\nexport default function setInitialOnlineStatus(): void {\n    TdLib.sendQuery({\n        '@type': 'setOption',\n        name: 'online',\n        value: {\n            '@type': 'optionValueBoolean',\n            value: document.hasFocus()\n        }\n    });\n}\n\nwindow.onfocus = () => { // Become online when tab/window focuses\n    TdLib.sendQuery({\n        '@type': 'setOption',\n        name: 'online',\n        value: {\n            '@type': 'optionValueBoolean',\n            value: true\n        }\n    });\n};\n\nwindow.onblur = () => { // Become offline when switching tabs/windows\n    TdLib.sendQuery({\n        '@type': 'setOption',\n        name: 'online',\n        value: {\n            '@type': 'optionValueBoolean',\n            value: false\n        }\n    });\n};","import React from 'react';\nimport { Provider } from 'react-redux';\nimport {authStore, MainApp} from './dibgram/auth/auth-screen';\nimport { initLanguagePack } from './dibgram/language-pack/language-pack';\nimport setInitialOnlineStatus from './dibgram/TdWeb/online-handler';\nimport TdLib from './dibgram/TdWeb/tdlib';\nimport TdApi from './dibgram/TdWeb/td_api';\nimport ConfirmDialog from './dibgram/ui/dialog/confirm-dialog';\nimport {addDialog} from './dibgram/ui/dialog/dialogs';\nimport { toastStore, Toasts } from './dibgram/ui/dialog/toast';\nimport './dibgram/ui/main.scss';\nimport { ContextMenus, contextMenusStore } from './dibgram/ui/menu/context-menu';\nimport { ThemeProvider, themeStore } from './dibgram/ui/themes/theme';\n\nTdLib.initializeTdLib().then(function () {\n    setInitialOnlineStatus();\n    initLanguagePack();\n});\n\nif(process.env.NODE_ENV== 'development') {\n    //eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (window as any)['sendQuery']= TdLib.sendQuery;\n}\n\n/**\n * Renders the whole React app\n */\nfunction App(): JSX.Element {\n    React.useEffect(() => { // A fatal error occurred in TdLib\n        TdLib.registerUpdateHandler<TdApi.td_updateFatalError>('updateFatalError', function (update) {\n            console.error('Fatal error:', update.error);\n            \n            addDialog( 'tdlib_fatal_error',\n                <ConfirmDialog \n                    width=\"400px\" \n                    hideCancelButton={true} \n                    id=\"tdlib_fatal_error\" \n                    thirdButton=\"Refresh\"\n                    onThirdButtonClick={window.location.reload.bind(window.location)}\n                    thirdButtonClosesDialog={false}\n                    title=\"Fatal Error\">\n                    \n                    A fatal error occurred in TdLib.<br/> \n                    Try refreshing, clearing site data or opening \n                    DIBgram in a private window. <br/>\n                    If none of these helped, report this to the developers \n                    by <a href=\"https://github.com/DIBgram/DIBgram/issues/new/choose\" rel=\"noreferrer\" target=\"_blank\"\n                        style={{color: 'var(--theme-color-windowActiveTextFg)'}}>filing an issue.</a>\n                    <br/><br/>\n                    <pre>{update.error.toString()}</pre>\n                </ConfirmDialog>\n            );\n        });\n    }, []);\n\n    return (\n        <Provider store={themeStore}>\n            <ThemeProvider id=\"app\">\n                <Provider store={toastStore}>\n                    <Toasts/>\n                </Provider>\n                <Provider store={authStore}>\n                    <MainApp/>\n                </Provider>\n                <Provider store={contextMenusStore}>\n                    <ContextMenus/>\n                </Provider>\n            </ThemeProvider>\n        </Provider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\n/* eslint-disable indent */\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import './remove-item-from-array';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}